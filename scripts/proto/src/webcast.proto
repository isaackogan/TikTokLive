syntax = "proto3";

import "enums.proto";


message AuthenticationInfo {
    string custom_verify = 1;
    string enterprise_verify_reason = 2;
    ImageModel authentication_badge = 3;

}

message GalleryData {
    map<int64, TitleData> progress = 1;
    int64 period = 2;
    int64 end_time_in_ms = 3;

    message TitleData {
        int64 goal_count = 1;
        int64 current_sponsor_id = 2;

    }
}

message RoomStatsModel {
    int64 room_id = 1;
    bool alive = 2;
    FilterInfoData filter_info = 4;

}

message AnchorSubWaveTriggerSettings {
    int64 id = 1;
    string name = 2;
    int64 need_sub_counts = 3;

}

message TextPieceUser {
    User user = 1;
    bool with_colon = 2;

}

message TextFormat {
    string color = 1;
    bool bold = 2;
    bool italic = 3;
    int32 weight = 4;
    int32 italic_angle = 5;
    int32 font_size = 6;
    bool use_heigh_light_color = 7;
    bool use_remote_color = 8;

}

message CompetitionSettleEnd {
    int64 planned_finish_time = 1;
    repeated CompetitionResultsTeamInfo team_infos = 2;
    CompetitionUserBase leave_user = 3;
    optional CompetitionEndReason reason = 4;
    TakeTheStageBiz take_the_stage_biz = 100;

    enum CompetitionEndReason {
        COMPETITION_END_REASON_UNKNOWN = 0;
        COMPETITION_END_REASON_NORMAL = 1;
        COMPETITION_END_REASON_CUT_SHORT = 2;}
    message TakeTheStageBiz {
        optional TakeTheStageStatus take_the_stage_status = 1;

        enum TakeTheStageStatus {
            TAKE_THE_STAGE_STATUS_UNKNOWN = 0;
            TAKE_THE_STAGE_STATUS_NOT_STARTED = 1;
            TAKE_THE_STAGE_STATUS_CANCELLED = 2;
            TAKE_THE_STAGE_STATUS_STARTED = 3;
            TAKE_THE_STAGE_STATUS_FINAL_CALL = 4;
            TAKE_THE_STAGE_STATUS_VICTORY_LAP = 5;
            TAKE_THE_STAGE_STATUS_FINISHED = 6;}
    }
}

message MockResponse {
    Data data = 1;

    message GuideVideoURL {
        string match_url = 1;
        string interact_url = 2;
        string cohost_url = 3;
        string gift_url = 4;
        string multiguest_url = 5;

    }
    message Data {
        Room room = 1;
        int64 mock_room_id = 2;
        GuideVideoURL guide_videos = 3;

    }
}

message WebcastKaraokeQueueListMessage {
    CommonMessageData base_message = 1;
    int32 type = 2;
    int64 total_queue_count = 3;
    repeated KaraokeSong song_list = 4;
    int64 latest_update_time = 5;
    int64 operator = 6;

}

message IconConfig {
    ImageModel icon = 1;
    CombineBadgeBackground background = 2;

}

message PanelRefreshData {
    int64 room_id = 1;
    int64 timestamp = 2;
    repeated GalleryData gallery_data = 100;
    UserLevel user_level = 101;
    EligibleVaultGifts vault_data = 102;

    message GalleryData {
        int64 sponsor_id = 1;
        int64 gift_id = 2;
        int64 own_progress = 3;
        int64 left_count_to_sponsor = 4;
        bool can_sponsor = 5;
        bool is_gallery_available = 6;

    }
    message UserLevel {
        int64 current_score = 1;
        int64 current_level = 2;
        int64 next_level_score = 3;
        bool did_user_opt_out = 4;

    }
    message EligibleVaultGifts {
        repeated int64 gift_ids = 1;

    }
}

message AudienceReserveUserInfo {
    int64 user_id = 1;
    int64 reserve_id = 2;

}

message WebcastGroupLiveMemberNotifyMessage {
    CommonMessageData base_message = 1;
    int64 host_user_id = 2;
    repeated MemberInfo member_info = 3;

}

message TraceInfo {
    int64 operate_time = 1;
    int64 arrival_time = 2;
    int64 send_time = 3;

}

message BizJoinDirectResponse {
    BizJoinDirectResponseData response_data = 1;

}

message MigrateGroupResp {
    LinkMicCommonResp common_resp = 1;
    repeated RTCExtraInfo group_rtc_info = 2;
    GroupChannelAllUser group_user = 3;
    BizMigrateGroupResponse cohost_resp_extra = 9527;

}

message CompetitionTeamMemberInfo {
    CompetitionUserBase user = 1;
    int64 score = 2;

}

message CountdownForAllGetContentResponse {
    ResponseData data = 1;

    message ResponseData {
        CountdownForAllContent play_content = 1;

    }
}

message BattleTruthOrDareOptOutNotice {
    string close_content_key = 1;

}

message SubGoalData {
    LiveStreamGoalIndicator indicator = 1;
    LiveStreamGoal goal = 2;

}

message PollEndContent {
    optional PollEndType end_type = 1;
    repeated PollOptionInfo option_list = 2;
    User operator = 3;

    enum PollEndType {
        POLL_END_TYPE_POLL_END_BY_TIME = 0;
        POLL_END_TYPE_POLL_END_BY_OWNER = 1;
        POLL_END_TYPE_POLL_END_BY_OTHER = 2;
        POLL_END_TYPE_POLL_END_BY_ADMIN = 3;}
}

message PrivilegePlaceholder {
    string text = 1;
    string redirect_link = 2;

}

message WallpaperImageState {
    string image_url = 1;

}

message DestroyRequestResponse {

}

message PermitResponse {
    RTCExtraInfo rtc_info = 2;
    string link_mic_id = 3;
    MicPositionData position = 4;
    Player applier = 5;
    string applier_link_mic_id = 6;
    repeated string linked_user_ui_positions = 7;
    repeated PosIdentity ui_pos = 8;
    BizPermitResponse multi_guest_resp_extra = 9527;

}

message StarCommentConfig {
    bool star_comment_switch = 1;
    optional GrantGroup grant_group = 2;
    int32 grant_level = 3;
    bool star_comment_qualification = 4;
    bool display_lock = 5;

    enum GrantGroup {
        GRANT_GROUP_UNKNOWN = 0;
        GRANT_GROUP_ALL_USER = 1;
        GRANT_GROUP_USER_LEVEL = 2;
        GRANT_GROUP_FANS_LEVEL = 3;}
}

message PunishEventInfo {
    string punish_type = 1;
    string punish_reason = 2;
    string punish_id = 3;
    int64 violation_uid = 4;
    optional PunishTypeId punish_type_id = 5;
    int64 duration = 6;
    string punish_perception_code = 7;
    string violation_uid_str = 9;
    string show_reason = 10;

    enum PunishTypeId {
        PUNISH_TYPE_IDUN_KNOWN = 0;
        PUNISH_TYPE_ID_BAN_LINK_MIC = 9;
        PUNISH_TYPE_ID_BAN_GAME_PARTNERSHIP = 25;
        PUNISH_TYPE_ID_REMOVE_GAME_PARTNERSHIP = 26;
        PUNISH_TYPE_ID_BANCO_HOST_LINK_MIC = 55;
        PUNISH_TYPE_ID_AUTHORITY_LIMIT_MATCH = 57;
        PUNISH_TYPE_ID_BAN_VOICE_CHAT = 59;
        PUNISH_TYPE_ID_BAN_LIVE_GOAL = 64;
        PUNISH_TYPE_ID_VIEWER_LIMIT = 70;}
}

message PopSeries {
    int64 collection_id = 1;

}

message FaceRecognitionMeta {
    string version = 1;
    repeated string requirements = 2;
    string model_names = 3;
    string sdk_extra = 4;

}

message WaitUser {
    int64 uid = 1;
    string link_mic_id = 2;

}

message WebcastGoalUpdateMessage {
    CommonMessageData base_message = 1;
    LiveStreamGoalIndicator indicator = 2;
    LiveStreamGoal goal = 3;
    int64 contributor_id = 4;
    ImageModel contributor_avatar = 5;
    string contributor_display_id = 6;
    LiveStreamSubGoal contribute_subgoal = 7;
    int64 contribute_count = 9;
    int64 contribute_score = 10;
    int64 gift_repeat_count = 11;
    string contributor_id_str = 12;
    bool pin = 13;
    bool unpin = 14;
    GoalPinInfo pin_info = 15;
    optional GoalMessageSource update_source = 16;
    string goal_extra = 17;

    enum GoalMessageSource {
        GOAL_MESSAGE_SOURCE_UNKNOWN = 0;
        GOAL_MESSAGE_SOURCE_COMMIT = 1;
        GOAL_MESSAGE_SOURCE_PROGRESS_UPDATE = 2;
        GOAL_MESSAGE_SOURCE_PIN = 3;
        GOAL_MESSAGE_SOURCE_UNPIN = 4;
        GOAL_MESSAGE_SOURCE_REVIEW_CALLBACK = 5;
        GOAL_MESSAGE_SOURCE_SUSPEND = 6;
        GOAL_MESSAGE_SOURCE_CHALLENGE_PROMPT = 7;}
}

message GiftSuspension {
    int32 status = 1;
    string toast = 2;
    int64 end_time = 3;

}

message OecLiveShoppingMessageV2 {
    map<int64, EcomLiveElementActions> actions = 1;
    CommerceInfo commerce_info = 2;
    MsgMeta msg_meta = 10;

}

message WebcastSubscriptionGuideMessage {
    CommonMessageData base_message = 1;
    Text description = 2;
    Text button_name = 3;
    string button_url = 4;
    string capsule_scene = 5;
    int64 from_user_id = 6;

}

message GiftGroupCount {
    int32 group_count = 1;
    string group_text = 2;

}

message GiftIMPriority {
    repeated int64 queue_sizes = 1;
    int64 self_queue_priority = 2;
    int32 priority = 3;

}

message WallpaperAiCreateResponse {
    ResponseData data = 1;

    message ResponseData {
        int64 keywords_review_result = 1;
        string review_id = 2;

    }
}

message SpriteImageItem {
    string url = 1;
    int64 sprite_num = 2;
    int64 image_x_num = 3;
    int64 image_y_num = 4;
    int64 image_height = 5;
    int64 image_width = 6;
    int64 fps = 7;

}

message WebcastNoticeboardReviewMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    string media_node_id = 3;
    int32 post_review_status = 4;
    int32 pre_review_status = 5;
    int64 template_id = 6;
    int32 official_material_type = 7;

}

message SearchRivalsResponse {
    ResponseData data = 1;

    message Cell {
        int32 cell_type = 1;
        Room room = 2;

    }
    message ResponseData {
        repeated Cell cell_list = 1;
        map<int64, RivalExtraInfo> rival_extra_infos = 2;
        int32 next_offset = 9;
        bool has_more = 10;
        string search_id = 11;

    }
}

message LinkerSysKickOutContent {
    int64 user_id = 1;
    string linkmic_id_str = 2;

}

message FlexImageModel {
    repeated string url_list = 1;
    string uri = 2;
    repeated int64 flex_setting = 3;

}

message StarCommentDeleteResponse {
    Data data = 1;

    message Data {
        StarCommentQueue queue = 1;
        int64 server_cur_msg_start_time_ms = 2;

    }
}

message WebcastMemberMessage {
    CommonMessageData base_message = 1;
    User user = 2;
    int32 count = 3;
    User operator = 4;
    bool set_to_admin = 5;
    bool is_top_user = 6;
    int32 rank_score = 7;
    int32 top_user_no = 8;
    int32 enter_type = 9;
    int32 action = 10;
    string action_description = 11;
    int64 user_id = 12;
    string pop_str = 14;
    EffectConfigBean effect_config = 15;
    ImageModel background = 17;
    Text anchor_display_text = 18;
    string client_enter_source = 19;
    string client_enter_type = 20;
    string client_live_reason = 21;
    int64 action_duration = 22;
    string user_share_type = 23;
    optional DisplayStyle display_style = 24;
    map<int32, int32> admin_permissions = 25;
    int32 kick_source = 26;
    int64 allow_preview_time = 27;
    int64 last_subscription_action = 28;
    PublicAreaMessageCommon public_area_message_common = 29;
    int64 live_sub_only_tier = 30;
    int64 live_sub_only_month = 31;
    string ec_streamer_key = 32;
    int64 show_wave = 33;
    WaveAlgorithmData wave_algorithm_data = 34;
    optional HitABStatus hit_ab_status = 35;

    enum DisplayStyle {
        DISPLAY_STYLE_NORMAL = 0;
        DISPLAY_STYLE_STAY = 1;
        DISPLAY_STYLE_CHAT = 2;}
    enum HitABStatus {
        HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT = 0;
        HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT = 1;
        HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT = 2;}
    message EffectConfigBean {
        int32 type = 1;
        ImageModel icon = 2;
        Text text_key = 4;
        ImageModel badge = 8;

    }
}

message FlareBoostedUsers {
    int64 cnt = 1;
    int64 end_time = 2;

}

message CalmDownInfo {
    int32 m_remain_time = 1;
    int32 m_total_time = 2;
    int64 m_threshold_value = 3;
    int32 m_show_popup = 4;

}

message WebcastBottomMessage {
    CommonMessageData base_message = 1;
    string content = 2;
    optional ShowType show_type = 3;
    TextType text_type = 4;
    int64 duration = 5;
    optional BizType biz_type = 6;
    int64 violation_user_id = 7;
    PunishEventInfo punish_info = 8;
    int32 style = 9;
    string detail_url = 10;
    int32 float_style = 11;
    optional PerceptionDialogIconType float_icon_type = 12;

    enum ShowType {
        SHOW_TYPE_HOVER = 0;
        SHOW_TYPE_PLUG = 1;}
    enum TextType {
        TEXT_TYPE_DISPLAY_TEXT = 0;
        TEXT_TYPE_CONTENT = 1;}
    enum BizType {
        BIZ_TYPE_DEFAULT = 0;
        BIZ_TYPE_RETHINK_CHAT = 1;
        BIZ_TYPE_RETHINK_QA = 2;
        BIZ_TYPE_WARNING_TAG_CURRENT_ROOM = 3;
        BIZ_TYPE_WARNING_TAG_COHOST_ROOM = 4;
        BIZ_TYPE_A_GS_AT_RISK_OF_UNABLE_TO_COMMENT = 5;
        BIZ_TYPE_PERCEPTION_CENTER = 6;}
    enum PerceptionDialogIconType {
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE = 0;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING = 1;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC = 2;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC = 3;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE = 4;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX = 5;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE = 6;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED = 7;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT = 11;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS = 12;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH = 13;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL = 14;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION = 15;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT = 16;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING = 17;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON = 18;}
}

message RevenueTipsSetting {
    bool enable = 1;

}

message ExchangeGiftResultData {
    int32 source_type = 1;
    int64 balance = 2;

}

message GuessWidgetsData {
    GuessWidgets guess_widgets = 1;

}

message WebcastCapsuleMessage {
    CommonMessageData base_message = 1;
    ImageModel icon = 2;
    Text desc = 3;
    Text button_text = 4;
    string schema = 5;
    int32 capsule_type = 6;
    Scene scene = 7;
    CapsuleBizParams biz_params = 8;

}

message WebcastLinkMicBattle {
    CommonMessageData base_message = 1;
    int64 battle_id = 2;
    BattleSetting battle_setting = 3;
    optional BattleAction action = 4;
    map<int64, BattleResult> battle_result = 5;
    BattleDisplayConfig m_battle_display_config = 6;
    optional GiftPermissionType invitee_gift_permission_type = 8;
    repeated UserArmiesWrapper armies = 9;
    repeated BattleUserInfoWrapper anchor_info = 10;
    string bubble_text = 11;
    repeated SupportedActionsWrapper supported_actions = 12;
    map<int64, BattleComboInfo> battle_combos = 13;
    repeated TeamUsersInfo team_users = 14;
    repeated BattleInviteeGiftPermission invitee_gift_permission_types = 15;
    int64 action_by_user_id = 16;
    repeated BattleTeamResult team_battle_result = 17;
    repeated BattleTeamUserArmies team_armies = 18;
    repeated BattleABTestSetting abtest_settings = 19;
    TeamMatchCampaign team_match_campaign = 20;
    HighScoreControlCfg fuzzy_display_config_v2 = 21;

    enum GiftPermissionType {
        GIFT_PERMISSION_TYPE_UNKNOWN_TYPE = 0;
        GIFT_PERMISSION_TYPE_NO_GIFT_PERMISSION = 1;
        GIFT_PERMISSION_TYPE_ANCHOR_CLOSE = 2;
        GIFT_PERMISSION_TYPE_HAS_GIFT_PERMISSION = 3;
        GIFT_PERMISSION_TYPE_ANCHOR_BANNED = 4;}
    enum BattleAction {
        BATTLE_ACTION_UNKNOWN = 0;
        BATTLE_ACTION_INVITE = 1;
        BATTLE_ACTION_REJECT = 2;
        BATTLE_ACTION_CANCEL = 3;
        BATTLE_ACTION_OPEN = 4;
        BATTLE_ACTION_FINISH = 5;
        BATTLE_ACTION_CUT_SHORT = 6;
        BATTLE_ACTION_ACCEPT = 7;
        BATTLE_ACTION_QUIT_APPLY = 8;
        BATTLE_ACTION_DECLINE_QUIT = 9;
        BATTLE_ACTION_DECLINE_OFF_QUIT = 10;
        BATTLE_ACTION_LEAVE_LINK_MIC = 11;}
}

message GameTagDetail {
    int64 game_tag_id = 1;
    string game_tag_name = 2;
    bool preview_game_moment_enable = 3;
    string starling_key = 4;
    string display_name = 5;

}

message UsePotionCard {
    PotionCardInfo card_info = 1;
    int64 anchor_id = 2;
    Text display_content = 3;

}

message GiftKeywords {
    int64 gift_id = 1;
    repeated string keywords = 2;

}

message WebcastQuestionSelectedMessage {
    CommonMessageData base_message = 1;
    Question question = 2;

}

message CountdownConfig {
    int64 duration = 1;
    bool auto_expand = 2;
    int64 target_score = 3;

}

message RTCVideoParam {
    int32 width = 1;
    int32 height = 2;
    int32 fps = 3;
    int32 bit_rate = 4;

}

message SubUpsellInfo {
    int32 upsell_method = 1;
    string schema = 2;

}

message SmokeCardInfo {
    string card_name_key = 1;
    ImageModel card_image = 2;
    int64 send_time_sec = 3;
    BattleUserInfo send_user = 4;
    int64 effect_last_duration = 5;
    string rule_url = 6;
    int64 effect_time_sec = 7;
    int64 to_anchor_id = 12;
    string to_anchor_id_str = 13;

}

message EventStruct {
    string id = 1;
    int64 start_time = 2;
    int64 duration = 3;
    string title = 4;
    string desc = 5;
    int32 status = 6;
    User owner = 7;
    int64 subscriber_count = 8;
    int32 type = 9;
    bool enable_update = 10;
    bool has_subscribed = 11;
    int32 style = 12;

}

message ShowAgainGuestResponse {
    ResponseData data = 1;

    message ResponseData {
        bool success = 1;
        ShowContent show_content = 2;

    }
}

message WebcastTrayMessage {
    CommonMessageData base_message = 1;
    User user = 2;
    Text title = 3;
    Text describe = 4;
    int32 combo_count = 5;
    int32 group_count = 6;
    ImageModel image = 7;

}

message CppAgeVerificationInfo {
    int32 cpp_age_verification_ab = 1;
    int32 age_verify_status = 2;
    int32 age_verify_process_status = 3;
    int64 age_verify_times = 4;
    int64 age_appeal_method_time = 5;
    int32 age_appeal_method_time_unit = 6;
    int32 age_appeal_method = 7;

}

message GiftReceiveRecordsResponse {
    Data data = 1;
    Extra extra = 2;

    message Data {
        repeated GiftRecord gift_records = 1;
        bool has_next = 2;
        int64 ref_timestamp = 3;

    }
    message Extra {
        string log_id = 1;

    }
}

message BattleBonusConfig {
    int64 preview_start_time = 1;
    repeated PreviewPeriod preview_period_config = 2;
    TaskPeriodConfig task_period_config = 3;
    RewardPeriodConfig reward_period_config = 4;
    map<int64, BattleTaskGiftAmountGuide> task_gift_guide = 5;
    int64 preview_start_timestamp = 6;
    string preview_click_action_schema_url = 7;

}

message LevelBadge {
    ImageModel origin_img = 3;
    ImageModel preview_img = 4;

}

message KickOutAllGuestsResp {
    LinkMicCommonResp common_resp = 1;
    repeated int64 removed_user_ids = 2;

}

message GuessText {
    string key = 1;
    string desc = 2;
    int64 type = 3;

}

message BorderInfo {
    ImageModel icon = 1;
    int64 level = 2;
    string source = 3;
    ImageModel profile_decoration_ribbon = 4;
    PrivilegeLogExtra border_log_extra = 5;
    PrivilegeLogExtra ribbon_log_extra = 6;
    string avatar_background_color = 7;
    string avatar_background_border_color = 8;

}

message RewardPeriodConfig {
    int64 reward_start_time = 1;
    int64 duration = 2;
    int32 reward_multiple = 3;
    int64 reward_start_timestamp = 4;
    BattlePrompt reward_prapare_prompt = 11;
    BattlePrompt rewarding_prompt = 12;
    BattlePrompt click_prompt = 13;

}

message AvatarImageCase {
    ImageModel example_images = 1;
    bool is_bad = 2;

}

message QuickCohostContentInfo {
    repeated QuickCohostContent quick_cohost_content = 1;

}

message RoomStickerAuditInfo {
    int64 violation_id = 1;
    int64 task_type = 2;

}

message BizCreateChannelResponse {
    BizCreateChannelResponseData response_data = 1;

}

message BizLeaveJoinGroupResponse {
    int64 feedback_show_reason = 1;
    int64 feedback_content_type = 2;

}

message GuessOptionStats {
    int64 member_num = 1;
    int64 points_num = 2;
    float bonus_odds = 3;

}

message WebcastAssetMessage {
    CommonMessageData base_message = 1;
    int64 asset_id = 2;
    Text panel_display_text = 3;
    bool show_message = 4;
    bool show_panel = 5;
    User from_user = 6;
    User to_user = 7;
    GiftIMPriority priority = 8;
    string log_id = 9;
    AssetsModel assets = 10;

}

message QuizNextQuiz {
    int64 time = 1;
    string reward_amount = 2;
    string quiz_id = 3;
    string live_event_id = 4;
    int64 end_time = 5;

}

message GrowthJourneyBannerInfo {
    GrowthJourneyBannerItem grow_level_first_banner = 1;
    GrowthJourneyBannerItem grow_level_special_level_arrived_banner = 2;
    GrowthJourneyBannerItem growth_instance_banner = 3;

}

message NoticeboardTemplateCreateResponse {
    ResponseData data = 1;

    message ResponseData {
        bool is_success = 1;
        NoticeboardTemplate template = 2;

    }
}

message ResourceAttr {
    optional ResourceLocation resource_location = 1;
    GeckoAttr gecko_attr = 2;

    enum ResourceLocation {
        RESOURCE_LOCATION_UNKNOWN = 0;
        RESOURCE_LOCATION_GECKO = 1;}
}

message WebcastWalletLiveRewardsRatioMessage {
    CommonMessageData base_message = 1;
    WalletLiveRewardsRatioImMsg im_msg = 2;

}

message WallpaperPicReplyResponse {
    ResponseData data = 1;

    message ResponseData {
        bool result = 1;

    }
}

message WebcastLinkScreenChangeMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    LinkerGuestCancelEnlargeContent guest_cancel_enlarge = 3;
    LinkerEnlargeStatusSynContent enlarge_status_syn = 4;
    EnlargePositionStatusSynContent enlarge_pos_status_syn = 5;

    enum LinkScreenChangeMessageType {
        LINK_SCREEN_CHANGE_MESSAGE_TYPE_BIZ_T_PYE_LINKER_UNKNOWN = 0;
        LINK_SCREEN_CHANGE_MESSAGE_TYPE_BIZ_TYPE_LINKER_CANCEL_ENLARGE = 1;
        LINK_SCREEN_CHANGE_MESSAGE_TYPE_BIZ_TYPE_ENLARGE_STATUS_SYN = 2;
        LINK_SCREEN_CHANGE_MESSAGE_TYPE_BIZ_TYPE_ENLARGE_POSITION_STATUS_SYN = 3;}
}

message GroupChatGuestDetailsResponse {
    ResponseData data = 1;

    message ResponseData {
        repeated GroupChatGuestDetail guest_details = 1;
        int64 room_create_group_id = 2;
        int64 room_create_group_current_user_num = 3;
        int64 room_create_group_current_user_num_limit = 4;

    }
}

message WallpaperUserLeaveResponse {
    ResponseData data = 1;

    message ResponseData {
        bool result = 1;

    }
}

message PlaybookTagInfo {
    int32 tag_type = 1;
    string tag_translated_name = 2;

}

message WebcastPartnershipPunishMessage {
    CommonMessageData base_message = 1;
    PunishEventInfo punish_info = 2;

}

message WebcastGiftPanelUpdateMessage {
    CommonMessageData base_message = 1;
    int64 room_id = 2;
    int64 timestamp = 3;
    GalleryData gallery_data = 10;
    GoalData goal_data = 11;
    RoomBasedGiftData room_based_gift_data = 12;
    string strategy_context = 100;

}

message ProfileCardPanel {
    bool use_new_profile_card_style = 1;
    optional BadgeTextPosition badge_text_position = 2;
    ProjectionConfig projection_config = 3;
    ProfileContent profile_content = 4;
    SeparatorConfig separator_config = 5;

    enum BadgeTextPosition {
        BADGE_TEXT_POSITION_UNKNOWN = 0;
        BADGE_TEXT_POSITION_RIGHT = 1;
        BADGE_TEXT_POSITION_BELOW = 2;}
}

message BattleUserArmies {
    repeated BattleUserArmy user_armies = 1;
    int64 host_score = 2;
    string anchor_id_str = 3;

}

message GuestShowdownCloseParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 play_id = 3;
    int32 close_scene = 4;

}

message MultiGuestLinkmicInfo {
    repeated ListUser linked_users = 1;
    int32 request_user_status = 8;
    string fan_ticket_icon_url = 9;
    HostDisplayInfo host_display_info = 14;

    message HostDisplayInfo {
        string host_icon_background_url = 1;
        string host_icon_url = 2;
        string host_color = 3;
        string icon_link_url = 4;
        int64 host_type = 5;

    }
    message ListUser {
        User user = 1;
        int64 modify_time = 2;
        int32 role_type = 4;
        string linkmic_id_str = 5;
        int64 fan_ticket = 7;
        int32 fan_ticket_icon_type = 10;

    }
}

message TryMode {
    int32 has_created_room = 1;
    bool enable_live_video = 2;
    int32 live_video_group = 3;

}

message PlaybookContent {
    int64 playbook_content_id = 1;
    int64 original_playbook_content_id = 2;
    TextType text_type = 3;
    string title = 4;
    string cover_url = 5;
    string description = 6;
    int32 content_status = 7;
    int64 min_symphony_engine_app_version = 8;
    PlaybookEditorInfo editor_info = 9;
    string flow_str = 10;
    string cover_uri = 11;
    repeated int32 tag_types = 12;

}

message Creator {
    int32 room_continue = 1;
    bool is_anchor_continue_keep_msg = 2;
    int32 cross_device_continue_scene = 3;
    int32 continue_scene = 4;
    int64 link_mic_user_num = 5;

}

message LinkerWaitingListChangeContent {

}

message WebcastAnchorTaskReminderMessage {
    CommonMessageData base_message = 1;
    string task_record_id = 2;

}

message NoticeboardUpdateResponse {
    ResponseData data = 1;

    message ResponseData {
        NoticeboardContent noticeboard_content = 1;

    }
}

message WaveAlgorithmData {
    string algorithm_version = 1;
    bool is_alg_hit = 2;
    string predict_score = 3;
    bool is_rewatch = 4;
    bool is_follow = 5;

}

message WebcastLinkBusinessMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    PopupStateChangeContent popup_state_change_content = 3;

}

message NoticeboardTemplateFetchListResponse {
    ResponseData data = 1;

    message ResponseData {
        repeated NoticeboardTemplate my_templates = 1;
        repeated NoticeboardTemplate recommended_templates = 2;
        int64 create_num_limit = 3;
        bool is_official_user = 4;

    }
}

message GameEmoteConfig {
    string emotes_can_not_be_used_hint = 1;

}

message AddToCartButton {
    int32 status = 1;
    string click_hint_starling = 2;

}

message CapsuleBizParamsCohost {
    int64 available_friend_number = 1;
    bool is_followed_by_rival = 2;
    User rival_user = 3;
    string type = 4;
    UserModelPredictionData invitee_model_prediction_data = 5;
    int64 invitee_room_id = 6;
    int64 invitee_inner_channel_id = 7;
    User invitee_user_info = 8;

}

message CountdownContent {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 countdown_id = 3;
    int32 status = 4;
    int64 start_time = 5;
    int64 end_time = 6;
    CountdownConfig countdown_config = 7;
    CountdownUser countdown_user = 8;

}

message ViolationStatusResponse {
    ResponseData data = 1;
    ResponseExtra extra = 2;

    message ResponseData {
        int32 status = 1;
        PerceptionDialogInfo perception_dialog = 2;
        PunishEventInfo punish_event = 3;
        Text perception_toast = 4;

    }
    message ResponseExtra {
        int64 now = 1;

    }
}

message OptPairInfo {
    int64 mapping_id = 1;
    repeated OptPairUser display_user_list = 2;
    optional OptPairStatus button_notice_type = 3;
    int64 expected_time_sec = 4;
    int64 opt_pair_type = 5;

    enum OptPairStatus {
        OPT_PAIR_STATUS_UNKNOWN = 0;
        OPT_PAIR_STATUS_OFFLINE = 1;
        OPT_PAIR_STATUS_FINISHED = 2;}
    message OptPairUser {
        User user = 1;
        int64 room_id = 2;

    }
}

message BizReplyResponse {
    BizReplyResponseData response_data = 1;

}

message DonationSticker {
    int64 id = 1;
    ImageModel image = 2;
    int32 type = 3;
    repeated int64 input_rect = 4;
    int32 text_size = 5;
    string text_color = 6;
    OrganizationModel content = 7;
    int64 max_length = 8;
    int64 status = 9;
    int32 screen_height = 10;
    int32 x = 11;
    int32 screen_width = 12;
    int32 y = 13;
    int64 kind = 14;
    int64 sub_type = 15;

}

message GuestShowdownGetContentParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 play_id = 3;
    int32 get_type = 4;

}

message WebcastLinkLayerMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    int64 channel_id = 3;
    Scene scene = 4;
    string source = 5;
    string centerized_idc = 6;
    int64 rtc_room_id = 7;
    CreateChannelContent create_channel_content = 100;
    LinkListChangeContent list_content = 102;
    InviteContent invite_content = 103;
    ApplyContent apply_content = 104;
    PermitApplyContent permit_apply_content = 105;
    ReplyInviteContent reply_invite_content = 106;
    KickOutContent kick_out_content = 107;
    CancelApplyContent cancel_apply_content = 108;
    CancelInviteContent cancel_invite_content = 109;
    LeaveContent leave_content = 110;
    FinishChannelContent finish_content = 111;
    JoinDirectContent join_direct_content = 112;
    JoinGroupContent join_group_content = 113;
    PermitJoinGroupContent permit_group_content = 114;
    CancelJoinGroupContent cancel_group_content = 115;
    LeaveJoinGroupContent leave_group_content = 116;
    P2PGroupChangeContent p2p_group_change_content = 117;
    GroupChangeContent group_change_content = 118;
    BusinessContent biz_content = 200;

    enum LinkLayerMessageType {
        LINK_LAYER_MESSAGE_TYPE_LINKER_UNKNOWN = 0;
        LINK_LAYER_MESSAGE_TYPE_LINKER_CREATE = 1;
        LINK_LAYER_MESSAGE_TYPE_LINKER_INVITE = 2;
        LINK_LAYER_MESSAGE_TYPE_LINKER_APPLY = 3;
        LINK_LAYER_MESSAGE_TYPE_LINKER_PERMIT = 4;
        LINK_LAYER_MESSAGE_TYPE_LINKER_REPLY = 5;
        LINK_LAYER_MESSAGE_TYPE_LINKER_KICK_OUT = 6;
        LINK_LAYER_MESSAGE_TYPE_LINKER_CANCEL_APPLY = 7;
        LINK_LAYER_MESSAGE_TYPE_LINKER_CANCEL_INVITE = 8;
        LINK_LAYER_MESSAGE_TYPE_LINKER_LEAVE = 9;
        LINK_LAYER_MESSAGE_TYPE_LINKER_FINISH = 10;
        LINK_LAYER_MESSAGE_TYPE_LINKER_LIST_CHANGE = 11;
        LINK_LAYER_MESSAGE_TYPE_LINKER_JOIN_DIRECT = 12;
        LINK_LAYER_MESSAGE_TYPE_LINKER_JOIN_GROUP = 13;
        LINK_LAYER_MESSAGE_TYPE_LINKER_PERMIT_GROUP = 14;
        LINK_LAYER_MESSAGE_TYPE_LINKER_CANCEL_GROUP = 15;
        LINK_LAYER_MESSAGE_TYPE_LINKER_LEAVE_GROUP = 16;
        LINK_LAYER_MESSAGE_TYPE_LINKER_P_2_P_GROUP_CHANGE = 17;
        LINK_LAYER_MESSAGE_TYPE_LINKER_GROUP_CHANGE = 18;}
    enum Scene {
        SCENE_UNKNOWN = 0;
        SCENE_UNDEFINED_1 = 1;
        SCENE_CO_HOST = 2;
        SCENE_UNDEFINED_3 = 3;
        SCENE_MULTI_LIVE = 4;}
}

message ChangeStateResp {
    int32 result = 1;

}

message MessageRedEnvelopInfo {
    string envelope_id = 1;
    int32 business_type = 2;
    string envelope_idc = 3;
    string send_user_name = 4;
    int32 diamond_count = 5;
    int32 people_count = 6;
    int32 unpack_at = 7;
    string send_user_id = 8;
    ImageModel send_user_avatar = 9;
    string create_time = 10;
    int32 follow_status_show = 12;
    int32 skin_id = 13;

}

message CustomTabs {
    int64 id = 1;
    int64 begin_time = 2;
    int64 end_time = 3;
    int64 anchor_id = 4;
    int64 room_id = 5;
    int64 default_tab_index = 6;
    repeated CustomTab custom_tab_list = 7;

}

message AnchorSettingsUpdateResponse {
    Extra extra = 1;

    message Extra {
        int64 now = 1;

    }
}

message TagV2 {
    optional TagClassification tag_classification = 1;
    int32 tag_type = 2;
    string tag_value = 3;
    string starling_key = 4;
    SecondDegreeRelationContent second_degree_relation_content = 10;
    int64 cohost_history_day = 11;
    SimilarInterestContent similar_interest_content = 12;

    enum TagClassification {
        TAG_CLASSIFICATION_UNKNOWN = 0;
        TAG_CLASSIFICATION_COHOST_HISTORY = 1;
        TAG_CLASSIFICATION_FIRST_DEGREE_RELATION = 2;
        TAG_CLASSIFICATION_SECOND_DEGREE_RELATION = 3;
        TAG_CLASSIFICATION_RANK = 4;
        TAG_CLASSIFICATION_SIMILAR_INTERESTS = 5;}
    message UserInfo {
        int64 user_id = 1;
        string nick_name = 2;
        ImageModel avatar_thumb = 3;

    }
    message SecondDegreeRelationContent {
        repeated UserInfo related_users = 1;
        int64 total_related_user_cnt = 2;

    }
    message SimilarInterestContent {
        int64 content_id = 1;
        string display_text = 2;

    }
}

message EcTaskRefreshCouponListEntity {
    string toast_msg = 1;

}

message ABInfos {
    string cdid = 1;
    string params = 2;

}

message LiveCoreSDKData {
    PullData pull_data = 1;
    PushData push_data = 2;

    message Quality {
        string name = 1;
        string sdk_key = 2;
        int32 icon_type = 6;

    }
    message Options {
        Quality default_quality = 1;
        repeated Quality quality_list = 2;
        Quality default_preview_quality = 3;
        bool show_quality_button = 4;

    }
    message PullData {
        string stream_data = 1;
        Options options = 2;

    }
    message ResolutionParams {
        int64 width = 1;
        int64 height = 2;
        int64 default_bitrate = 3;
        int64 min_bitrate = 4;
        int64 max_bitrate = 5;
        int64 fps = 6;

    }
    message PushData {
        map<string, ResolutionParams> resolution_params = 1;
        int32 push_stream_level = 2;
        string stream_data = 3;

    }
}

message GuideTarget {
    int64 target_id = 1;
    string target_type = 2;
    int64 period_id = 3;

}

message BattleNoticeToast {
    BattleNoticeText content = 1;

}

message ChannelMessage {
    int64 channel_id = 1;
    int32 report_type = 2;
    string layout_id = 3;
    int32 layout_version = 4;

}

message LinkCommon {
    Scene scene = 1;
    string source = 200;
    int64 app_id = 201;
    int64 live_id = 202;
    map<string, string> extra_map = 203;
    string centerized_idc = 300;

}

message CapsuleBizParams {
    CapsuleBizParamsCohost cohost = 1;
    CapsuleBizParamsRandomGift random_gift = 3;
    CapsuleBizParamsNewAnchorEffect effect_params = 4;
    CapsuleBizParamsCommentFlaggedPrompt comment_flagged_prompt = 5;
    CapsuleBizParamsMultiGuestInviteGuide multi_guest_invite_guide = 6;
    CapsuleBizParamsAnchorPinPerk anchor_pin_perk = 7;
    CapsuleBizParamsGamingModeratorsCommentGuide gaming_moderators_comment_guide = 8;
    CapsuleBizParamsCommentMuteRulePrompt comment_mute_rule_prompt = 9;
    CapsuleBizParamsCommentFlaggedPromptForNewUser comment_flagged_prompt_for_new_user = 10;

}

message EndShowParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 show_id = 3;

}

message WebcastControlMessage {
    CommonMessageData base_message = 1;
    int32 action = 2;
    string tips = 3;
    Extra extra_info = 4;
    PerceptionDialogInfo perception_dialog_info = 5;
    Text perception_audience_text = 6;
    PunishEventInfo punish_info = 7;
    Text float_text = 8;
    int32 float_style = 9;

    message Extra {
        string ban_info_url = 1;
        int64 reason_no = 2;
        Text title = 3;
        Text violation_reason = 4;
        string source = 8;

    }
}

message WebcastMarqueeAnnouncementMessage {
    CommonMessageData base_message = 1;
    string message_scene = 2;
    repeated MessageEntity message_entity = 3;

    message MessageEntity {
        WebcastRoomNotifyMessage notify_message = 1;

    }
}

message GradeIcon {
    ImageModel icon = 1;
    int32 icon_diamond = 2;
    int32 level = 3;
    string level_str = 4;

}

message LeaveJoinGroupContent {
    GroupPlayer operator = 1;
    int64 group_channel_id = 2;
    string leave_source = 3;
    repeated string linked_user_ui_positions = 4;

}

message GiftListExtra {
    string log_id = 1;

}

message ReportCommitData {
    int64 status = 1;
    string desc = 2;
    int64 report_id = 3;
    int64 record_id = 4;

}

message PriceChangeInfo {
    bool is_price_changed = 1;
    string new_price = 2;
    string old_price = 3;
    int64 next_billing_date = 4;
    int64 days_left_to_agree_change = 6;
    bool is_first_entrance = 7;
    bool is_consent_required = 8;
    string contract_id = 9;
    string order_id = 10;
    int64 no_confirm_cancel_contract_date = 11;
    optional BillingType billing_type = 12;
    string changed_price = 13;

    enum BillingType {
        BILLING_TYPE_UNKNOWN = 0;
        BILLING_TYPE_GP = 1;
        BILLING_TYPE_WEB = 2;
        BILLING_TYPE_APP_B = 3;
        BILLING_TYPE_GP_COMMON_S_KU = 4;}
}

message PreScheduleStream {
    string sdk_params = 1;
    string speed_probe_url = 2;
    repeated StreamResolution stream_resolution_list = 3;
    int32 recommend_stream_resolution = 4;
    int64 net_mode = 5;
    bool degradation_enabled = 6;
    int32 degradation_type = 7;
    map<int64, PushStreamInfo> push_stream_info = 8;
    repeated StreamResolution stream_resolution_list_all = 9;
    int64 can_golive1080p = 10;
    string stream_id = 11;
    repeated string stream_push_urls = 12;
    string stream_rtmp_push_url = 13;
    int64 pre_stream_group = 14;
    int64 rtc_room_id = 15;
    string rtc_app_id = 16;
    string stream_data = 17;

    message Quality {
        string name = 1;
        string sdk_key = 2;
        string desc = 3;
        int64 width = 4;
        int64 height = 5;
        int64 max_bitrate = 6;
        int64 min_bitrate = 7;
        int64 default_bitrate = 8;
        int64 fps = 9;

    }
    message PushStreamInfo {
        Quality default_quality = 1;
        repeated Quality qualities = 2;

    }
}

message CountdownEndParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 countdown_id = 3;
    int32 end_reason = 4;

}

message WebcastChatMessage {
    CommonMessageData base_message = 1;
    User user_info = 2;
    string content = 3;
    bool visible_to_sender = 4;
    ImageModel background = 5;
    string full_screen_text_color = 6;
    ImageModel background_image_v2 = 7;
    PublicAreaCommon public_area_common = 9;
    ImageModel gift_image = 10;
    int32 input_type = 11;
    User at_user = 12;
    repeated EmoteWithIndex f315emotes = 13;
    string content_language = 14;
    MsgFilter msg_filter = 15;
    int32 quick_chat_scene = 16;
    int32 communityflagged_status = 17;
    UserIdentity user_identity = 18;
    repeated CommentQualityScore comment_quality_scores = 19;
    repeated CommentTag comment_tag = 20;
    PublicAreaMessageCommon public_area_message_common = 21;
    int64 screen_time = 22;
    string signature = 23;
    string signature_version = 24;
    string ec_streamer_key = 25;

    enum CommentTag {
        COMMENT_TAG_NORMAL = 0;
        COMMENT_TAG_CANDIDATE = 1;
        COMMENT_TAG_OVERAGE = 2;}
}

message LiveMessageID {
    string primary_i_d = 1;
    string message_scene = 2;

}

message GiftPanelCardletByCreator {
    Text display_text = 1;
    string schema_url = 2;
    int32 cardlet_priority = 3;
    int32 cardlet_type = 4;
    CardletButton cardlet_button = 5;
    ImageModel cardlet_icon = 6;
    int32 copywriting_type = 7;

    message CardletButton {
        ImageModel left_icon = 1;
        string text = 2;
        string schema = 3;
        int32 button_type = 4;
        int32 button_priority = 5;

    }
}

message GuestShowdownGetContentResponse {
    ResponseData data = 1;

    message ResponseData {
        GuestShowdownContent play_content = 1;

    }
}

message WebcastGiftDynamicRestrictionMessage {
    CommonMessageData base_message = 1;
    DynamicRestriction dynamic_restriction = 2;

}

message GoalData {
    int32 status = 1;
    map<int64, Progress> goal_progress = 2;

    message Progress {
        int64 current_progress = 1;
        int64 target = 2;
        int64 expired_timestamp_in_ms = 3;

    }
}

message RoomCreateInfo {
    ImageModel m_cover = 1;
    int64 m_cover_audit_status = 2;
    string m_title = 3;
    string m_prompt = 4;
    int32 m_anchor_prompt_type = 5;
    int32 m_is_first_broadcast_flag = 7;
    string m_additional_prompt = 11;
    int32 donation_sticker = 17;
    int64 m_last_room_id = 19;
    BlockStatus block_status = 22;
    LiveEventInfo m_live_event_info = 23;
    int64 live_house_status = 24;
    Hashtag hashtag = 25;
    bool use_avatar_as_cover = 26;
    map<int64, PushStreamInfo> push_stream_info_map = 27;
    bool show_game_tags = 28;
    int32 guide_status = 29;
    bool is_new_anchor = 30;
    bool can_show_fragment = 31;
    bool has_fragment = 32;
    GameLiveFragment last_fragment = 33;
    int32 screen_shot_cover_status = 34;
    string block_detail_url = 36;
    CreateInfoPerceptionMessage perception_message = 37;
    AgeRestrictedConfig age_restricted_config = 38;
    GameLiveInfo game_live_info = 43;
    int32 device_level = 44;
    CreateInfoPunishmentMessage punishment_message = 45;
    GameLiveConvertInfo game_live_convert_info = 46;
    int32 room_auth_customizable_poll = 47;
    bool enable_pin_message = 48;
    int64 room_gift_count = 49;
    map<int64, int64> admin_ec_show_permission = 50;
    PermissionLevelInfo permission_level_info = 51;
    repeated CreateInfoPerceptionMessage perception_messages = 52;
    string cover_source = 53;
    LiveProInfo live_pro_info = 54;
    bool anchor_can_open_caption = 55;
    string voice_title = 56;
    ImageModel voice_cover = 57;
    int32 voice_cover_audit_status = 58;
    bool use_avatar_as_voice_cover = 59;
    string voice_cover_source = 60;
    bool anchor_star_comment_permission = 61;
    int64 poll_optimize_group = 63;
    CppBannerInfo cpp_banner_info = 65;
    CppAgeVerificationInfo cpp_age_verification_info = 66;
    WebcastLSAccessStatus webcast_l_s_access_status = 67;
    bool fold_bottom_area = 69;
    int32 effect_active_level = 70;
    bool has_growth_center = 71;
    string growth_center_first_display_text = 73;
    string growth_center_not_first_display_text = 74;
    bool has_recent_stream = 75;
    bool has_game_guess_permission = 76;
    bool default_comment_tray_switch = 77;
    bool show_campaign_center_open_page = 78;
    bool show_campaign_center_more_page = 79;
    bool have_campaign = 80;
    repeated PopMsgContainer pop_info_list = 81;
    map<int64, MsgNotifyQuota> notify_quota_config = 82;
    bool star_comment_permission_switch = 83;
    string star_comment_permission_switch_off_reason = 84;
    CampaignBannerData campaign_banner_data = 85;
    int64 poll_template_optimize_group = 87;
    GoLiveECIconInfo go_live_ec_icon_info = 88;
    ActivitiesIconInfo activities_icon_info = 89;
    int32 tts_probation_mode = 90;
    repeated AnchorReminderWordStatus reminder_word_status = 91;
    MsgNotifyComAvoidConfig avoid_config = 92;
    LiveStreamGoal ongoing_goal = 94;
    MultiGuestPlayInfo multi_guest_play_info = 95;
    NewAnchorIncentiveBannerData new_anchor_incentive_banner_data = 96;
    WalletRewardsContainerInfo wallet_rewards_container_info = 97;
    UnifiedBannerData unified_banner_data = 98;
    bool show_shopping_manage = 100;
    GuessingGameInfo guessing_game_info = 102;
    UnifiedBannerData live_journey_banner = 120;

}

message WebcastSubNotifyMessage {
    CommonMessageData base_message = 1;
    User user = 2;
    optional ExhibitionType exhibition_type = 3;
    int64 sub_month = 4;
    SubscribeType subscribe_type = 5;
    OldSubscribeStatus old_subscribe_status = 6;
    optional MessageType subscribe_message_type = 7;
    SubscribingStatus subscribing_status = 8;
    bool is_send = 9;
    bool is_custom = 10;
    optional GiftSource gift_source = 11;
    optional MessageDisplayStyle message_display_style = 12;
    PublicAreaMessageCommon public_area_message_common = 13;
    string package_id = 14;
    EventTracking event_tracking = 15;

    enum ExhibitionType {
        EXHIBITION_TYPE_DEFAULT = 0;
        EXHIBITION_TYPE_FOLD = 1;
        EXHIBITION_TYPE_PUBLIC_SCREEN = 2;}
    enum SubscribeType {
        SUBSCRIBE_TYPE_ONCE = 0;
        SUBSCRIBE_TYPE_AUTO = 1;
        SUBSCRIBE_TYPE_DEFAULT = 100;}
    enum OldSubscribeStatus {
        OLD_SUBSCRIBE_STATUS_FIRST = 0;
        OLD_SUBSCRIBE_STATUS_RE_SUB = 1;
        OLD_SUBSCRIBE_STATUS_SUB_IN_GRACE_PERIOD = 2;
        OLD_SUBSCRIBE_STATUS_SUB_NOT_IN_GRACE_PERIOD = 3;
        OLD_SUBSCRIBE_STATUS_DEFAULT = 100;}
    enum MessageType {
        MESSAGE_TYPE_SUB_SUCCESS = 0;
        MESSAGE_TYPE_ANCHOR_REMINDER = 1;
        MESSAGE_TYPE_ENTER_ROOM_EXPIRE_SOON = 2;
        MESSAGE_TYPE_SUB_GOAL_CREATE_TO_ANCHOR = 3;
        MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_AUDIENCE = 4;
        MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_ANCHOR = 5;
        MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_USER_NOTICE = 6;
        MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_ANCHOR_NOTICE = 7;
        MESSAGE_TYPE_SUB_GIFT_T_RECEIVES_END_NOTICE = 8;
        MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ROOM_MESSAGE = 9;
        MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ANCHOR_NOTICE = 10;
        MESSAGE_TYPE_SUB_GIFT_LOW_VERSION_UPGRADE_NOTICE = 11;
        MESSAGE_TYPE_SUB_GIFT_USER_BUY_AU_TH_NOTICE = 12;
        MESSAGE_TYPE_SUB_COMMON_TEXT_NOTICE = 13;
        MESSAGE_TYPE_SUB_MODERATOR_PIN_PERK = 14;}
    enum SubscribingStatus {
        SUBSCRIBING_STATUS_UNKNOWN = 0;
        SUBSCRIBING_STATUS_ONCE = 1;
        SUBSCRIBING_STATUS_CIRCLE = 2;
        SUBSCRIBING_STATUS_CIRCLE_CANCEL = 3;
        SUBSCRIBING_STATUS_REFUND = 4;
        SUBSCRIBING_STATUS_IN_GRACE_PERIOD = 5;
        SUBSCRIBING_STATUS_NOT_IN_GRACE_PERIOD = 6;}
    enum GiftSource {
        GIFT_SOURCE_UNKNOWN = 0;
        GIFT_SOURCE_PLATFORM = 1;
        GIFT_SOURCE_USER_BUY_RANDOM = 2;
        GIFT_SOURCE_USER_BUY_SPECIFIC = 3;}
    enum MessageDisplayStyle {
        MESSAGE_DISPLAY_STYLE_DEFAULT = 0;
        MESSAGE_DISPLAY_STYLE_POPUP = 1;}
}

message KaraokeSong {
    int64 id = 1;
    string title = 2;
    string display_artist = 3;
    string album = 4;
    int32 duration = 5;
    int32 prelude = 6;
    int32 postlude = 7;
    string cover_vid = 8;
    repeated string cover_urls = 9;
    AudioStruct audio_info = 10;
    AccompanimentStruct accompaniment_info = 11;
    LyricStruct lyric_info = 12;
    int32 song_status = 13;
    repeated int64 label_ids = 14;
    bool is_favorite = 15;
    bool is_added = 16;
    bool is_request = 17;
    bool is_you_sing_request = 18;
    User singer = 19;

}

message CompetitionScoreChange {
    repeated CompetitionResultsTeamInfo team_infos = 1;
    optional TriggerReason trigger_reason = 2;
    TakeTheStageBiz take_the_stage_biz = 100;

    enum TriggerReason {
        TRIGGER_REASON_UNKNOWN = 0;
        TRIGGER_REASON_SCORE_UPDATE = 1;
        TRIGGER_REASON_OPT_OUT_UPDATE = 2;}
    message TakeTheStageBiz {
        optional TakeTheStageStatus status = 1;
        int64 performance_start_time = 2;
        TakeTheStageOrderInfo order_info = 3;

        enum TakeTheStageStatus {
            TAKE_THE_STAGE_STATUS_UNKNOWN = 0;
            TAKE_THE_STAGE_STATUS_NOT_STARTED = 1;
            TAKE_THE_STAGE_STATUS_CANCELLED = 2;
            TAKE_THE_STAGE_STATUS_STARTED = 3;
            TAKE_THE_STAGE_STATUS_FINAL_CALL = 4;
            TAKE_THE_STAGE_STATUS_VICTORY_LAP = 5;
            TAKE_THE_STAGE_STATUS_FINISHED = 6;}
    }
}

message WebcastCommonPopupMessage {
    CommonMessageData base_message = 1;
    string schema_url = 2;
    bool anchor_popup = 3;

}

message PlayTogetherWidgetsData {
    MessageType message_type = 1;
    PlayTogetherBasicInfo basic_info = 2;

}

message FansEventData {
    NewFansData new_fans_data = 1;
    TaskCompleteData task_complete_data = 2;
    GetUnclaimedPoints get_unclaimed_points = 3;
    TeamRankUpdate team_rank_update = 4;
    ExpChangeData exp_change_data = 5;
    EntranceGuidanceData entrance_guidance_data = 6;
    repeated FansTaskType trigger_task_types = 101;

    enum FansTaskType {
        FANS_TASK_TYPE_UNKNOWN = 0;
        FANS_TASK_TYPE_FANS_GIFT = 1;
        FANS_TASK_TYPE_WATCH_LIVE = 2;
        FANS_TASK_TYPE_SENDING_GIFT = 3;
        FANS_TASK_TYPE_COMMENT = 4;
        FANS_TASK_TYPE_MONTH_GIFT = 11;
        FANS_TASK_TYPE_MONTH_COMMENT = 12;
        FANS_TASK_TYPE_LONG_ACTIVE = 21;
        FANS_TASK_TYPE_LIVE_NOTIFY = 22;
        FANS_TASK_TYPE_LONG_HEART_ME = 23;
        FANS_TASK_TYPE_LONG_WATCH = 24;
        FANS_TASK_TYPE_LONG_COMMENT = 25;
        FANS_TASK_TYPE_WEEKLY_TREASURE_BOX = 31;}
    message EntranceGuidanceData {
        Text text = 1;
        ImageModel icon = 2;
        optional EntranceGuidanceType guidance_type = 5;
        string freq_control_key = 6;
        int64 freq_control_duration = 7;
        int32 freq_control_value = 8;

        enum EntranceGuidanceType {
            ENTRANCE_GUIDANCE_TYPE_UNKNOWN = 0;
            ENTRANCE_GUIDANCE_TYPE_ABOUT_TO_UPGRADE = 1;}
    }
    message ExpChangeData {
        bool claimed_all_points = 1;

    }
    message GetUnclaimedPoints {
        int64 unclaimed_points = 1;
        int64 expire_timestamp = 2;

    }
    message NewFansData {
        int64 fans_count = 1;

    }
    message TaskCompleteData {
        optional FansTaskType task_type = 1;
        bool is_clear_today = 2;

        enum FansTaskType {
            FANS_TASK_TYPE_UNKNOWN = 0;
            FANS_TASK_TYPE_FANS_GIFT = 1;
            FANS_TASK_TYPE_WATCH_LIVE = 2;
            FANS_TASK_TYPE_SENDING_GIFT = 3;
            FANS_TASK_TYPE_COMMENT = 4;
            FANS_TASK_TYPE_MONTH_GIFT = 11;
            FANS_TASK_TYPE_MONTH_COMMENT = 12;
            FANS_TASK_TYPE_LONG_ACTIVE = 21;
            FANS_TASK_TYPE_LIVE_NOTIFY = 22;
            FANS_TASK_TYPE_LONG_HEART_ME = 23;
            FANS_TASK_TYPE_LONG_WATCH = 24;
            FANS_TASK_TYPE_LONG_COMMENT = 25;
            FANS_TASK_TYPE_WEEKLY_TREASURE_BOX = 31;}
    }
    message TeamRankUpdate {
        int64 updated_rank = 1;
        int64 updated_score = 2;

    }
}

message GuestShowdownUser {
    int64 user_id = 1;
    string linkmic_id = 2;
    int64 score = 3;
    int32 rank = 4;
    string nickname = 5;
    string display_id = 6;
    ImageModel avatar_thumb = 7;
    int32 user_tag = 8;
    string icon_name = 9;

}

message TriggerResumeNoticeResponse {
    ResponseData data = 1;

    message ResponseData {

    }
}

message EffectCategory {
    string id = 1;
    string key = 2;
    string name = 3;
    UrlDataStruct icon = 4;
    UrlDataStruct icon_selected = 5;
    repeated string effects = 6;
    repeated string tags = 7;
    string tags_updated_at = 8;
    bool is_default = 9;
    string extra = 10;

}

message WebcastEcBarrageMessage {
    CommonMessageData base_message = 1;
    ImageModel icon = 2;
    Text content = 3;
    int64 duration = 4;
    string background_color = 5;
    double background_opacity = 6;

}

message WebcastPromoteAdStatusMessage {
    CommonMessageData base_message = 1;
    int64 ad_id = 2;
    int32 status = 3;

}

message PollUpdateVotesContent {
    repeated PollOptionInfo option_list = 2;

}

message GetShowContentResponse {
    ResponseData data = 1;

    message ResponseData {
        ShowContent show_content = 1;

    }
}

message GuessingGameInfo {
    bool show_guessing_game_entrance = 1;

}

message BizJoinGroupParams {
    int32 source_type = 1;
    bool check_perception_center = 2;
    int32 tag_type = 3;
    string tag_value = 4;
    bool need_withdraw = 5;
    string algo_request_id = 6;
    CohostStreamConfig stream_config = 7;

}

message ApplyAnimationContent {
    int64 user_id = 1;
    bool is_display = 2;

}

message BattleInfoResponse {
    int64 channel_id = 1;
    int64 battle_id = 2;
    BattleSetting setting = 3;
    map<int64, BattleUserArmies> armies = 4;
    map<int64, BattleResult> result_map = 5;
    map<int64, BattleUserInfo> user_info_map = 6;
    string bubble_text = 7;
    map<int64, bool> supported_actions = 8;
    BattleDisplayConfig m_battle_display_config = 9;
    map<int64, BattleComboInfo> battle_combos = 11;
    BattleTask battle_task = 12;
    map<int64, BattleTeamUserArmies> team_armies = 13;
    map<int64, BattleTeamResult> team_battle_result = 14;
    BattleTruthOrDare battle_truth_or_dare = 15;
    TeamMatchCampaign team_match_campaign = 16;
    map<int64, EffectingCard> battle_item_cards = 17;
    map<int64, EffectingCard> team_battle_item_cards = 18;
    string channel_id_str = 19;
    string battle_id_str = 20;
    HighScoreControlCfg fuzzy_display_config_v2 = 21;

}

message ShowListUser {
    int64 user_id = 1;
    int32 status = 2;
    int32 order = 3;
    int64 show_start_time = 4;
    string nickname = 5;
    ImageModel avatar_thumb = 6;
    int64 score = 7;
    string linkmic_id_str = 8;

}

message CoHost {
    bool multi_co_host_permission = 1;
    repeated LinkmicUser linked_users = 2;

}

message SubTimerSticker {
    optional SubTimerStickerChangeType type = 1;
    int64 timer_id = 2;
    optional TimerOpType op_type = 3;
    optional TimerStatus timer_status = 4;
    string anchor_side_title = 5;
    string user_side_title = 6;
    int32 sub_increase_count = 7;
    int64 time_increase_per_sub = 8;
    int64 time_increase = 9;
    int64 total_time = 10;
    int64 remaining_time = 11;
    int64 timestamp = 12;
    int64 sticker_x = 13;
    int64 sticker_y = 14;
    int64 screen_w = 15;
    int64 screen_h = 16;

    enum TimerOpType {
        TIMER_OP_TYPE_START = 0;
        TIMER_OP_TYPE_PAUSE = 1;
        TIMER_OP_TYPE_RESUME = 2;
        TIMER_OP_TYPE_CANCEL = 3;}
    enum TimerStatus {
        TIMER_STATUS_NOT_STARTED = 0;
        TIMER_STATUS_RUNNING = 1;
        TIMER_STATUS_PAUSED = 2;
        TIMER_STATUS_CANCELLED = 3;
        TIMER_STATUS_FINISHED = 4;}
    enum SubTimerStickerChangeType {
        SUB_TIMER_STICKER_CHANGE_TYPE_TITLE_CHANGE = 0;
        SUB_TIMER_STICKER_CHANGE_TYPE_STATUS_CHANGE = 1;
        SUB_TIMER_STICKER_CHANGE_TYPE_POSITION_CHANGE = 2;
        SUB_TIMER_STICKER_CHANGE_TYPE_SUB_INCREASE = 3;
        SUB_TIMER_STICKER_CHANGE_TYPE_ALIGN = 4;}
}

message LivePermissionInfo {
    int64 end_time = 1;
    string reason = 2;

}

message ByteRTCExtInfo {
    int32 default_signaling = 1;

}

message WebcastInteractionHubGoalMessage {
    CommonMessageData base_message = 1;
    Text interaction_goal = 2;
    Text interaction_tips = 3;
    int32 interaction_goal_type = 4;
    int32 interaction_goal_source = 5;
    Gift new_gift_info = 6;
    bool has_new_gift = 7;
    AnchorActivityTaskProgress task_progress = 8;

}

message ReportLinkMessageResp {
    LinkMicCommonResp common_resp = 1;
    int64 interval = 2;

}

message NotifyHighlightContent {
    string content = 1;
    bool need_highlight = 2;

}

message PrivilegeLogExtra {
    string data_version = 1;
    string privilege_id = 2;
    string privilege_version = 3;
    string privilege_order_id = 4;
    string level = 5;

}

message PatternRef {
    string key = 1;
    string default_pattern = 2;

}

message AboutMeTemplate {
    string id = 1;
    string name = 2;
    ImageModel icon_image = 3;
    ImageModel icon_image_dark = 4;
    repeated AboutMeInputBox input_box_list = 5;

}

message CapsuleBizParamsCommentMuteRulePrompt {
    string content = 1;
    int64 user_cnt = 2;

}

message EpiphronDecision {
    int64 ts = 1;
    map<string, string> data = 2;
    map<string, string> data_v2 = 3;
    map<string, string> server_features = 4;

}

message Gift {
    ImageModel image = 1;
    string describe = 2;
    int32 duration = 4;
    int64 id = 5;
    bool for_link_mic = 7;
    bool combo = 10;
    int32 type = 11;
    int32 diamond_count = 12;
    bool is_displayed_on_panel = 13;
    int64 primary_effect_id = 14;
    ImageModel left_logo = 15;
    string name = 16;
    ImageModel icon = 21;
    string live_user_png_info = 24;
    ImageModel preview_image = 47;
    GiftPanelBanner gift_panel_banner = 48;
    bool is_broadcast_gift = 49;
    bool is_effect_b_e_f_view = 50;
    bool is_random_gift = 51;
    bool is_box_gift = 52;
    bool can_put_in_gift_box = 53;
    GiftBoxInfo gift_box_info = 54;
    map<string, string> tracker_params = 100;
    GiftLockInfo gift_sub_info = 101;
    repeated GiftColorInfo color_infos = 102;
    string recommend_info = 103;
    GiftRandomEffectInfo random_effect_info = 104;
    int32 gift_sub_type = 105;
    repeated int32 gift_vertical_scenarios = 106;
    int32 group_in_tab = 107;
    bool is_gallery_gift = 108;
    GiftSponsorInfo gift_sponsor_info = 109;
    repeated GiftSkin gift_skins = 110;
    int32 gift_label_type = 111;
    repeated GiftText gift_texts = 112;
    repeated GiftSkinToGiftTextsInfo gift_skin_to_gift_texts_infos = 113;
    int64 expiration_timestamp = 114;
    BatchGiftInfo batch_gift_info = 115;
    bool is_global_gift = 116;
    bool disable_gallery_banner = 117;
    UGGiftStructInfo ug_gift_info = 118;
    CrossScreenEffectInfo cross_screen_effect_info = 119;
    GiftPanelBeaconBubble beacon_bubble = 120;

    message BatchGiftInfo {
        bool can_batch_send = 1;
        repeated int64 available_counts = 2;

    }
    message CrossScreenEffectInfo {
        map<int64, int32> single_action_effect_ids = 1;
        map<int64, int32> action_effect_ids = 2;
        map<int64, int32> reaction_effect_ids = 3;

    }
    message GiftSponsorInfo {
        int64 sponsor_id = 1;
        int64 sponsor_count = 2;
        int64 current_count = 3;
        int64 left_count_to_sponsor = 4;
        bool can_sponsor = 5;

    }
    message UGGiftStructInfo {
        bool is_ug_gift = 1;
        int64 ug_points_cost = 2;

    }
    message GiftSkin {
        int64 gift_skin_id = 1;
        string gift_skin_name = 2;
        ImageModel static_image = 3;
        ImageModel animated_image = 4;

    }
    message GiftText {
        int64 gift_text_id = 1;
        string gift_text_name = 2;

    }
    message GiftSkinToGiftTextsInfo {
        int64 gift_skin_id = 1;
        repeated int64 gift_text_ids = 2;

    }
}

message GroupLiveSession {
    bool is_group_live_session = 1;
    int64 last_visit_time = 2;
    repeated GroupLiveMember group_live_members = 3;

}

message AnchorActivityTaskProgress {
    string task_icon_url = 1;
    string task_progress = 2;

}

message WebcastEpiMessage {
    CommonMessageData base_message = 1;
    EpiDecision decisions = 2;

}

message CommonMessageData {
    string method = 1;
    int64 message_id = 2;
    int64 room_id = 3;
    int64 create_time = 4;
    int32 monitor = 5;
    bool show_msg = 6;
    string describe = 7;
    Text display_text = 8;
    int64 fold_type = 9;
    int64 anchor_fold_type = 10;
    int64 priority_score = 11;
    string log_id = 12;
    string msg_process_filter_k = 13;
    string msg_process_filter_v = 14;
    string from_idc = 15;
    string to_idc = 16;
    repeated string filter_tags = 17;
    LiveMessageSEI message_s_e_i = 18;
    LiveMessageID depend_root_i_d = 19;
    LiveMessageID depend_i_d = 20;
    int64 anchor_priority_score = 21;
    int64 room_message_heat_level = 22;
    int64 fold_type_for_web = 23;
    int64 anchor_fold_type_for_web = 24;
    int64 client_send_time = 25;
    optional IMDispatchStrategy dispatch_strategy = 26;

    enum IMDispatchStrategy {
        I_M_DISPATCH_STRATEGY_IM_DISPATCH_STRATEGY_DEFAULT = 0;
        I_M_DISPATCH_STRATEGY_IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE = 1;}
}

message WebcastLinkmicAnimationMessage {
    CommonMessageData base_message = 1;
    ApplyAnimationContent apply_animation_content = 2;

}

message CreateChannelResponse {
    int64 channel_id = 2;
    RTCExtraInfo rtc_info = 3;
    string self_link_mic_id = 4;
    int32 is_resume = 5;
    BizCreateChannelResponse multi_guest_resp_extra = 9527;

}

message LivePermissionApply {
    bool enable_third_party = 1;
    bool enable_screenshot = 2;
    bool enable_live_video = 3;

}

message AgeRestricted {
    bool restricted = 1;
    int32 age_interval = 2;
    int32 source = 3;

}

message GiftSendFansClubInfo {
    string fans_gift_toast = 1;

}

message GameTag {
    int64 id = 1;
    string show_name = 2;
    string short_name = 3;
    string full_name = 4;
    repeated Hashtag hashtag_list = 6;
    repeated GameTagCategory game_category = 7;
    int32 landscape = 8;
    string package_name = 9;
    string bundle_id = 10;
    bool is_new_game = 11;

}

message EmoteListResult {
    repeated EmoteModel emote_list = 1;
    bool exist = 2;

}

message CountdownForAllStartResponse {
    ResponseData data = 1;

    message ResponseData {
        bool is_exists = 1;
        CountdownForAllContent play_content = 2;

    }
}

message LeaveJoinGroupReq {
    LinkCommon common = 1;
    GroupPlayer myself = 2;
    GroupPlayer leaver = 3;
    int64 group_channel_id = 4;
    int64 cur_group_channel_id = 5;
    BizLeaveJoinGroupParams cohost_req_extra = 9527;

}

message BizCancelApplyParams {
    int64 anchor_id = 1;

}

message TruthOrDareTip {
    string tip_type = 1;
    string tip_content = 2;

}

message WebcastKaraokeYouSingReqMessage {
    CommonMessageData base_message = 1;
    repeated ReqSong song_list = 2;
    int64 total_req_count = 3;
    int64 req_timestamp_seconds = 4;
    int32 type = 5;

}

message WebcastRealTimePerformancePageMessage {
    CommonMessageData base_message = 1;
    int32 type = 2;
    string guide_text_starling = 3;

}

message WebcastStreamStatusMessage {
    CommonMessageData base_message = 1;
    repeated StreamStatusChangeInfo streams = 2;

}

message AudienceRejectContent {
    int64 from_user_id = 1;

}

message WebcastGiftCollectionUpdateMessage {
    CommonMessageData base_message = 1;
    GiftCollection gift_collection = 2;

}

message WebcastCommercialCustomMessage {
    CommonMessageData base_message = 1;
    int64 custom_message_id = 2;
    ImageModel brand_logo = 3;
    Text brand_name = 4;
    string border_color = 7;
    RightLabel right_label = 8;
    int64 duration = 9;

    message RightLabel {
        string background_color = 1;
        Text content = 2;
        int64 height = 3;

    }
}

message WebcastGuideMessage {
    CommonMessageData base_message = 1;
    int64 guide_type = 2;
    int64 gift_id = 3;
    string description = 4;
    int64 duration = 5;
    int64 display_style = 6;
    Scene scene = 7;

}

message PartnershipBriefDrops {
    string id_str = 1;
    string name = 2;
    string icon = 3;
    string game_name = 4;
    int64 start_time = 5;
    int64 end_time = 6;
    bool joined = 7;
    string game_id_str = 8;
    int32 incentivetype = 9;
    int64 game_tag_id = 10;

}

message MultiMatchPrepareResponse {
    map<int64, int32> anchors_permission = 1;
    int64 recommend_team_mate = 2;
    map<int64, BattleABTestList> ab_test_settings = 3;
    repeated GiftMode gift_mode = 4;
    string rule_guide_url = 5;
    int64 best_teammate_id = 6;
    Text gift_event_desc = 7;
    int64 punished_anchor = 8;
    int64 punish_end_timestamp = 9;

}

message RepostInfo {
    bool show_tag = 1;
    string reposters_token = 2;
    int64 reposters_cnt = 3;

}

message RechargeCustomError {
    int32 prompt_type = 1;
    string toast_content = 2;
    string pop_up_title = 3;
    string pop_up_content = 4;
    map<string, RechargePopUpContentReplace> content_replace = 5;
    string pop_up_dismiss = 6;
    int32 pop_up_dismiss_action = 7;
    string pop_up_primary_cta = 8;
    string pop_up_primary_cta_schema = 9;
    string extra = 10;
    int32 pop_up_style = 11;
    string link_to_jump = 12;
    int32 pop_up_primary_action = 13;
    string penalty_warning_skip = 14;
    int32 err_code = 15;
    string pop_up_dismiss_cta_schema = 16;
    string question_mark_cta_schema = 17;

}

message BlockStatus {
    bool is_block = 1;
    int64 ent_time = 2;

}

message WebcastDonationMessage {
    CommonMessageData base_message = 1;
    int64 total = 2;
    string currency = 3;
    repeated User sponsor = 4;
    repeated User user = 5;

}

message CohostListResponse {
    ResponseData data = 1;

    message ResponseData {
        int64 total_position_count = 1;
        int64 group_channel_id = 2;
        repeated CohostListUser users = 3;

    }
}

message AckStateResp {
    int32 result = 1;

}

message ReplyContent {
    User replier = 1;
    int64 replier_room_id = 2;
    ReplyStatus reply_status = 3;

}

message JoinGroupMessageExtra {
    int64 source_type = 1;
    RivalExtra extra = 2;
    repeated RivalExtra other_users = 3;

    message AuthenticationInfo {
        string custom_verify = 1;
        string enterprise_verify_reason = 2;
        ImageModel authentication_badge = 3;

    }
    message RivalExtra {
        int64 user_count = 4;
        ImageModel avatar_thumb = 5;
        string display_id = 6;
        AuthenticationInfo authentication_info = 7;
        string nickname = 8;
        int64 follow_status = 9;
        Hashtag hashtag = 10;
        TopHostInfo top_host_info = 11;
        int64 user_id = 12;
        bool is_best_teammate = 13;
        OptPairInfo opt_pair_info = 14;
        int64 eoy_level = 15;
        optional CohostNudgeInfo nudge_info = 16;
        int64 reservation_id = 17;
        int64 follower_count = 18;
        RivalsGameTag game_tag = 19;

        enum CohostNudgeInfo {
            COHOST_NUDGE_INFO_NONE = 0;
            COHOST_NUDGE_INFO_YOUR_NUDGE = 1;
            COHOST_NUDGE_INFO_NUDGED_YOU = 2;}
    }
}

message BizMigrateGroupResponse {
    ResponseData data = 1;

    message ResponseData {
        map<int64, CohostUserInfo> user_infos = 1;

    }
}

message WebcastLiveGameIntroMessage {
    CommonMessageData base_message = 1;
    Text content = 2;
    bool has_rank_info = 3;

}

message LivePodcastResponse {
    ResponseData data = 1;

    message ResponseData {
        bool can_be_live_podcast = 1;
        bool can_be_social_live = 2;
        LiveScenario live_scenario = 3;
        LivePermissionApply live_permission_apply = 4;
        bool show_live_studio = 5;
        AnchorLevelPermission anchor_level_permission = 6;
        bool can_be_pico_live_podcast = 7;
        TryMode try_mode = 8;
        LiveStudioPermissionStatus live_studio_permission_status = 9;
        Stream stream = 10;
        int64 can_cache = 11;
        bool show_mock_live_tab = 12;
        EntranceConditionsPopup conditions_popup = 13;

    }
}

message SubPinCard {
    int64 time_to_live = 1;
    Text title = 2;
    Text desc = 3;
    ImageModel image = 4;
    int64 id = 6;
    int64 template_id = 7;
    SubGoalPinCard goal_pin_card = 8;
    string action_schema = 9;
    int64 last_pin_timestamp = 10;

    enum PinCardType {
        PIN_CARD_TYPE_UNKNOWN_PIN_CARD_TYPE = 0;
        PIN_CARD_TYPE_CUSTOMIZED_BENEFIT_E_NUM = 1;
        PIN_CARD_TYPE_SUB_GOAL_E_NUM = 2;
        PIN_CARD_TYPE_UP_SELL_DM = 3;
        PIN_CARD_TYPE_UP_SELL_LEAD_SGEN = 4;}
    message Text {
        optional TextType type = 1;
        string content = 2;

        enum TextType {
            TEXT_TYPE_UNKNOWN_TEXT_TYPE = 0;
            TEXT_TYPE_ORIGINAL_TEXT = 1;
            TEXT_TYPE_STARLING_KEY = 2;}
    }
}

message CompetitionInitiateInfo {
    CompetitionUserBase initiator = 1;
    optional CompetitionInitiateType initiate_type = 2;
    repeated CompetitionTeamBase teams = 3;
    map<int64, CompetitionABInfo> ab_infos = 4;
    TakeTheStageBiz take_the_stage_biz = 100;

    enum CompetitionInitiateType {
        COMPETITION_INITIATE_TYPE_NORMAL = 0;
        COMPETITION_INITIATE_TYPE_REMATCH = 1;}
    message AnchorInfo {
        int64 user_id = 1;

    }
    message TakeTheStageBiz {
        repeated AnchorInfo anchors = 1;

    }
}

message ReplyBizContent {
    int32 link_type = 1;
    int32 is_turn_off_invitation = 2;
    User reply_user_info = 3;

}

message RealtimeLiveCenterTips {
    bool show_tips = 1;
    string tip_text = 2;
    int64 tip_type = 3;
    string random_tip_key = 4;
    string tips_schema = 5;

}

message LiveLimitedTimeDiscountGiftInfo {
    int64 gift_id = 1;
    int64 original_price = 2;
    int64 expire_time = 3;
    int32 remain_times = 4;
    int32 discount_percentage = 5;

}

message GetShowRankParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 show_id = 3;

}

message BackGroundImageState {
    string sticker_id = 1;

}

message ResumeResponse {
    ResponseData data = 1;

    message ResponseData {
        string rtc_ext_info = 1;
        bool is_resume = 2;
        repeated CohostListUser users = 3;
        int64 total_position_count = 4;
        int64 channel_id = 5;

    }
}

message CountdownForAllContent {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 play_id = 3;
    int32 play_status = 4;
    int64 version = 5;
    int64 start_time = 6;
    int64 end_time = 7;
    CountdownForAllConfig play_config = 8;
    repeated CountdownForAllUser play_users = 9;

}

message BenefitsInfo {
    repeated string customized_benefits = 1;
    bool is_subscribe = 2;
    bool is_default_benefits = 3;

}

message GroupChatGuestDetail {
    User user_info = 1;
    int64 linked_seconds = 2;

}

message ForceInsertMetricsItem {
    int32 force_insert_type = 1;
    int32 force_index_config = 2;

}

message LinkerMediaChangeOperator {
    int64 user_id = 1;
    optional LinkMicUserAdminType operator_type = 2;
    string nick_name = 3;
    string display_id = 4;

    enum LinkMicUserAdminType {
        LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE = 0;
        LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE = 1;
        LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE = 2;}
}

message GoalStats {
    int64 total_coins = 1;
    int64 total_contributor = 2;
    GoalComparison comparison = 3;
    int64 total_new_fans = 4;

}

message TextEffect {
    Detail portrait_detail = 1;
    Detail landscape_detail = 2;

    message Detail {
        Text text = 1;
        int32 text_font_size = 2;
        ImageModel background = 3;
        int64 start = 4;
        int64 duration = 5;
        int32 x = 6;
        int32 y = 7;
        int32 width = 8;
        int32 height = 9;
        int32 shadow_dx = 10;
        int32 shadow_dy = 11;
        int32 shadow_radius = 12;
        string shadow_color = 13;
        string stroke_color = 14;
        int32 stroke_width = 15;

    }
}

message ECShortItemRefreshMessage {
    ShortItemRefreshEntity entity = 2;

}

message EcommerceRoomTag {
    string tag_name = 1;
    int32 tag_type = 2;
    int64 tag_show_time = 3;
    string da_info = 4;

}

message CompetitionReplyResponse {
    ResponseData data = 1;

    message ResponseData {
        CompetitionCommon biz_common = 1;
        map<int64, CompetitionABInfo> ab_infos = 2;

    }
}

message AuditInfo {
    int64 violation_id = 1;
    optional AuditTaskType task_type = 2;

    enum AuditTaskType {
        AUDIT_TASK_TYPE_DEFAULT = 0;
        AUDIT_TASK_TYPE_APPEAL = 1;}
}

message UserArmiesWrapper {
    int64 user_id = 1;
    BattleUserArmies user_armies = 2;

}

message WebcastPartnershipDropsCardChangeMessage {
    CommonMessageData base_message = 1;
    int32 change_mode = 2;
    string drops_id = 3;
    int64 card_show_duration = 4;
    string game_id = 5;
    string game_name = 6;

}

message WebcastGameGuessWidgetsMessage {
    CommonMessageData base_message = 1;
    GuessWidgets guess_widgets = 2;

}

message PreviewGameMomentData {
    optional PreviewGameInfoType preview_game_info_type = 1;
    optional GameMomentMessageType game_moment_message_type = 2;
    int64 event_time = 3;
    int64 max_time = 4;
    string moment_unique_id = 5;
    Text content = 6;
    Text game_tag_name = 7;
    int64 game_tag_id = 8;

    enum GameMomentMessageType {
        GAME_MOMENT_MESSAGE_TYPE_UNKNOWN = 0;
        GAME_MOMENT_MESSAGE_TYPE_VICTORY = 1;
        GAME_MOMENT_MESSAGE_TYPE_HIGHLIGHT = 2;
        GAME_MOMENT_MESSAGE_TYPE_DEFEAT = 3;
        GAME_MOMENT_MESSAGE_TYPE_KILL_NUM = 4;
        GAME_MOMENT_MESSAGE_TYPE_REMAIN_NUM = 5;}
    enum PreviewGameInfoType {
        PREVIEW_GAME_INFO_TYPE_UNKNOWN = 0;
        PREVIEW_GAME_INFO_TYPE_REALTIME = 1;
        PREVIEW_GAME_INFO_TYPE_MOMENT_ACCUMULATE_INFO = 2;}
}

message StarlingTranslateInfo {
    string starling_key = 1;
    repeated LangTranslate lang_translate = 2;

}

message GameServerFeatureSetting {
    bool gbl_server_features_enable = 1;
    string gbl_server_features_list = 2;

}

message GoodyBagUserInfo {
    string user_id = 1;
    string nickname = 2;
    string display_id = 3;
    ImageModel avatar = 4;

}

message WebcastMiddleTouchMessage {
    CommonMessageData base_message = 1;
    UnifyBaseActionData action_data = 2;
    MiddleTouchExtra extra = 3;

}

message PollVoteLimit {
    optional PollVoteLimitType limit_type = 1;
    int64 vote_count_limit = 2;

    enum PollVoteLimitType {
        POLL_VOTE_LIMIT_TYPE_SINGLE = 0;
        POLL_VOTE_LIMIT_TYPE_MULTIPLE = 1;}
}

message BattleTaskStart {
    BattleBonusConfig battle_bonus_config = 1;

}

message CheckUpdateResponse {
    Data data = 1;

    message Data {
        bool updated = 1;

    }
}

message LokiExtraContent {
    string gift_type = 1;
    int64 gift_duration = 2;
    bool need_screen_shot = 3;
    bool ismulti_frame = 4;
    string view_overlay = 5;
    BEFViewRenderSize bef_view_render_size = 6;
    int32 bef_view_render_f_p_s = 7;
    int32 bef_view_fit_mode = 8;
    string model_names = 9;
    repeated string requirements = 10;

}

message ImageBadge {
    optional BadgeDisplayType badge_display_type = 1;
    ImageModel image_model = 2;

    enum BadgeDisplayType {
        BADGE_DISPLAY_TYPE_UNKNOWN = 0;
        BADGE_DISPLAY_TYPE_IMAGE = 1;
        BADGE_DISPLAY_TYPE_TEXT = 2;
        BADGE_DISPLAY_TYPE_STRING = 3;
        BADGE_DISPLAY_TYPE_COMBINE = 4;}
}

message BattleTeamResult {
    int64 team_id = 1;
    repeated BattleTeamUser team_users = 2;
    int32 result = 3;
    int64 total_score = 4;

}

message PictionaryInfo {
    int64 id = 1;
    string word = 2;
    int32 status = 3;
    int64 start_time = 4;
    int64 end_time = 5;
    int64 session_id = 6;
    ImageModel draw_url = 7;
    int32 pictionary_type = 8;

}

message GuessWidgets {
    repeated GuessRankUserInfo user_rank = 2;

}

message GoalComparison {
    int64 coins_incr = 1;
    int64 contributor_incr = 2;

}

message WebcastUserStatsMessage {
    CommonMessageData base_message = 1;
    string m_content = 2;
    int64 m_user_id = 3;
    int64 m_action_type = 4;

}

message ReplyResponse {
    RTCExtraInfo rtc_info = 2;
    string invitee_link_mic_id = 3;
    MicPositionData position = 4;
    repeated string linked_user_ui_positions = 5;
    repeated PosIdentity ui_pos = 6;
    BizReplyResponse multi_guest_resp_extra = 9527;

}

message BattleResult {
    int64 user_id = 1;
    optional Result result = 2;
    int64 score = 3;

    enum Result {
        RESULT_WIN = 0;
        RESULT_LOSE = 1;
        RESULT_DRAW = 2;}
}

message PerceptionFeedbackOption {
    int64 id = 1;
    string content_key = 2;

}

message WebcastWallpaperReviewMessage {
    CommonMessageData base_message = 1;
    string ai_pic_url = 2;
    int64 review_result = 3;
    string context_keywords = 4;
    string keywords = 5;
    int64 room_id = 6;
    int64 channel_id = 7;
    int64 wallpaper_id = 8;

}

message BattleRecentContribResponse {
    ResponseData data = 1;

    message ResponseData {
        repeated string gift_log_ids = 1;
        map<int64, bool> supported_actions = 2;
        map<int64, BattleResult> battle_score = 3;
        map<int64, BattleTeamResult> team_battle_score = 4;

    }
}

message VideoMetaInfo {
    string url = 1;
    int64 height = 2;
    int64 width = 3;
    int64 size = 4;
    float duration = 5;

}

message WebcastLinkMicAdMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    repeated LinkMicAdContent link_ad_contents = 3;

}

message CompetitionInitiateResponse {
    ResponseData data = 1;

    message ResponseData {
        CompetitionCommon biz_common = 1;
        int32 inviter_gift_permission_type = 2;
        repeated CompetitionTeamBase teams = 3;
        int64 end_timestamp_sec = 4;
        int64 actual_end_timestamp_sec = 5;

    }
}

message BattleUserInfoWrapper {
    int64 user_id = 1;
    BattleUserInfo user_info = 2;

}

message WebcastLSAccessStatus {
    bool user_access_status = 1;
    bool is_upgrade_restricted = 2;
    string punish_detail_url = 3;
    string upgrade_restriction_end_day = 4;

}

message StarCommentGetQueueResponse {
    Data data = 1;

    message Data {
        StarCommentQueue queue = 1;
        int64 server_cur_msg_start_time_ms = 2;
        string client_reserve = 3;
        int64 polling_interval_ms = 4;
        int64 normal_interval_between_msg_ms = 5;
        int64 advanced_interval_between_msg_ms = 6;
        int64 lagging_interval_between_msg_ms = 7;

    }
}

message AgeRestrictionSettings {
    int32 age_restricted = 1;

}

message WebcastSubTimerStickerMessage {
    CommonMessageData base_message = 1;
    SubTimerSticker sticker = 2;

}

message AnchorInfo {
    int64 level = 1;

}

message StreamUrlExtra {
    int32 height = 1;
    int32 width = 2;
    int32 fps = 3;
    int32 max_bitrate = 4;
    int32 min_bitrate = 5;
    int32 default_bitrate = 6;
    int32 bitrate_adapt_strategy = 7;
    int32 anchor_interact_profile = 8;
    int32 audience_interact_profile = 9;
    bool hardware_encode = 10;
    int32 profile = 12;
    SrConfig sr_config = 14;
    float gop_sec = 16;
    bool enable_b_frame = 17;
    bool is_roi = 18;
    bool is_sw_roi = 19;
    bool enable_byte_v_c1 = 20;

    message SrConfig {
        bool enabled = 1;
        int32 strength = 2;
        bool anti_alias = 3;

    }
}

message ReportLinkMessageReq {
    LinkCommon common = 1;
    Player my_self = 2;
    ChannelMessage channel_message = 3;
    AnchorClientList anchor_client_list = 4;
    GuestClientList guest_client_list = 5;

}

message GetFirstRechargeInfoV2Resp {
    Data data = 1;

    message RewardProcess {
        int64 reward_id = 1;
        int32 reward_order = 2;
        int32 reward_scene = 3;
        int64 reward_amount = 4;
        int64 reward_expire = 5;
        ImageModel reward_icon = 6;

    }
    message CampaignProcess {
        int64 task_id = 1;
        int32 task_order = 2;
        int32 task_scene = 3;
        int32 task_status = 4;
        int64 task_target_amount = 5;
        int64 task_finished_amount = 6;
        int64 task_expire_time = 7;
        repeated RewardProcess rewards = 8;

    }
    message CommonCampaignInfo {
        string campaign_name = 1;
        int64 expire_time = 3;
        int32 campaign_status = 4;
        repeated CampaignProcess campaign_process = 5;

    }
    message FirstChargeGuideEffectRule {
        bool enable_first_recharge_guide_effect = 1;
        repeated int32 enter_room_show_time = 2;
        int32 watch_pk_show_time = 3;

    }
    message FirstRechargeCampaignV1 {
        bool is_first_charge = 1;
        FirstChargeGuideEffectRule guide_effect_rule = 2;
        Diamond default_diamond = 3;
        int32 first_charge_gift_style = 4;
        ImageModel package_entrance_image = 5;

    }
    message FirstRechargeCampaignV2 {
        bool is_cash_first_charge = 1;
        int64 gift_id = 2;
        bool is_show_countdown = 3;
        int64 expire_time = 4;
        int32 total_frozen_coins = 5;
        int32 remaining_frozen_coins = 6;
        int32 minimum_number_of_coins_to_unlock_frozen_coins = 7;
        int32 frozen_coins_for_large_packages = 8;
        int32 frozen_coins_for_small_packages = 9;
        int32 recharge_coins_for_large_packages = 10;
        int32 recharge_coins_for_small_packages = 11;
        bool is_first_active_consumption = 12;
        int64 first_cash_recharge_ts = 13;

    }
    message Data {
        int32 campaign_type = 1;
        FirstRechargeCampaignV1 first_recharge_campaign_v1 = 2;
        FirstRechargeCampaignV2 first_recharge_campaign_v2 = 3;
        string campaign_schema_url = 4;
        CommonCampaignInfo common_campaign_info = 5;
        int64 server_unix_time = 6;
        string campaign_faq_url = 7;

    }
}

message FanTicketRanklistParams {
    int64 room_id = 1;
    int64 guest_user_id = 2;
    int64 anchor_id = 3;
    int64 channel_id = 4;
    string linkmic_id = 5;
    int64 show_id = 6;
    int64 play_id = 7;
    int32 play_scene = 8;

}

message NoticeboardTemplateUpdateResponse {
    ResponseData data = 1;

    message ResponseData {
        bool is_success = 1;
        NoticeboardTemplate template = 2;

    }
}

message StarCommentMessage {
    string star_comment_id = 1;
    User user = 2;
    string content = 3;
    int64 duration = 4;
    int64 start_time_ms = 5;
    optional StarCommentOption comment_option = 6;
    string content_language = 7;

    enum StarCommentOption {
        STAR_COMMENT_OPTION_UNKNOWN = 0;
        STAR_COMMENT_OPTION_V_1_BASIC = 10;
        STAR_COMMENT_OPTION_V_1_ELEVATED = 20;}
}

message ListUser {
    User user = 1;
    int64 linkmic_id = 2;
    string linkmic_id_str = 3;
    optional LinkListStatus link_status = 4;
    optional LinkType link_type = 5;
    int32 user_position = 6;
    optional LinkSilenceStatus silence_status = 7;
    int64 modify_time = 8;
    int64 channel_id = 9;
    optional LinkRoleType role_type = 10;

    enum LinkType {
        LINK_TYPE_TYPE_UNKNOWN = 0;
        LINK_TYPE_TYPE_VIDEO = 1;
        LINK_TYPE_TYPE_AUDIO = 2;
        LINK_TYPE_TYPE_VIRTUAL = 3;}
    enum LinkListStatus {
        LINK_LIST_STATUS_STATUS_UN_KOWN = 0;
        LINK_LIST_STATUS_STATUS_WAITING = 1;
        LINK_LIST_STATUS_STATUS_LINKED = 2;
        LINK_LIST_STATUS_STATUS_FINISHED = 3;
        LINK_LIST_STATUS_STATUS_WAITING_OR_LINKED = 4;}
    enum LinkSilenceStatus {
        LINK_SILENCE_STATUS_STATUS_UN_SILENCE = 0;
        LINK_SILENCE_STATUS_STATUS_SILENCE_BY_SELF = 1;
        LINK_SILENCE_STATUS_STATUS_SILENCE_BY_OWNER = 2;}
    enum LinkRoleType {
        LINK_ROLE_TYPE_TYPE_ROLE_TYPE_UN_KOWN = 0;
        LINK_ROLE_TYPE_TYPE_LEADER = 1;
        LINK_ROLE_TYPE_TYPE_PLAYER = 2;
        LINK_ROLE_TYPE_TYPE_INVITEE = 3;
        LINK_ROLE_TYPE_TYPE_APP_LIER = 4;}
    enum LinkmicAudienceType {
        LINKMIC_AUDIENCE_TYPE_AUDIENCE_TYPE_UNKNOWN = 0;
        LINKMIC_AUDIENCE_TYPE_VIDEO = 1;
        LINKMIC_AUDIENCE_TYPE_AUDIO = 2;}
    enum LinkmicRoleType {
        LINKMIC_ROLE_TYPE_ROLE_TYPE_UN_KOWN = 0;
        LINKMIC_ROLE_TYPE_LEADER = 1;
        LINKMIC_ROLE_TYPE_PLAYER = 2;
        LINKMIC_ROLE_TYPE_INVITEE = 3;}
    enum LinkUserType {
        LINK_USER_TYPE_DEFAULT = 0;
        LINK_USER_TYPE_KARAOKE = 1;}
}

message NoticeboardCreateResponse {
    ResponseData data = 1;

    message ResponseData {
        bool is_exists = 1;
        NoticeboardContent noticeboard_content = 2;

    }
}

message LinkerMediaChangeContent {
    optional GuestMicCameraManageOp op = 1;
    int64 to_user_id = 2;
    int64 anchor_id = 3;
    int64 room_id = 4;
    optional GuestMicCameraChangeScene change_scene = 5;
    LinkerMediaChangeOperator operator_info = 7;

    enum GuestMicCameraManageOp {
        GUEST_MIC_CAMERA_MANAGE_OP_OPEN_MIC = 0;
        GUEST_MIC_CAMERA_MANAGE_OP_OPEN_CAMERA = 1;
        GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC = 2;
        GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_CAMERA = 3;
        GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC_PUNISH = 4;}
    enum GuestMicCameraChangeScene {
        GUEST_MIC_CAMERA_CHANGE_SCENE_CHANGE_SCENE_UNKNOWN = 0;
        GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_ANCHOR_AUTO = 1;
        GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SERVER_NORMAL = 2;
        GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SHOW_END = 3;}
}

message LinkerSetting {
    int64 max_member_limit = 1;
    int64 link_type = 2;
    Scene scene = 3;
    int64 owner_uid = 4;
    int64 owner_room_id = 5;
    int32 vendor = 6;

}

message PublicAreaCommon {
    ImageModel user_label = 1;
    int64 user_consume_in_room = 2;

}

message GiftPanelBeaconBubble {
    string lynx_url = 1;
    string lynx_extra = 2;
    optional GiftPanelBeaconBubbleType type = 3;

    enum GiftPanelBeaconBubbleType {
        GIFT_PANEL_BEACON_BUBBLE_TYPE_UNKNOWN = 0;
        GIFT_PANEL_BEACON_BUBBLE_TYPE_DEFAULT = 1;
        GIFT_PANEL_BEACON_BUBBLE_TYPE_LYNX_DEFAULT = 2;
        GIFT_PANEL_BEACON_BUBBLE_TYPE_LIVE_GOAL = 3;
        GIFT_PANEL_BEACON_BUBBLE_TYPE_GIFT_GALLERY = 4;
        GIFT_PANEL_BEACON_BUBBLE_TYPE_UG_HIGH_PRIORITY = 5;
        GIFT_PANEL_BEACON_BUBBLE_TYPE_UG_LOW_PRIORITY = 6;
        GIFT_PANEL_BEACON_BUBBLE_TYPE_VIEWER_PICKS = 7;}
}

message QuizStatistics {
    repeated OptionCountItem option_count = 1;

    message OptionCountItem {
        string option_id = 1;
        int32 count = 2;

    }
}

message GameTaskInfo {
    string task_id = 1;
    int32 status = 2;
    int32 current_value = 3;
    int32 target_value = 4;
    GameTaskRewardInfo reward_info = 5;
    int32 task_type = 6;

}

message RTCExtraInfo {
    RTCEngineConfig config = 1;
    repeated RTCLiveVideoParam rtc_video_param = 2;
    RTCBitRateMap rtc_bit_rate_map = 3;
    int32 rtc_fps = 4;
    RTCMixBase rtc_mix_base = 5;
    ByteRTCExtInfo byte_rtc_ext_info = 6;
    RTCInfoExtra rtc_info_extra = 7;
    string rtc_business_id = 8;
    RTCOther rtc_other = 9;
    int32 interact_client_type = 10;

}

message WebcastGiftGalleryMessage {
    CommonMessageData base_message = 1;
    GiftInfo gift_info = 2;
    User user = 3;
    User to_user = 4;
    optional GiftGalleryMsgType msg_type = 5;
    bool all_sponsored = 21;
    GiftIMPriority priority = 51;
    string log_id = 52;

    enum GiftGalleryMsgType {
        GIFT_GALLERY_MSG_TYPE_UNUSED = 0;
        GIFT_GALLERY_MSG_TYPE_LIGHT_UP = 1;
        GIFT_GALLERY_MSG_TYPE_ALL_SPONSORED = 2;
        GIFT_GALLERY_MSG_TYPE_SPONSOR_CHANGE = 3;
        GIFT_GALLERY_MSG_TYPE_LONG_TERM_RECALL = 4;}
    message GiftInfo {
        int64 lighted_up_gift_id = 1;
        bool high_value = 2;
        Gift gift = 3;
        string unlighted_gift_icon = 4;

    }
}

message MultiLangContent {
    string language = 1;
    string content = 2;

}

message GuestClientList {
    int64 uid = 1;
    string link_mic_id = 2;
    int32 status = 3;
    int32 source = 4;
    int32 rtc_status = 5;

}

message WebcastGiftUpdateMessage {
    CommonMessageData base_message = 1;
    int32 update_type = 2;

}

message LinkListChangeContent {
    int32 list_change_type = 1;
    AllListUser user_list = 2;
    repeated string linked_user_ui_positions = 3;
    repeated ContentPosition content_pos = 4;

}

message MigrateGroupReq {
    LinkCommon common = 1;
    GroupPlayer myself = 2;
    int64 source_group_channel_id = 3;
    int64 target_group_channel_id = 4;

}

message WebcastNoticeboardMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    NoticeboardContent noticeboard_content = 3;
    LinkerMediaChangeOperator operator_user_info = 4;

}

message LeaveContent {
    Player left_user = 1;
    int64 leave_reason = 2;
    repeated string linked_user_ui_positions = 3;
    repeated PosIdentity ui_pos = 4;

}

message WebcastRoomEventMessage {
    CommonMessageData base_message = 1;
    int64 event_id = 2;
    string title = 3;
    int64 start_time = 4;
    string pos_x = 5;
    string pos_y = 6;
    int64 subscribed_count = 7;
    int32 config_opt = 8;
    repeated EventUserInfo event_user_info = 9;

}

message GiveawayInfo {
    User winner = 1;
    Product product = 2;

}

message WebcastUpgradeMessage {
    CommonMessageData base_message = 1;
    Text text = 2;

}

message WalletLiveRewardsRatioImMsg {
    int32 msg_type = 1;
    WalletLiveRewardsRatioImMsgNotification notification_data = 2;

}

message WebcastBackpackMessage {
    CommonMessageData base_message = 1;
    int32 change_type = 2;
    int32 action = 3;
    int32 item_type = 4;
    int64 item_id = 5;

}

message BarrageTypeFansLevelParam {
    int32 current_grade = 1;
    int32 display_config = 2;
    User user = 4;

}

message WebcastAvatarStyleResultMessage {
    CommonMessageData base_message = 1;
    int32 status = 2;
    string status_message = 3;
    ImageModel image = 4;
    int64 style_id = 5;
    string origin_image_uri = 6;
    int64 task_id = 7;

}

message UpdateRoomLayoutSettings {
    string rtc_ext_info = 1;

}

message GameGuessRecommendCreateSwitch {
    bool enable = 1;

}

message KickOutAllGuestsParam {
    LinkCommon common = 1;
    Player myself = 2;
    int64 channel_id = 3;
    int64 reason = 4;

}

message GiftConfigs {
    repeated GiftConfigInfo config_infos = 1;

}

message WebcastGameSettingChangeMessage {
    CommonMessageData base_message = 1;
    map<int64, UserSetting> current_user_setting = 2;

}

message WebcastPartnershipDropsUpdateMessage {
    CommonMessageData base_message = 1;
    optional ChangeMode change_mode = 2;
    string drops_id = 3;
    string task_id = 4;
    string event_id = 5;
    int64 anchor_uid = 6;

    enum ChangeMode {
        CHANGE_MODE_SHOW = 0;
        CHANGE_MODE_UPDATE = 1;
        CHANGE_MODE_CLOSE = 2;}
}

message BattleNoticeAnchorGuide {
    BattleNoticeText content = 1;
    BattleNoticeText button_content = 2;

}

message RTCEngineConfig {
    string rtc_app_id = 1;
    string rtc_user_id = 2;
    string rtc_token = 3;
    int64 rtc_channel_id = 4;

}

message PermitBizContent {
    MultiLiveAnchorPanelSettings multi_live_anchor_panel_settings = 1;
    int64 expire_time = 2;
    User operator_user_info = 3;
    optional LinkMicUserAdminType operator_link_admin_type = 4;
    optional LinkUserType link_user_type = 5;

    enum LinkMicUserAdminType {
        LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE = 0;
        LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE = 1;
        LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE = 2;}
    enum LinkUserType {
        LINK_USER_TYPE_DEFAULT = 0;
        LINK_USER_TYPE_KARAOKE = 1;}
}

message AnchorGrowLevelTriggerInfo {
    bool is_grow_level_anchor = 1;
    GrowthJourneyBannerInfo growth_journey_banner_info = 2;
    int64 growth_stage = 3;
    string growth_instance_strategy = 4;

}

message GetStateResp {
    int64 version = 1;
    int64 channel_id = 2;
    LayoutState layout = 3;
    repeated LinkUserState states = 4;
    BackGroundImageState back_ground_image = 5;
    WallpaperImageState wallpaper_image = 6;
    repeated PosIdentity ui_pos = 7;

}

message PreviewCommentItem {
    int64 id = 1;
    string content = 2;
    int32 item_type = 3;

}

message CompetitionInfoResponse {
    CompetitionInfo data = 1;

}

message SubGoalContribution {
    string id = 1;
    int64 contribution_count = 2;

}

message WebcastQuestionSwitchMessage {
    CommonMessageData base_message = 1;
    bool on = 2;

}

message BattleNoticeRuleGuide {
    BattleNoticeText content = 1;
    BattleNoticeText button_content = 2;
    string rule_url = 3;
    bool except_anchor = 4;
    Text content_text = 5;
    Text button_content_text = 6;

}

message WebcastLiveInfoAuditNoticeMessage {
    CommonMessageData base_message = 1;
    optional LiveInfoAuditContentType audit_content_type = 2;
    AuditStatus audit_status = 3;
    string text_starling_key = 4;

    enum LiveInfoAuditContentType {
        LIVE_INFO_AUDIT_CONTENT_TYPE_TITLE = 0;
        LIVE_INFO_AUDIT_CONTENT_TYPE_COVER = 1;
        LIVE_INFO_AUDIT_CONTENT_TYPE_ABOUT_ME = 2;}
    enum LiveInfoAuditStatus {
        LIVE_INFO_AUDIT_STATUS_ONGOING = 0;
        LIVE_INFO_AUDIT_STATUS_PASS = 1;
        LIVE_INFO_AUDIT_STATUS_UNKNOWN = 2;
        LIVE_INFO_AUDIT_STATUS_REJECT = 3;}
}

message BcToggleInfo {
    int32 status = 1;
    string toggle_text = 2;
    int32 show_interval = 3;

}

message GiftTrayInfo {
    ImageModel m_dynamic_img = 1;
    bool can_mirror = 2;
    ImageModel tray_normal_bg_img = 3;
    repeated string tray_normal_bg_color = 4;
    ImageModel tray_small_bg_img = 5;
    repeated string tray_small_bg_color = 6;
    Text right_tag_text = 7;
    ImageModel right_tag_bg_img = 8;
    repeated string right_tag_bg_color = 9;
    string tray_name_text_color = 10;
    string tray_desc_text_color = 11;
    string right_tag_jump_schema = 12;

}

message LinkmicUserToastContent {
    int64 user_id = 1;
    int64 room_id = 2;
    Text display_text = 3;
    int64 leaved_user_id = 4;

}

message FollowInfo {
    int64 following_count = 1;
    int64 follower_count = 2;
    int64 follow_status = 3;
    int64 push_status = 4;

}

message ToolBarManagement {
    repeated int32 mergingmorepriority = 1;

}

message BattleNoticeBubbleGuide {
    BattleNoticeText content = 1;

}

message JoinDirectResp {
    RTCExtraInfo rtc_info = 2;
    string self_link_mic_id = 3;
    MicPositionData position = 4;
    AllListUser all_users = 5;
    BizJoinDirectResponse multi_guest_resp_extra = 9527;

}

message GetUserPlaySettingsResponse {
    ResponseData data = 1;

    message ResponseData {
        map<string, int64> settings_map = 1;

    }
}

message LinkerEnlargeStatusSynContent {
    int32 is_enlarge = 1;
    string enlarge_linkmic_id = 2;
    Scene scene = 3;
    string target_linkmic_id = 4;
    LinkerMediaChangeOperator operator_info = 5;
    string layout_id = 6;
    repeated string linked_user_ui_positions = 7;

    enum EnlargeScreenScene {
        ENLARGE_SCREEN_SCENE_ENLARGE_UNKNOWN = 0;
        ENLARGE_SCREEN_SCENE_ENLARGE_HOST_SCREEN = 1;
        ENLARGE_SCREEN_SCENE_INVITE_ENLARGE_GUEST_SCREEN = 2;
        ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_HOST = 3;
        ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_GUEST = 4;
        ENLARGE_SCREEN_SCENE_HOST_RECEIVE_CANCEL_ENLARGE = 5;
        ENLARGE_SCREEN_SCENE_GET_ENLARGE_STATUS = 6;
        ENLARGE_SCREEN_SCENE_ENLARGE_POSITION = 7;
        ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_POSITION = 8;
        ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_ALL = 9;
        ENLARGE_SCREEN_SCENE_CHANGE_ENLARGE_RECORD = 10;}
}

message WebcastLinkMicBattleVictoryLap {
    CommonMessageData base_message = 1;
    int32 play_type = 2;
    BattleTruthOrDareTriggerGuide battle_truth_or_dare_trigger_guide = 3;
    BattleTruthOrDareTips play_tips = 4;
    BattleTruthOrDareOptOutNotice truth_or_dare_close_notice = 5;
    BattleTruthOrDareTriggerGuideV2 trigger_guide_v2 = 6;
    string anchor_region = 10;
    int64 battle_id = 11;

}

message JoinChannelResp {
    LinkLayerListUser link_layer_list_user = 2;
    BizJoinChannelResponse multi_guest_resp_extra = 9527;

}

message RoomAuthMessage {
    RoomAuthMessageGoldenEnvelope golden_envelope = 1;
    PromoteOtherMessage promote_other_message = 2;

}

message RoomBasedGiftData {
    map<int64, RoomBasedGifts> room_based_gifts = 2;

    message GiftInfo {
        int64 id = 1;
        int64 price = 2;

    }
    message RoomBasedGifts {
        repeated GiftInfo gift_info = 1;

    }
}

message LinkerCreateContent {
    int64 owner_id = 1;
    int64 owner_room_id = 2;
    int64 link_type = 3;

}

message PaidEvent {
    int64 event_id = 1;
    optional PaidType paid_type = 2;

    enum PaidType {
        PAID_TYPE_FREE = 0;
        PAID_TYPE_PAID = 1;}
}

message BattleDisplayConfig {
    int32 threshold = 1;
    string text = 2;
    int32 diff_threshold = 3;
    string diff_text = 4;
    ExemptStrategy exempt_strategy = 5;

}

message QuizQuestionInfo {
    MessageType message_type = 1;
    string quiz_id = 2;
    int32 quiz_type = 3;
    string extra = 4;
    int32 participants_count = 5;
    string question_id = 6;
    int32 question_no = 7;
    int32 question_count = 8;
    int32 question_type = 9;
    string title = 10;
    repeated QuizImage image = 11;
    repeated QuizQuestionOption options = 12;
    string reward_amount = 15;
    int32 question_duration_ms = 16;
    repeated QuizNextQuiz next_quiz = 17;
    string sponsor_code = 18;
    int32 display_duration_ms = 19;
    string extra1 = 51;
    string extra2 = 52;
    string extra3 = 53;
    string extra4 = 54;
    string extra5 = 55;

}

message QuizCallUpWebview {
    MessageType message_type = 1;
    string quiz_id = 2;
    int32 quiz_type = 3;
    string extra = 4;
    int32 user_data_version = 5;
    string sponsor_code = 6;
    int32 display_duration_ms = 7;
    string extra1 = 51;
    string extra2 = 52;
    string extra3 = 53;
    string extra4 = 54;
    string extra5 = 55;

}

message GiftActivityCreator {
    string area_schema = 1;
    int64 start_time = 2;
    int64 end_time = 3;
    string title = 4;
    string sub_title = 5;
    string background_color = 6;
    ImageModel background = 7;
    repeated int64 gift_ids = 8;
    string target_schema = 9;
    int64 event_id = 10;
    string event_name = 11;
    string entrance_name = 12;
    int64 height = 13;
    ImageModel background_rtl = 14;
    map<int64, GiftPanelCardletByCreator> override_gift_cardlets = 16;
    int32 banner_type = 17;
    string extra = 18;

}

message AgeRestrictedConfig {
    bool show = 1;
    bool disabled = 2;
    string disabled_reason = 3;
    bool open = 4;

}

message MemberInfo {
    int64 user_id = 1;
    bool is_staged = 2;
    string nickname = 3;
    ImageModel avatar = 4;

}

message HighlightFragmentInfo {
    repeated LiveFragmentDetail fragment_list = 1;

}

message GiftInfoInBox {
    int64 gift_id = 1;
    int64 effect_id = 2;
    int64 color_id = 3;
    int32 remain_times = 4;
    AssetsModel asset = 5;

}

message PollConf {
    PollCountLimit gift_poll_limit = 1;
    bool use_new_gift_poll = 2;
    int64 poll_template_optimize_group = 3;

}

message RTCLiveVideoParam {
    int32 strategy_id = 1;
    RTCVideoParam server_define_param = 2;

}

message HeatUpdateContent {
    int64 channel_id = 1;
    int64 from_user_id = 2;
    int64 updated_heat = 3;
    int32 update_source = 4;

}

message MGetABInfosReq {
    repeated string cdid_list = 1;
    int64 linkmic_scene = 2;

}

message CohostABTest {
    optional CohostABTestType ab_test_type = 1;
    int64 group = 2;

    enum CohostABTestType {
        COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_UNKNOWN = 0;
        COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_LINK_TIME_OUT_STRATEGY = 1;
        COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_RESERVATION = 2;
        COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_QUICK_PAIR_NEW_ARCH_SWITCH = 3;
        COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_INVITATION_TEXT = 4;}
}

message RealtimeLiveCenterShopData {
    bool show_shop_data = 1;
    string revenue_amount = 2;
    int64 unit_sales = 3;
    int64 buyers = 6;

}

message CountdownStartResponse {
    ResponseData data = 1;

    message ResponseData {
        bool countdown_exists = 1;
        CountdownContent countdown_content = 2;

    }
}

message IntroConflictInfo {
    string content = 1;

}

message WebcastCommonToastMessage {
    CommonMessageData base_message = 1;
    bool discardable = 2;
    bool immediate = 3;
    int32 duration = 4;
    string text_color = 5;
    string background_color_start = 6;
    string background_color_end = 7;
    int32 position = 8;
    ImageModel top_image = 9;
    int32 image_width = 10;
    int32 image_height = 11;
    bool show_mongolia_layer = 12;

}

message GiftMonitorInfo {
    int64 anchor_id = 1;
    int64 profit_api_message_dur = 2;
    int64 send_gift_profit_api_start_ms = 3;
    int64 send_gift_profit_core_start_ms = 4;
    int64 send_gift_req_start_ms = 5;
    int64 send_gift_send_message_success_ms = 6;
    int64 send_profit_api_dur = 7;
    int64 to_user_id = 8;
    int64 send_gift_start_client_local_ms = 9;
    string from_platform = 10;
    string from_version = 11;

}

message PlayTogetherMember {
    string user_id = 1;
    string avatar = 2;
    string nick_name = 3;
    string apply_message = 4;
    int64 apply_time = 5;
    int64 accept_time = 6;
    string relation_tag = 7;
    optional PlayTogetherRelationTag relation_tag_enum = 8;

    enum PlayTogetherRelationTag {
        PLAY_TOGETHER_RELATION_TAG_UNKNOWN = 0;
        PLAY_TOGETHER_RELATION_TAG_FRIEND = 1;
        PLAY_TOGETHER_RELATION_TAG_SUBSCRIBER = 2;
        PLAY_TOGETHER_RELATION_TAG_TEAM_MEMBER = 3;}
}

message LinkUserState {
    Player user = 1;
    string linkmic_id = 2;
    MicPositionData pos = 3;
    int64 linked_time_nano = 4;
    optional OnlineUserState online_user_state = 5;
    optional MediaState audio_muted = 6;
    optional MediaState video_muted = 7;
    optional RtcConnectionState rtc_connection = 8;
    optional NetworkState network_state = 9;
    AvatarState avatar = 10;

    enum OnlineUserState {
        ONLINE_USER_STATE_STATE_UNDEFINED = 0;
        ONLINE_USER_STATE_STATE_NORMAL = 1;
        ONLINE_USER_STATE_STATE_PAUSED = 2;}
    enum RtcConnectionState {
        RTC_CONNECTION_STATE_STATE_RT_C_UNDEFINED = 0;
        RTC_CONNECTION_STATE_STATE_RT_C_NORMAL = 1;
        RTC_CONNECTION_STATE_STATE_RT_C_DISCONNECT = 2;}
    enum MediaState {
        MEDIA_STATE_MEDIA_UNDEFINED = 0;
        MEDIA_STATE_MEDIA_NORMAL = 1;
        MEDIA_STATE_MEDIA_MUTED = 2;
        MEDIA_STATE_MEDIA_UN_MUTE_OCCUPIED = 3;
        MEDIA_STATE_MEDIA_MUTED_OCCUPIED = 4;}
    enum NetworkState {
        NETWORK_STATE_STATE_NETWORK_UNDEFINED = 0;
        NETWORK_STATE_STATE_NETWORK_EXCELLENT = 1;
        NETWORK_STATE_STATE_NETWORK_GOOD = 2;
        NETWORK_STATE_STATE_NETWORK_POOR = 3;
        NETWORK_STATE_STATE_NETWORK_BAD = 4;
        NETWORK_STATE_STATE_NETWORK_V_BAD = 5;
        NETWORK_STATE_STATE_NETWORK_DOWN = 6;}
}

message PermitJoinGroupResp {
    LinkMicCommonResp common_resp = 1;
    repeated RTCExtraInfo group_rtc_info = 2;
    GroupChannelAllUser group_user = 3;
    repeated string linked_user_ui_positions = 4;
    BizPermitJoinGroupResponse cohost_resp_extra = 9527;

}

message ApplyBizContent {
    User user = 1;

}

message InviteContent {
    Player inviter = 1;
    RTCExtraInfo invitee_r_t_c_info = 2;
    string inviter_link_mic_id = 3;
    string invitee_link_mic_id = 4;
    bool is_owner = 5;
    MicPositionData position_data = 6;
    DSLConfig dsl = 7;
    Player invitee = 8;
    Player operator = 9;

}

message GoLiveECIconInfo {
    bool has_ec_live_permission = 1;
    bool is_old_red_dot_logic = 2;
    bool display_ec_icon = 3;
    bool display_red_dot = 4;
    bool independent_display_ec_icon = 5;
    string bubble_text = 6;
    BubbleMetadata bubble_metadata = 7;

}

message GeckoAttr {
    string gecko_channel = 1;
    string file_name = 2;

}

message WebcastToastMessage {
    CommonMessageData base_message = 1;
    int64 display_duration = 2;
    int64 delay_duration = 3;
    Scene scene = 4;

}

message PopupStateChangeContent {
    repeated JoinGroupMessageExtra.RivalExtra other_users = 2;

}

message WebcastDonationStickerModifyMethod {
    CommonMessageData base_message = 1;
    repeated DonationSticker decoration_list = 2;

}

message LinkerCancelContent {
    int64 inviter_uid = 1;
    int64 invitee_uid = 2;
    int32 cancel_type = 3;

}

message GameLiveConvertInfo {
    int32 convert_type = 1;
    int32 acu_type = 2;
    string title = 3;
    string text = 4;

}

message WebcastRoomMessage {
    CommonMessageData base_message = 1;
    string content = 2;
    bool supprot_landscape = 3;
    int32 source = 4;
    ImageModel icon = 5;
    Scene scene = 6;
    bool is_welcome = 7;
    PublicAreaMessageCommon public_area_common = 8;
    int64 show_duration_ms = 9;
    string sub_scene = 10;

}

message PrivilegePrompt {
    string text = 1;
    map<string, PrivilegePlaceholder> placeholder_map = 2;

}

message KickOutContent {
    Player left_user = 1;
    optional KickoutReason kick_out_reason = 2;
    repeated string linked_user_ui_positions = 3;
    repeated PosIdentity ui_pos = 4;

    enum KickoutReason {
        KICKOUT_REASON_KICK_OUT_REASON_UNKNOWN = 0;
        KICKOUT_REASON_KICK_OUT_REASON_FIRST_FRAME_TIME_OUT = 1;
        KICKOUT_REASON_KICK_OUT_REASON_BY_HOST = 2;
        KICKOUT_REASON_KICK_OUT_REASON_RT_C_LOST_CONNECTION = 3;
        KICKOUT_REASON_KICK_OUT_REASON_BY_PUNISH = 4;
        KICKOUT_REASON_KICK_OUT_REASON_BY_ADMIN = 5;
        KICKOUT_REASON_KICK_OUT_REASON_HOST_REMOVE_ALL_GUESTS = 6;}
}

message WebcastPollMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    int64 poll_id = 3;
    PollStartContent start_content = 4;
    PollEndContent end_content = 5;
    PollUpdateVotesContent update_content = 6;
    optional PollKind poll_kind = 7;
    PollBasicInfo poll_basic_info = 8;
    TemplateContent template_content = 9;

    enum PollKind {
        POLL_KIND_NORMAL = 0;
        POLL_KIND_GIFT = 1;
        POLL_KIND_CUSTOMIZABLE = 2;
        POLL_KIND_CUSTOMIZABLE_GIFT = 3;
        POLL_KIND_QUICK_GIFT = 4;
        POLL_KIND_EMOTE = 5;}
}

message WebcastHighlightFragementReady {
    CommonMessageData base_message = 1;
    GameLiveFragment game_live_fragment = 2;

}

message GuestShowdownFinishToPunishmentParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 play_id = 3;

}

message GetShowContentParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 show_id = 3;

}

message GuessRound {
    GuessText title = 1;
    string round_id_str = 2;
    repeated GuessOptions guess_options = 3;
    string win_option = 4;
    int64 start_time = 5;
    int64 end_time = 6;
    optional GuessStatus guess_status = 7;
    string room_id_str = 8;
    int64 live_id = 9;
    GuessRoundStats guess_round_stats = 10;
    string corrected_option = 11;
    string anchor_id = 12;
    string creator_id = 13;
    string operator_id = 14;
    string operator_name = 15;
    int64 settle_finish_time = 16;
    bool is_auto_pin = 17;
    int64 server_time = 100;

    enum GuessStatus {
        GUESS_STATUS_BETTING = 0;
        GUESS_STATUS_STOP_BETTING = 1;
        GUESS_STATUS_SETTLING = 2;
        GUESS_STATUS_SETTLED = 3;
        GUESS_STATUS_INVALID = 20;}
}

message CountdownGetContentParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    repeated int64 countdown_ids = 3;

}

message FollowGuideResponse {
    ResponseData data = 1;
    Extra extra = 2;

    message ResponseData {
        bool is_display = 1;
        repeated int64 display_list = 2;

    }
    message Extra {
        int64 now = 1;

    }
}

message AnchorSettingsResponse {
    ResponseData data = 1;

    message ResponseData {
        RoomBasicSettings settings = 1;
        UserStats user_stats = 3;

    }
}

message BadgeText {
    string key = 1;
    string default_pattern = 2;
    repeated string pieces = 3;

}

message CommercialContentToggle {
    bool open_commercial_content_toggle = 1;
    bool promote_myself = 2;
    bool promote_third_party = 3;

}

message RegionalRestricted {
    repeated string block_list = 1;

}

message QueueInfo {
    string queue_id = 1;
    int32 status = 2;
    string queue_title = 3;
    int64 member_count = 4;
    string current_user_id = 5;
    int32 join_status = 6;

}

message GuestShowdownCloseResponse {
    ResponseData data = 1;

    message ResponseData {
        bool success = 1;
        GuestShowdownContent play_content = 2;

    }
}

message WebcastGiftPromptMessage {
    CommonMessageData base_message = 1;
    string title = 2;
    string body = 3;
    int32 block_num_days = 4;
    string order_id = 5;
    int64 order_timestamp = 6;

}

message TopicSetContent {
    int32 action = 1;
    int64 channel_id = 2;
    int64 set_user_id = 3;
    int64 set_succ_time = 4;
    int32 enter_scene = 5;

}

message ApplyRequestResponse {
    RTCExtraInfo rtc_info = 2;
    string applicant_link_mic_id = 3;
    BizApplyResponse multi_guest_resp_extra = 9527;

}

message AssetsModel {
    string name = 1;
    string resource_uri = 2;
    ResourceModel resource_model = 4;
    string describe = 5;
    int64 id = 6;
    int32 resource_type = 7;
    string md5 = 8;
    int64 size = 9;
    LokiExtraContent loki_extra_content = 10;
    int32 download_type = 26;
    ResourceModel resource_byte_v_c1_model = 28;
    string bytevc1_md5 = 29;
    repeated VideoResource video_resource_list = 30;
    FaceRecognitionMeta face_recognition_archive_meta = 31;
    string lynx_url_settings_key = 32;
    int32 downgrade_resource_type = 33;
    AssetExtra asset_extra = 34;
    int32 sticker_asset_variant = 35;
    bool immediate_download = 36;
    int32 sticker_asset_variant_reason = 37;

}

message LinkerKickOutContent {
    int64 from_uid = 1;
    optional KickoutReason kick_out_reason = 2;

    enum KickoutReason {
        KICKOUT_REASON_KICK_OUT_REASON_UNKNOWN = 0;
        KICKOUT_REASON_KICK_OUT_REASON_FIRST_FRAME_TIME_OUT = 1;
        KICKOUT_REASON_KICK_OUT_REASON_BY_HOST = 2;
        KICKOUT_REASON_KICK_OUT_REASON_RT_C_LOST_CONNECTION = 3;
        KICKOUT_REASON_KICK_OUT_REASON_BY_PUNISH = 4;
        KICKOUT_REASON_KICK_OUT_REASON_BY_ADMIN = 5;
        KICKOUT_REASON_KICK_OUT_REASON_HOST_REMOVE_ALL_GUESTS = 6;}
}

message UserPlayInfo {
    int64 play_id = 1;
    optional PlayScene play_scene = 2;
    int64 score = 3;
    int32 rank = 4;
    int64 target_score = 5;
    optional PlayUserTag user_tag = 6;

    enum PlayScene {
        PLAY_SCENE_UNKNOWN = 0;
        PLAY_SCENE_COUNTDOWN_FOR_ALL = 1;
        PLAY_SCENE_COUNTDOWN_FOR_SINGLE = 2;
        PLAY_SCENE_LIVE_SHOW = 3;
        PLAY_SCENE_AIG_C = 4;
        PLAY_SCENE_KARAOKE = 5;
        PLAY_SCENE_DRAW_GUESS = 6;
        PLAY_SCENE_ENLARGE_GRID = 7;
        PLAY_SCENE_GIFT_PRIORITY_LINK = 8;
        PLAY_SCENE_GIFT_THRESHOLD_LINK = 9;
        PLAY_SCENE_NOTICE_BOARD = 10;
        PLAY_SCENE_PLAY_BOOK = 11;
        PLAY_SCENE_GUEST_SHOWDOWN = 12;}
    enum PlayUserTag {
        PLAY_USER_TAG_UNKNOWN = 0;
        PLAY_USER_TAG_GUEST_SHOWDOWN_NORMAL = 1;
        PLAY_USER_TAG_GUEST_SHOWDOWN_WINNER = 2;
        PLAY_USER_TAG_GUEST_SHOWDOWN_LOSER = 3;}
}

message ToplivePageItem {
    string item_id = 1;
    string item_name = 2;
    repeated ToplivePageItem sub_items = 3;
    Room room = 10;
    string enter_method = 11;
    int32 related_live_number = 12;
    string default_bg_url = 13;
    string light_bg_url = 14;
    string dark_bg_url = 15;
    string default_bg_color = 16;
    string card_title = 17;
    string card_type = 18;
    int32 match_degree = 19;
    string light_bg_color = 20;
    string dark_bg_color = 21;

}

message GraceInfo {
    bool is_in_grace_period = 1;
    int64 grace_end_time = 2;
    bool is_package_deleted = 3;

}

message PopProduct {
    string title = 1;
    string price = 2;
    string image_url = 3;
    string open_url = 4;
    string product_type = 5;
    int64 product_id = 6;
    string source = 7;
    int32 source_from = 8;
    string schema = 9;
    int32 platform = 10;
    int32 product_status = 11;

}

message GetShowSettingsResponse {
    ResponseData data = 1;

    message ResponseData {
        ShowConfig show_settings = 1;

    }
}

message CompetitionContributorListResponse {
    ResponseData data = 1;

    message AnchorInfo {
        int64 user_id = 1;
        int64 score = 2;
        string formatted_score = 3;

    }
    message UserInfo {
        User user = 1;
        int64 score = 2;
        string formatted_score = 3;

    }
    message ResponseData {
        repeated UserInfo users = 1;
        AnchorInfo anchor_info = 2;

    }
}

message TaxonomyTagInfo {
    repeated string level1_tag = 1;
    string level2_tag = 2;

}

message VoteUser {
    int64 user_id = 1;
    string nick_name = 2;
    ImageModel avatar_thumb = 3;
    int64 vote_count = 4;

}

message BarrageTypeUserGradeParam {
    int32 current_grade = 1;
    int32 display_config = 2;
    string user_id = 3;
    User user = 4;

}

message UnifyBaseActionData {
    int32 unify_base_id = 1;
    string name = 2;
    string business_id = 3;
    int32 action = 4;

}

message LiveGiftBoostCardRoomStatus {
    bool m_is_boosting = 1;
    int64 m_expired_time = 2;
    int64 m_card_id = 3;
    string m_card_id_str = 4;
    string m_task_id = 5;
    int64 m_task_source = 6;
    string m_image_path = 7;

}

message AnchorPair {
    int64 source_anchor_id = 1;
    int64 target_anchor_id = 2;

}

message BattleOptPair {
    OptPairInfo opt_pair_info = 1;
    repeated Room self_team_room_list = 2;
    repeated Room rival_team_room_list = 3;
    int32 play_type = 4;
    int32 invite_block_reason = 5;
    map<int64, bool> is_in_linkmic = 6;
    repeated int64 request_room_list = 7;

}

message LinkmicAudienceInviteGroupChatMemberGuide {
    repeated int64 group_member_user_ids = 3;

}

message TeamUser {
    int64 team_id = 1;
    repeated int64 user_ids = 2;

}

message MultiLiveContent {
    ApplyBizContent apply_i_m_content = 1;
    InviteBizContent invite_i_m_content = 2;
    ReplyBizContent reply_i_m_content = 3;
    PermitBizContent permit_i_m_content = 4;
    JoinDirectBizContent join_direct_i_m_content = 5;
    KickOutBizContent kick_out_biz_content = 6;

}

message ContentDisclosureSettings {
    int32 open_commercial_content_toggle = 1;
    int32 promote_myself = 2;
    int32 promote_third_party = 3;

}

message WebcastForceFetchRecommendationsMessage {
    CommonMessageData base_message = 1;
    repeated int64 reasons = 10;
    int64 fetch_within_ms = 11;
    string strategy_context = 100;

}

message AboutMe {
    string id = 1;
    AuditStatus audit_status = 2;
    bool switch_status = 3;
    User user = 4;
    ImageModel image = 5;
    repeated AboutMeTemplate template_list = 6;
    string current_template_id = 7;
    AuditInfo audit_info = 8;

    message AuditInfo {
        int64 violation_id = 1;
        int64 task_type = 2;

    }
}

message FeedItem {
    int32 type = 1;
    string res_id = 2;
    FeedBannerContainer banner_container = 6;
    bool is_recommend_card = 9;
    string live_reason = 13;
    string debug_info = 16;
    FlareInfo flare_info = 17;
    int32 anchor_relation_type = 18;
    bool is_fresh = 19;
    string drawer_game_tag = 20;
    EventStruct live_event = 21;
    string unfollow_watch_type_name = 22;
    SortStatsTags sort_stats_tags = 23;
    string room_event_tracking = 24;
    string enter_method = 25;

}

message WebcastGameGuessPinCardMessage {
    CommonMessageData base_message = 1;
    PinCardView view = 2;

}

message DynamicRestriction {
    SceneRestriction scenes = 1;
    repeated ReceiverRestriction receivers = 2;

}

message PlaybookEditorInfo {
    string editor_type = 1;
    int64 version = 2;

}

message BizApplyResponseData {
    int64 link_type_permission = 1;
    WebcastPerceptionMessage perception_info = 2;
    WebcastPerceptionMessage host_perception_info = 3;

}

message BattleTriggerGuideResponse {
    ResponseData data = 1;

    message ResponseData {

    }
}

message WebcastLinkLayoutMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    int64 room_id = 3;
    int64 channel_id = 4;
    string layout_id = 5;
    int32 max_position = 6;
    LinkerMediaChangeOperator operator_user_info = 7;

}

message LinkerAcceptNoticeContent {
    int64 from_user_id = 1;
    int64 from_room_id = 2;
    int64 to_user_id = 3;

}

message WebcastGameOCRPingMessage {
    CommonMessageData base_message = 1;
    int64 ping_value = 2;
    bool is_game = 3;
    string game_fusion_label = 4;
    int64 ping_timestamp = 5;
    double confidence = 6;

}

message SpecialEffectCardInfo {
    string card_name_key = 1;
    ImageModel card_image = 2;
    int64 send_time_sec = 3;
    BattleUserInfo send_user = 4;
    int64 effect_last_duration = 5;
    string rule_url = 6;
    int64 effect_time_sec = 7;
    int64 to_anchor_id = 8;
    string to_anchor_id_str = 9;

}

message MsgNotifyComponentAvoidRuleV2 {
    int32 component_type = 1;
    int32 sub_component_type = 2;
    bool can_be_interrupt = 3;
    MsgNotifyComponentRecoverInfo first_recover_info = 4;
    MsgNotifyComponentRecoverInfo interrupt_recover_info = 5;
    int32 max_active_count = 6;
    int64 priority = 7;
    repeated string avoid_scene = 8;
    int64 recover_threshold_ms = 9;
    int64 max_recover_remain_ms = 10;

}

message WallpaperContent {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 wallpaper_id = 3;
    int32 status = 4;
    int64 send_timestamp = 5;
    int64 play_user_id = 6;
    string wallpaper_url = 7;
    repeated WallpaperContext finished_user_list = 8;
    repeated WallpaperContext play_user_list = 9;

}

message WebcastAnchorGrowLevelMessage {
    CommonMessageData base_message = 1;
    AnchorGrowLevelImMsg anchor_grow_level_im_msg = 2;
    AnchorGrowLevelImMsgV2 anchor_grow_level_im_msg_v2 = 3;

}

message RefreshLiveBagInfo {
    repeated int32 refresh_live_bag_types = 1;

}

message FirstChargeGuideEffectRule {
    bool guide_effect_rule = 1;
    repeated int32 enter_room_show_time = 2;
    int32 pk_room_show_time = 3;

}

message RoomBasicSettings {
    CommentSwitchSettings comment_switch_settings = 1;
    ContentDisclosureSettings content_disclosure_settings = 2;
    AgeRestrictionSettings age_restriction_settings = 3;

}

message BattleBaseUserInfo {
    int64 user_id = 1;
    string nick_name = 2;
    ImageModel avatar_thumb = 3;
    string display_id = 4;

}

message LinkerReplyContent {
    int64 inviter_uid = 1;
    int64 inviter_room_id = 2;
    LinkmicInfo inviter_linkmic_info = 3;
    int64 invitee_uid = 4;
    LinkmicInfo invitee_linkmic_info = 5;
    int64 link_type = 6;
    ReplyStatus reply_status = 7;
    LinkerSetting linker_setting = 8;
    User inviter_user = 9;
    User invitee_user = 10;
    map<int64, string> rtc_ext_info_map = 11;
    LinkerMicIdxUpdateInfo invitee_mic_idx_update_info = 12;
    map<int64, int64> applier_mic_idx_info_map = 13;
    optional LinkmicMultiLiveEnum multi_live_layout_enable = 14;
    MultiLiveAnchorPanelSettings multi_live_setting = 15;
    int64 action_id = 16;
    repeated LinkmicUserInfo linked_users = 17;
    int64 source_type = 18;

    enum LinkmicMultiLiveEnum {
        LINKMIC_MULTI_LIVE_ENUM_DEFAULT = 0;
        LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT = 1;}
}

message CountdownForAllUser {
    int64 user_id = 1;
    string linkmic_id = 2;
    int64 score = 3;
    int32 rank = 4;
    User user = 5;
    string nickname = 6;
    string display_id = 7;
    ImageModel avatar_thumb = 8;

}

message SubOperation {
    optional SubOperationType operation_type = 1;
    int64 operation_time = 2;

    enum SubOperationType {
        SUB_OPERATION_TYPE_OPERATION_TYPE_UNKNOWN = 0;
        SUB_OPERATION_TYPE_OPERATION_TYPE_NEW_SUBSCRIPTION = 1;
        SUB_OPERATION_TYPE_OPERATION_TYPE_SINGLE_RENEWAL = 2;
        SUB_OPERATION_TYPE_OPERATION_TYPE_AUTO_RENEWAL = 3;
        SUB_OPERATION_TYPE_OPERATION_TYPE_UPGRADE = 4;
        SUB_OPERATION_TYPE_OPERATION_TYPE_CANCELLATION = 5;}
}

message BarrageTypeSubscribeGiftParam {
    int64 gift_sub_count = 1;
    bool show_gift_sub_count = 2;
    optional GiftSource gift_source = 3;

    enum GiftSource {
        GIFT_SOURCE_UNKNOWN = 0;
        GIFT_SOURCE_PLATFORM = 1;
        GIFT_SOURCE_USER_BUY_RANDOM = 2;
        GIFT_SOURCE_USER_BUY_SPECIFIC = 3;}
}

message CountdownForAllConfig {
    int64 duration = 1;
    int64 target_score = 2;

}

message CompetitionFinish {
    int64 competition_finish_time = 1;
    optional CompetitionEndReason reason = 2;
    CompetitionUserBase leave_user = 3;

    enum CompetitionEndReason {
        COMPETITION_END_REASON_UNKNOWN = 0;
        COMPETITION_END_REASON_NORMAL = 1;
        COMPETITION_END_REASON_CUT_SHORT = 2;}
}

message AnchorInfoResponse {
    ResponseData data = 1;

    message CameraPartnershipInfo {
        bool permission = 1;
        bool task_permission = 2;
        bool publish_permission = 3;

    }
    message DropsBrief {
        string drops_id = 1;
        string icon = 2;
        int64 begin_timestamp = 3;

    }
    message DropsEntrance {
        bool permission = 1;
        bool has_sign = 2;
        bool rewarded = 3;
        string icon = 4;
        int64 drops_count = 5;
        repeated DropsBrief recent_drops_briefs = 6;

    }
    message LabelFilterInfo {
        bool gpppa_account = 1;
        string gpppa_ban_text = 2;
        string gpppa_ban_toast = 3;

    }
    message PartnershipInfo {
        bool permission = 1;
        bool has_sign = 2;
        bool task_permission = 3;
        bool publish_permission = 4;
        int64 partnership_info_update_timestamp = 5;

    }
    message TaskPriceUpdate {
        string task_id = 1;
        int64 price_update_timestamp = 2;

    }
    message PunishInfo {
        string punish_text = 1;
        PunishEventInfo punish_event_info = 2;

    }
    message ToggleInfo {
        int64 game_tag_id = 1;
        int32 toggle_status = 2;

    }
    message ResponseData {
        repeated PunishInfo punish_info = 1;
        repeated TaskPriceUpdate price_update_list = 2;
        LabelFilterInfo label_filter_info = 3;
        bool taxpayoutconfirm = 4;
        repeated PartnershipGameEvent enable_event_list = 5;
        repeated PartnershipBriefDrops enable_drops_list = 6;
        int32 toggle_status = 7;
        bool shoot_permission = 8;
        bool business_partnership = 9;
        DropsEntrance drops_entrance = 10;
        PartnershipInfo partnership_info = 11;
        ToggleInfo toggle_info = 12;
        bool live_take_decouple = 13;
        CameraPartnershipInfo camera_partnership_info = 14;

    }
}

message TimerDetail {
    int64 timer_id = 1;
    int64 anchor_id = 2;
    int64 start_timestamp_s = 3;
    int64 start_countdown_time_s = 4;
    string anchor_side_title = 5;
    string user_side_title = 6;
    int64 time_increase_per_sub_s = 7;
    int64 time_increase_cap_s = 8;
    int32 sub_count = 9;
    bool time_increase_reach_cap = 10;
    int64 total_pause_time_s = 11;
    int64 last_pause_timestamp_s = 12;
    int64 total_time_s = 13;
    int64 remaining_time_s = 14;
    int64 timestamp_s = 15;
    int64 sticker_x = 16;
    int64 sticker_y = 17;
    int64 screen_w = 18;
    int64 screen_h = 19;
    optional TimerStatus timer_status = 20;
    optional AntidirtStatus antidirt_status = 21;
    AuditStatus audit_status = 22;
    AuditInfo audit_info = 23;

    enum AntidirtStatus {
        ANTIDIRT_STATUS_PASS = 0;
        ANTIDIRT_STATUS_FAILED = 1;}
    enum AuditStatus {
        AUDIT_STATUS_UNKNOWN = 0;
        AUDIT_STATUS_PASS = 1;
        AUDIT_STATUS_FAILED = 2;
        AUDIT_STATUS_REVIEWING = 3;
        AUDIT_STATUS_FORBIDDEN = 4;}
    enum TimerStatus {
        TIMER_STATUS_NOT_STARTED = 0;
        TIMER_STATUS_RUNNING = 1;
        TIMER_STATUS_PAUSED = 2;
        TIMER_STATUS_CANCELLED = 3;
        TIMER_STATUS_FINISHED = 4;}
    message AuditInfo {
        int64 violation_id = 1;
        optional AuditTaskType task_type = 2;

        enum AuditTaskType {
            AUDIT_TASK_TYPE_DEFAULT = 0;
            AUDIT_TASK_TYPE_APPEAL = 1;}
    }
}

message SpecifiedDisplayText {
    int64 uid = 1;
    Text display_text = 2;

}

message CompetitionSettlementStartResponse {
    ResponseData data = 1;

    message ResponseData {
        CompetitionCommon biz_common = 1;
        CompetitionSettleStart settle_start = 2;

    }
}

message CommonCardInfo {
    string card_name_key = 1;
    ImageModel card_image = 2;
    int64 send_time_sec = 3;
    BattleUserInfo send_user = 4;
    int64 effect_last_duration = 5;
    string rule_url = 6;
    int64 effect_time_sec = 7;
    int64 to_anchor_id = 8;
    string to_anchor_id_str = 9;

}

message GameGiftGuideKeywordsConfig {
    repeated GameGiftGuideKeyword game_gift_guide_keyword_config = 1;

}

message CountdownGetUserHistoryParams {
    int64 room_id = 1;
    int64 user_id = 2;

}

message ExemptStrategy {
    bool exempt_both_host = 1;
    int32 exempt_audience_top = 2;

}

message AggregationData {
    User audience = 1;
    repeated int32 successlist = 2;

}

message Panel {
    string text = 1;
    UrlDataStruct icon = 2;
    repeated string tags = 3;
    string tags_updated_at = 4;
    string extra = 5;

}

message CurrencyPriceItem {
    string currency = 1;
    string price_show_form = 2;
    int64 price = 3;
    int32 original_price = 4;
    int32 price_dot = 5;
    int32 keep_dot = 6;

}

message QuizFinalResult {
    MessageType message_type = 1;
    string quiz_id = 2;
    int32 quiz_type = 3;
    string extra = 4;
    repeated QuizRewardRule settled_reward = 5;
    repeated QuizNextQuiz next_quiz = 6;
    string reward_amount = 7;
    int32 question_count = 8;
    repeated QuizAnchorInfo anchor_list = 9;
    string sponsor_code = 10;
    int32 display_duration_ms = 11;
    string extra1 = 51;
    string extra2 = 52;
    string extra3 = 53;
    string extra4 = 54;
    string extra5 = 55;

}

message ChangeStateReq {
    StateReqCommon common = 1;
    int32 state_type = 2;
    int64 client_time = 3;
    LayoutState layout_state = 4;
    int32 online_user_state = 5;
    int32 audio_muted = 6;
    int32 video_muted = 7;
    int32 network_state = 8;
    string background_sticker_id = 9;
    int64 avatar_id = 10;

}

message WebcastCaptionMessage {
    CommonMessageData base_message = 1;
    int64 timestamp_ms = 2;
    int64 duration_ms = 3;
    repeated CaptionContent content = 4;
    int64 sentence_id = 5;
    int64 sequence_id = 6;
    bool definite = 7;

}

message AssetExtra {
    string effect_starling_key = 1;

}

message CampaignBannerDisplay {
    string image_url = 1;
    bool campaign_banner_is_display = 2;
    int32 source_from = 3;

}

message GetMultiGuestRecommendRoomsResponse {
    ResponseData data = 1;
    Extra extra = 2;

    message ResponseData {
        repeated MultiGuestRecommendRoomInfo reco_rooms = 1;
        bool is_rate_limited = 2;

    }
    message Extra {
        int64 now = 1;

    }
}

message GiftPollOption {
    int64 gift_id = 1;
    ImageModel result_image = 2;

}

message LinkInviteResult {
    int64 channel_id = 1;
    int32 vendor = 2;
    string channel_id_str = 3;
    Scene scene = 4;
    bool rtc_join_channel = 5;
    string rtc_ext_info = 6;
    string link_mic_id_str = 7;
    bool rtc_push_stream = 8;
    int64 action_id = 9;
    string rivals_link_mic_id_str = 10;
    int32 perception_status = 11;
    WebcastPerceptionMessage perception_message = 12;
    InviteExtra extra = 13;

}

message LyricStruct {
    int64 id = 1;
    int32 lyric_type = 2;
    string vid = 3;
    repeated string klyric_urls = 4;
    int32 lyric_status = 5;

}

message WebcastLinkMicSignalingMethod {
    CommonMessageData base_message = 1;
    string signal = 2;

}

message PanelRefresh {
    int64 price = 2;
    int64 to_user_id = 3;
    int64 room_id = 4;
    int64 timestamp = 5;
    Gallery gallery_data = 100;
    UserLevel user_level = 101;
    FanClub fan_club = 102;
    repeated Gallery all_gallery_data = 103;

    message FanClub {
        int64 time_to_sleep = 1;

    }
    message Gallery {
        int64 sponsor_id = 1;
        bool light_gift_up = 2;
        int64 left_count_to_sponsor = 3;
        bool can_sponsor = 4;
        int64 goal_count = 5;
        bool is_gallery_available = 6;
        int64 gift_id = 7;

    }
    message UserLevel {
        int64 current_score = 1;
        int64 current_level = 2;
        int64 score_left_to_level = 3;
        bool is_upgrade = 4;
        bool did_user_opt_out = 5;

    }
}

message BizCreateChannelResponseData {
    MultiLiveAnchorPanelSettings multi_live_anchor_panel_settings = 1;
    repeated LastLayoutSetting last_layout_settings = 5;
    string background_sticker_id = 6;
    int32 share_revenue_setting = 7;
    int32 display_empty_seat = 8;

}

message LinkedUserInfo {
    string layout_id = 1;
    int64 user_id = 2;
    int64 channel_id = 3;

}

message SkinHostAccount {
    ImageModel bg_image = 2;

}

message WebcastEnvelopePortalMessage {
    CommonMessageData base_message = 1;
    PortalInfo portal_info = 2;
    PortalTransTarget portal_trans_target = 3;
    int32 portal_view = 4;
    int32 portal_display = 5;

    message PortalInfo {
        string id = 1;
        string idc = 2;
        int32 send_at_second = 3;
        int32 ddl_second = 4;
        int32 envelope_diamonds = 5;
        int32 portal_diamonds = 6;
        string sender_display_id = 7;
        string sender_id = 8;
        ImageModel sender_avatar = 9;
        int32 trans_count = 10;
        int32 touch_count = 11;

    }
    message PortalTransTarget {
        string room_id = 1;
        ImageModel send_room_cover = 2;
        string anchor_display_id = 3;
        string anchor_id = 4;
        ImageModel anchor_avatar = 5;
        int32 envelope_diamonds = 6;

    }
}

message WebcastCohostReserveMessage {
    CommonMessageData base_message = 1;
    int32 reserve_type = 2;
    int64 reservation_id = 3;
    ReserveContent reserve_content = 4;
    ReplyContent reply_content = 5;

}

message MsgMeta {
    int64 source_operate_ms = 1;
    int64 server_send_ms = 2;
    repeated string reasons = 3;

}

message SubscriptionInfo {
    User user = 1;
    int32 total_subscribers = 2;
    int32 sub_months = 3;
    int32 subscription_type = 4;

    enum AuditStatus {
        AUDIT_STATUS_UNKNOWN = 0;
        AUDIT_STATUS_PASS = 1;
        AUDIT_STATUS_FAILED = 2;
        AUDIT_STATUS_REVIEWING = 3;
        AUDIT_STATUS_FORBIDDEN = 4;}
}

message CommerceStruct {
    int32 commerce_permission = 1;
    string oec_init_data_string = 2;
    bool async_load = 3;
    int64 product_num = 4;
    int32 use_new_promotion = 5;

}

message WebcastBALeadGenMessage {
    CommonMessageData base_message = 1;
    int32 op = 2;
    int64 page_id = 3;
    int64 op_time = 4;
    string cta_text = 5;
    string schema = 6;
    int32 pin_period = 7;
    string card_intro = 8;
    string card_button_text = 9;
    string card_title = 10;

}

message AnchorLiveReplayFrameResponse {
    ResponseData data = 1;

    message ResponseData {
        string req_id = 1;
        repeated FrameInfo frame_list = 2;

    }
}

message BattlePrompt {
    string prompt_key = 1;
    repeated BattlePromptElem prompt_elements = 2;

}

message GroupPlayer {
    int64 channel_id = 1;
    Player user = 2;

}

message WebcastLinkMicArmies {
    CommonMessageData base_message = 1;
    int64 battle_id = 2;
    map<int64, BattleUserArmies> armies = 3;
    int64 channel_id = 4;
    int64 gift_sent_time = 5;
    int64 score_update_time = 6;
    optional TriggerReason trigger_reason = 7;
    int64 from_user_id = 8;
    int64 gift_id = 9;
    int32 gift_count = 10;
    ImageModel gif_icon_image = 11;
    int32 total_diamond_count = 12;
    int32 repeat_count = 13;
    repeated BattleTeamUserArmies team_armies = 14;
    bool trigger_critical_strike = 15;
    bool has_team_match_mvp_sfx = 16;
    string log_id = 17;
    BattleSetting battle_settings = 18;
    HighScoreControlCfg fuzzy_display_config_v2 = 19;

    enum TriggerReason {
        TRIGGER_REASON_UNKNOWN = 0;
        TRIGGER_REASON_SCORE_UPDATE = 1;
        TRIGGER_REASON_BATTLE_END = 2;
        TRIGGER_REASON_OPT_OUT_UPDATE = 3;
        TRIGGER_REASON_KEEP_ALIVE = 4;}
}

message MultiGuestPushResp {

}

message SimpleUser {
    int64 user_id = 1;
    string nickname = 2;
    string display_id = 3;
    ImageModel avatar_thumb = 4;

}

message WallpaperReplyResponse {
    ResponseData data = 1;

    message ResponseData {
        bool result = 1;
        WallpaperContent wallpaper_content = 2;

    }
}

message StreamStatusChangeInfo {
    int64 stream_id = 1;
    int32 pre_status = 2;
    int32 cur_status = 3;
    int64 change_timestamp = 4;

}

message WebcastPictionaryEndMessage {
    CommonMessageData base_message = 1;
    int64 round_id = 2;
    string word = 3;
    int32 end_type = 4;
    int32 pictionary_type = 5;

}

message BEFViewRenderSize {
    int32 with = 1;
    int32 height = 2;

}

message StreamGoalData {
    LiveStreamGoalIndicator indicator = 1;
    LiveStreamGoal goal = 2;
    int32 update_source = 3;
    string goal_extra = 4;

}

message EnlargePositionStatusSynContent {
    int32 is_enlarge = 1;
    string target_position = 2;
    Scene scene = 3;
    LinkerMediaChangeOperator operator_info = 4;
    string layout_id = 5;
    repeated string linked_user_ui_positions = 6;
    repeated PosIdentity enlarged_positions = 7;

    enum EnlargeScreenScene {
        ENLARGE_SCREEN_SCENE_ENLARGE_UNKNOWN = 0;
        ENLARGE_SCREEN_SCENE_ENLARGE_HOST_SCREEN = 1;
        ENLARGE_SCREEN_SCENE_INVITE_ENLARGE_GUEST_SCREEN = 2;
        ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_HOST = 3;
        ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_GUEST = 4;
        ENLARGE_SCREEN_SCENE_HOST_RECEIVE_CANCEL_ENLARGE = 5;
        ENLARGE_SCREEN_SCENE_GET_ENLARGE_STATUS = 6;
        ENLARGE_SCREEN_SCENE_ENLARGE_POSITION = 7;
        ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_POSITION = 8;
        ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_ALL = 9;
        ENLARGE_SCREEN_SCENE_CHANGE_ENLARGE_RECORD = 10;}
}

message WebcastRoomNotifyMessage {
    CommonMessageData base_message = 1;
    string schema = 2;
    int64 notify_type = 3;
    string content = 4;
    User user = 5;
    RoomNotifyMessageExtra extra = 6;
    int32 notify_class = 7;
    repeated int64 flex_setting = 8;
    string source = 9;
    int64 from_user_id = 10;
    PrivilegeLogExtra log_extra = 11;
    int64 to_anchor_id = 12;
    EventTracking event_tracking = 13;

}

message GroupChangeContent {
    GroupChannelAllUser group_user = 1;
    repeated string linked_user_ui_positions = 2;

}

message ShowAgainGuestParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 show_id = 3;
    int64 target_user_id = 4;

}

message GameEmotesTab {
    bool can_use_guessing_emotes = 1;
    GameEmoteConfig game_emote_config = 2;
    EmoteListResult usable_guessing_emotes = 3;
    EmoteListResult unusable_guessing_emotes = 4;

}

message ActivitiesIconInfo {
    string activity_id = 1;
    ImageModel icon_image = 2;
    int64 ab_group = 3;
    string curren_phase = 4;

}

message BusinessContent {
    int64 over_length = 1;
    MultiLiveContent multi_live_content = 100;
    CohostContent cohost_content = 200;

}

message RandomGiftPanelBanner {
    ImageModel shading_image = 2;
    int64 target_num = 3;
    int64 collect_num = 4;
    string display_text = 5;
    ImageModel left_icon = 6;
    string schema_url = 7;
    repeated string bg_colors = 8;
    int64 round = 9;
    int32 banner_priority = 10;

}

message CohostStreamConfig {
    string screen_share_stream_id = 1;

}

message AnchorGrowLevelImMsgNotification {
    int64 level = 1;
    bool is_final_level = 2;
    bool is_complete_level = 3;
    int64 task_id = 4;
    string content = 5;
    string starling_key = 6;

}

message CheckPermissionResponse {
    bool multi_host_permission = 4;
    bool anchor_onboard_permit = 5;
    bool anchor_punished = 6;

}

message MultiGuestPlayInfo {
    bool pack_succ_flag = 1;
    map<int32, MultiGuestPlayConfig> play_scene_to_config_map = 2;

    message MultiGuestPlayConfig {
        int32 play_scene = 1;
        map<int32, int32> feature_config_map = 2;

    }
}

message WebcastFansEventMessage {
    CommonMessageData base_message = 1;
    User user = 2;
    optional FansEventType event_type = 11;
    FansLevelInfo fans_level_info = 12;
    FansLevelUpgradeInfo fans_level_upgrade_info = 13;
    FansEventData data = 21;

    enum FansEventType {
        FANS_EVENT_TYPE_UNKNOWN = 0;
        FANS_EVENT_TYPE_NEW_FANS = 1;
        FANS_EVENT_TYPE_EXP_CHANGE = 2;
        FANS_EVENT_TYPE_TASK_COMPLETE = 3;
        FANS_EVENT_TYPE_LEVEL_UPGRADE = 4;
        FANS_EVENT_TYPE_GET_UNCLAIMED_POINTS = 5;
        FANS_EVENT_TYPE_TEAM_RANK_UPDATE = 6;
        FANS_EVENT_TYPE_ENTRANCE_GUIDANCE = 7;
        FANS_EVENT_TYPE_FANS_LEVEL_UPGRADE = 8;
        FANS_EVENT_TYPE_REFRESH_TASK_PAGE = 1001;}
}

message CompetitionContributorInfo {
    CompetitionUserBase user = 1;
    int64 score = 2;
    ImageModel avatar = 3;

}

message LeaveRequestResponse {

}

message WarningTag {
    Text text = 1;
    int64 duration = 2;
    int32 tag_source = 3;
    PunishEventInfo punish_info = 4;
    int32 style = 5;
    string detail_url = 6;
    int32 icon_type = 7;

}

message BattleNoticeExtremeHighScoreNotice {
    int64 battle_id = 1;
    Text display_text_origin_viewers = 2;
    Text display_text_unrelated_viewers = 3;
    int64 extreme_high_score_threshold = 4;

}

message HotTag {
    string product_id = 1;
    int64 hot_count = 2;

}

message BattleInviteeGiftPermission {
    int64 user_id = 1;
    int32 gift_permission_type = 2;

}

message PreviewProductCardInfo {
    string recommend_info = 1;

}

message PlayTogetherListChangeContent {
    repeated PlayTogetherMember apply_list_members = 1;
    repeated PlayTogetherMember history_list_members = 2;

}

message AnchorMessage {
    int64 uid = 1;
    string link_mic_id = 2;
    int32 rtc_status = 3;
    int32 status = 4;
    int32 source = 5;

}

message ContentPosition {
    string content_i_d = 1;
    optional ContentPositionType content_type = 2;
    MicPositionData pos = 3;
    string content_linkmic_i_d = 4;
    int64 start_time_nano = 5;

    enum ContentPositionType {
        CONTENT_POSITION_TYPE_UNKNOWN = 0;
        CONTENT_POSITION_TYPE_STREAM = 1;
        CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT = 2;
        CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE = 3;}
}

message LiveFragmentDetail {
    VideoMetaInfo mp4_video_meta_info = 34;

}

message FlyingMicResources {
    ImageModel path_image = 1;
    ImageModel mic_image = 2;
    repeated TransitionConfig transition_configs = 3;

}

message AnchorGrowPerLiveTriggerResponse {
    Data data = 1;

    message Data {
        AnchorGrowLevelTriggerInfo anchor_grow_level_info = 1;

    }
}

message PushStreamInfo {
    Quality default_quality = 1;
    repeated Quality quality_list = 2;

    message Quality {
        string name = 1;
        string sdk_key = 2;
        string desc = 3;
        int64 width = 4;
        int64 height = 5;
        int64 max_bitrate = 6;
        int64 min_bitrate = 7;
        int64 default_bitrate = 8;
        int64 fps = 9;

    }
}

message CountdownStartParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    CountdownConfig countdown_config = 3;
    int64 user_id = 4;
    string linkmic_id = 5;

}

message PollCountLimit {
    int64 max_poll_count = 1;
    int64 current_poll_count = 2;
    bool unlimited = 3;

}

message TextBadge {
    optional BadgeDisplayType badge_display_type = 1;
    string key = 2;
    string default_pattern = 3;
    repeated string pieces = 4;

    enum BadgeDisplayType {
        BADGE_DISPLAY_TYPE_UNKNOWN = 0;
        BADGE_DISPLAY_TYPE_IMAGE = 1;
        BADGE_DISPLAY_TYPE_TEXT = 2;
        BADGE_DISPLAY_TYPE_STRING = 3;
        BADGE_DISPLAY_TYPE_COMBINE = 4;}
}

message ReserveInfo {
    int64 reservation_id = 1;
    bool is_reservation_sender = 2;
    int64 accept_appointment_cnts = 3;
    int64 reservation_anchor_cnts = 4;
    repeated ReserveUser display_user_list = 6;

    message ReserveUser {
        User user = 1;
        int64 room_id = 2;

    }
}

message BattleTaskGiftAmountGuide {
    BattlePrompt guide_prompt = 1;
    int32 prompt_type = 2;
    int32 disappear_duration = 3;
    ImageModel icon_image = 11;
    ImageModel gift_image = 12;
    int64 recommend_gift_id = 21;
    int32 recommend_gift_count = 22;
    Text guide_content = 23;

}

message ReqItem {
    Scene scene = 1;
    DispersionParam dispersion_param = 2;

}

message WebcastKaraokeQueueMessage {
    CommonMessageData base_message = 1;
    int32 type = 2;
    KaraokeSong song = 3;

}

message BattleTaskUpdate {
    int64 task_progress = 1;
    int64 from_user_uid = 2;
    string prompt_key = 3;
    string log_id = 21;

}

message LikeEffect {
    int64 version = 1;
    int64 effect_cnt = 2;
    int64 effect_interval_ms = 3;
    int64 level = 4;

}

message AnchorToolModification {
    int64 room_id = 1;
    int64 user_id = 2;
    int64 effect_id = 3;
    string name = 4;
    string resource_id = 5;
    int32 modification_type = 6;
    int64 role = 7;
    int32 msg_type = 8;
    int64 sub_type = 9;
    int64 start_time = 10;
    int64 end_time = 11;
    int64 duration = 12;
    string tab = 21;
    int64 mode = 22;
    int64 from = 23;
    double value = 24;
    string url = 25;
    Scene scene = 26;
    int64 status = 27;
    string content = 28;

}

message RoomAuthStatus {
    bool enable_chat = 1;
    bool enable_danmaku = 2;
    bool enable_gift = 3;
    bool enable_luck_money = 4;
    bool enable_digg = 5;
    bool enable_room_contributor = 7;
    bool enable_props = 8;
    bool usercard = 9;
    bool deprecated1 = 10;
    int64 deprecated2 = 11;
    int32 banner_state = 12;
    int64 deprecated3 = 13;
    int64 deprecated4 = 14;
    int32 landscape = 15;
    int64 landscapechat = 16;
    MessageType message_type = 17;
    int32 anchor_gift_type = 18;
    int64 deprecated5 = 19;
    int32 donation_sticker = 20;
    int64 deprecated6 = 21;
    int64 deprecated7 = 22;
    int64 deprecated8 = 23;
    int64 deprecated9 = 24;
    bool enable_question = 25;
    bool enable_chat_l2 = 26;
    bool enable_viewers = 27;
    bool enable_share = 28;
    int32 gift_rank_switch_status = 29;
    bool enable_promote = 30;
    int32 user_count_display_state = 31;
    int32 rank_state = 32;
    int64 broadcastmessage = 33;
    bool chat_sub_only = 34;
    int32 anchor_red_envelope_type = 35;
    int32 quick_comment_state = 36;
    int32 enable_poll = 37;
    int32 enable_gift_poll = 38;
    int64 enable_draw_guess = 40;
    int32 enable_activity_treasure_box = 41;
    int64 customizablepoll = 42;
    RoomAuthOffReasons room_auth_off_reasons = 100;
    bool use_user_p_v = 101;
    int32 promote_other = 102;
    int32 ec_rank_switch_status = 103;
    int32 eventpromotion = 105;
    bool comment_flagged_switch = 106;
    bool comment_flagged_review_switch = 107;
    bool explore_enabled = 108;
    int64 pictionarypermission = 109;
    int64 pictionarybubble = 110;
    AnchorLevelPermission anchor_level_permission = 111;
    int32 gamerankingswitch = 112;
    ToolBarManagement toolbarmanagement = 113;
    bool multienablereserve = 114;
    bool enablefanslevel = 115;
    int64 secretroom = 116;
    bool spamcomments = 117;
    RechargeCustomError custom_error_for_gift_setting = 120;
    bool guess_entrance_for_host = 121;
    bool credit_entrance_for_audience = 122;
    bool game_guess_permission = 123;
    int64 customizablegiftpoll = 124;
    int64 comment_tray_status = 125;
    int32 rankingchangealterswitch = 126;
    bool show_credit_widget = 127;
    StarCommentPermissionSwitch star_comment_permission_switch = 128;
    int64 emotepoll = 129;
    bool enableshowuseruv = 130;

    message StarCommentPermissionSwitch {
        int32 status = 1;
        string offreason = 2;

    }
}

message SpecialEffectNotice {
    int64 score = 1;
    int64 from_user_id = 2;
    int64 to_anchor_id = 3;
    repeated AnchorPair affected_anchor_pairs = 4;

}

message TranscodeInfo {
    int32 transcode_status = 1;
    int64 estimated_size = 2;
    string fail_reason = 3;
    VideoMetaInfo video_meta = 4;

}

message MultiGuestReserveResponse {
    ResponseData data = 1;
    Extra extra = 2;

    message ResponseData {
        WebcastPerceptionMessage perception_info = 1;
        AudienceReserveUserInfo reserve_user_info = 2;

    }
    message Extra {
        int64 now = 1;

    }
}

message HistoryCommentResponse {
    ResponseData data = 1;

    message ResponseData {
        repeated ProtoMessageFetchResult.BaseProtoMessage messages = 1;
        bool has_more = 2;
        string cursor = 3;

    }
}

message BannerInRoom {
    int64 id = 1;
    string title = 2;
    ImageModel image = 3;
    int32 height = 4;
    int32 width = 5;
    string schema_url = 6;
    int32 action_type = 7;
    int64 banner_type = 8;
    int32 priority = 9;
    string text = 10;
    int64 frame_type = 11;
    string extra = 12;
    int64 status = 13;
    int64 uid = 14;
    int64 roomid = 15;
    int64 appointment_start_timestamp = 16;
    int64 appointment_end_timestamp = 17;
    int64 appointment_id = 18;
    int64 business_type = 19;
    BannerContentDynamic dynamic_banner = 20;
    int32 banner_location = 21;
    bool open_with_navigation_tag = 22;
    string business_source = 23;
    string activity_id = 24;

    message BannerContentDynamic {
        string json_resource = 1;

    }
}

message ReserveResponse {
    ResponseData data = 1;
    ReserveExtra extra = 2;

    message ResponseData {
        int64 reservation_id = 1;
        int64 created_timestamp = 2;

    }
    message LogPb {
        string impr_id = 1;

    }
    message ReserveExtra {
        LogPb log_pb = 1;

    }
}

message TeamRankProgress {
    int32 current_number = 1;
    int32 target_number = 2;
    repeated int64 gift_ids = 3;
    int64 timestamp = 4;
    int32 add_score = 5;
    int32 contributed_score = 6;

}

message BattleTeamUserArmies {
    int64 team_id = 1;
    repeated BattleTeamUser team_users = 2;
    int64 team_total_score = 3;
    BattleUserArmies user_armies = 4;
    int64 host_rank = 5;

}

message LevelUpGiftInfo {
    int64 gift_id = 1;
    int64 left_count_to_level_up = 2;
    int64 level_up_count = 3;
    int64 current_count = 4;
    int64 num_of_upgrade_gifts_left = 5;
    string show_id = 6;

}

message Player {
    int64 room_id = 1;
    int64 uid = 2;

}

message LinkerLeaveContent {
    int64 user_id = 1;
    string linkmic_id_str = 2;
    int64 send_leave_uid = 3;
    int64 leave_reason = 4;

}

message BagIndex {
    int32 value = 1;

}

message SendGiftResult {
    Text display_text = 1;
    int32 fan_ticket_count = 2;
    string describe = 3;
    int64 m_gift_id = 4;
    int32 group_count = 5;
    int64 m_left_diamonds = 6;
    int32 repeat_count = 7;
    int32 combo_count = 8;
    int64 prop_id = 9;
    int32 prop_type = 10;
    repeated Prop props = 11;
    int64 msg_id = 12;
    repeated GiftResultData gifts = 15;
    int64 room_fan_ticket_count = 16;
    int64 group_id = 17;
    string order_id = 18;
    CalmDownInfo m_calm_down_info = 19;
    repeated ExchangeGiftResultData balance_result = 20;
    string monitor_extra = 21;
    bool is_first_send = 22;
    int32 freq_limit_remaintimes = 23;
    PayGradeInfo pay_grade_info = 24;
    repeated LynxGiftExtra lynx_extra = 25;
    MatchInfo match_info = 26;
    int32 linkmic_gift_expression_strategy = 27;
    FansLevelInfo fans_level_info = 28;
    int64 anchor_fans_count = 29;
    FlyingMicResources flying_mic_resources = 30;
    TeamRankProgress team_rank_progress = 31;
    int32 version = 32;
    repeated SponsorshipInfo sponsorship_info = 33;
    bool gift_gallery_combo_sponsor = 34;
    FlyingMicResources flying_mic_resources_v2 = 35;
    GiftChallengeProgress gift_challenge_progress = 36;
    BackpackInfo backpack_info = 37;
    GiftSendFansClubInfo fans_club_info = 38;
    bool multi_generate_message = 39;
    int64 to_member_id = 40;
    string to_member_nickname = 41;
    LevelUpGiftInfo level_up_gift_info = 42;
    PanelRefresh panel_refresh_data = 100;

}

message FanTicketRoomNoticeContent {
    repeated UserFanTicket user_fan_ticket = 1;
    int64 total_linkmic_fan_ticket = 2;
    int64 match_id = 3;
    int64 event_time = 4;
    string fan_ticket_icon_url = 5;
    int64 play_id = 6;
    optional PlayScene play_scene = 7;

    enum PlayScene {
        PLAY_SCENE_UNKNOWN = 0;
        PLAY_SCENE_COUNTDOWN_FOR_ALL = 1;
        PLAY_SCENE_COUNTDOWN_FOR_SINGLE = 2;
        PLAY_SCENE_LIVE_SHOW = 3;
        PLAY_SCENE_AIG_C = 4;
        PLAY_SCENE_KARAOKE = 5;
        PLAY_SCENE_DRAW_GUESS = 6;
        PLAY_SCENE_ENLARGE_GRID = 7;
        PLAY_SCENE_GIFT_PRIORITY_LINK = 8;
        PLAY_SCENE_GIFT_THRESHOLD_LINK = 9;
        PLAY_SCENE_NOTICE_BOARD = 10;
        PLAY_SCENE_PLAY_BOOK = 11;
        PLAY_SCENE_GUEST_SHOWDOWN = 12;}
}

message UserHonor {
    int64 total_diamond = 1;
    ImageModel diamond_icon = 2;
    string current_honor_name = 3;
    ImageModel current_honor_icon = 4;
    string next_honor_name = 5;
    int32 level = 6;
    ImageModel next_honor_icon = 7;
    int64 current_diamond = 9;
    int64 this_grade_min_diamond = 10;
    int64 this_grade_max_diamond = 11;
    string grade_describe = 13;
    repeated GradeIcon grade_icon_list = 14;
    int64 screen_chat_type = 15;
    ImageModel im_icon = 16;
    ImageModel im_icon_with_level = 17;
    ImageModel live_icon = 18;
    ImageModel new_im_icon_with_level = 19;
    ImageModel new_live_icon = 20;
    int64 upgrade_need_consume = 21;
    string next_privileges = 22;
    ImageModel profile_dialog_bg = 23;
    ImageModel profile_dialog_back_bg = 24;
    int64 score = 25;
    string grade_banner = 1001;

}

message BackpackInfo {
    int32 item_type = 1;
    int64 item_id = 2;
    int64 count = 3;
    int64 min_expire_at = 4;
    bool available = 5;
    BagItemPreUpdateInfo pre_update_info = 6;
    int64 battle_id = 7;

}

message UserVoteInfo {
    bool has_voted = 1;
    int32 vote_option_index = 2;
    repeated UserVoteOptionInfo vote_option_list = 3;

}

message ParallelPullStreamInfo {
    bool enable = 1;
    string feature_detail = 2;

}

message LiveProInfo {
    bool is_live_pro = 1;
    bool show_banner = 2;
    ImageModel banner = 3;
    string banner_starling_key = 4;
    ImageModel label = 5;
    int32 live_pro_type = 6;
    ImageModel gamer_label = 7;
    string gamer_banner_starling_key = 8;

}

message AccompanimentStruct {
    string vid = 1;
    repeated string accompaniment_urls = 2;
    int64 id = 3;
    double volume_loudness_lufs = 4;
    double volume_amplitude_peak = 5;

}

message WebcastFollowCardMessage {
    CommonMessageData base_message = 1;
    int64 follow_card_id = 2;
    int64 max_random = 3;

}

message UserGrade {
    string nick_name = 1;
    BadgeStruct default_grade_badge = 2;
    BadgeStruct opacity_badge = 3;
    int64 current_score = 4;
    int32 current_grade = 5;
    int32 grade_mode = 6;
    int32 time_to_sleep = 7;
    GradeScoreRule grade_score_rule = 8;
    int64 version = 9;

}

message PotionCardInfo {
    string card_name_key = 1;
    ImageModel card_image = 2;
    int64 send_time_sec = 3;
    BattleUserInfo send_user = 4;
    int64 effect_last_duration = 5;
    string rule_url = 6;
    int64 effect_time_sec = 7;
    int64 to_anchor_id = 8;

}

message WebcastActivityQuizUserIdentityMessage {
    CommonMessageData base_message = 1;
    string primary_id = 2;
    int64 version = 3;
    string retain_device_id = 4;
    int64 timestamp = 5;
    QuizUserIdentityInfo body = 6;

}

message LastLayoutSetting {
    Scene scene = 1;
    string layout_id = 2;

}

message PerceptionSheetInfo {
    optional PerceptionDialogIconType icon_type = 1;
    Text title = 2;
    Text sub_title = 3;
    Text reason_title = 4;
    Text reason_info = 5;
    Text not_allowed_title = 6;
    Text not_allowed_text = 7;
    Text default_action_text = 8;
    Scene scene = 9;
    int64 target_user_id = 10;
    int64 target_room_id = 11;
    int64 count_down_time = 12;

    enum PerceptionDialogIconType {
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE = 0;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING = 1;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC = 2;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC = 3;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE = 4;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX = 5;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE = 6;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED = 7;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT = 11;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS = 12;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH = 13;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL = 14;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION = 15;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT = 16;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING = 17;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON = 18;}
}

message FollowGuideParams {
    int64 room_id = 1;
    int32 trigger_type = 2;
    repeated FollowGuideInfo follow_guide_info_list = 3;
    int64 channel_id = 4;
    string trigger_params_json_str = 5;

    message FollowGuideInfo {
        int64 guide_user_id = 1;
        int32 guide_user_identity = 2;
        int32 guide_follow_status = 3;

    }
}

message MultiInviteResponse {
    int64 battle_id = 1;
    int32 meanwhile_invite_scene = 2;
    repeated TeamUser battle_team_user = 3;
    GiftModeMeta gift_mode_meta = 4;

}

message WebcastLiveJourneyMessage {
    CommonMessageData base_message = 1;
    LiveJourneyImMessage live_journey_im_msg = 2;

}

message AnimationData {
    string gecko_channel_name = 1;
    string file_name = 2;
    int64 height = 3;
    int64 width = 4;
    int64 right_offset = 5;

}

message PermitJoinGroupBizContent {
    ReplyStatus reply_status = 1;
    optional SourceType source_type = 2;

    enum ReplyStatus {
        REPLY_STATUS_UNKNOWN = 0;
        REPLY_STATUS_AGREE = 1;
        REPLY_STATUS_REFUSE_PERSONALLY = 2;
        REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT = 3;
        REPLY_STATUS_REFUSE_PROCESSING_INVITATION = 4;
        REPLY_STATUS_REFUSE_BY_TIME_OUT = 5;
        REPLY_STATUS_REFUSE_EXCEPTION = 6;
        REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED = 7;
        REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE = 8;
        REPLY_STATUS_REFUSE_IN_MIC_ROOM = 9;
        REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN = 10;
        REPLY_STATUS_REFUSE_IN_MULTI_GUEST = 11;
        REPLY_STATUS_REFUSE_PAUSE_LIVE = 12;
        REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING = 13;
        REPLY_STATUS_REFUSE_DRAW_GUESSING = 14;
        REPLY_STATUS_REFUSE_RANDOM_MATCHING = 15;
        REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING = 16;
        REPLY_STATUS_REFUSE_IN_MIC_ROOM_FOR_MULTI_COHOST = 17;
        REPLY_STATUS_REFUSE_COHOST_FINISHED = 18;
        REPLY_STATUS_REFUSE_NOT_CONNECTED = 19;
        REPLY_STATUS_REFUSE_LINK_MIC_FULL = 20;
        REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE = 21;
        REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE = 22;
        REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY = 23;
        REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST = 24;
        REPLY_STATUS_REFUSE_TOPIC_PAIRING = 25;
        REPLY_STATUS_REFUSE_POSITION_CONFLICT = 26;
        REPLY_STATUS_REFUSE_CONFLICT_QUICK_COHOST = 27;
        REPLY_STATUS_REFUSE_IN_TAKE_STAGE_PROCESSING = 28;}
    enum SourceType {
        SOURCE_TYPE_UNKNOWN = 0;
        SOURCE_TYPE_FRIEND_LIST = 1;
        SOURCE_TYPE_RECOMMEND_LIST = 2;
        SOURCE_TYPE_RECENT = 3;
        SOURCE_TYPE_OTHER_FOLLOW = 4;
        SOURCE_TYPE_QUICK_PAIR = 5;
        SOURCE_TYPE_ACTIVITY = 6;
        SOURCE_TYPE_QUICK_RECOMMEND = 7;
        SOURCE_TYPE_OFFICIAL_CHANNEL = 8;
        SOURCE_TYPE_BEST_TEAMMATE = 9;
        SOURCE_TYPE_RESERVATION = 10;
        SOURCE_TYPE_PAIRING = 11;
        SOURCE_TYPE_PAIRING_ON_RESERVATION = 12;
        SOURCE_TYPE_TOPIC_QUICK_PAIR = 13;
        SOURCE_TYPE_TOPIC_QUICK_RECOMMEND = 14;
        SOURCE_TYPE_ONLINE_FRIEND_CAPSULE = 15;
        SOURCE_TYPE_UNDEFINED_16 = 16;
        SOURCE_TYPE_UNDEFINED_17 = 17;
        SOURCE_TYPE_UNDEFINED_18 = 18;
        SOURCE_TYPE_UNDEFINED_19 = 19;
        SOURCE_TYPE_WEEKLY_RANK = 20;
        SOURCE_TYPE_HOURLY_RANK = 21;
        SOURCE_TYPE_UNDEFINED_22 = 22;
        SOURCE_TYPE_WEEKLY_RISING = 23;
        SOURCE_TYPE_WEEKLY_ROOKIE = 24;
        SOURCE_TYPE_CONNECTION_LIST = 25;
        SOURCE_TYPE_DAILY_RANK = 26;
        SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME = 27;
        SOURCE_TYPE_RESERVATION_BUBBLE = 28;
        SOURCE_TYPE_PAIRING_BUBBLE = 29;
        SOURCE_TYPE_LEAGUE_PHASE_ONE = 30;
        SOURCE_TYPE_LEAGUE_PHASE_TWO = 31;
        SOURCE_TYPE_LEAGUE_PHASE_THREE = 32;
        SOURCE_TYPE_DAILY_ROOKIE = 33;
        SOURCE_TYPE_MAY_KNOW_LIST = 34;
        SOURCE_TYPE_BANNER = 35;
        SOURCE_TYPE_FANS_TEAM_RANK = 36;
        SOURCE_TYPE_SEARCH = 37;
        SOURCE_TYPE_E_OY_RANK_LIST = 38;
        SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK = 39;
        SOURCE_TYPE_CREATOR_CLASS_RANK = 40;
        SOURCE_TYPE_HISTORY = 41;
        SOURCE_TYPE_UNDEFINED_42 = 42;
        SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST = 43;}
}

message BizRechargeResponse {
    ResponseData data = 1;

    message ResponseData {
        map<int64, CohostUserInfo> user_infos = 1;
        repeated VirtualWaitingUser virtual_waiting_users = 2;

    }
}

message EventUserInfo {
    int64 user_id = 1;
    string avatar_uri = 2;

}

message CountdownGetContentResponse {
    ResponseData data = 1;

    message ResponseData {
        repeated CountdownContent countdown_contents = 1;

    }
}

message WalletLiveRewardsRatioImMsgNotification {
    string display_text = 1;

}

message LinkerInviteMessageExtra {
    int32 match_type = 1;
    int32 invite_type = 2;
    int32 sub_type = 3;
    string theme = 4;
    int32 duration = 5;
    int32 layout = 6;
    string tips = 7;
    InviterRivalExtra inviter_rival_extra = 8;
    repeated InviterRivalExtra other_rival_extra = 9;
    CohostTopic topic_info = 10;
    string algo_request_id = 11;

}

message RechargePopUpContentReplace {
    string replace_value = 1;
    string value_schema = 2;
    int32 replace_type = 3;

}

message RankUser {
    int64 id = 1;
    string nickname = 3;
    ImageModel avatar_thumb = 9;
    int32 secret = 18;
    FollowInfo follow_info = 22;
    Border border = 25;
    string display_id = 38;
    repeated BadgeStruct badge_list = 64;
    string id_str = 1028;

    message Border {
        ImageModel icon = 1;
        int64 level = 2;
        string source = 3;
        ImageModel profile_decoration_ribbon = 4;
        PrivilegeLogExtra border_privilege_log_extra = 5;
        PrivilegeLogExtra profile_privilege_log_extra = 6;

    }
    message FollowInfo {
        int64 following_count = 1;
        int64 follower_count = 2;
        int64 follow_status = 3;
        int64 push_status = 4;

    }
}

message WebcastCommentsMessage {
    CommonMessageData base_message = 1;
    User user = 2;
    string content = 3;
    string color = 4;
    ImageModel background = 5;
    int64 action_type = 6;
    string action_content = 7;

}

message CountdownGetUserHistoryResponse {
    ResponseData data = 1;

    message ResponseData {
        repeated UserCountdownRecord records = 1;

    }
}

message WebcastWeeklyRankRewardMessage {
    int64 user_id = 1;
    BorderInfo border_info = 2;
    CommonMessageData base_message = 3;
    WebcastRoomNotifyMessage notify_message = 4;

}

message GetStarlingTranslationResponse {
    ResponseData data = 1;

    message ResponseData {
        string brand_name = 1;
        string content = 2;

    }
}

message LiveFragmentShowInfo {
    string icon = 1;
    string desc = 2;

}

message UserAttr {
    bool is_muted = 1;
    bool is_admin = 2;
    bool is_super_admin = 3;
    int64 mute_duration = 4;
    map<int32, int32> admin_permissions = 5;
    bool has_voting_function = 6;
    bool is_channel_admin = 7;

}

message WebcastLinkStateMessage {
    CommonMessageData base_message = 1;
    int64 channel_id = 2;
    Scene scene = 3;
    int64 version = 4;
    int32 need_ack = 5;
    LayoutState layout = 6;
    repeated LinkUserState user_states = 7;
    int64 client_send_time = 8;
    optional StateType state_type = 9;
    BackGroundImageState background = 10;
    string wallpaper_url = 12;
    repeated PosIdentity ui_pos = 13;

    enum Scene {
        SCENE_UNKNOWN = 0;
        SCENE_UNDEFINED_1 = 1;
        SCENE_CO_HOST = 2;
        SCENE_UNDEFINED_3 = 3;
        SCENE_MULTI_LIVE = 4;}
    enum StateType {
        STATE_TYPE_STATE_INVALID = 0;
        STATE_TYPE_STATE_LAYOUT = 1;
        STATE_TYPE_STATE_ONLINE_USER_STATE = 2;
        STATE_TYPE_STATE_AUDIO_MUTE = 3;
        STATE_TYPE_STATE_VIDEO_MUTE = 4;
        STATE_TYPE_STATE_RT_C_CONNECTION = 5;
        STATE_TYPE_STATE_NETWORK = 6;
        STATE_TYPE_STATE_BACKGROUND_IMAGE = 7;
        STATE_TYPE_STATE_SCREEN_ORIENTATION = 8;
        STATE_TYPE_STATE_AVATAR_ID = 9;}
}

message WebcastAccessRecallMessage {
    CommonMessageData base_message = 1;
    int32 status = 2;
    int64 duration = 3;
    int64 end_time = 4;
    Scene scene = 5;
    Text notice = 6;
    Text content = 7;
    PunishEventInfo punish_info = 8;

}

message DoodleTemplate {
    int64 id = 1;
    ImageModel image = 2;

}

message QuickGift {
    int64 id = 1;
    string name = 2;
    ImageModel image = 3;
    int64 type = 4;
    bool is_box_gift = 5;
    int64 diamond_count = 6;
    bool is_broadcast_gift = 7;
    bool is_effect_befview = 8;
    int64 primary_effect_id = 9;

}

message ColdStartStatData {
    int32 viewer_count = 1;
    int32 status = 2;
    repeated ColdStartStat stats = 3;

}

message FreqLimitGiftOption {
    int64 gift_id = 1;
    int64 refresh_time_stamp = 2;
    bool close_gift_panel = 3;
    bool work_single_anchor = 4;
    int32 frequency_limit = 5;

}

message WebcastAISummaryMessage {
    CommonMessageData base_message = 1;
    Scene scene = 2;
    bool show_at_first = 3;
    ImageModel icon = 4;
    Text title = 5;
    repeated MultiLangContent multi_lang_summary_list = 6;
    string click_title_scheme_link = 7;
    string click_content_scheme_link = 8;
    string long_press_area_scheme_link = 9;
    PublicAreaMessageCommon public_area_message_common = 10;
    bool require_stay = 11;
    int64 stay_duration_ms = 12;

}

message AnchorClientList {
    repeated WaitUser rtc_users = 1;
    repeated WaitUser apply_users = 2;
    repeated WaitUser invite_users = 3;
    repeated WaitUser ready_users = 4;
    repeated LinkedUser link_users = 5;
    AnchorMessage anchor_message = 6;

}

message NewAnchorGuideConfig {
    int64 anchor_id = 1;
    ImageModel icon = 2;
    int32 icon_style = 3;
    Text title = 4;
    Text button = 5;
    Text text = 6;
    int32 display_duration = 7;
    NewAnchorEffectParams effect_params = 8;
    int32 display_type = 9;

}

message LinkedListChangeContent {
    repeated ListUser list_users = 1;

}

message MsgNotifyComAvoidConfig {
    repeated MsgNotifyComponentAvoidRuleV2 component_rule_list_v2 = 1;

}

message NewAnchorGuideMsgInfo {
    string message_key = 1;
    NewAnchorGuideConfig guide_config = 2;

}

message WebcastPerceptionMessage {
    CommonMessageData base_message = 1;
    PerceptionDialogInfo dialog = 2;
    PunishEventInfo public_event_info = 3;
    int32 end_time = 4;
    bool show_violation = 5;
    Text toast = 6;
    int32 float_style = 7;
    Text float_text = 8;
    PerceptionSheetInfo sheet = 9;
    optional PerceptionDialogIconType float_icon_type = 10;

    enum PerceptionDialogIconType {
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE = 0;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING = 1;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC = 2;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC = 3;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE = 4;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX = 5;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE = 6;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED = 7;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT = 11;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS = 12;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH = 13;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL = 14;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION = 15;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT = 16;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING = 17;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON = 18;}
}

message SubscribeBadge {
    ImageModel origin_image = 3;
    ImageModel preview_image = 4;
    bool is_customized = 5;

}

message LinkerInviteContent {
    int64 from_user_id = 1;
    int64 from_room_id = 2;
    string to_rtc_ext_info = 3;
    bool rtc_join_channel = 4;
    int32 vendor = 5;
    string sec_from_user_id = 6;
    string to_linkmic_id_str = 7;
    User user = 8;
    int64 required_mic_idx = 9;
    map<int64, string> rtc_ext_info_map = 10;
    optional LinkmicMultiLiveEnum multi_live_layout_enable = 11;
    MultiLiveAnchorPanelSettings multi_live_setting = 12;
    string from_linkmic_id_str = 13;
    InviteTopHostInfo from_top_host_info = 16;
    int64 action_id = 17;
    repeated LinkmicUserInfo linked_users = 18;
    PerceptionDialogInfo dialog_info = 19;
    PunishEventInfo punish_event_info = 20;
    int32 from_room_age_restricted = 21;
    repeated CohostABTestSetting ab_test_setting = 23;
    LinkerInviteMessageExtra linker_invite_msg_extra = 101;

    enum LinkmicMultiLiveEnum {
        LINKMIC_MULTI_LIVE_ENUM_DEFAULT = 0;
        LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT = 1;}
}

message UseWaveCard {
    WaveCardInfo card_info = 1;
    int64 anchor_id = 2;
    Text display_content = 3;

}

message UserInfo {
    int64 user_id = 1;
    string nick_name = 2;
    ImageModel anchor_avatar = 3;

}

message GiftPollInfo {
    repeated GiftPollOption gift_poll_options = 1;

}

message VideoInfo {
    string resolution = 1;

}

message PinCardView {
    int64 duration = 1;
    string end_timestamp_str = 2;
    int64 min_duration_time = 3;
    string version_code_str = 4;
    GuessText guess_title = 5;
    string round_id_str = 6;
    optional GuessPinType pin_card_type = 7;
    bool is_auto_pin = 8;

    enum GuessPinType {
        GUESS_PIN_TYPE_PIN = 0;
        GUESS_PIN_TYPE_UNPIN = 1;
        GUESS_PIN_TYPE_FROZEN = 2;}
}

message QuizImage {
    string url = 1;

}

message QuizRewardRule {
    string settler_code = 1;
    int32 send_amount = 2;
    repeated RewardItem reward_list = 3;

    message RewardItem {
        string reward_name = 1;
        string reward_amount = 2;

    }
}

message WebcastRoomVerifyMessage {
    CommonMessageData base_message = 1;
    int32 verify_action = 2;
    string content = 3;
    int64 notice_type = 4;
    bool close_room = 5;

}

message GuestShowdownUpdateResponse {
    ResponseData data = 1;

    message ResponseData {
        bool success = 1;
        GuestShowdownContent play_content = 2;

    }
}

message GoodyBagBaseInfo {
    string goody_bag_id = 1;
    optional GoodyBagBiz biz = 2;
    string room_id = 3;
    GoodyBagCommonDetail common_detail = 4;
    GoodyBagCoinDetail coin_detail = 5;

    enum GoodyBagBiz {
        GOODY_BAG_BIZ_UNKNOWN = 0;
        GOODY_BAG_BIZ_NORMAL_COIN = 1;
        GOODY_BAG_BIZ_FANS_CLUB = 2;
        GOODY_BAG_BIZ_PLATFORM_NORMAL = 100;
        GOODY_BAG_BIZ_PLATFORM_FANS_CLUB = 101;
        GOODY_BAG_BIZ_LEVEL_UP_PARTY_REWARD_NORMAL = 110;
        GOODY_BAG_BIZ_LEVEL_UP_PARTY_REWARD_FANS_CLUB = 111;}
}

message FreqLimitGiftInfo {
    repeated FreqLimitGiftOption freq_limit_gift_options = 1;

}

message CustomTabInfo {
    CustomTabs custom_tabs = 1;

}

message ManageViewerSingResp {
    LinkMicCommonResp common_resp = 1;
    RTCExtraInfo permiter_ext_info = 2;
    string permiter_link_mic_id = 3;
    MicPositionData applier_pos = 4;
    Player applier = 5;
    string applier_link_mic_id = 6;
    bool is_invoke_linkmic = 7;
    repeated string linked_user_ui_positions = 8;
    repeated PosIdentity ui_pos = 9;

}

message GameLiveFragment {
    int64 fragment_id = 1;
    string fragment_id_str = 2;
    int64 room_id = 3;
    int32 fragment_type = 4;
    string vid = 5;
    string download_url = 6;
    string cover_url = 7;
    int64 owner_user_id = 8;
    int64 start_time = 9;
    int64 end_time = 10;
    string extra = 11;
    int64 create_time = 12;
    int64 update_time = 13;
    string title = 14;
    int32 status = 15;
    int64 mark_time = 16;
    int64 op_time = 17;
    string stream_url = 18;
    string preview_pic_url = 19;
    string room_id_str = 20;
    string owner_user_id_str = 21;
    int64 replay_create_time = 22;
    int32 is_edit = 23;
    repeated Sprite sprite_list = 24;
    VideoMetaInfo mp4_video_meta_info = 25;
    int32 encode_status = 26;
    bool is_muted = 27;
    LiveFragmentShowInfo show_info = 28;
    int64 replay_relative_time = 29;

}

message WebcastGuideTaskMessage {
    CommonMessageData base_message = 1;
    string biz_name = 2;
    repeated int32 operation_types = 3;
    Text remind_area_text = 5;
    string remind_type = 6;
    int64 display_second = 7;
    int32 task_type = 8;

}

message InviterRivalExtra {
    TextType text_type = 1;
    string text = 2;
    string label = 3;
    int32 user_count = 4;
    ImageModel avatar_thumb = 5;
    string display_id = 6;
    AuthenticationInfo authentication_info = 7;
    string nickname = 8;
    int64 follow_status = 9;
    Hashtag m_hashtag = 10;
    int64 user_id = 12;
    bool is_best_teammate = 13;
    OptPairInfo opt_pair_info = 14;
    int64 follower_count = 15;

}

message EcommerceEntrance {
    optional EntranceType entrance_type = 1;
    optional CreatorType creator_type = 2;
    string schema = 3;
    ShopEntranceInfo shop_entrance_info = 4;
    ShowcaseEntranceInfo showcase_entrance_info = 5;
    optional ViewVersion view_version = 6;

    enum EntranceType {
        ENTRANCE_TYPE_PROFILE = 0;
        ENTRANCE_TYPE_SHOWCASE = 1;
        ENTRANCE_TYPE_SHOP = 2;}
    enum CreatorType {
        CREATOR_TYPE_UNDEFINED = 0;
        CREATOR_TYPE_OFFICIAL = 1;
        CREATOR_TYPE_MARKET = 2;
        CREATOR_TYPE_NORMAL = 3;}
    enum ViewVersion {
        VIEW_VERSION_UNKNOWN = 0;
        VIEW_VERSION_STAR_SHOP = 1;}
    message SellingPoint {
        string show_text = 1;
        optional LiveSellingPointType selling_point_type = 2;

        enum LiveSellingPointType {
            LIVE_SELLING_POINT_TYPE_UNDEFINED = 0;
            LIVE_SELLING_POINT_TYPE_QUALITY = 1;
            LIVE_SELLING_POINT_TYPE_SOLD = 2;
            LIVE_SELLING_POINT_TYPE_TRUST_BETTER_THAN_OTHER_SHOP = 3;
            LIVE_SELLING_POINT_TYPE_TRUST_REPLY_IN_TIME = 4;
            LIVE_SELLING_POINT_TYPE_TRUST_CREATE_SHIP_IN_TIME = 5;
            LIVE_SELLING_POINT_TYPE_TRUST_POSITIVE_REVIEW_RATE = 6;}
    }
    message ShopLabelImage {
        int32 height = 1;
        int32 width = 2;
        string minetype = 3;
        string thumb_uri = 4;
        repeated string thumb_uri_list = 5;
        string uri = 6;
        repeated string url_list = 7;
        string color = 8;

    }
    message StoreOfficialLabel {
        ShopLabelImage label_image_light = 1;
        ShopLabelImage label_image_dark = 2;
        optional StoreBrandLabelType label_type = 3;
        string label_type_str = 4;

        enum StoreBrandLabelType {
            STORE_BRAND_LABEL_TYPE_NONE = 0;
            STORE_BRAND_LABEL_TYPE_OFFICIAL = 1;
            STORE_BRAND_LABEL_TYPE_AUTHORIZED = 2;
            STORE_BRAND_LABEL_TYPE_BLUE_V = 3;
            STORE_BRAND_LABEL_TYPE_TOP_CHOICE = 4;
            STORE_BRAND_LABEL_TYPE_MALL = 5;}
    }
    message StoreLabel {
        StoreOfficialLabel official_label = 1;
        bool is_bytemall = 2;

    }
    message ShopEntranceInfo {
        string shop_id = 1;
        string shop_name = 2;
        string shop_rating = 3;
        StoreLabel store_label = 4;
        string format_sold_count = 5;
        int64 sold_count = 6;
        int32 exp_rate_percentile = 7;
        string exp_rate_top_display = 8;
        int32 rate_display_style = 9;
        bool show_rate_not_applicable = 10;
        repeated SellingPoint selling_point = 11;

    }
    message ShowcaseEntranceInfo {
        string format_sold_count = 1;
        int64 sold_count = 2;
        string showcase_name = 3;
        repeated SellingPoint selling_point = 11;

    }
}

message MultiLiveUpdateUserSettingContent {
    MultiLiveAnchorPanelSettings multi_live_anchor_panel_settings = 1;

}

message KeywordsLibrary {
    string locale = 1;
    repeated GiftKeywords gift_keywords = 2;
    bool has_space = 3;

}

message ParticipateThresholdSelected {
    optional ParticipateThresholdType type = 1;
    int64 value = 2;

    enum ParticipateThresholdType {
        PARTICIPATE_THRESHOLD_TYPE_PARTICIPATE_THRESHOLD_UNKNOWN = 0;
        PARTICIPATE_THRESHOLD_TYPE_PARTICIPATE_THRESHOLD_ALL_VIEWER = 1;
        PARTICIPATE_THRESHOLD_TYPE_PARTICIPATE_THRESHOLD_FANS_CLUB = 2;}
}

message PopCardInfo {
    int64 pop_product_id = 1;
    int32 pop_card_type = 2;

}

message CommentQualityScore {
    string version = 1;
    int64 score = 2;

}

message MGetABInfosResp {
    repeated ABInfos infos = 1;
    LinkMicCommonResp common_resp = 2;

}

message WebcastEmoteChatMessage {
    CommonMessageData base_message = 1;
    User user = 2;
    repeated EmoteModel emote_list = 3;
    MsgFilter msg_filter = 4;
    UserIdentity user_identity = 5;

}

message StarCommentItem {
    StarCommentMessage star_comment = 1;
    string coins = 2;
    string room_user_count = 3;
    bool force_insert = 4;
    int32 start_comment_status = 5;
    int64 server_to_show_timestamp_ms = 6;

}

message StarCommentPurchasePageResponse {
    Data data = 1;

    message Data {
        int32 purchase_page_status = 1;
        string not_allow_reason = 2;
        StarCommentQueue queue = 3;
        int32 word_limit = 4;
        int64 error_code = 5;
        StarCommentQueue original_queue = 6;
        int64 baseline_price = 7;
        PrivilegePrompt desc_info = 8;

    }
}

message PlayTogetherPermitNoticeContent {
    optional PlayTogetherPermitType permit_type = 1;

    enum PlayTogetherPermitType {
        PLAY_TOGETHER_PERMIT_TYPE_UNKNOWN = 0;
        PLAY_TOGETHER_PERMIT_TYPE_ACCEPT = 1;
        PLAY_TOGETHER_PERMIT_TYPE_REJECT = 2;}
}

message RoomSticker {
    string name = 2;
    ImageModel image = 7;
    ImageModel nine_patch_image = 8;
    int32 top_left_height = 13;
    int32 top_left_width = 14;
    int32 bottom_right_height = 15;
    int32 bottom_right_width = 16;
    int32 review_status = 17;
    bool edited = 18;
    RoomStickerAuditInfo audit_info = 19;
    string starling_key = 20;
    string extra = 21;

}

message GroupLiveMember {
    int64 user_id = 1;
    string nickname = 3;
    ImageModel avatar = 4;

}

message AskDemoInfo {
    User user = 1;
    Product product = 2;
    int32 ask_demo_count = 3;
    int32 product_index = 4;

}

message WebcastVideoLiveCouponRcmdMessage {
    CommonMessageData base_message = 1;
    int64 rcmd_coupon_id = 2;

}

message WebcastVideoLiveGoodsRcmdMessage {
    CommonMessageData base_message = 1;
    int64 rcmd_goods_id = 2;

}

message EventCard {
    LiveEventInfo event = 1;
    int64 card_start_time = 2;
    string card_icon_url = 3;

}

message TakeTheStageOrderInfo {
    repeated AnchorInfo anchors = 1;
    CompetitionUserBase initiator = 2;
    optional SwitchTurnReason switch_turn_reason = 3;

    enum SwitchTurnReason {
        SWITCH_TURN_REASON_UNKNOWN = 0;
        SWITCH_TURN_REASON_USER_CLICK = 1;
        SWITCH_TURN_REASON_USER_LEFT = 2;}
    message AnchorInfo {
        int64 user_id = 1;

    }
}

message WebcastKaraokeSwitchMessage {
    CommonMessageData base_message = 1;
    int32 type = 2;
    int32 status = 3;

}

message Question {
    int64 question_id = 1;
    string content = 2;
    int32 answer_status = 3;
    int64 create_time = 4;
    User user = 5;
    int32 create_from = 20;
    int32 answer_from = 21;

}

message UnifiedBannerData {
    string title = 1;
    string sub_title = 3;
    ImageModel image = 4;
    string schema = 5;
    map<string, string> metrics = 6;
    string frequency_key = 7;

}

message BattleABTestSetting {
    int64 uid = 1;
    BattleABTestList ab_test_list = 2;

}

message CreateInfoPunishmentMessage {
    int64 ban_time = 1;
    int64 ban_duration = 2;
    string detail_url = 3;
    int32 source = 4;

}

message GiftPanelBanner {
    Text display_text = 1;
    ImageModel left_icon = 2;
    string schema_url = 3;
    repeated string bg_colors = 5;
    string banner_lynx_url = 6;
    int32 banner_priority = 7;
    string banner_lynx_extra = 8;
    ImageModel bg_image = 9;

}

message GameBannerContainer {
    repeated GameBanner banner_list = 1;

}

message HotRoomData {
    string business = 1;
    int64 room_id = 2;
    bool is_hot = 3;
    int32 action = 4;
    int64 timestamp = 6;
    repeated HotRoomState hot_room_state = 7;

    message HotRoomState {
        int32 reason = 1;
        int64 enter_ts = 2;

    }
}

message ConvertNoticeboardMaterialInfo {
    string background_image_url = 1;
    string cover_image_url = 2;
    string config_json_url = 3;
    string title = 4;
    int64 text_char_count = 5;
    int64 text_box_count = 6;
    map<string, string> starling_map = 7;
    string thumb_cover_image_url = 8;

}

message BaLeadsGenInfo {
    bool leads_gen_permission = 1;
    string leads_gen_model = 2;

}

message BattlePromptElem {
    string prompt_field_key = 1;
    string prompt_field_value = 2;

}

message BizPermitParams {
    int64 effective_seconds = 1;
    bool notice_confirmed = 2;

}

message SceneRestriction {
    repeated int64 normal_hidden_gids = 1;
    repeated int64 match_hidden_gids = 2;
    repeated int64 cohost_hidden_gids = 3;
    repeated int64 multiguest_hidden_gids = 4;

}

message SponsorshipInfo {
    int64 gift_id = 1;
    int64 sponsor_id = 2;
    bool become_sponsor = 3;
    bool light_gift_up = 4;
    string unlighted_gift_icon = 5;
    int64 sponsor_count = 6;
    int64 current_count = 7;
    int64 left_count_to_sponsor = 8;
    bool can_sponsor = 9;
    bool gift_gallery_click_sponsor = 10;
    int64 goal_count = 11;
    int64 gallery_gifts_collected_count = 12;
    string first_title_page_scheme_url = 13;
    int64 gallery_gifts_count = 14;
    bool swapped = 15;
    bool become_all_sponsored = 21;

}

message UpdateGuestSettingParams {
    int32 flow_distribute = 1;
    int32 rank_list_show_action = 2;
    int32 guest_camera_status = 3;
    int32 distribution_status = 4;
    int32 guest_camera_mirror_status = 5;
    int32 guest_hear_your_voice_status = 6;
    int64 channel_id = 1001;
    int64 room_id = 1002;
    int64 live_id = 1003;
    int64 anchor_id = 1004;

}

message WallpaperEndResponse {
    ResponseData data = 1;

    message ResponseData {
        bool success = 1;
        WallpaperContent wallpaper_content = 2;

    }
}

message AutoMatchBanner {
    Text main_guide_text = 1;
    Text sub_guide_text = 2;
    Text button_text = 3;

}

message NoticeboardReviewInfo {
    string media_node_id = 1;
    int32 review_status = 2;

}

message RemuxInfo {
    int32 remux_status = 1;
    int64 estimated_size = 2;
    string fail_reason = 3;
    VideoMetaInfo video_meta = 4;

}

message Stream {
    int32 size = 1;

}

message CohostABTestSetting {
    int64 key = 1;
    CohostABTestList value = 2;

}

message SubQueue {
    string id = 1;
    int32 type = 2;
    int32 status = 3;
    AuditStatus audit_status = 4;
    string anchor_id = 5;
    string room_id = 6;
    int64 create_time_sec = 7;
    string title = 8;
    int64 waiting_count = 9;
    int64 total_count = 10;
    AuditInfo violation_info = 11;

}

message FlareInfo {
    bool is_flare = 1;
    string task_id = 2;

}

message AckStateReq {
    StateReqCommon common = 1;
    int64 msg_id = 2;
    int32 msg_type = 3;
    int64 client_receive_time = 4;

}

message WebcastSocialMessage {
    CommonMessageData base_message = 1;
    User user = 2;
    int64 share_type = 3;
    int64 action = 4;
    string share_target = 5;
    int64 follow_count = 6;
    int64 share_display_style = 7;
    int32 share_count = 8;
    PublicAreaMessageCommon public_area_message_common = 9;
    string signature = 10;
    string signature_version = 11;
    int64 show_duration_ms = 12;

}

message WebcastPrivilegeAdvanceMessage {
    CommonMessageData base_message = 1;
    WebcastRoomNotifyMessage notify = 2;
    Scene scene = 3;
    DisplayControl control = 4;
    ImageModel left_icon = 5;
    ImageModel right_icon = 6;
    ImageModel background = 7;
    string sub_type = 8;
    PrivilegeLogExtra privilege_log_extra = 100;

}

message RTCInfoExtra {
    string version = 1;

}

message InviteLiveEventUserResponse {
    ResponseData data = 1;

    message ResponseData {

    }
}

message WebcastLinkMicBattlePunishFinish {
    CommonMessageData base_message = 1;
    int64 channel_id = 2;
    int64 op_uid = 3;
    optional Reason reason = 4;
    int64 battle_id = 5;
    BattleSetting battle_settings = 6;

    enum Reason {
        REASON_TIME_UP = 0;
        REASON_CUT_SHORT = 1;}
}

message WebcastBoostedUsersMessage {
    CommonMessageData base_message = 1;
    int64 total_cnt = 2;
    FlareBoostedUsers flare = 3;
    repeated PromoteAdBoostedUsers promote_ads = 4;

}

message PartnershipGameEvent {
    int64 game_tag_id = 1;
    bool anchor_has_joined = 2;
    string event_detail_url = 3;
    string game_name = 4;
    string game_id_str = 5;
    string task_id_str = 6;
    string event_id_str = 7;
    int32 event_type = 8;
    int32 incentivetype = 9;
    bool anchor_has_showed = 10;
    string game_icon = 11;

}

message CancelInviteContent {
    Player inviter = 1;
    string inviter_link_mic_id = 2;
    string invitee_link_mic_id = 3;
    int64 invite_seq_id = 4;
    Player invitee = 5;

}

message WebcastRankToastMessage {
    CommonMessageData base_message = 1;
    RankToast toast = 2;

    message RankToast {
        int64 user_id = 1;
        bool should_toast = 2;

    }
}

message WebcastUnauthorizedMemberMessage {
    CommonMessageData base_message = 1;
    int32 action = 2;
    Text nick_name_prefix = 3;
    string nick_name = 4;
    Text enter_text = 5;
    PublicAreaMessageCommon public_area_common = 6;

}

message KaraokeInfo {
    KaraokeSong song = 1;
    bool karaoke_status = 2;
    bool karaoke_lyric_status = 3;
    bool display_karaoke = 4;

}

message FYPCommerceStruct {
    PreviewProductCardInfo preview_product_card_info = 1;
    int64 product_num = 2;
    int64 commerce_permission = 3;
    int64 pop_product_id = 4;
    string oec_live_preview_room_data = 5;

}

message WebcastRankUpdateMessage {
    CommonMessageData base_message = 1;
    bool loop = 7;
    bool animation_loop_for_off = 8;
    repeated UnionAnimationInfo union_animation = 9;
    repeated RankListTabInfo tab_info = 10;

    enum EntranceGroupType {
        ENTRANCE_GROUP_TYPE_DEFAULT = 0;
        ENTRANCE_GROUP_TYPE_GIFT = 1;
        ENTRANCE_GROUP_TYPE_E_COMMERCE = 2;
        ENTRANCE_GROUP_TYPE_GAME = 3;}
    enum OpType {
        OP_TYPE_DEFAULT = 0;
        OP_TYPE_ADD = 1;
        OP_TYPE_REMOVE = 2;
        OP_TYPE_RELOAD = 3;
        OP_TYPE_BASIC_EFFECT = 4;}
}

message NewAnchorEffectParams {
    string effect_panel = 1;
    string resource_id = 2;
    string category_id = 3;
    string tab_key = 4;

}

message GameRevenueTipsMessage {
    int64 rule_id = 1;
    Text tips_text = 2;
    repeated string fillin_text = 3;
    GameAction action = 4;
    int64 priority = 5;
    int64 show_duration_inapp = 6;
    int64 show_duration_outapp = 7;
    Text button_text = 8;
    Text title_text = 9;
    CommonMessageData common = 100;

}

message UGGiftTaskInfo {
    bool show_banner_entry = 1;
    int32 ug_task_status = 2;
    int64 reward_ug_points = 3;
    int64 task_start_time = 4;
    int64 task_period_days = 5;
    int32 ug_task_flow = 6;
    int64 pre_reward_ug_points = 7;
    int32 task_biz_type = 8;
    string schema_url = 9;
    int64 task_end_time = 10;

}

message WebcastCommentTrayMessage {
    CommonMessageData base_message = 1;
    string content = 2;
    int64 content_type = 3;
    int64 count = 4;
    int64 chat_time = 5;
    int64 tray_id = 6;

}

message RechargeResp {
    RTCExtraInfo my_info = 1;
    string my_linkmic_id = 2;
    string target_linkmic_id = 3;
    MicPositionData target_pos = 4;
    repeated RTCExtraInfo group_ext_info = 5;
    GroupChannelAllUser group_user = 6;
    LinkMicCommonResp common_resp = 7;
    repeated ContentPosition content_pos = 8;
    BizRechargeResponse cohost_resp_extra = 9527;

}

message ECommerceMessage {
    int32 action_type = 2;
    int32 live_product_number = 3;
    PopProduct pop_product = 4;
    TraceInfo trace_info = 5;
    repeated HotTag hot_tags = 6;
    AtmosphereTagInfo atmosphere_tag_info = 7;
    LivePermissionInfo live_permission_info = 8;
    ProductSnapShot product_snap_shot = 9;
    int64 pin_card_delay_time = 10;
    repeated FlashSaleAtmosphereInfo flash_sale_atmosphere_info = 11;
    int32 card_type = 12;
    BillboardInfo billboard_info = 13;
    BillboardDisplayResult billboard_display_result = 14;
    repeated DispersionInfo dispersion_info = 15;
    PromotionInfo promotion_info = 16;
    CampaignBannerDisplayResult campaign_banner_display_result = 17;
    CampaignBannerDisplay campaign_banner_display = 18;
    RefreshLiveBagInfo refresh_live_bag_info = 19;
    OecLiveShoppingMessageV2 oec_live_shopping_message_v2 = 100;

}

message NotifyHighlightInfo {
    repeated NotifyHighlightContent contents = 1;
    string color = 2;

}

message WebcastLikeMessage {
    CommonMessageData base_message = 1;
    int32 count = 2;
    int64 total = 3;
    int32 color = 4;
    User user = 5;
    string icon = 6;
    repeated ImageModel icons = 7;
    repeated SpecifiedDisplayText specified_display_text = 8;
    int64 effect_cnt = 9;
    repeated LikeEffect like_effect = 10;
    PublicAreaMessageCommon public_area_message_common = 11;
    int64 room_message_heat_level = 12;

}

message ShortTouchPreviewSetting {
    string preview_schema = 1;
    int64 preview_show_time = 2;
    ImageModel preview_image = 3;
    string amount_text = 4;
    string discount_text = 5;

}

message CampaignBannerData {
    string title = 1;
    ImageModel image = 2;
    string url = 3;

}

message BizInviteResponse {
    ResponseData data = 1;

    message ResponseData {
        WebcastPerceptionMessage host_perception_info = 1;

    }
}

message LiveFilterMsgRule {
    string name = 1;
    int32 rule = 2;
    FilterMsgRuleParamRandom random = 3;

}

message WebcastMsgDetectMessage {
    CommonMessageData base_message = 1;
    int32 detect_type = 2;
    TriggerCondition trigger_condition = 3;
    TimeInfo time_info = 4;
    int32 trigger_by = 5;
    string from_region = 6;

    message TimeInfo {
        int64 client_start_ms = 1;
        int64 api_recv_time_ms = 2;
        int64 api_send_to_goim_ms = 3;

    }
    message TriggerCondition {
        bool uplink_detect_h_t_t_p = 1;
        bool uplink_detect_websocket = 2;
        bool detect_p2_p_msg = 3;
        bool detect_room_msg = 4;
        bool http_optimize = 5;

    }
}

message BizPermitJoinGroupParams {
    ReplyStatus reply_status = 1;
    int32 source_type = 2;
    string algo_request_id = 3;
    CohostStreamConfig stream_config = 4;

}

message QuizAnchorInfo {
    string uid = 1;
    string user_name = 2;
    string room_id = 3;
    string category = 4;
    string description = 5;
    string avatar = 6;
    string background_image = 7;
    string extra = 8;

}

message EOYBanner {
    int64 round = 1;
    string title = 2;
    string subtitle = 3;
    StreakInfo streak_info = 4;
    int64 start_time = 5;
    int64 end_time = 6;
    string announcement_starling_key = 7;
    string description = 8;
    string schema = 9;
    GradeInfo grade_info = 10;

    message GradeInfo {
        int64 level = 1;
        int64 progress = 2;
        int64 target = 3;

    }
    message MileStone {
        int64 target_value = 1;
        int64 bonus_times = 2;

    }
    message StreakInfo {
        optional StreakType streak_type = 1;
        int64 progress = 2;
        repeated MileStone mile_stones = 3;

        enum StreakType {
            STREAK_TYPE_UNKNOWN = 0;
            STREAK_TYPE_COMBO = 1;
            STREAK_TYPE_WIN = 2;}
    }
}

message Skin {
    SkinHostAccount account = 1;
    SkinDrawerEntrance drawer_entrance = 2;
    Scene scene = 3;

}

message WebcastAnchorReminderWordMessage {
    CommonMessageData base_message = 1;
    AnchorReminderWordInfoMsg reminder_word_info = 2;

}

message FansScoreRule {
    int32 level = 1;
    int64 level_min_score = 2;
    int64 level_max_score = 3;

}

message NoticeboardTemplate {
    int64 noticeboard_template_id = 1;
    string media_node_id = 2;
    ConvertNoticeboardMaterialInfo convert_noticeboard_material_info = 3;
    int32 private_status = 4;
    int32 review_status = 5;
    SimpleUser author_info = 6;

}

message MultiLiveUserApplyPermission {
    int32 multi_live_apply_permission = 1;
    int64 applier_sort_setting = 2;
    int64 applier_sort_gift_score_threshold = 3;
    int64 multi_guest_allow_request_from_friends = 4;
    int64 multi_guest_allow_request_from_followers = 5;
    int64 multi_guest_allow_request_from_others = 6;

}

message AtmosphereInfo {
    repeated Tag tags = 1;

    message Tag {
        int32 type = 1;
        string desc = 2;
        int64 count = 3;
        int32 status = 4;

    }
}

message AnchorPreFinishData {
    ConfirmBox confirm_box = 1;
    int32 finish_type = 2;
    map<string, string> metrics_map = 3;

    message ConfirmBox {
        string title = 1;
        int64 value = 2;
        string schema_title = 3;
        string unique_id = 4;
        string content = 5;
        string confirm_text = 6;
        string cancel_text = 7;
        string schema_jump_link = 8;

    }
}

message GuestShowdownContent {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 play_id = 3;
    int32 play_status = 4;
    int64 version = 5;
    int64 party_start_time = 6;
    int64 punishment_start_time = 7;
    GuestShowdownConfig play_config = 8;
    repeated GuestShowdownUser running_play_users = 9;
    repeated GuestShowdownUser leave_play_users = 10;
    string stream_id = 11;

}

message RoomLinkInfo {
    int64 channel_id = 1;
    ChannelInfo channel_info = 2;
    int64 rival_anchor_id = 5;
    repeated int64 audience_id_list = 6;
    repeated User show_user_list = 7;
    int64 followed_count = 8;
    repeated User linked_users = 9;
    BattleInfoResponse battle_info = 10;
    int64 multi_live_type = 11;
    CohostTopic topic_info = 53;
    TopicSessionStatus topic_status = 54;
    CompetitionInfo competition_info = 60;

}

message RankTabInfo {
    optional ProfitRankType rank_type = 1;
    Text title = 3;
    int64 list_lynx_type = 4;

    enum ProfitRankType {
        PROFIT_RANK_TYPE_TYPE_HOURLY_RANK = 0;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK = 1;
        PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK = 2;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY = 3;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK = 4;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE = 5;
        PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY = 6;
        PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY = 7;
        PROFIT_RANK_TYPE_TYPE_DAILY_RANK = 8;
        PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK = 9;
        PROFIT_RANK_TYPE_TYPE_GAME_RANK = 10;
        PROFIT_RANK_TYPE_TYPE_DAILY_GAME = 11;
        PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK = 12;
        PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE = 13;
        PROFIT_RANK_TYPE_DAILY_ROOKIE = 14;
        PROFIT_RANK_TYPE_TYPE_TEAM_RANK = 15;
        PROFIT_RANK_TYPE_TYPE_CLASS_RANK = 16;
        PROFIT_RANK_TYPE_UNDEFINED_17 = 17;
        PROFIT_RANK_TYPE_UNDEFINED_18 = 18;
        PROFIT_RANK_TYPE_UNDEFINED_19 = 19;
        PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G = 20;
        PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B = 21;
        PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE = 22;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE = 23;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO = 24;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE = 25;}
}

message UserPosition {
    int64 uid = 1;
    MicPositionData position = 2;

}

message BizPermitJoinGroupResponse {
    ResponseData data = 1;

    message ResponseData {

    }
}

message BattleTaskSettle {
    optional Result task_result = 1;
    int64 reward_start_time = 2;
    int64 reward_start_timestamp = 3;

    enum Result {
        RESULT_SUCCEED = 0;
        RESULT_FAILED = 1;
        RESULT_BOTH_SUCCEED = 2;}
}

message RTCMixBase {
    int32 bitrate = 1;

}

message CapsuleBizParamsGamingModeratorsCommentGuide {
    User user = 1;
    Text reply_msg_text = 2;
    RecommendComment recommend_text = 3;

}

message GiftListResult {
    GiftsInfo gifts_info = 1;
    repeated Gift gift_list = 2;
    repeated GiftPage gift_pages = 3;
    repeated DoodleTemplate doodle_templates = 4;
    string response_hash = 5;
    int32 refresh_status = 6;
    string cold_gift_hash = 7;
    bool is_full_gift_data = 8;
    repeated string hot_fields = 9;
    GiftConfigs gift_configs = 10;
    repeated int32 tags = 11;
    DynamicRestriction dynamic_restriction = 12;
    map<int64, int64> beacon_bubble_priorities = 13;
    map<int64, int64> gift_label_priorities = 14;
    string strategy_token = 100;
    PanelRefreshData panel_refresh_data = 101;

}

message LinkerInfo {
    repeated UserInfo linked_users = 1;
    bool in_quick_pairing = 2;

}

message WebcastPaidContentLiveShoppingMessage {
    CommonMessageData base_message = 1;
    int32 action_type = 2;
    int32 live_series_number = 3;
    PopSeries pop_series = 4;
    TimeTag time_tag = 5;

}

message UseTop2Card {
    Top2CardInfo card_info = 1;
    int64 anchor_id = 2;
    Text display_content = 3;

}

message LetViewerSingResp {
    LinkMicCommonResp common_resp = 1;
    RTCExtraInfo applier_ext_info = 2;
    string applier_link_mic_id = 3;
    bool is_only_add_song = 4;
    BizApplyResponse multi_guest_resp_extra = 9527;

}

message WebcastRoomUserSeqMessage {
    CommonMessageData base_message = 1;
    repeated Contributor m_contributors = 2;
    int64 m_total = 3;
    string pop_str = 4;
    repeated Contributor seats = 5;
    int64 m_popularity = 6;
    int64 total_user = 7;
    int64 anonymous = 8;

}

message UseTop3Card {
    Top3CardInfo card_info = 1;
    int64 anchor_id = 2;
    Text display_content = 3;

}

message CompetitionInitiate {
    CompetitionInitiateInfo initiate_info = 1;
    map<int64, int32> gift_permissions = 2;

}

message PreviewRoom {
    int64 room_id = 1;
    int64 live_id = 2;
    string identity = 3;
    string cursor = 4;
    int64 account_type = 5;
    int64 enter_uniq_id = 6;

}

message RandomGiftBubble {
    string bubble_display_text = 1;
    ImageModel image = 2;

}

message WebcastLinkMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    int64 channel_id = 3;
    Scene scene = 4;
    LinkerInviteContent invite_content = 5;
    LinkerReplyContent reply_content = 6;
    LinkerCreateContent create_content = 7;
    LinkerCloseContent close_content = 8;
    LinkerEnterContent enter_content = 9;
    LinkerLeaveContent leave_content = 10;
    LinkerCancelContent cancel_content = 11;
    LinkerKickOutContent kick_out_content = 12;
    LinkedListChangeContent linked_list_change_content = 13;
    LinkerUpdateUserContent update_user_content = 14;
    LinkerWaitingListChangeContent waiting_list_change_content = 15;
    LinkerMuteContent mute_content = 16;
    LinkerRandomMatchContent random_match_content = 17;
    MultiLiveUpdateUserSettingContent multi_live_update_user_setting_content = 18;
    LinkerMicIdxUpdateContent mic_idx_update_content = 19;
    LinkerListChangeContent m_list_change_content = 20;
    CohostListChangeContent cohost_list_change_content = 21;
    LinkerMediaChangeContent media_change_content = 22;
    LinkerAcceptNoticeContent accept_notice_content_message = 23;
    LinkerSysKickOutContent sys_kick_out_content = 101;
    LinkmicUserToastContent user_toast_content = 102;
    string extra_str = 200;
    int64 expire_timestamp = 201;
    string transfer_extra = 202;

}

message MultiBattleFinishResponse {
    map<int64, BattleTeamResult> team_battle_result = 1;
    map<int64, BattleTeamUserArmies> team_armies = 2;
    BattleSetting battle_settings = 3;
    bool has_team_match_mvp_sfx = 4;

}

message WebcastBarrageMessage {
    CommonMessageData base_message = 1;
    BarrageEvent event = 2;
    optional BarrageType msg_type = 3;
    ImageModel icon = 4;
    Text content = 5;
    int64 duration = 6;
    ImageModel back_ground = 7;
    ImageModel right_icon = 8;
    int32 display_config = 9;
    int64 gallery_gift_id = 10;
    Scene scene = 11;
    DisplayControl control = 12;
    RightLabel right_label = 13;
    bool use_marquee = 14;
    optional ShowType show_type = 15;
    BadgeStruct badge = 16;
    optional RenderType render_type = 17;
    optional IconDisplayType left_icon_display_type = 18;
    ImageModel ribbon_animation = 19;
    AnimationData animation_data = 20;
    string hybrid_url = 21;
    string schema = 22;
    string sub_type = 23;
    Text common_barrage_content = 24;
    BarrageTypeUserGradeParam user_grade_param = 100;
    BarrageTypeFansLevelParam fans_level_param = 101;
    BarrageTypeSubscribeGiftParam subscribe_gift_param = 102;
    PrivilegeLogExtra privilege_log_extra = 103;
    BarrageTypeGiftGalleryParam gift_gallery_params = 104;

    enum BarrageType {
        BARRAGE_TYPE_UNKNOWN = 0;
        BARRAGE_TYPE_E_COM_ORDERING = 1;
        BARRAGE_TYPE_E_COM_BUYING = 2;
        BARRAGE_TYPE_NORMAL = 3;
        BARRAGE_TYPE_SUBSCRIBE = 4;
        BARRAGE_TYPE_EVENT_VIEW = 5;
        BARRAGE_TYPE_EVENT_REGISTERED = 6;
        BARRAGE_TYPE_SUBSCRIBE_GIFT = 7;
        BARRAGE_TYPE_USER_UPGRADE = 8;
        BARRAGE_TYPE_GRADE_USER_ENTRANCE_NOTIFICATION = 9;
        BARRAGE_TYPE_FANS_LEVEL_UPGRADE = 10;
        BARRAGE_TYPE_FANS_LEVEL_ENTRANCE = 11;
        BARRAGE_TYPE_GAME_PARTNERSHIP = 12;
        BARRAGE_TYPE_GIFT_GALLERY = 13;
        BARRAGE_TYPE_E_COM_BOUGHT = 14;
        BARRAGE_TYPE_COMMON_BARRAGE = 100;}
    enum ShowType {
        SHOW_TYPE_NORMAL = 0;
        SHOW_TYPE_FADE_IN_OUT = 1;}
    enum RenderType {
        RENDER_TYPE_NATIVE = 0;
        RENDER_TYPE_HYBRID = 1;
        RENDER_TYPE_ALPHA = 2;}
    enum IconDisplayType {
        ICON_DISPLAY_TYPE_IMAGE = 0;
        ICON_DISPLAY_TYPE_BADGE = 1;}
    message BarrageEvent {
        string event_name = 1;
        map<string, string> params = 2;

    }
    message RightLabel {
        string background_color = 1;
        Text content = 2;
        int64 height = 3;

    }
}

message WebcastGiftNoticeMessage {
    CommonMessageData base_message = 1;
    GiftNotice gift_notice = 2;

}

message LiveStudioPermissionStatus {
    int32 permission_type = 1;
    int64 valid_end_time = 2;
    int64 valid_start_time = 3;

}

message WebcastBizStickerMessage {
    CommonMessageData base_message = 1;
    repeated RoomSticker biz_sticker = 2;

}

message BizJoinChannelResponse {
    BizJoinChannelResponseData response_data = 1;

}

message QuizQuestionOption {
    string option_id = 2;
    string content = 3;
    repeated QuizImage image = 4;

}

message AvatarImageSelectTips {
    string title = 1;
    string desc = 2;
    repeated AvatarImageCase examples = 3;
    repeated string rules = 4;

}

message WebcastNewAnchorGuideMessage {
    CommonMessageData base_message = 1;
    NewAnchorGuideMsgInfo guide_msg = 2;

}

message LiveScenario {
    bool enable_live_video = 1;
    bool enable_live_third_party = 2;
    bool enable_live_screenshot = 3;
    bool enable_social_live = 4;
    bool enable_live_studio = 5;
    bool enable_pico_show = 6;
    bool enable_pico_game = 7;
    bool enable_pico_virtual = 8;
    bool enable_live_voice = 9;
    bool enable_streamelements = 11;
    bool enable_restream = 12;
    bool enable_live_console = 13;

}

message EffectSearchResponse {
    ResponseData data = 1;

    message ResponseData {
        repeated EffectStruct effects = 1;
        int64 next_offset = 2;
        bool has_more = 3;
        repeated EffectStruct collections = 4;

    }
}

message CancelApplyContent {
    Player applicant = 1;
    string applicant_link_mic_id = 2;

}

message AnchorGrowLevelImMsgV2 {
    int32 msg_type = 1;
    AnchorGrowLevelImMsgNotification notification_data = 2;

}

message StarCommentQueue {
    repeated StarCommentItem star_comment_list = 1;
    int32 queue_version = 2;

}

message FilterMsgRuleParamRandom {
    int32 percentage = 1;

}

message TakeTheStageInfo {
    optional TakeTheStageStatus take_the_stage_status = 1;
    int64 take_the_stage_start_time = 2;
    VictoryLapInfo victory_lap_info = 3;
    StartedInfo started_info = 100;
    FinalCallInfo final_call_info = 101;

    enum TakeTheStageStatus {
        TAKE_THE_STAGE_STATUS_UNKNOWN = 0;
        TAKE_THE_STAGE_STATUS_NOT_STARTED = 1;
        TAKE_THE_STAGE_STATUS_CANCELLED = 2;
        TAKE_THE_STAGE_STATUS_STARTED = 3;
        TAKE_THE_STAGE_STATUS_FINAL_CALL = 4;
        TAKE_THE_STAGE_STATUS_VICTORY_LAP = 5;
        TAKE_THE_STAGE_STATUS_FINISHED = 6;}
    message FinalCallInfo {
        int64 planned_settlement_end_time = 1;
        int64 extra_time_interval = 2;

    }
    message StartedInfo {
        int64 performance_start_time = 1;
        TakeTheStageOrderInfo order_info = 2;

    }
    message VictoryLapInfo {
        int64 planned_finish_time = 1;

    }
}

message GameTagCategory {
    optional GameTagType game_type = 1;
    string title = 2;

    enum GameTagType {
        GAME_TAG_TYPE_UNKNOWN = 0;
        GAME_TAG_TYPE_PC_GAME = 1;
        GAME_TAG_TYPE_MOBILE_GAME = 2;
        GAME_TAG_TYPE_CONSOLE_GAME = 3;}
}

message NumberConfig {
    int64 number = 1;
    FontStyle font_style = 2;
    CombineBadgeBackground background = 3;

}

message AnchorLevel {
    int32 level = 1;
    int64 experience = 2;
    int64 lowest_experience_this_level = 3;
    int64 highest_experience_this_level = 4;
    int64 task_start_experience = 5;
    int64 task_start_time = 6;
    int64 task_decrease_experience = 7;
    int64 task_target_experience = 8;
    int64 task_end_time = 9;
    ImageModel profile_dialog_bg = 10;
    ImageModel profile_dialog_back_bg = 11;
    ImageModel stage_level_icon = 12;
    ImageModel level_icon = 13;

}

message WebcastGuestShowdownMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    GuestShowdownContent play_content = 3;
    LinkerMediaChangeOperator operator_user_info = 4;
    int32 play_closed_reason = 5;
    int32 to_calculating_reason = 6;
    GuestShowdownConfigChange guest_showdown_config_change = 7;

}

message PaddingInfo {
    bool use_specific = 1;
    int32 middle_padding = 2;
    int32 badge_width = 3;
    int32 left_padding = 4;
    int32 right_padding = 5;
    int32 icon_top_padding = 6;
    int32 icon_bottom_padding = 7;
    optional HorizontalPaddingRule horizontal_padding_rule = 8;
    optional VerticalPaddingRule vertical_padding_rule = 9;

    enum HorizontalPaddingRule {
        HORIZONTAL_PADDING_RULE_USE_MIDDLE_AND_WIDTH = 0;
        HORIZONTAL_PADDING_RULE_USE_LEFT_AND_MIDDLE_AND_RIGHT = 1;}
    enum VerticalPaddingRule {
        VERTICAL_PADDING_RULE_USE_DEFAULT = 0;
        VERTICAL_PADDING_RULE_USE_TOP_AND_BOTTOM = 1;}
}

message AwardCardNotice {
    Text display_content = 1;
    repeated BattleUserInfo awarded_users = 2;

}

message RoomAuthMessageGoldenEnvelope {
    int64 revoke_end_time = 1;

}

message AnchorSettingInfo {
    repeated AnchorLastLayoutSetting last_layout_settings = 1;

    message AnchorLastLayoutSetting {
        Scene scene = 1;
        string layout_id = 2;

    }
}

message ShowContent {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 show_id = 3;
    int32 show_status = 4;
    int64 version = 5;
    int64 show_create_time = 6;
    ShowConfig show_config = 7;
    repeated ShowListUser showing_and_ready_list = 9;
    repeated ShowListUser finished_list = 10;
    TransitionInfo transition_info = 11;

}

message RoomReplayReason {
    string reason = 1;
    int64 value = 2;
    string type = 3;
    string promotion_id = 4;
    string type_name = 5;
    ImageModel type_icon = 6;

}

message WebcastQuestionSlideDownMessage {
    CommonMessageData base_message = 1;
    int64 question_id = 2;

}

message UseCriticalStrikeCard {
    CriticalStrikeCardInfo card_info = 1;
    int64 anchor_id = 2;
    Text display_content = 3;

}

message BattleTruthOrDareTriggerGuideV2 {
    string anchor_content_key = 1;
    string audience_content_key = 2;
    repeated TruthOrDareTip tips = 3;
    int32 guide_duration_second = 4;
    int32 tip_duration_second = 5;
    string rule_detail_url = 6;
    string lap_guide_key = 7;
    int32 lap_guide_duration_second = 8;
    bool is_first_time = 9;

    message TruthOrDareTip {
        string tip_type_key = 1;
        string tip_content_key = 2;

    }
}

message WaveReward {
    EmoteModel emote = 1;
    repeated EmoteModel f307emotes = 2;

}

message GuestShowdownFinishToPunishmentResponse {
    ResponseData data = 1;

    message ResponseData {
        bool success = 1;
        GuestShowdownContent play_content = 2;

    }
}

message WaveCardInfo {
    string card_name_key = 1;
    ImageModel card_image = 2;
    int64 send_time_sec = 3;
    BattleUserInfo send_user = 4;
    int64 effect_last_duration = 5;
    string rule_url = 6;
    int64 effect_time_sec = 7;
    int64 to_anchor_id = 8;

}

message HostDisplayResponse {
    ResponseData data = 1;

    message DisplayInfo {
        string host_icon_background_url = 1;
        string host_icon_url = 2;
        string host_color = 3;
        string icon_link_url = 4;
        int64 host_type = 5;

    }
    message ResponseData {
        DisplayInfo display_info = 1;

    }
}

message GuidePageResource {
    repeated Text texts = 1;
    repeated ImageModel icons = 2;
    repeated ImageModel animations = 3;
    repeated BadgeStruct badges = 4;

}

message InviteExtra {
    LogPb log_pb = 1;

    message LogPb {
        string client_log_id = 1;

    }
}

message GameBanner {
    BannerInRoom livechat_banner = 1;
    ImageModel banner_image = 2;
    int64 activity_start_time = 3;
    int64 activity_end_time = 4;
    string activity_id = 5;

}

message SubjectPositionInfo {
    float top_offset = 1;
    float center_offset = 2;
    int64 expire_time = 3;

}

message MultiLiveUserSettings {
    MultiLiveUserApplySettings multi_live_user_apply_settings = 1;
    map<int32, int64> channel_map = 2;
    CoHost co_host = 3;

}

message AudioStruct {
    int64 id = 1;
    int32 duration = 2;
    int32 audio_format = 3;
    string vid = 4;
    repeated string audio_urls = 5;
    double volume_loudness_lufs = 6;
    double volume_amplitude_peak = 7;

}

message MultiGuestPermissionInfo {
    bool flag = 1;
    int64 err_code = 2;
    string no_permission_prompt = 3;
    int64 link_permission_type = 4;

}

message StreamUrl {
    int32 provider = 1;
    int64 id = 2;
    string id_str = 3;
    map<string, string> resolution_name = 4;
    string default_resolution = 5;
    StreamUrlExtra extra = 6;
    string rtmp_push_url = 7;
    string rtmp_pull_url = 8;
    map<string, string> flv_pull_url = 9;
    repeated string candidate_resolution = 10;
    string hls_pull_url = 11;
    string hls_pull_url_params = 12;
    string default_pull_sdk_params = 13;
    map<string, string> pull_sdk_params = 14;
    string push_sdk_params = 15;
    repeated string push_url_list = 16;
    LiveCoreSDKData live_core_s_d_k_data = 17;
    map<string, string> hls_pull_url_map = 18;
    repeated string complete_push_urls = 19;
    int32 stream_control_type = 20;
    int64 stream_delay_ms = 22;
    string push_resolution = 23;
    int64 stream_app_id = 24;
    int64 alive_timestamp = 25;
    int64 stream_size_width = 26;
    int64 stream_size_height = 27;
    int32 drm_type = 28;

}

message GameTaskRewardInfo {
    string reward_id = 1;
    int32 status = 2;
    string reward_value = 3;

}

message GetShowRankResponse {
    ResponseData data = 1;

    message ShowRankUser {
        int64 user_id = 1;
        int32 order = 2;
        int64 score = 3;
        string nickname = 4;
        ImageModel avatar_thumb = 5;
        int64 follow_status = 6;

    }
    message ResponseData {
        repeated ShowRankUser show_rank_users = 1;

    }
}

message UserCountdownInfo {
    int64 countdown_id = 1;
    int64 score = 2;
    int64 target_score = 3;
    int32 completion_progress_percent = 4;

}

message QuizUserQuestionResult {
    string correct_answer = 1;
    string user_answer = 2;
    string question_id = 3;
    int32 question_no = 4;
    string simple_user_answer = 5;
    bool is_use_respawn = 6;

}

message Contributor {
    int64 m_score = 1;
    User m_user = 2;
    int64 m_rank = 3;
    int64 m_delta = 4;

}

message ContinueRoomResponse {
    Room room = 1;
    int32 cross_device_continue_scene = 2;
    int32 continue_scene = 3;
    int64 link_mic_user_num = 4;

}

message AnchorGrowLevelImMsg {
    int32 msg_type = 1;
    AnchorGrowLevelImMsgTaskDone task_done_data = 2;

}

message CancelApplyResponse {

}

message ReceiverRestriction {
    int64 user_id = 1;
    repeated int64 hidden_gids = 2;

}

message ActivePlaybook {
    int64 room_id = 1;
    int64 play_id = 2;
    int32 play_status = 3;
    Playbook playbook = 4;
    bool exists_custom_content = 5;
    int64 start_time = 6;
    int64 end_time = 7;

}

message BALinkStruct {
    int32 ba_link_permission = 1;
    string ba_link_data = 2;

}

message PreviewCommentInfo {
    int64 polling_interval = 1;
    repeated PreviewCommentItem comment_list = 2;
    int64 expire_time = 3;
    string title = 4;
    ImageModel icon = 5;

}

message WebcastWishlistUpdateMessage {
    CommonMessageData base_message = 1;

}

message AvatarState {
    int64 avatar_id = 1;

}

message GuideReportResponse {
    Data data = 1;

    message Data {

    }
}

message StateReqCommon {
    Scene scene = 1;
    int64 app_id = 2;
    int64 live_id = 3;
    Player myself = 4;
    int64 channel_id = 5;

}

message JoinDirectContent {
    LinkLayerListUser joiner = 1;
    AllListUser all_users = 2;

}

message AnchorLinkmicUserSettings {
    bool is_turn_on = 1;
    bool accept_multi_linkmic = 2;
    bool accept_not_follower_invite = 3;
    bool allow_gift_to_other_anchors = 4;
    bool block_invitation_of_this_live = 5;
    bool receive_friend_multi_host_invites = 6;
    bool receive_friend_multi_host_application = 7;
    bool block_this_multi_host_invites = 8;
    bool block_this_multi_host_application = 9;
    bool receive_not_friend_multi_host_invites = 10;
    bool receive_not_friend_multi_host_application = 11;
    bool allow_live_notice_of_friends = 12;
    bool allow_friend_invites = 13;
    bool allow_suggested_invites = 14;

}

message PublicAreaMessageCommon {
    int64 scroll_gap_count = 1;
    int64 anchor_scroll_gap_count = 2;
    bool release_to_scroll_area = 3;
    bool anchor_release_to_scroll_area = 4;
    bool is_anchor_marked = 5;
    CreatorSuccessInfo creator_success_info = 6;
    PortraitInfo portrait_info = 7;
    UserInteractionInfo user_interaction_info = 8;
    int64 admin_fold_type = 9;

    message TagItem {
        optional TagType tag_type = 1;
        Text tag_text = 2;

        enum TagType {
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_UNKNOWN = 0;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_USER_GRADE = 1;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_LEVEL = 2;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_WATCH_ME_DAYS_AGO = 3;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_CUSTOM = 4;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_TITLE_GIFT = 5;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_JOINED_TEAM = 6;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_PAY_ACCOMPANY_DAYS = 7;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_SPONSOR_GIFT_LAST_ROOM = 8;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MATCH_MVP_LAST_ROOM = 9;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_LARGE_AMOUNT_GIFT_LAST_ROOM = 10;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_COMMENT_LAST_ROOM = 11;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_TITLED_GIFT = 12;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MEET_ANNIVERSARY = 13;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_SLEEP = 14;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_SEND_HEART_ME = 15;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_JOIN_TEAM = 16;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_WATCH_LIVE = 17;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_COMMENT = 18;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT_TIMES = 19;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_WATCH_LIVE_DURATION = 20;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT = 21;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_LIVE_CONTRIBUTION_TOP = 22;
            TAG_TYPE_UNDEFINED_23 = 23;
            TAG_TYPE_UNDEFINED_24 = 24;
            TAG_TYPE_UNDEFINED_25 = 25;
            TAG_TYPE_UNDEFINED_26 = 26;
            TAG_TYPE_UNDEFINED_27 = 27;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_JUST_UPGRADE = 28;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_WATCH_DURATION = 29;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_COMMENT_NUM = 30;
            TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_GIFT_SENT_NUM = 31;}
    }
    message Topic {
        optional TopicActionType topic_action_type = 1;
        Text topic_text = 2;
        Text topic_tips = 3;

        enum TopicActionType {
            TOPIC_ACTION_TYPE_UNKNOWN = 0;
            TOPIC_ACTION_TYPE_FOLLOW = 1;}
    }
    message CreatorSuccessInfo {
        repeated TagItem tags = 1;
        Topic topic = 2;

    }
    message UserMetrics {
        optional UserMetricsType type = 1;
        string metrics_value = 2;

        enum UserMetricsType {
            USER_METRICS_TYPE_UNKNOWN = 0;
            USER_METRICS_TYPE_GRADE = 1;
            USER_METRICS_TYPE_SUBSCRIBE = 2;
            USER_METRICS_TYPE_FOLLOW = 3;
            USER_METRICS_TYPE_FANS_CLUB = 4;
            USER_METRICS_TYPE_TOP_VIEWER = 5;
            USER_METRICS_TYPE_GIFT = 6;}
    }
    message PortraitTag {
        string tag_id = 1;
        int64 priority = 2;
        string show_value = 3;
        string show_args = 4;

    }
    message PortraitInfo {
        repeated UserMetrics user_metrics = 1;
        repeated PortraitTag portrait_tag = 2;

    }
    message UserInteractionInfo {
        int64 like_cnt = 1;
        int64 comment_cnt = 2;
        int64 share_cnt = 3;

    }
}

message NoticeboardTemplateDeleteResponse {
    ResponseData data = 1;

    message ResponseData {
        bool is_success = 1;
        int64 noticeboard_template_id = 2;

    }
}

message PermitJoinGroupReq {
    LinkCommon common = 1;
    int32 type = 2;
    GroupPlayer myself = 3;
    GroupPlayer join_user = 4;
    int32 status = 5;
    int64 group_channel_id = 6;
    repeated ContentPositionMessage content_position_message = 7;
    BizPermitJoinGroupParams cohost_req_extra = 9527;

}

message CohostTopic {
    int64 id = 1;
    string title_key = 2;
    string title_text = 3;
    bool liked = 21;
    int64 total_heat = 22;
    int64 total_rivals = 23;
    repeated ImageModel rivals_avatar = 24;

}

message WebcastActivityQuizCardMessage {
    CommonMessageData base_message = 1;
    string schema = 2;
    string primary_id = 3;
    int64 timestamp = 4;
    QuizQuestionInfo question = 5;
    QuizAnswerInfo answer = 6;
    QuizFinalResult final_result = 7;
    QuizCallUpWebview call_up_webview = 8;
    QuizRulesIntroduction rules_introduction = 9;
    float sei_delay_multiple = 10;
    int64 sei_delay_bias = 11;
    int64 expired_time = 12;

}

message RoomReplayMoment {
    string id = 1;
    int64 moment_start_time = 2;
    int64 moment_end_time = 3;
    string vid = 4;
    int64 push_status = 5;
    RoomReplayReason reason = 6;
    ImageModel cover = 7;
    string play_url = 8;

}

message AnchorLevelPermission {
    int32 beauty = 1;
    int32 effects = 2;
    int32 share = 3;
    int32 moderator_setting = 4;
    int32 comment_setting = 5;
    int32 comment_filter = 6;
    int32 pause_live = 7;
    int32 flip = 8;
    int32 mirror = 9;
    int32 hear_your_own_voice = 10;
    int32 donation_sticker = 11;
    int32 full_screen_mode = 12;
    int32 live_center = 13;
    int32 topic = 14;
    int32 sticker = 15;
    int32 voice_effect = 16;
    int32 live_intro = 17;
    int32 webcast_data_interactionquestion = 18;
    int32 poll = 19;
    int32 pin = 20;
    int32 pictionary = 21;
    int32 viewer_rank_list = 22;
    int32 promote = 23;
    int32 customizable_poll = 24;
    int32 goody_bag = 25;
    int32 karaoke = 26;
    int32 treasure_box = 27;
    int32 portal = 28;
    int32 live_background = 29;
    int32 play_together = 30;

}

message InGameInfo {
    bool show_in_game_rank = 1;
    repeated int64 allow_guide_gametag_ids = 2;

}

message SubWaveData {
    SubWaveImMsg sub_wave_im_msg = 1;

}

message CohostListUser {
    int64 user_id = 1;
    string nick_name = 2;
    ImageModel avatar_thumb = 3;
    int64 linked_time = 4;
    optional LinkmicPlayType play_type = 5;
    int64 room_id = 6;
    optional LinkmicUserStatus linkmic_user_status = 7;
    int64 link_remaining_time = 8;
    optional CoHostPermissoinType permission_type = 9;
    string display_id = 10;
    int64 follow_status = 11;
    bool is_low_version = 12;
    int64 rival_user_id = 13;
    int64 rival_room_id = 14;
    bool is_initiator = 15;
    string linkmic_id_str = 16;
    int64 best_teammate_uid = 17;
    bool has_topic_perm = 18;
    int64 inner_channel_id = 19;

    enum LinkmicPlayType {
        LINKMIC_PLAY_TYPE_PLAY_TYPE_INVITE = 0;
        LINKMIC_PLAY_TYPE_PLAY_TYPE_APPLY = 1;
        LINKMIC_PLAY_TYPE_PLAY_TYPE_RESERVE = 2;}
    enum CoHostPermissoinType {
        CO_HOST_PERMISSOIN_TYPE_NO_PERM = 0;
        CO_HOST_PERMISSOIN_TYPE_COHOST_PERM = 1;
        CO_HOST_PERMISSOIN_TYPE_MULTI_HOST_PERM = 2;}
    enum LinkmicUserStatus {
        LINKMIC_USER_STATUS_USER_STATUS_NONE = 0;
        LINKMIC_USER_STATUS_USER_STATUS_LINKED = 1;
        LINKMIC_USER_STATUS_USER_STATUS_APPLYING = 2;
        LINKMIC_USER_STATUS_USER_STATUS_INVITING = 3;}
}

message LinkerListChangeContent {
    repeated LinkListUser on_line_users = 1;
    repeated LinkListUser waiting_users = 2;
    repeated LinkListUser connecting_users = 3;

}

message WebcastPortalMessage {
    CommonMessageData base_message = 1;
    int32 payload_type = 2;
    int64 portal_id = 3;
    int64 room_id = 4;
    PortalBuy portal_buy = 5;
    PortalInvite portal_invite = 6;
    PortalFinish portal_finish = 7;
    Portal portal = 8;
    int64 next_ping_time = 9;

    message PortalBuy {
        User sugar_daddy = 1;

    }
    message PortalFinish {
        User lucky_person = 1;

    }
    message PortalInvite {
        int64 invite_count_down = 1;
        int64 reward_count_down = 2;
        User sugar_daddy = 3;
        User anchor = 4;
        ImageModel cover = 5;

    }
}

message Diamond {
    int32 id = 1;
    string iap_id = 2;
    string price = 3;
    int32 exchange_price = 4;
    int32 count = 5;
    int32 giving_count = 6;
    string describe = 7;
    repeated CurrencyPriceItem currency_price = 8;
    string coupon_id = 9;
    int32 discount_price = 10;
    int32 stall_type = 11;
    string generic_iap_id = 12;
    bool is_last = 101;
    bool is_frequent = 102;

}

message GoodyBagCommonDetail {
    int32 winner_headcount = 1;
    int32 joined_headcount = 2;
    optional ParticipateMethod participate_method = 3;
    string participate_method_content = 4;
    int32 open_at = 5;
    int32 count_down_minutes = 6;
    ParticipateThresholdSelected participate_threshold_selected = 7;

    enum ParticipateMethod {
        PARTICIPATE_METHOD_UNKNOWN = 0;
        PARTICIPATE_METHOD_COMMENT = 1;
        PARTICIPATE_METHOD_SHARE = 2;
        PARTICIPATE_METHOD_NO_THRESHOLD = 3;}
}

message SubQueueData {
    int32 message_type_action = 1;
    SubQueue queue = 2;
    User current_user = 3;

}

message MsgNotifyControlResp {
    Data data = 1;

    message Data {
        map<int64, MsgNotifyQuota> quota_config = 1;

    }
}

message GameServerFeature {
    int32 id = 1;
    string value = 2;
    map<string, string> value_map = 3;

}

message ActivityRewardInfo {
    ImageModel m_bage = 1;
    ImageModel m_story_tag = 2;

}

message Top3CardInfo {
    CommonCardInfo common = 1;

}

message CompetitionStart {
    int64 competition_start_time = 1;
    CompetitionInitiateInfo initiate_info = 2;
    int64 end_timestamp = 3;
    int64 actual_end_timestamp = 4;

}

message RoomAuthOffReasons {
    string gift = 1;
    int32 un_available_click_reason = 2;

}

message ShortItemRefreshEntity {
    int32 interval = 1;
    repeated string refresh_items = 2;
    string activity_id = 3;
    int64 index = 4;
    int32 refresh_msg_type = 5;

}

message TopicPairResponse {
    ResponseData data = 1;

    message Setting {
        int64 expect_succ_sec = 1;
        int64 timeout_sec = 2;

    }
    message ResponseData {
        int64 pair_id = 1;
        repeated ImageModel rival_avatars = 2;
        Setting setting = 3;

    }
}

message PollOptionInfo {
    int64 votes = 1;
    string display_content = 2;
    int32 option_index = 3;
    repeated VoteUser vote_user_list = 4;

}

message WebcastPopularCardMessage {
    CommonMessageData base_message = 1;
    PopularCardInfo popular_card_info = 2;

    message PopularCardInfo {
        int32 status = 1;
        int64 end_time = 3;
        int32 enter_number = 4;

    }
}

message WebcastGameGuessToastMessage {
    CommonMessageData base_message = 1;
    string round_id_str = 2;
    bool show_type = 3;
    string show_option_idx_str = 4;
    string title_starling_key = 5;
    string result_starling_key = 6;
    string show_rank_str = 7;
    string option_id_str = 8;
    int64 diss_miss_seconds = 9;

}

message Author {
    int64 video_total_count = 1;
    int64 video_total_play_count = 2;
    int64 video_total_favorite_count = 6;

}

message WebcastFeedUserRoomMonitorMessage {
    CommonMessageData base_message = 1;
    int64 anchor_id = 3;
    int64 room_id = 4;
    int64 room_status = 5;
    int64 room_time = 6;
    int64 stream_status = 7;

}

message ProjectionConfig {
    bool use_projection = 1;
    ImageModel icon = 2;

}

message BattleRewardSettle {
    BattlePrompt reward_settle_prompt = 1;
    optional RewardStatus status = 2;

    enum RewardStatus {
        REWARD_STATUS_SUCCEED = 0;
        REWARD_STATUS_FAILED = 1;}
}

message GiftRandomEffectInfo {
    RandomGiftPanelBanner random_gift_panel_banner = 1;
    repeated int64 effect_ids = 2;
    string host_key = 3;
    string audience_key = 4;
    RandomGiftBubble random_gift_bubble = 5;

}

message GiftComboInfo {
    int32 combo_count = 1;
    ImageModel combo_effect_img = 2;

}

message JoinGroupContent {
    GroupChannelAllUser group_user = 1;
    GroupPlayer join_user = 2;
    optional JoinType type = 3;
    repeated RTCExtraInfo group_ext_info = 4;

    enum JoinType {
        JOIN_TYPE_UNKNOWN = 0;
        JOIN_TYPE_CHANNEL_APPLY = 1;
        JOIN_TYPE_CHANNEL_INVITE = 2;
        JOIN_TYPE_GROUP_APPLY = 100;
        JOIN_TYPE_GROUP_APPLY_FOLLOW = 101;
        JOIN_TYPE_GROUP_INVITE = 102;
        JOIN_TYPE_GROUP_INVITE_FOLLOW = 103;
        JOIN_TYPE_GROUP_OWNER_JOIN = 104;}
}

message ReqSong {
    KaraokeSong song = 1;
    repeated User user_list = 2;
    int64 req_count = 3;

}

message LikeIconInfo {
    repeated ImageModel icons = 1;
    repeated ImageModel icons_self = 2;
    repeated ImageModel default_icons = 3;

}

message WebcastGameRankNotifyMessage {
    CommonMessageData base_message = 1;
    optional MsgType msg_type = 2;
    Text notify_text = 3;

    enum MsgType {
        MSG_TYPE_RANK_IN_OUT = 0;
        MSG_TYPE_RANK_CHANGE = 1;
        MSG_TYPE_ANCHOR_ENCOURAGE = 2;
        MSG_TYPE_UN_KNOW = 255;}
}

message WebcastKaraokeReqMessage {
    CommonMessageData base_message = 1;
    repeated ReqSong song_list = 2;
    int64 total_req_count = 3;
    int64 req_timestamp_seconds = 4;

}

message TopFrameSummary {
    int64 id = 1;
    string title = 2;
    string schema = 3;
    repeated ShowInfo show_list = 4;
    string id_str = 5;

}

message Portal {
    int64 start_time = 1;
    int64 enter_count = 2;
    User sugar_daddy = 3;
    int64 room_id = 4;
    User anchor = 5;
    int64 portal_id = 6;
    int32 user_type = 7;
    int64 invitee_count = 8;
    int32 status = 9;
    int64 wait_duration = 10;
    int64 reward_duration = 11;
    int64 total_amount = 12;
    ImageModel cover = 13;

}

message OpenLsNotifyInfo {
    bool fit_live_studio_rule = 1;
    bool open_ls_notify_window = 2;

}

message UserStats {
    bool is_new_anchor = 1;
    bool is_new_moderator = 2;

}

message EcomLiveElementActions {
    repeated AtomAction atom_actions = 1;
    int64 version = 2;

}

message WebcastGuestInviteGuideMessage {
    CommonMessageData base_message = 1;
    repeated ImageModel invitee_avatar = 2;

}

message TemplateContent {
    int64 template_id = 1;
    string template_id_str = 2;
    optional PollTemplateStatus status = 3;
    optional PollKind poll_kind = 4;
    optional PollAppealStatus appeal_status = 5;
    string violation_id_str = 6;

    enum PollKind {
        POLL_KIND_NORMAL = 0;
        POLL_KIND_GIFT = 1;
        POLL_KIND_CUSTOMIZABLE = 2;
        POLL_KIND_CUSTOMIZABLE_GIFT = 3;
        POLL_KIND_QUICK_GIFT = 4;
        POLL_KIND_EMOTE = 5;}
    enum PollTemplateStatus {
        POLL_TEMPLATE_STATUS_TO_BE_REVIEWED = 0;
        POLL_TEMPLATE_STATUS_UNDER_REVIEW = 1;
        POLL_TEMPLATE_STATUS_REVIEWED = 2;
        POLL_TEMPLATE_STATUS_REFUSED = 3;}
    enum PollAppealStatus {
        POLL_APPEAL_STATUS_UNKNOWN = 0;
        POLL_APPEAL_STATUS_PASS = 1;
        POLL_APPEAL_STATUS_FAIL = 2;}
}

message InteractionQuestionInfo {
    bool has_recommend = 1;
    bool has_quick_answer = 2;
    int32 qa_entry_type = 3;
    bool has_lighting_strengthen = 4;

}

message PerceptionDialogInfo {
    int64 icon_type = 1;
    Text title = 2;
    Text sub_title = 3;
    Text advice_action_text = 4;
    Text default_action_text = 5;
    string violation_detail_url = 6;
    Scene scene = 7;
    int64 target_user_id = 8;
    int64 target_room_id = 9;
    int64 count_down_time = 10;
    bool show_feedback = 11;
    repeated PerceptionFeedbackOption feedback_options = 12;
    int64 policy_tip = 13;
    int32 appeal_popup = 14;

    enum PerceptionDialogIconType {
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE = 0;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING = 1;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC = 2;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC = 3;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE = 4;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX = 5;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE = 6;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED = 7;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT = 11;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS = 12;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH = 13;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL = 14;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION = 15;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT = 16;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING = 17;
        PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON = 18;}
}

message PollInfo {
    PollData poll_data = 1;
    UserVoteInfo user_vote_info = 2;

}

message AnchorReminderWordInfoMsg {
    Scene scene = 1;
    Text title = 2;
    string content = 3;
    string message_key = 4;

}

message WebcastSpecialPushMessage {
    CommonMessageData base_message = 1;
    string content = 2;
    string color = 3;
    string trace_id = 4;
    ImageModel icon = 5;
    string action_content = 6;
    string action_type = 7;
    int64 push_display_time = 8;

}

message AnchorReminderWordStatus {
    Scene scene = 1;
    int32 status = 2;
    string title = 3;
    string desc = 4;

}

message WalletRewardsContainerInfo {
    string title = 1;
    string content = 2;
    string schema = 3;
    bool need_popup = 4;
    string exposure_period = 5;
    string popup_schema = 6;
    int64 popup_type = 7;

}

message CapsuleBizParamsCommentFlaggedPrompt {
    int64 trigger = 1;

}

message FragmentTypeCount {
    int32 fragment_type = 1;
    int64 count = 2;

}

message GiftOperation {
    ImageModel left_image = 1;
    ImageModel right_image = 2;
    string title = 3;
    string title_color = 4;
    int32 title_size = 5;
    string scheme_url = 6;
    string event_name = 7;

}

message KickOutResponse {

}

message MonetizationTipsConfig {
    repeated int64 revenue_tips_trigger_time = 1;

}

message ChangeLayoutResp {
    repeated UserPosition user_position = 2;
    repeated string linked_user_ui_positions = 3;
    repeated ContentPosition content_pos = 4;
    repeated PosIdentity ui_pos = 5;

}

message GiftNotice {
    int32 notice_type = 1;
    int64 gift_id = 2;
    ImageModel effect = 3;
    int32 biz_type = 4;
    int64 period_id = 5;

}

message EndShowResponse {
    ResponseData data = 1;

    message ResponseData {
        bool success = 1;
        ShowContent show_content = 2;

    }
}

message UserIdentity {
    bool is_gift_giver_of_anchor = 1;
    bool is_subscriber_of_anchor = 2;
    bool is_mutual_following_with_anchor = 3;
    bool is_follower_of_anchor = 4;
    bool is_moderator_of_anchor = 5;
    bool is_anchor = 6;

}

message EnterRoomExtra {
    bool is_official_channel = 4;
    string region = 5;
    bool is_same_app_language = 6;
    string finished_perception_msg = 7;
    PunishEventInfo punish_info = 8;
    RechargeCustomError custom_error_for_gift_setting = 10;
    int64 user_restricted_mode = 11;

}

message CaptionInfo {
    bool open = 1;
    bool align_stream = 2;
    repeated string support_lang = 3;
    int32 location = 4;
    int32 show_type = 5;

}

message LiveStreamSubGoal {
    int32 type = 1;
    int64 id = 2;
    int64 progress = 3;
    int64 target = 4;
    LiveStreamSubGoalGift gift = 5;
    string id_str = 6;
    SubGoalPinInfo pin_info = 7;
    int32 source = 8;
    string recommended_text = 9;
    string recommended_header = 10;

}

message LetViewerSingReq {
    LinkCommon common = 1;
    int64 channel_id = 2;
    Player applier = 3;
    MicPositionData applier_pos = 4;
    int64 song_id = 5;
    BizApplyParams multi_guest_req_extra = 9527;

}

message QuickCohostContent {
    int64 content_id = 1;
    string display_text = 2;

}

message EpiDecision {
    int64 ts = 1;
    map<string, string> data = 2;
    map<string, string> data_v2 = 3;
    map<string, string> server_features = 4;

}

message BattleNoticeCommonGuide {
    Text display_text = 1;
    bool except_anchor = 2;

}

message WebcastMultiGuestSuggestMessage {
    CommonMessageData base_message = 1;
    repeated ImageModel suggested_image = 2;

}

message SubGoalPinCard {
    int64 goal_id = 1;
    int64 time_to_live = 2;
    SubPinCardText desc = 3;
    int64 target = 4;
    int64 progress = 5;

}

message WebcastHotRoomMessage {
    CommonMessageData base_message = 1;
    HotRoomData data = 2;

}

message PingResult {
    int32 room_status = 1;
    int64 room_id = 2;
    int64 next_ping_interval = 3;

}

message TextPiece {
    int32 type = 1;
    TextFormat format = 2;
    string string_value = 11;
    TextPieceUser user_value = 21;
    TextPieceGift gift_value = 22;
    TextPieceHeart heart_value = 23;
    TextPiecePatternRef pattern_ref_value = 24;
    TextPieceImage image_value = 25;

}

message RankUpdate {
    optional ProfitRankType request_first_show_type = 9;
    int64 supported_version = 10;
    bool owneronrank = 11;
    ImageModel entranceicon = 12;
    AffiliatedInfo affiliated_info = 13;

    enum ProfitRankType {
        PROFIT_RANK_TYPE_TYPE_HOURLY_RANK = 0;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK = 1;
        PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK = 2;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY = 3;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK = 4;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE = 5;
        PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY = 6;
        PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY = 7;
        PROFIT_RANK_TYPE_TYPE_DAILY_RANK = 8;
        PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK = 9;
        PROFIT_RANK_TYPE_TYPE_GAME_RANK = 10;
        PROFIT_RANK_TYPE_TYPE_DAILY_GAME = 11;
        PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK = 12;
        PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE = 13;
        PROFIT_RANK_TYPE_DAILY_ROOKIE = 14;
        PROFIT_RANK_TYPE_TYPE_TEAM_RANK = 15;
        PROFIT_RANK_TYPE_TYPE_CLASS_RANK = 16;
        PROFIT_RANK_TYPE_UNDEFINED_17 = 17;
        PROFIT_RANK_TYPE_UNDEFINED_18 = 18;
        PROFIT_RANK_TYPE_UNDEFINED_19 = 19;
        PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G = 20;
        PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B = 21;
        PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE = 22;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE = 23;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO = 24;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE = 25;}
    message AffiliatedInfo {
        Text text_content = 1;
        Text gap_desc = 2;
        int64 real_time_rank = 3;
        TeamRankBonusTime team_rank_bonus_time = 4;

    }
}

message WebcastPartnershipDropsAnchorMessage {
    CommonMessageData base_message = 1;
    int32 change_mode = 2;
    string drops_id = 3;
    int64 anchor_uid = 4;
    int32 anchor_join_drops_notice_type = 5;
    string drops_name = 6;

}

message CohostListChangeContent {
    repeated CohostListUser users = 1;

}

message WebcastAccessControlMessage {
    CommonMessageData base_message = 1;
    AccessControlCaptcha captcha = 2;

}

message AnchorReplayInfoData {
    repeated RoomReplay replays = 1;
    int32 style = 2;
    bool has_more = 3;
    int64 next_offset = 4;
    int32 amplify_status = 5;
    bool show_inbox_sub_pop_up = 6;

}

message WebcastGuessQuestionAuditMessage {
    CommonMessageData base_message = 1;
    GuessTemplate guess_template = 2;

}

message FinishShowingGuestResponse {
    ResponseData data = 1;

    message ResponseData {
        bool success = 1;
        ShowContent show_content = 2;

    }
}

message TemplateEffectExtra {
    string resource_id = 1;

}

message WebcastAuthorizationNotifyMessage {
    CommonMessageData base_message = 1;
    string from = 2;
    string style = 4;
    ContentBlock user_content = 6;
    RelationBlock user_relation = 7;

    message ContentBlock {
        bool show = 1;
        bool is_authorized = 2;
        string title = 3;
        string content = 4;
        string detail = 5;

    }
    message RelationBlock {
        bool show = 1;
        bool is_authorized = 2;
        string title = 3;
        string content = 4;
        string detail = 5;

    }
}

message WebcastLinkMicMethod {
    CommonMessageData base_message = 1;
    int32 m_type = 2;
    string access_key = 3;
    int32 anchor_link_mic_id = 4;
    int64 user_id = 5;
    int64 fan_ticket = 6;
    int64 total_fan_ticket = 7;
    int64 channel_id = 8;
    int32 layout = 9;
    int32 vendor = 10;
    int32 dimension = 11;
    string theme = 12;
    int64 invite_uid = 13;
    int32 reply = 14;
    int32 duration = 16;
    int32 match_type = 18;
    bool win = 19;
    string prompts = 20;
    int64 to_user_id = 21;
    string tips = 25;
    int64 start_time_ms = 26;
    int32 confluence_type = 27;
    int64 from_room_id = 28;
    int32 invite_type = 29;
    int64 sub_type = 30;
    string rtc_ext_info = 32;
    string app_id = 34;
    string app_sign = 35;
    string anchor_link_mic_id_str = 37;
    int64 rival_anchor_id = 38;
    int32 rival_linkmic_id = 39;
    string rival_linkmic_id_str = 40;
    bool should_show_popup = 41;
    bool rtc_join_channel = 51;
    int32 fan_ticket_type = 52;

    enum LinkmicReplyType {
        LINKMIC_REPLY_TYPE_RT_UNKNOWN = 0;
        LINKMIC_REPLY_TYPE_RT_AGREE = 1;
        LINKMIC_REPLY_TYPE_RT_REJECT = 2;}
}

message GiftHintInfo {
    int32 hint_id = 1;
    ImageModel hint_icon = 2;
    string hint_text = 3;
    int64 hint_show_delay_ms = 4;
    int64 gift_id = 5;
    bool has_gift_history = 6;

}

message User {
    int64 id = 1;
    string nick_name = 3;
    ImageModel avatar_thumb = 9;
    ImageModel avatar_medium = 10;
    ImageModel avatar_large = 11;
    bool is_verified = 12;
    int32 status = 15;
    int64 create_time = 16;
    int64 modify_time = 17;
    int32 secret = 18;
    string share_qrcode_uri = 19;
    FollowInfo follow_info = 22;
    UserHonor user_honor = 23;
    FansClubMember fans_club = 24;
    BorderInfo border = 25;
    string special_id = 26;
    ImageModel avatar_border = 27;
    ImageModel medal = 28;
    repeated ImageModel user_badges = 29;
    repeated ImageModel new_user_badges = 30;
    int32 top_vip_no = 31;
    UserAttr user_attr = 32;
    OwnRoom own_room = 33;
    int64 pay_score = 34;
    int64 fan_ticket_count = 35;
    AnchorInfo anchor_info = 36;
    optional LinkmicStatus link_mic_stats = 37;
    string username = 38;
    bool enable_show_commerce_sale = 39;
    bool with_fusion_shop_entry = 40;
    int64 pay_scores = 41;
    AnchorLevel anchor_level = 42;
    string verified_content = 43;
    Author author_info = 44;
    repeated User top_fans = 45;
    string sec_uid = 46;
    int32 user_role = 47;
    ActivityRewardInfo reward_info = 49;
    ImageModel personal_card = 52;
    AuthenticationInfo authentication_info = 53;
    repeated ImageModel media_badge_image_list = 57;
    repeated int64 commerce_webcast_config_ids = 60;
    repeated BorderInfo borders = 61;
    ComboBadgeInfo combo_badge_info = 62;
    SubscribeInfo subscribe_info = 63;
    repeated BadgeStruct badge_list = 64;
    repeated int64 mint_type_label = 65;
    FansClubInfo fans_club_info = 66;
    bool allow_find_by_contacts = 1002;
    bool allow_others_download_video = 1003;
    bool allow_others_download_when_sharing_video = 1004;
    bool allow_share_show_profile = 1005;
    bool allow_show_in_gossip = 1006;
    bool allow_show_my_action = 1007;
    bool allow_strange_comment = 1008;
    bool allow_unfollower_comment = 1009;
    bool allow_use_linkmic = 1010;
    ImageModel avatar_jpg = 1012;
    string background_img_url = 1013;
    int32 block_status = 1016;
    int32 comment_restrict = 1017;
    string constellation = 1018;
    int32 disable_ichat = 1019;
    int64 enable_ichat_img = 1020;
    int32 exp = 1021;
    bool fold_stranger_chat = 1023;
    int64 follow_status = 1024;
    int32 ichat_restrict_type = 1027;
    string id_str = 1028;
    bool is_follower = 1029;
    bool is_following = 1030;
    bool need_profile_guide = 1031;
    bool push_comment_status = 1033;
    bool push_digg = 1034;
    bool push_follow = 1035;
    bool push_friend_action = 1036;
    bool push_ichat = 1037;
    bool push_status = 1038;
    bool push_video_post = 1039;
    bool push_video_recommend = 1040;
    string verified_reason = 1043;
    bool enable_car_management_permission = 1044;
    repeated LiveEventInfo upcoming_event_list = 1045;
    string scm_label = 1046;
    EcommerceEntrance ecommerce_entrance = 1047;
    bool is_block = 1048;
    bool is_subscribe = 1090;
    bool is_anchor_marked = 1091;

    enum LinkmicStatus {
        LINKMIC_STATUS_DISABLE = 0;
        LINKMIC_STATUS_ENABLE = 1;
        LINKMIC_STATUS_JUST_FOLLOWING = 2;
        LINKMIC_STATUS_MULTI_LINKING = 3;
        LINKMIC_STATUS_MULTI_LINKING_ONLY_FOLLOWING = 4;}
    message ComboBadgeInfo {
        ImageModel icon = 1;
        int64 combo_count = 2;

    }
    message FansClubInfo {
        bool is_sleeping = 1;
        int64 fans_level = 2;
        int64 fans_score = 3;
        ImageModel badge = 4;
        int64 fans_count = 5;
        string fans_club_name = 6;

    }
    message OwnRoom {
        repeated int64 room_id_list = 1;

    }
}

message UseSmokeCard {
    SmokeCardInfo card_info = 1;
    int64 anchor_id = 2;
    Text display_content = 3;

}

message WebcastAvatarGenerateResultMessage {
    CommonMessageData base_message = 1;
    Avatar avatar = 2;

}

message AudienceCancelContent {
    int64 from_user_id = 1;
    User user = 2;

}

message StringBadge {
    optional BadgeDisplayType badge_display_type = 1;
    string content_str = 2;

    enum BadgeDisplayType {
        BADGE_DISPLAY_TYPE_UNKNOWN = 0;
        BADGE_DISPLAY_TYPE_IMAGE = 1;
        BADGE_DISPLAY_TYPE_TEXT = 2;
        BADGE_DISPLAY_TYPE_STRING = 3;
        BADGE_DISPLAY_TYPE_COMBINE = 4;}
}

message WebcastRankTextMessage {
    CommonMessageData base_message = 1;
    Scene scene = 2;
    int64 owner_idx_before_update = 3;
    int64 owner_idx_after_update = 4;
    Text self_get_badge_msg = 5;
    Text other_get_badge_msg = 6;
    int64 cur_user_id = 7;

    enum RankTestMessageScene {
        RANK_TEST_MESSAGE_SCENE_UNKNOWN = 0;
        RANK_TEST_MESSAGE_SCENE_ONLINE_AUDIENCE_TOP_N_UPDATE_PUBLIC_SCREEN = 1;}
}

message EmoteModel {
    string emote_id = 1;
    ImageModel image = 2;
    AuditStatus audit_status = 3;
    string uuid = 4;
    EmoteType emote_type = 5;
    ContentSource content_source = 6;
    EmotePrivateType emote_private_type = 7;
    string package_id = 8;
    AuditInfo audit_info = 9;
    optional RewardCondition reward_condition = 10;
    EmoteUploadInfo emote_upload_info = 11;
    int64 create_time = 12;
    optional EmoteScene emote_scene = 13;

    enum EmoteScene {
        EMOTE_SCENE_SUBSCRIPTION = 0;
        EMOTE_SCENE_GAME = 1;}
    enum EmoteType {
        EMOTE_TYPE_NORMAL = 0;
        EMOTE_TYPE_WITH_STICKER = 1;}
    enum ContentSource {
        CONTENT_SOURCE_UNKNOWN = 0;
        CONTENT_SOURCE_NORMAL = 1;
        CONTENT_SOURCE_CAMERA = 2;}
    enum RewardCondition {
        REWARD_CONDITION_SUBSCRIPTION = 0;
        REWARD_CONDITION_SUB_WAVE_CUSTOM = 1;}
    enum EmotePrivateType {
        EMOTE_PRIVATE_TYPE_NORMAL = 0;
        EMOTE_PRIVATE_TYPE_SUB_WAVE = 1;
        EMOTE_PRIVATE_TYPE_GUESSING = 101;}
    enum AuditStatus {
        AUDIT_STATUS_UNKNOWN = 0;
        AUDIT_STATUS_PASS = 1;
        AUDIT_STATUS_FAILED = 2;
        AUDIT_STATUS_REVIEWING = 3;
        AUDIT_STATUS_FORBIDDEN = 4;}
}

message SubWaveStrikeInfo {
    int64 start_time = 1;
    int64 end_time = 2;
    int64 round = 3;
    optional WaveStatus status = 4;
    repeated EmoteModel emote_list = 5;
    WaveReward strike_reward = 6;
    int64 strike_record_id = 7;
    int64 strike_target_count = 8;

    enum WaveStatus {
        WAVE_STATUS_RUNNING = 0;
        WAVE_STATUS_FINISHED = 1;
        WAVE_STATUS_FAILED = 2;
        WAVE_STATUS_STRIKE = 3;}
}

message WebcastOChannelModifyMessage {
    CommonMessageData base_message = 1;
    int64 end_time_stamp = 2;
    int64 channel_uid = 3;

}

message InviteTopHostInfo {
    string rank_type = 1;
    int64 top_index = 2;

}

message GiftPage {
    int32 page_type = 1;
    string page_name = 2;
    repeated Gift gifts = 3;
    bool display = 4;
    GiftOperation operation = 5;
    string event_name = 6;
    GiftPanelBanner page_panel_banner = 7;
    repeated Gift frequently_used_gifts = 8;
    map<int64, ForceInsertMetricsItem> force_insert_metrics = 9;
    string region = 10;
    map<int64, int64> force_insert_priority_map = 11;
    repeated Gift favourite_gifts = 12;
    repeated Gift backfill_gifts = 13;
    bool use_backfill_special_text = 14;
    repeated GiftGroupInTab groups_in_tab = 15;

    message GiftGroupInTab {
        int32 group_in_tab = 1;
        Text title = 2;
        Text description = 3;

    }
}

message JoinGroupReq {
    LinkCommon common = 1;
    GroupPlayer myself = 2;
    GroupPlayer target = 3;
    int32 type = 4;
    int64 group_channel_id = 5;
    repeated ContentPositionMessage content_position_message = 6;
    BizJoinGroupParams cohost_req_extra = 9527;

}

message WebcastPictionaryUpdateMessage {
    CommonMessageData base_message = 1;
    int64 correct_count = 2;
    int64 round_id = 3;

}

message SupportedActionsWrapper {
    int64 action_type = 1;

}

message TaskPeriodConfig {
    int64 task_start_time = 1;
    int64 duration = 2;
    int64 target_start_timestamp = 3;
    int32 click_action = 11;
    BattlePrompt click_toast_prompt = 12;
    int32 prompt_type = 21;
    BattlePrompt task_static_prompt = 22;
    int64 progress_target = 23;
    int32 target_type = 24;
    ImageModel icon = 25;
    string click_action_schema_url = 26;

}

message CapsuleBizParamsAnchorPinPerk {
    int64 pin_id = 1;
    int32 pin_card_type = 2;
    string template_id = 3;

}

message Hashtag {
    int64 id = 1;
    string title = 2;
    ImageModel image = 3;
    optional HashtagNamespace namespace = 4;

    enum HashtagNamespace {
        HASHTAG_NAMESPACE_GLOBAL = 0;
        HASHTAG_NAMESPACE_GAMING = 1;}
}

message UserModelPredictionData {
    int64 user_id = 1;
    map<string, double> model_prediction_data = 2;

}

message TextPieceImage {
    ImageModel image_model = 1;

}

message WalletPackage {
    string iap_id = 1;
    string usd_price_show = 2;

}

message LinkmicListResponse {
    int64 total_position_count = 1;
    repeated CohostListUser users = 2;

}

message WebcastGiftGuideMessage {
    CommonMessageData base_message = 1;
    Text content = 2;
    int64 gift_id = 3;
    bool has_sent = 4;
    string guide_type = 5;
    int64 display_seconds = 6;
    string trigger_name = 7;
    string schema_url = 8;
    bool should_use_config = 9;
    repeated GuidePageResource guide_page_resources = 10;
    string template_type = 11;
    GuideTarget guide_target = 12;
    string biz = 13;
    repeated string tags = 14;
    repeated int64 gift_ids = 15;
    bool use_server_config = 16;
    string sub_trigger_name = 17;

}

message WebcastPartnershipGameOfflineMessage {
    CommonMessageData base_message = 1;
    repeated OfflineGameInfo offline_game_list = 2;

    message OfflineGameInfo {
        string task_id = 1;
        string toast_text = 2;
        int32 task_list_len = 3;
        optional OfflineType offline_type = 4;

        enum OfflineType {
            OFFLINE_TYPE_TASK_OFFLINE = 0;
            OFFLINE_TYPE_EVENT_OFFLINE = 1;
            OFFLINE_TYPE_DROPS_OFFLINE = 2;}
    }
}

message NoticeboardOfficialTemplateUpdateResponse {
    ResponseData data = 1;

    message ResponseData {
        bool is_success = 1;
        NoticeboardTemplate template = 2;

    }
}

message GetNoticeboardMaterialContentResponse {
    ResponseData data = 1;

    message ResponseData {
        string media_node_id = 1;
        ConvertNoticeboardMaterialInfo convert_noticeboard_material_info = 2;
        int64 create_time = 3;
        int64 update_time = 4;

    }
}

message GiftBoxInfo {
    int64 capacity = 1;
    bool is_primary_box = 2;
    string scheme_url = 3;

}

message BattleComboInfo {
    int64 user_id = 1;
    int64 combo_status = 2;
    int64 combo_count = 3;
    string combo_icon_url = 4;
    int32 combo_type = 5;
    string combo_rule_guide_schema = 6;

}

message BannerInRoomCollection {
    BannerInfo top_right_banner = 1;
    BannerInfo bottom_right_banner = 2;
    BannerInfo gift_panel_banner = 3;
    BannerInfo middle_banner = 4;
    BannerInfo activity_top_right_banner = 5;
    BannerInfo top_left = 6;
    BannerInfo live_scene = 7;

    message BannerInfo {
        string url = 1;
        repeated BannerInRoom banner_list = 2;
        ImageModel animation_image = 3;
        BannerCollapseInfo collapse_info = 4;
        int32 height = 5;
        int32 width = 6;
        string lynx_container_url = 7;
        int64 container_type = 8;

    }
}

message StarlingTranslateResponse {
    ResponseData data = 1;

    message ResponseData {
        repeated StarlingTranslateInfo starling_translate_info = 1;

    }
}

message RiskCtl {
    bool disable_send_gift = 1;
    string error_msg = 2;
    string toast_reason = 3;

}

message CriticalStrikeCardInfo {
    string card_name_key = 1;
    ImageModel card_image = 2;
    int64 send_time_sec = 3;
    BattleUserInfo send_user = 4;
    int64 effect_last_duration = 5;
    int64 critical_strike_rate_low = 6;
    int64 critical_strike_rate_high = 7;
    int64 multiple = 8;
    string gift_name_key = 9;
    string rule_url = 10;
    int64 effect_time_sec = 11;
    int64 to_anchor_id = 12;
    string to_anchor_id_str = 13;

}

message RoomAudienceMultiGuestPermissionInfo {
    bool room_pack_success_flag = 1;
    MultiGuestPermissionInfo permission_info = 2;

}

message GetStateReq {
    StateReqCommon common = 1;
    int64 client_version = 2;

}

message FeedRoomLabel {
    int64 location = 1;
    Text text = 2;
    ImageModel icon = 3;
    string log_extra = 4;
    string background_color = 5;
    ImageModel bg_image = 6;

}

message TeamRankBonusTime {
    int64 start_timestamp = 2;
    int64 end_timestamp = 3;
    bool show_animation = 4;
    int64 bonus_rate = 5;
    int64 bonus_time_gift_id = 6;

}

message BizResumeParams {
    bool need_show_info = 1;
    bool need_guest_showdown = 2;

}

message WebcastOChannelAnchorMessage {
    CommonMessageData base_message = 1;
    int64 start_time_stamp = 2;
    int64 end_time_stamp = 3;
    int32 role_type = 4;
    bool exist_linkmic = 5;
    int32 linkmic_type = 6;

}

message EcDrawEntity {
    int32 type = 1;
    int32 sub_type = 2;
    int64 activity_id = 3;
    ImageModel incentive_image = 11;
    int64 incentive_record_id = 12;

}

message InviteResponse {
    int64 channel_id = 2;
    RTCExtraInfo rtc_info = 3;
    string inviter_link_mic_id = 4;
    string invitee_link_mic_id = 5;
    int64 invite_seq_id = 6;
    BizInviteResponse multi_guest_resp_extra = 9527;

}

message WebcastLinkmicAudienceNoticeMessage {
    CommonMessageData base_message = 1;
    int32 notice_type = 2;
    LinkMicAudienceTurnOnGuide turn_on_guide = 3;
    LinkMicAudienceInviteGuide invite_guide = 4;
    LinkmicAudienceInviteGroupChatMemberGuide group_chat_member_invite_guide = 5;

    message LinkMicAudienceNoticeText {
        string text = 1;

    }
    message LinkMicAudienceInviteGuide {
        LinkMicAudienceNoticeText content = 1;
        LinkMicAudienceNoticeText button_content = 2;
        User user = 3;
        int32 display_strategy = 4;
        string linkmic_audience_invite_notice_reason = 5;

    }
    message LinkMicAudienceTurnOnGuide {
        LinkMicAudienceNoticeText content = 1;
        LinkMicAudienceNoticeText button_content = 2;

    }
}

message GuideKeywordsResponse {
    Data data = 1;

    message UserInfo {
        bool is_in_eea = 1;
        bool has_ever_recharged = 2;
        int64 suggested_min_coins = 3;
        int64 suggested_max_coins = 4;
        string coin_exchange_prompt = 5;

    }
    message Data {
        int64 version = 1;
        UserInfo user_info = 2;
        repeated KeywordsLibrary keywords_library = 3;

    }
}

message BattleBonusStatus {
    int32 bonus_period = 1;
    BattlePrompt enter_room_prompt = 2;
    int64 task_progress = 11;
    bool user_assisted = 12;
    BattlePrompt reward_settle_prompt = 13;
    int64 reward_settle_duration = 14;
    int64 reward_settle_status = 15;

}

message BizJoinChannelResponseData {
    int32 layout_type_action = 1;
    int32 fix_mic_num_action = 2;

}

message PictionaryStatistics {
    int64 guess_correct_uv = 1;
    int64 guess_total_pv = 2;
    User first_user = 3;

}

message LinkerRandomMatchContent {
    User user = 1;
    int64 room_id = 2;
    int64 invite_type = 3;
    string match_id = 4;
    int64 inner_channel_id = 5;

}

message CapsuleBizParamsRandomGift {
    int64 round = 1;
    string effect_name_key = 2;
    Gift gift = 3;
    int64 type = 4;
    bool filter_host = 5;

}

message LinkerEnterContent {
    repeated ListUser list_users = 1;
    int64 multi_live_type = 2;
    MultiLiveAnchorPanelSettings anchor_setting_info = 3;

    enum LinkmicMultiLiveEnum {
        LINKMIC_MULTI_LIVE_ENUM_DEFAULT = 0;
        LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT = 1;}
}

message LiveStreamGoalContributor {
    int64 user_id = 1;
    ImageModel avatar = 2;
    string display_id = 3;
    int64 score = 4;
    string user_id_str = 5;
    bool in_room = 6;
    bool is_friend = 7;
    bool follow_by_owner = 9;
    bool is_fist_contribute = 10;
    repeated SubGoalContribution sub_goal_contributions = 11;

}

message WebcastPartnershipTaskShowMessage {
    CommonMessageData base_message = 1;
    int32 change_mode = 2;
    string task_id = 3;
    bool has_show_task = 4;

}

message InviteBizContent {
    MultiLiveAnchorPanelSettings multi_live_anchor_panel_settings = 1;
    optional ContentInviteSource invite_source = 2;
    User operator_user_info = 3;
    optional LinkMicUserAdminType operator_link_admin_type = 4;
    User invitee_user_info = 5;
    optional LinkmicShareRevenueSetting share_revenue_setting = 6;

    enum LinkmicShareRevenueSetting {
        LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_NOT_SET = 0;
        LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_OPEN = 1;
        LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_CLOSE = 2;}
    enum ContentInviteSource {
        CONTENT_INVITE_SOURCE_INVITE_SOURCE_UNKNOWN = 0;
        CONTENT_INVITE_SOURCE_INVITE_SOURCE_PANEL_GO_LIVE = 1;
        CONTENT_INVITE_SOURCE_INVITE_SOURCE_MUTUAL_NOTICE = 2;
        CONTENT_INVITE_SOURCE_INVITE_SOURCE_USER_PROFILE = 3;
        CONTENT_INVITE_SOURCE_INVITE_SOURCE_RESERVE = 4;}
    enum LinkMicUserAdminType {
        LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE = 0;
        LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE = 1;
        LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE = 2;}
}

message GiftsInfo {
    int64 new_gift_id = 1;
    int64 m_fast_gift_id = 3;
    string gift_words = 4;
    repeated GiftGroupCount gift_group_infos = 5;
    bool hide_recharge = 10;
    ImageModel gift_entrance_icon = 11;
    repeated GiftComboInfo gift_combo_infos = 13;
    bool show_first_recharge_entrance = 14;
    bool enable_first_recharge_dynamic_effect = 15;
    LiveLimitedTimeDiscountGiftInfo first_recharge_gift_info = 16;
    LiveLimitedTimeDiscountGiftInfo compensation_gift_info = 17;
    GiftIconInfo gift_icon_info = 18;
    int64 recently_sent_color_gift_id = 19;
    int64 default_loc_color_gift_id = 20;
    ImageModel color_gift_icon_animation = 21;
    int64 recommend_random_gift_id = 22;
    GiftPollInfo gift_poll_info = 23;
    RiskCtl risk_ctl = 24;
    FreqLimitGiftInfo freq_limit_gift_info = 25;
    bool is_universal = 26;
    ImageModel banner_gift_box_icon = 27;
    bool is_display_gift_box = 28;
    string gift_box_scheme_url = 29;
    ImageModel live_goal_label_icon = 30;
    GiftPanelBanner live_goal_banner = 31;
    repeated LimitedTimeRewardGiftInfo limited_time_reward_gift_infos = 32;
    TeamRankProgress team_rank_progress = 33;
    ImageModel panel_gift_gallery_icon = 34;
    string gift_gallery_detail_page_scheme_url = 35;
    string strategy_context = 36;
    GiftChallengeProgress gift_challenge_progress = 37;
    GiftGalleryInfo gift_gallery_info = 38;
    BatchGiftInfo batch_gift_info = 39;
    bool is_vault_eoy_bonus_eligible = 40;
    UGPointsGiftInfo points_gift_info = 41;
    LevelUpGiftInfo level_up_gift_info = 42;
    BeaconBubbleInfo beacon_bubble_info = 43;
    ServerStrategyContext server_strategy_context = 44;

    message BatchGiftInfo {
        int64 dismiss_expire_seconds = 1;
        int64 consume_limit = 2;

    }
    message BeaconBubbleInfo {
        ImageModel live_goal_icon = 1;
        ImageModel anchor_gallery_icon = 2;
        string live_goal_schema_url = 3;

    }
    message GiftGalleryInfo {
        string anchor_ranking_league = 1;
        string gallery_ranking_league = 2;

    }
    message LevelUpGiftInfo {
        int64 gift_id = 1;
        int64 left_count_to_level_up = 2;
        int64 level_up_count = 3;
        int64 current_count = 4;
        int64 num_of_upgrade_gifts_left = 5;
        string show_id = 6;
        int64 minimum_level_grade = 7;

    }
    message LimitedTimeRewardGiftInfo {
        int64 gift_id = 1;
        int64 valid_start = 2;
        int64 valid_end = 3;
        GiftPanelBanner gift_panel_banner = 4;

    }
    message UGPointsGiftInfo {
        int64 max_anchor_times = 1;
        bool has_send_gifts_in_history = 2;
        int64 valid_start_at = 3;
        int64 valid_end_at = 4;

    }
    message ServerStrategyContext {
        repeated int64 previous_sent_gift_ids = 1;

    }
}

message OrganizationModel {
    string name = 1;
    string desc = 2;
    string detail_url = 3;
    string donate_link = 4;
    ImageModel icon = 5;
    string organization_id = 6;

}

message WebcastInteractiveEffectMessage {
    CommonMessageData base_message = 1;
    string trigger_data = 2;

}

message GiftGoalVoiceAlterSwitch {
    int32 value = 1;

}

message ApplyGuideResponse {
    ResponseData data = 1;
    Extra extra = 2;

    message ResponseData {
        bool is_display = 1;
        int32 display_strategy = 2;
        bool trigger_again = 3;

    }
    message Extra {
        int64 now = 1;

    }
}

message CancelJoinGroupReq {
    LinkCommon common = 1;
    GroupPlayer myself = 2;
    GroupPlayer target = 3;
    int32 type = 4;
    int64 group_channel_id = 5;

}

message WebcastCohostTopicMessage {
    CommonMessageData base_message = 1;
    int32 action = 2;
    CohostTopic topic = 3;
    TopicSetContent topic_set_content = 5;
    HeatUpdateContent heat_update_content = 6;
    TopicSessionStatus session_status = 21;

}

message CancelJoinGroupResp {
    LinkMicCommonResp common_resp = 1;

}

message ReserveContent {
    User reserver = 1;
    int64 reserver_room_id = 2;
    int64 red_dot_num = 3;
    int64 created_timestamp = 4;
    int64 reservation_anchor_count = 5;

}

message WebcastGiftUnlockMessage {
    CommonMessageData base_message = 1;
    repeated Gift gifts = 2;
    Text bubble_text = 3;

}

message GetShowSettingsParams {

}

message WebcastEcDrawMessage {
    CommonMessageData base_message = 1;
    EcDrawEntity entity = 2;

}

message GiftPageByCreator {
    int32 page_type = 1;
    string page_name = 2;
    repeated GiftStructByCreator gifts = 3;
    bool display = 4;

}

message BannerInfo {
    string title = 1;
    string sub_title = 2;
    string text_color = 3;
    string left_color = 4;
    string right_color = 5;
    string core_image_url = 6;
    string background_image_url = 7;
    int64 gradient_angle = 8;
    int64 priority = 9;
    string banner_url = 10;
    int64 banner_id = 11;

}

message Playbook {
    int64 playbook_id = 1;
    SimpleUser author_info = 2;
    PlaybookContent content = 3;
    int64 total_favorites = 4;
    int64 total_usage = 5;
    int64 create_time = 6;
    int64 update_time = 7;
    bool is_updated_version = 8;
    bool is_my_favorite = 9;

}

message MatchInfo {
    int64 critical = 1;
    bool effect_card_in_use = 2;
    optional MultiplierType multiplier_type = 3;
    int64 multiplier_value = 4;

    enum MultiplierType {
        MULTIPLIER_TYPE_UNSPECIFIED = 0;
        MULTIPLIER_TYPE_CRITICAL_STRIKE = 1;
        MULTIPLIER_TYPE_TOP_2 = 2;
        MULTIPLIER_TYPE_TOP_3 = 3;}
}

message CreateInfoResponse {
    ResponseData data = 1;

    message ResponseData {
        int64 tns_report_interval_ms = 1;
        int64 cli_tns_collect_interval_ms = 2;
        OpenLsNotifyInfo open_ls_notify = 3;
        int64 server_timestamp = 4;
        bool has_live_studio_login = 5;
        bool have_mutil_guest_permission = 6;
        bool have_dual_device_camera = 7;
        bool have_screenshot_record = 8;
        Text tips = 9;
        InGameInfo in_game_info = 10;
        bool use_custom_cover = 11;
        bool allow_multi_stream = 12;
        bool enable_live_studio_monitor = 13;
        GameRevenueTipsMessage revenue_tips = 14;
        GameBannerContainer banner_data = 15;
        MonetizationTipsConfig monetization_tips_config = 16;
        int64 anchor_first_game_go_live_ts = 17;
        bool is_game_anchor = 18;
        int64 user_setting_detail = 19;
        int64 guess_result_notice_time = 20;

    }
}

message Top2CardInfo {
    CommonCardInfo common = 1;

}

message RivalsGameTag {
    int64 tag_id = 1;
    string tag_display_text = 2;

}

message GiftChallengeProgress {
    optional GiftChallengeStatus status = 1;
    int64 current_points = 2;
    repeated StageData stage_data = 3;
    int64 challenge_id = 4;

    enum GiftChallengeStatus {
        GIFT_CHALLENGE_STATUS_UNKNOWN = 0;
        GIFT_CHALLENGE_STATUS_NOT_JOINED = 1;
        GIFT_CHALLENGE_STATUS_JOINED = 2;
        GIFT_CHALLENGE_STATUS_COMPLETED = 3;}
    message StageData {
        int64 total_points = 1;
        int64 gift_id = 2;

    }
}

message JoinDirectBizContent {
    int64 reply_im_msg_id = 1;
    optional MultiGuestOutsideRoomInviteSource outside_room_invite_source = 2;

    enum MultiGuestOutsideRoomInviteSource {
        MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_UNKNOWN = 0;
        MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_PANEL = 1;
        MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_CAPSULE = 2;
        MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_EMPTY_POSITION = 3;}
}

message TopHostInfo {
    string rank_type = 1;
    int64 top_index = 2;

}

message ShowConfig {
    int64 duration_per_guest = 1;
    bool allow_open_mic_freely = 2;
    int64 transition_duration_of_config = 3;

}

message BoostCard {
    int64 m_card_id = 1;
    int32 m_task_source = 2;
    int64 m_task_id = 3;

}

message BattleNoticeAnchorGiftGuide {
    BattleNoticeText content = 1;

}

message PaidContentInfo {
    bool paid_content_permission = 1;
    string paid_content_live_data = 2;

}

message GroupChannelUser {
    int64 channel_id = 1;
    optional GroupStatus status = 2;
    optional JoinType type = 3;
    AllListUser all_user = 4;
    int64 join_time = 5;
    int64 linked_time = 6;
    GroupPlayer owner_user = 7;
    string group_linkmic_id = 8;

    enum JoinType {
        JOIN_TYPE_UNKNOWN = 0;
        JOIN_TYPE_CHANNEL_APPLY = 1;
        JOIN_TYPE_CHANNEL_INVITE = 2;
        JOIN_TYPE_GROUP_APPLY = 100;
        JOIN_TYPE_GROUP_APPLY_FOLLOW = 101;
        JOIN_TYPE_GROUP_INVITE = 102;
        JOIN_TYPE_GROUP_INVITE_FOLLOW = 103;
        JOIN_TYPE_GROUP_OWNER_JOIN = 104;}
    enum GroupStatus {
        GROUP_STATUS_UNKNOWN = 0;
        GROUP_STATUS_WAITING = 1;
        GROUP_STATUS_UNDEFINED_2 = 2;
        GROUP_STATUS_LINKED = 3;}
}

message QuickChatContent {
    int32 type = 1;
    string text = 2;
    string text_starling_key = 3;
    EmoteModel emote = 4;

}

message FeedBanner {
    string avg_color = 1;
    string title = 2;
    repeated string url_list = 3;
    string uri = 4;
    int32 height = 5;
    int32 width = 6;
    int64 id = 8;
    string schema_url = 9;
    int32 banner_type = 11;
    int64 business_type = 12;
    string business_source = 13;
    string activity_id = 14;

}

message AnchorGrowLevelImMsgTaskDone {
    int64 level = 1;
    bool isfinallevel = 2;
    bool iscompletelevel = 3;
    int64 taskid = 4;

}

message GiftListByCreatorResponse {
    Data data = 1;
    Extra extra = 2;

    message Data {
        GiftsInfoByCreator gifts_info = 1;
        repeated GiftPageByCreator pages = 2;
        GiftActivityCreator activity = 3;
        repeated GiftActivityCreator recommendation_activities = 4;

    }
    message Extra {
        string log_id = 1;

    }
}

message PermitApplyContent {
    Player approver = 1;
    string approver_link_mic_id = 2;
    MicPositionData position_data = 3;
    ReplyStatus reply_status = 4;
    DSLConfig dsl = 5;
    Player applier = 6;
    Player operator = 7;
    string applier_link_mic_id = 8;
    repeated string linked_user_ui_positions = 9;
    string applier_rtc_token = 10;
    repeated PosIdentity ui_pos = 11;

    enum AgreeStatus {
        AGREE_STATUS_AGREE_UNKNOWN = 0;
        AGREE_STATUS_AGREE = 1;
        AGREE_STATUS_REJECT = 2;}
}

message DispersionParam {
    int64 max_delay_ms = 1;
    int64 min_delay_ms = 2;

}

message WebcastGiftMessage {
    CommonMessageData base_message = 1;
    int32 fan_ticket_count = 3;
    int32 group_count = 4;
    int32 repeat_count = 5;
    int32 combo_count = 6;
    User from_user = 7;
    User to_user = 8;
    int32 repeat_end = 9;
    TextEffect text_effect = 10;
    int64 group_id = 11;
    int64 income_taskgifts = 12;
    int64 room_fan_ticket_count = 13;
    GiftIMPriority priority = 14;
    Gift m_gift = 15;
    string m_log_id = 16;
    int64 send_type = 17;
    PublicAreaCommon public_area_common = 18;
    Text tray_display_text = 19;
    int64 banned_display_effects = 20;
    GiftTrayInfo m_tray_info = 21;
    GiftMonitorInfo gift_monitor_info = 23;
    int64 color_id = 24;
    bool is_first_send_gift = 25;
    Text display_text_for_anchor = 26;
    Text display_text_for_audience = 27;
    string order_id = 28;
    GiftsBoxInfo gifts_in_box = 29;
    MsgFilter msg_filter = 30;
    repeated LynxGiftExtra lynx_extra = 31;
    UserIdentity user_identity = 32;
    MatchInfo match_info = 33;
    optional LinkmicGiftExpressionStrategy linkmic_gift_expression_strategy = 34;
    FlyingMicResources flying_mic_resources = 35;
    bool disable_gift_tracking = 36;
    AssetsModel asset = 37;
    optional GiftMessageVersion version = 38;
    repeated SponsorshipInfo sponsorship_info = 39;
    FlyingMicResources flying_mic_resources_v2 = 40;
    PublicAreaMessageCommon public_area_message_common = 41;
    string signature = 42;
    string signature_version = 43;
    bool multi_generate_message = 44;
    string to_member_id = 45;
    int64 to_member_id_int = 46;
    string to_member_nickname = 47;
    InteractiveGiftInfo interactive_gift_info = 48;

    enum LinkmicGiftExpressionStrategy {
        LINKMIC_GIFT_EXPRESSION_STRATEGY_CONTROL_V_1 = 0;
        LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_1 = 1;
        LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_2 = 2;}
    enum GiftMessageVersion {
        GIFT_MESSAGE_VERSION_0 = 0;
        GIFT_MESSAGE_VERSION_1 = 1;}
    message InteractiveGiftInfo {
        int64 cross_screen_delay = 1;
        int64 cross_screen_role = 2;
        optional GiftMessageIgnoreConfig ignore_config = 3;
        int64 uniq_id = 4;
        int64 to_user_team_id = 5;

        enum GiftMessageIgnoreConfig {
            GIFT_MESSAGE_IGNORE_CONFIG_NOT_IGNORE = 0;
            GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY = 1;
            GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_PS_M = 2;
            GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY_AND_PS_M = 3;}
    }
    message SponsorshipInfo {
        int64 gift_id = 1;
        int64 sponsor_id = 2;
        bool light_gift_up = 3;
        string unlighted_gift_icon = 4;
        string gift_gallery_detail_page_scheme_url = 5;
        bool gift_gallery_click_sponsor = 6;
        bool become_all_sponsored = 21;

    }
}

message CountdownForAllEndResponse {
    ResponseData data = 1;

    message ResponseData {
        bool success = 1;
        CountdownForAllContent play_content = 2;

    }
}

message PermissionLevelInfo {
    int32 not_finish_task_num = 1;
    int32 permission_level = 2;
    bool abnormal = 3;
    int32 cpp_version = 4;

}

message WebcastSubQueueMessage {
    CommonMessageData base_message = 1;
    int32 message_type_action = 2;
    SubQueue queue = 3;
    User current_user = 4;

}

message BagItemPreUpdateInfo {
    int64 count = 1;
    int64 min_expire_at = 2;

}

message PollData {
    int64 poll_id = 1;
    optional PollStatus poll_status = 2;
    int64 start_time = 3;
    int64 end_time = 4;
    repeated PollOptionInfo poll_option_list = 5;
    optional PollKind poll_kind = 6;
    string title = 7;
    User operator = 8;
    int64 template_id = 9;
    PollVoteLimit vote_limit = 14;
    int64 gift_id = 15;
    int64 poll_index = 16;
    string poll_sponsor = 17;
    int64 poll_user_cnt = 18;
    Gift gift = 19;
    optional PollEndType end_type = 20;
    string suggested_question_key = 21;
    bool is_suggested_question = 22;
    int64 original_poll_duration_ms = 23;

    enum PollStatus {
        POLL_STATUS_PS_UNKNOWN = 0;
        POLL_STATUS_ENABLE = 1;
        POLL_STATUS_DISABLE = 2;}
    enum PollEndType {
        POLL_END_TYPE_POLL_END_BY_TIME = 0;
        POLL_END_TYPE_POLL_END_BY_OWNER = 1;
        POLL_END_TYPE_POLL_END_BY_OTHER = 2;
        POLL_END_TYPE_POLL_END_BY_ADMIN = 3;}
    enum PollKind {
        POLL_KIND_NORMAL = 0;
        POLL_KIND_GIFT = 1;
        POLL_KIND_CUSTOMIZABLE = 2;
        POLL_KIND_CUSTOMIZABLE_GIFT = 3;
        POLL_KIND_QUICK_GIFT = 4;
        POLL_KIND_EMOTE = 5;}
}

message TopicExtraInfo {
    int64 start_time_sec = 1;
    int64 end_time_sec = 2;
    int64 all_rivals = 3;
    repeated ImageModel all_rivals_avatar = 4;

}

message CompetitionFinishResponse {
    ResponseData data = 1;

    message ResponseData {
        CompetitionFinish finish_info = 1;

    }
}

message SortStatsTag {
    string key = 1;
    string value = 2;

}

message GuidePopupBanner {
    int32 banner_style = 1;
    int32 banner_content_type = 2;
    repeated User top_cohosted_partners = 3;
    repeated Benefit benefits = 4;
    int32 recap_title_type = 5;
    string timestamp = 6;

}

message ProfileContent {
    bool use_content = 1;
    repeated IconConfig icon_list = 2;
    NumberConfig number_config = 3;

}

message PollBasicInfo {
    string poll_sponsor = 1;
    int64 gift_id = 2;
    string title = 3;
    bool is_suggested_question = 4;
    int64 user_cnt = 5;
    Gift gift = 6;
    string poll_id_str = 7;
    string suggested_question_key = 8;
    int64 poll_duration = 9;
    int64 time_remain = 10;
    int64 poll_index = 11;
    int64 template_id = 12;

}

message TextPiecePatternRef {
    string key = 1;
    string default_pattern = 2;

}

message RTCBitRateMap {
    int32 xx_1 = 1;
    int32 xx_2 = 2;
    int32 xx_3 = 3;
    int32 xx_4 = 4;

}

message RoomDecoration {
    ImageModel image = 2;
    repeated int64 input_rect = 4;
    int64 max_length = 8;
    int64 status = 9;
    int64 kind = 14;

}

message RoomHostMultiGuestPermissionInfo {
    bool room_pack_success_flag = 1;
    MultiGuestPermissionInfo permission_info = 2;

}

message BattleABTest {
    optional BattleABTestType ab_test_type = 1;
    int32 group = 2;

    enum BattleABTestType {
        BATTLE_A_B_TEST_TYPE_UNKNOWN_AB_TEST_TYPE = 0;
        BATTLE_A_B_TEST_TYPE_MEANWHILE_INVITE = 1;
        BATTLE_A_B_TEST_TYPE_SPECIFIED_GIFT = 2;
        BATTLE_A_B_TEST_TYPE_RT_C_MESSAGE_CHANNEL = 3;
        BATTLE_A_B_TEST_TYPE_CONNECTION_TIME_OUT = 4;
        BATTLE_A_B_TEST_TYPE_REMATCH_SKIP_TEAMMATE = 5;
        BATTLE_A_B_TEST_TYPE_OPT_INVITEE_4048 = 6;
        BATTLE_A_B_TEST_TYPE_BATTLE_AB_TEST_TYPE_TIME_CALIBRATE = 7;}
}

message GiftCollection {
    int64 round = 1;
    string effect_name_key = 2;
    Gift gift = 3;
    MessageType message_type = 4;
    bool is_filter_host = 5;
    string schema_url = 6;

}

message LivePermissionApplyResponse {
    ResponseData data = 1;

    message PermissionApplyInfo {
        int32 m_anchor_fans_num = 1;
        int32 m_forbidden_apply_countdown = 2;
        int32 m_apply_need_fans_num = 3;
        int32 m_target_live_time = 4;
        int32 m_forbidden_apply_days = 5;
        int32 m_apply_invalid_time = 6;
        int32 m_need_live_time = 7;
        int32 m_apply_status = 8;
        int32 m_apply_source = 9;

    }
    message ResponseData {
        map<string, PermissionApplyInfo> permission_info = 1;

    }
}

message WebcastRoomBottomMessage {
    CommonMessageData base_message = 1;
    string color = 3;
    string action_content = 6;
    string action_type = 7;
    int64 push_display_time = 8;
    ImageModel action_icon = 10;
    FlexImageModel new_background_image = 11;
    string source = 12;

}

message ProtoMessageFetchResult {
    repeated BaseProtoMessage messages = 1;
    string cursor = 2;
    int64 fetch_interval = 3;
    int64 now = 4;
    string internal_ext = 5;
    int32 fetch_type = 6;
    map<string, string> route_params = 7;
    int64 heartbeat_duration = 8;
    bool need_ack = 9;
    string push_server = 10;
    bool is_first = 11;
    string history_comment_cursor = 12;
    bool history_no_more = 13;

    message BaseProtoMessage {
        string method = 1;
        bytes payload = 2;
        int64 msg_id = 3;
        int32 msg_type = 4;
        int64 offset = 5;
        bool is_history = 6;

    }
}

message FinishShowingGuestParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 show_id = 3;
    int64 target_user_id = 4;

}

message EmoteUploadInfo {
    int64 user_id = 1;
    optional UserEmoteUploadSource emote_upload_source = 2;
    User user_info = 3;
    string user_id_str = 4;

    enum UserEmoteUploadSource {
        USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR = 0;
        USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER = 1;
        USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR = 2;}
}

message NoticeboardTemplateSaveResponse {
    ResponseData data = 1;

    message ResponseData {
        bool is_success = 1;
        NoticeboardTemplate template = 2;

    }
}

message CompetitionInfo {
    CompetitionCommon biz_common = 1;
    repeated CompetitionResultsTeamInfo team_infos = 2;
    map<int64, CompetitionABInfo> ab_infos = 4;
    TakeTheStageInfo take_the_stage_info = 100;
    GroupShowInfo group_show_info = 101;

    message GroupShowInfo {
        optional GroupShowStatus status = 1;
        int64 end_timestamp = 2;
        int64 actual_end_timestamp = 3;
        int64 start_timestamp = 4;

        enum GroupShowStatus {
            GROUP_SHOW_STATUS_UNKNOWN = 0;
            GROUP_SHOW_STATUS_STARTED = 1;
            GROUP_SHOW_STATUS_UNDEFINED_2 = 2;
            GROUP_SHOW_STATUS_UNDEFINED_3 = 3;
            GROUP_SHOW_STATUS_UNDEFINED_4 = 4;
            GROUP_SHOW_STATUS_UNDEFINED_5 = 5;
            GROUP_SHOW_STATUS_UNDEFINED_6 = 6;
            GROUP_SHOW_STATUS_UNDEFINED_7 = 7;
            GROUP_SHOW_STATUS_UNDEFINED_8 = 8;
            GROUP_SHOW_STATUS_UNDEFINED_9 = 9;
            GROUP_SHOW_STATUS_FINISHED = 10;}
    }
}

message WebcastDonationInfoMessage {
    CommonMessageData base_message = 1;
    string total_money = 2;
    string currency = 3;
    int64 total_user = 4;

}

message WebcastGameMomentMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    int64 event_time = 3;
    int64 max_time = 4;
    string unique_id = 5;
    repeated GameMomentEffectType moment_effects = 6;

    enum GameMomentMessageType {
        GAME_MOMENT_MESSAGE_TYPE_UNKNOWN = 0;
        GAME_MOMENT_MESSAGE_TYPE_VICTORY = 1;
        GAME_MOMENT_MESSAGE_TYPE_HIGHLIGHT = 2;
        GAME_MOMENT_MESSAGE_TYPE_DEFEAT = 3;
        GAME_MOMENT_MESSAGE_TYPE_KILL_NUM = 4;
        GAME_MOMENT_MESSAGE_TYPE_REMAIN_NUM = 5;}
    enum GameMomentEffectType {
        GAME_MOMENT_EFFECT_TYPE_UNKNOWN = 0;
        GAME_MOMENT_EFFECT_TYPE_GIFT_GUIDANCE = 1;
        GAME_MOMENT_EFFECT_TYPE_QUICK_COMMENT = 2;}
}

message SearchBar {
    ImageModel bg_image = 1;
    string content = 2;

}

message FeedExtra {
    int64 cost = 5;
    int64 max_time = 6;
    int64 min_time = 7;
    int32 total = 8;
    FeedBannerContainer banner_container = 9;
    string unread_extra = 11;
    int32 style = 12;
    string hashtag_text = 13;
    string no_result_reason = 16;
    string ocean_req_info = 17;
    string exit_guide = 18;
    string exit_guide_music = 19;

}

message GuestShowdownConfigChange {
    bool update_loser_num = 1;
    int32 loser_num = 2;
    bool update_add_duration = 3;
    int64 add_duration = 4;

}

message RoomResumeResponse {

}

message CaptionContent {
    string lang = 1;
    string content = 2;

}

message RoomMultiGuestLinkmicInfo {
    int64 pack_err_code = 1;
    MultiGuestLinkmicInfo multi_guest_linkmic_info = 2;
    string linkmic_room_create_ab_param = 3;

}

message WebcastImDeleteMessage {
    CommonMessageData base_message = 1;
    repeated int64 delete_msg_ids = 2;
    repeated int64 delete_user_ids = 3;

}

message UpdateShowContentResponse {
    ResponseData data = 1;

    message ResponseData {
        bool success = 1;
        ShowContent show_content = 2;

    }
}

message WebcastHashtagMessage {
    CommonMessageData base_message = 1;
    Hashtag hashtag = 2;

}

message GrowthJourneyBannerItem {
    string banner_content = 1;
    string banner_schema = 2;
    string banner_icon = 3;
    string banner_frequency_key = 4;

}

message NoticeboardTemplateFetchListParams {
    int32 fetch_type = 1;
    int64 room_id = 2;

}

message WebcastLinkMicBattleItemCard {
    CommonMessageData base_message = 1;
    int64 battle_id = 2;
    optional BattleCardMsgType msg_type = 3;
    CardObtainGuide card_obtain_guide = 4;
    UseCriticalStrikeCard use_critical_strike_card = 5;
    UseSmokeCard use_smoke_card = 6;
    AwardCardNotice award_card_notice = 7;
    UseExtraTimeCard use_extra_time_card = 8;
    UseSpecialEffectCard use_special_effect_card = 9;
    UsePotionCard use_potion_card = 10;
    UseWaveCard use_wave_card = 11;
    SpecialEffectNotice special_effect_notice = 12;
    UseTop2Card use_top2_card = 13;
    UseTop3Card use_top3_card = 14;

    enum BattleCardMsgType {
        BATTLE_CARD_MSG_TYPE_UNKNOWN_CARD_ACTION = 0;
        BATTLE_CARD_MSG_TYPE_CARD_OBTAIN_GUIDE = 1;
        BATTLE_CARD_MSG_TYPE_USE_CRITICAL_STRIKE_CARD = 2;
        BATTLE_CARD_MSG_TYPE_USE_SMOKE_CARD = 3;
        BATTLE_CARD_MSG_TYPE_AWARD_CARD_NOTICE = 4;
        BATTLE_CARD_MSG_TYPE_USE_EXTRA_TIME_CARD = 5;
        BATTLE_CARD_MSG_TYPE_USE_SPECIAL_EFFECT_CARD = 6;
        BATTLE_CARD_MSG_TYPE_USE_POTION_CARD = 7;
        BATTLE_CARD_MSG_TYPE_USE_WAVE_CARD = 8;
        BATTLE_CARD_MSG_TYPE_SPECIAL_EFFECT_NOTICE = 9;
        BATTLE_CARD_MSG_TYPE_USE_TOP_2_CARD = 10;
        BATTLE_CARD_MSG_TYPE_USE_TOP_3_CARD = 11;}
}

message GuideKeywordsReportResponse {
    Data data = 1;

    message Data {

    }
}

message WebcastPrivilegeDynamicEffectMessage {
    CommonMessageData base_message = 1;
    Scene scene = 2;
    ResourceAttr resource_attr = 3;
    DisplayControl control = 4;
    repeated Placeholder placeholder_list = 5;
    int32 effect_type = 6;
    StickerEffectModel sticker_model = 7;
    PrivilegeLogExtra privilege_log_extra = 100;

    message ShadowConfig {
        string shadow_color = 6;
        int32 shadow_dx = 7;
        int32 shadow_dy = 8;
        int32 shadow_radius = 9;

    }
    message StrokeConfig {
        string stroke_color = 1;
        int32 stroke_width = 2;

    }
    message FontStyle {
        int32 max_lines = 1;
        int32 font_size = 2;
        string font_color = 3;
        int32 weight = 4;
        bool enable_shadow = 5;
        repeated ShadowConfig shadow_config_list = 6;
        bool enable_stroke = 7;
        repeated StrokeConfig stroke_config_list = 8;
        int32 horizontal_align = 9;
        int32 vertical_align = 10;

    }
    message ImagePadding {
        int32 left_padding = 1;
        int32 right_padding = 2;
        int32 top_padding = 3;
        int32 bottom_padding = 4;

    }
    message Placeholder {
        int32 place_type = 1;
        string target_image = 2;
        int32 target_width = 3;
        int32 target_height = 4;
        Text text = 5;
        FontStyle font_style = 6;
        ImagePadding image_padding = 7;

    }
    message StickerEffectModel {
        string resource_id = 1;
        Text text = 2;
        int64 duration = 3;
        string panel_type = 4;

    }
}

message EffectInfo {
    int64 effect_id = 1;
    int64 role = 2;
    int64 user_id = 3;

}

message OnlineAudience {
    repeated Rank ranks = 1;
    Rank self_info = 2;
    string currency = 3;
    bool anchor_show_contribution = 4;
    bool deprecated = 5;
    int64 total = 6;
    string rule_url = 7;
    DisplayConfig display_config = 8;
    int64 anonymous = 9;
    int64 preview_count = 10;

    message DisplayConfig {
        bool show_online_panel = 1;
        bool can_panel_click = 2;
        bool show_avatar_list = 3;
        int64 avatar_count = 4;
        bool show_score = 5;

    }
    message Rank {
        User user = 1;
        int64 score = 2;
        int64 rank = 3;
        string gap_description = 4;
        int64 user_restriction_level = 5;
        RankUser rank_user = 6;

    }
}

message HashtagResponse {
    repeated Hashtag hashtags = 1;
    repeated GameTag game_tag_list = 2;
    Hashtag game_hash_tag = 3;
    repeated Hashtag obs_hash_tag = 4;
    repeated Hashtag live_voice_hashtag = 5;
    repeated Hashtag live_studio_hashtag = 6;

}

message LinkerGuestCancelEnlargeContent {
    Scene scene = 1;
    int32 is_reject_enlarge = 2;
    string cancel_linkmic_id = 3;

    enum EnlargeScreenScene {
        ENLARGE_SCREEN_SCENE_ENLARGE_UNKNOWN = 0;
        ENLARGE_SCREEN_SCENE_ENLARGE_HOST_SCREEN = 1;
        ENLARGE_SCREEN_SCENE_INVITE_ENLARGE_GUEST_SCREEN = 2;
        ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_HOST = 3;
        ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_GUEST = 4;
        ENLARGE_SCREEN_SCENE_HOST_RECEIVE_CANCEL_ENLARGE = 5;
        ENLARGE_SCREEN_SCENE_GET_ENLARGE_STATUS = 6;
        ENLARGE_SCREEN_SCENE_ENLARGE_POSITION = 7;
        ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_POSITION = 8;
        ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_ALL = 9;
        ENLARGE_SCREEN_SCENE_CHANGE_ENLARGE_RECORD = 10;}
}

message GiftColorInfo {
    int64 color_id = 1;
    string color_name = 2;
    repeated string color_values = 3;
    ImageModel color_image = 4;
    ImageModel gift_image = 5;
    int64 color_effect_id = 6;
    bool is_default = 7;

}

message WebcastAnchorGetSubQuotaMessage {
    CommonMessageData base_message = 1;
    string description = 2;

}

message FrameInfo {
    string frame_img_url = 1;
    int64 timestamp = 2;

}

message SortStatsTags {
    repeated SortStatsTag for_app_log = 1;
    repeated SortStatsTag for_client_func = 2;

}

message WebcastOecLiveHotRoomMessage {
    CommonMessageData base_message = 1;
    map<string, string> path_map = 2;
    int64 expire_at = 3;

}

message WebcastAudienceReserveUserStateMessage {
    CommonMessageData base_message = 1;
    int64 room_id = 2;
    optional AudienceReserveType type = 3;
    AudienceReserveUserInfo audience_reserve_user_info = 4;
    AudienceReserveContent audience_reserve_content = 100;
    AudienceCancelContent audience_cancel_content = 101;
    AudienceReplyContent audience_reply_content = 102;
    AudienceRejectContent audience_reject_content = 103;

    enum AudienceReserveType {
        AUDIENCE_RESERVE_TYPE_UNKNOWN_FIELD = 0;
        AUDIENCE_RESERVE_TYPE_RESERVE = 1;
        AUDIENCE_RESERVE_TYPE_CANCEL = 2;
        AUDIENCE_RESERVE_TYPE_WAIT = 3;
        AUDIENCE_RESERVE_TYPE_DONE = 4;
        AUDIENCE_RESERVE_TYPE_REJECT = 5;}
}

message CountdownUser {
    int64 user_id = 1;
    string linkmic_id = 2;
    int64 score = 3;
    int32 completion_progress_percent = 4;
    string nickname = 5;
    string display_id = 6;

}

message WebcastRealtimeLiveCenterMethod {
    CommonMessageData base_message = 1;
    string room_id = 2;
    RealtimeLiveCenterBaseData base_info = 3;
    RealtimeLiveCenterTips tips_info = 4;
    RealtimeLiveCenterShopData shop_info = 5;
    ColdStartStatData cold_start_stat_data = 6;
    RealtimeReminderWordInfoMsg reminder_word_info = 7;

}

message CreateChannelContent {
    Player owner = 1;
    string owner_link_mic_id = 2;

}

message CeremonyEffect {
    ImageModel grade_background = 1;
    ImageModel avatar_border = 2;

}

message LinkmicUserInfo {
    int64 user_id = 1;
    string linkmic_id_str = 2;
    int64 room_id = 3;
    int64 linked_time = 4;

}

message MaskLayer {
    Text title = 1;
    Text sub_title = 2;
    int32 mask_layer_type = 3;
    PunishEventInfo punish_info = 4;

}

message LiveStreamSubGoalGift {
    string name = 1;
    ImageModel icon = 2;
    int64 diamond_count = 3;
    int32 type = 4;

}

message SkinDrawerEntrance {
    int64 style = 1;
    ImageModel cover = 2;
    string title = 3;
    string title_key = 4;

}

message MultiLiveAnchorPanelSettings {
    int64 user_id = 1;
    int32 layout_type = 2;
    int32 fix_mic_num_action = 3;
    int32 allow_viewer_req = 4;
    int32 only_allow_follower_req = 5;
    int32 applier_sort_setting = 7;
    int64 applier_sort_gift_score_threshold = 8;
    int32 allow_request_from_friends = 9;
    int32 allow_request_from_followers = 10;
    int32 allow_request_from_others = 11;
    int32 enable_show_multi_guest_layout = 12;

}

message StreamResolution {
    int32 stream_resolution = 1;
    string resolution_text = 2;
    string resolution_describe = 3;
    int32 min_bit_rate = 4;

}

message ContentPositionMessage {
    string content_i_d = 1;
    optional ContentPositionType content_type = 2;

    enum ContentPositionType {
        CONTENT_POSITION_TYPE_UNKNOWN = 0;
        CONTENT_POSITION_TYPE_STREAM = 1;
        CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT = 2;
        CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE = 3;}
}

message EffectStruct {
    string name = 1;
    string hint = 2;
    UrlDataStruct hint_icon = 3;
    string sdk_version = 4;
    string app_version = 5;
    UrlDataStruct file_url = 6;
    UrlDataStruct icon_url = 7;
    string id = 8;
    string effect_id = 9;
    string device_platform = 10;
    repeated string types = 11;
    repeated string tags = 12;
    string tags_updated_at = 13;
    string parent = 14;
    repeated string children = 15;
    int32 effect_type = 16;
    repeated string music = 17;
    int32 source = 18;
    string designer_id = 19;
    string schema = 20;
    repeated string requirements = 21;
    string extra = 22;
    bool is_busi = 23;
    string designer_encrypted_id = 26;
    string sdk_extra = 27;
    string resource_id = 28;
    string ad_raw_data = 29;
    repeated string bind_ids = 30;
    int64 ptime = 31;
    string grade_key = 32;
    string composer_params = 33;
    UrlDataStruct hint_file = 34;
    int64 use_number = 35;
    repeated string types_sec = 36;
    repeated string requirements_sec = 37;
    string panel = 38;
    string model_names = 39;
    string model_names_sec = 40;
    int32 hint_file_format = 41;
    string poi_id = 42;
    bool is_poi = 43;
    repeated string challenge = 44;
    repeated string system_list = 45;
    string original_effect_id = 46;
    UrlDataStruct trans_file_url = 47;
    string template_effect_id = 48;
    int64 rec_tag = 49;
    TemplateEffectExtra template_effect_extra = 50;
    DiffInfo file_diff = 51;
    int32 provider = 52;
    int64 package_size = 53;

}

message EmoteWithIndex {
    int32 index = 1;
    EmoteModel emote_model = 2;

}

message ShowInfo {
    int64 show_start_time = 1;
    int64 show_end_time = 2;
    repeated User anchors = 3;
    string show_introduction = 4;

}

message RivalExtraInfo {
    string text = 1;
    optional TextType text_type = 2;
    string label = 3;
    optional AnchorLayer anchor_layer = 4;
    LinkerInfo linker_info = 5;
    AnchorLinkmicUserSettings linkmic_user_settings = 6;
    optional InviteBlockReason invite_block_reason = 8;
    optional LinkmicPlayType show_play_type = 9;
    Tag tag = 11;
    ReserveInfo reserve_info = 12;
    optional DetailBlockReason detail_block_reason = 13;
    OptPairInfo opt_pair_info = 14;
    TagV2 tag_v2 = 15;
    int64 eoy_level = 16;
    BattleInfo battle_info = 17;
    optional CohostLayoutMode cohost_layout_mode = 18;
    RivalsGameTag game_tag = 19;

    enum TextType {
        TEXT_TYPE_UNKNOWN = 0;
        TEXT_TYPE_CURRO_OMF_AN_TICKET = 1;
        TEXT_TYPE_TOTAL_DIAMOND_COUNT = 2;
        TEXT_TYPE_DISTANCE = 3;
        TEXT_TYPE_DISTANCE_CITY = 4;}
    enum AnchorLayer {
        ANCHOR_LAYER_UNKNOWN = 0;
        ANCHOR_LAYER_TOP = 1;
        ANCHOR_LAYER_SMALL = 2;}
    enum InviteBlockReason {
        INVITE_BLOCK_REASON_NONE = 0;
        INVITE_BLOCK_REASON_IS_LINKING = 1;
        INVITE_BLOCK_REASON_INVITATION_DENIED = 2;
        INVITE_BLOCK_REASON_PERMISSION_DENIED = 3;
        INVITE_BLOCK_REASON_LOW_CLIENT_VERSION = 4;
        INVITE_BLOCK_REASON_ROOM_PAUSED = 5;
        INVITE_BLOCK_REASON_LINK_MIC_FULL = 6;
        INVITE_BLOCK_REASON_MATURE_THEME_NOT_MATCH = 7;
        INVITE_BLOCK_REASON_RESERVE_FULL = 8;
        INVITE_BLOCK_REASON_REGIONAL_BLOCK = 9;}
    enum LinkmicPlayType {
        LINKMIC_PLAY_TYPE_PLAY_TYPE_INVITE = 0;
        LINKMIC_PLAY_TYPE_PLAY_TYPE_APPLY = 1;
        LINKMIC_PLAY_TYPE_PLAY_TYPE_RESERVE = 2;}
    enum DetailBlockReason {
        DETAIL_BLOCK_REASON_BLOCK_REASON_NONE = 0;
        DETAIL_BLOCK_REASON_IN_LINK_MIC = 100;
        DETAIL_BLOCK_REASON_MULTI_HOST_FULL = 101;
        DETAIL_BLOCK_REASON_IN_COHOST_LINK_MIC = 102;
        DETAIL_BLOCK_REASON_DEAL_OTHER_INVITE = 103;
        DETAIL_BLOCK_REASON_DEAL_OTHER_APPLY = 104;
        DETAIL_BLOCK_REASON_IN_PK_STATUS = 105;
        DETAIL_BLOCK_REASON_SELF_IN_PK_STATUS = 106;
        DETAIL_BLOCK_REASON_IN_COHOST_INVITE_APPLY = 107;
        DETAIL_BLOCK_REASON_IN_AUDIENCE_LINK_MIC = 108;
        DETAIL_BLOCK_REASON_WAITING_AUTO_MATCH = 109;
        DETAIL_BLOCK_REASON_INVITE_NEED_TO_JOIN = 110;
        DETAIL_BLOCK_REASON_JOIN_NEED_TO_INVITE = 111;
        DETAIL_BLOCK_REASON_IN_TAKE_THE_STAGE_STATUS = 112;
        DETAIL_BLOCK_REASON_SELF_IN_TAKE_THE_STAGE_STATUS = 113;
        DETAIL_BLOCK_REASON_NOLINK_MIC_PERMISSION = 200;
        DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_SETTING_CLOSED = 202;
        DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_NOT_FOLLOWER = 203;
        DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_BLOCK_INVITATION_OF_LIVE = 204;
        DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_FRIEND_INVITE = 205;
        DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_FRIEND_APPLY = 206;
        DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_NOT_FRIEND_INVITE = 207;
        DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_NOT_FRIEND_APPLY = 208;
        DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_BLOCK_INVITATION_OF_MULTI_HOST = 209;
        DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_BLOCK_APPLY_OF_MULTI_HOST = 210;
        DETAIL_BLOCK_REASON_ROOM_PAUSED = 300;
        DETAIL_BLOCK_REASON_LIVE_TYPE_AUDIO = 301;
        DETAIL_BLOCK_REASON_ROOM_INTERACTION_CONFLICT = 302;
        DETAIL_BLOCK_REASON_RIVAL_VERSION_NOT_SUPPORT = 303;
        DETAIL_BLOCK_REASON_SELF_VERSION_NOT_SUPPORT = 304;
        DETAIL_BLOCK_REASON_MATURE_THEME_MISMATCH = 305;
        DETAIL_BLOCK_REASON_SELF_IN_OFFICIAL_CHANNEL = 306;
        DETAIL_BLOCK_REASON_RIVAL_IN_OFFICIAL_CHANNEL = 307;
        DETAIL_BLOCK_REASON_IN_OFFICIAL_BACKUP_CHANNEL = 308;
        DETAIL_BLOCK_REASON_RIVAL_RESERVE_FULL = 309;
        DETAIL_BLOCK_REASON_ANCHOR_NOT_LIVING = 310;
        DETAIL_BLOCK_REASON_ANCHOR_IS_SELF = 311;
        DETAIL_BLOCK_REASON_PRIVATE_ROOM = 312;
        DETAIL_BLOCK_REASON_BLOCKED_BY_RIVAL = 313;
        DETAIL_BLOCK_REASON_SELF_BLOCKED_RIVAL = 314;
        DETAIL_BLOCK_REASON_VIEWER_REGION_NOT_SUPPORT = 315;
        DETAIL_BLOCK_REASON_SUBSCRIBER_ROOM = 316;
        DETAIL_BLOCK_REASON_REGIONAL_BLOCK = 317;
        DETAIL_BLOCK_REASON_PENALTY_BANNED = 318;
        DETAIL_BLOCK_REASON_BLOCK_PROGRAM_LIVE_TAB_ROOM = 319;
        DETAIL_BLOCK_REASON_NETWORK_ERROR = 400;
        DETAIL_BLOCK_REASON_ROOM_FILTER_ERROR = 401;}
    enum CohostLayoutMode {
        COHOST_LAYOUT_MODE_NORMAL = 0;
        COHOST_LAYOUT_MODE_SCREEN_SHARE = 1;}
    message BattleInfo {
        optional BattleInfoType info_type = 1;
        int64 value = 2;

        enum BattleInfoType {
            BATTLE_INFO_TYPE_NONE = 0;
            BATTLE_INFO_TYPE_AVERAGE_SCORE = 1;
            BATTLE_INFO_TYPE_MAX_SCORE = 2;
            BATTLE_INFO_TYPE_LAST_SCORE = 3;
            BATTLE_INFO_TYPE_WIN_STREAK = 4;}
    }
    message ReserveInfo {
        int64 reservation_id = 1;
        ReplyStatus reply_status = 2;
        string bubble_tip = 3;
        int64 response_time = 4;
        bool is_reservation_sender = 5;
        int64 created_timestamp = 6;
        bool viewed = 7;

        enum ReserveReplyStatus {
            RESERVE_REPLY_STATUS_UNKNOWN = 0;
            RESERVE_REPLY_STATUS_WAIT_FORME = 1;}
    }
    message Tag {
        int32 tag_type = 1;
        string tag_value = 2;
        string tag_text = 3;

    }
}

message GradeScoreRule {
    int32 grade = 1;
    int64 grade_min_score = 2;
    int64 grade_max_score = 3;

}

message CommentSwitchSettings {
    int32 chat = 1;
    int32 chat_spam_comments = 2;
    int32 chat_l2 = 3;
    int32 chat_community_flagged = 4;
    int32 chat_community_flagged_review = 5;
    int32 comment_tray = 6;
    int32 mute_duration = 7;

}

message GiftModeMeta {
    int64 gift_id = 1;
    string gift_name_key = 2;
    ImageModel gift_icon_image = 3;
    Text gift_mode_desc = 4;

}

message WebcastWallpaperMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    WallpaperContent wallpaper_content = 3;

}

message EcTaskRegisterMessageEntity {
    int32 interval = 1;
    string task_id = 2;

}

message UserSetting {
    int64 setting_id = 1;
    int64 version = 2;
    ExampleSetting example_setting = 100;
    RevenueTipsSetting revenue_tips_setting = 101;
    GiftGoalAutoUpdateSwitch goal_auto_update_switch = 102;
    GiftGoalVoiceAlterSwitch goal_voice_alter_switch = 103;
    GameServerFeatureSetting game_server_feature_setting = 104;
    GameGuessRecommendCreateSwitch game_guess_recommend_create_switch = 105;

}

message BadgeStruct {
    optional BadgeDisplayType badge_display_type = 1;
    optional BadgePriorityType badge_priority_type = 2;
    optional BadgeSceneType badge_scene = 3;
    optional Position position = 4;
    optional DisplayStatus display_status = 5;
    int64 greyed_by_client = 6;
    optional BadgeExhibitionType exhibition_type = 7;
    string schema_url = 10;
    bool display = 11;
    PrivilegeLogExtra log_extra = 12;
    ImageBadge image_badge = 20;
    TextBadge text_badge = 21;
    StringBadge string_badge = 22;
    CombineBadgeStruct combine_badge_struct = 23;
    bool is_customized = 24;

    enum BadgeDisplayType {
        BADGE_DISPLAY_TYPE_UNKNOWN = 0;
        BADGE_DISPLAY_TYPE_IMAGE = 1;
        BADGE_DISPLAY_TYPE_TEXT = 2;
        BADGE_DISPLAY_TYPE_STRING = 3;
        BADGE_DISPLAY_TYPE_COMBINE = 4;}
    enum BadgePriorityType {
        BADGE_PRIORITY_TYPE_UNKNOWN = 0;
        BADGE_PRIORITY_TYPE_STRONG_RELATION = 10;
        BADGE_PRIORITY_TYPE_PLATFORM = 20;
        BADGE_PRIORITY_TYPE_RELATION = 30;
        BADGE_PRIORITY_TYPE_ACTIVITY = 40;
        BADGE_PRIORITY_TYPE_RANK_LIST = 50;}
    enum BadgeSceneType {
        BADGE_SCENE_TYPE_UNKNOWN = 0;
        BADGE_SCENE_TYPE_ADMIN = 1;
        BADGE_SCENE_TYPE_FIRST_RECHARGE = 2;
        BADGE_SCENE_TYPE_FRIENDS = 3;
        BADGE_SCENE_TYPE_SUBSCRIBER = 4;
        BADGE_SCENE_TYPE_ACTIVITY = 5;
        BADGE_SCENE_TYPE_RANK_LIST = 6;
        BADGE_SCENE_TYPE_NEW_SUBSCRIBER = 7;
        BADGE_SCENE_TYPE_USER_GRADE = 8;
        BADGE_SCENE_TYPE_STATE_CONTROLLED_MEDIA = 9;
        BADGE_SCENE_TYPE_FANS = 10;
        BADGE_SCENE_TYPE_LIVE_PRO = 11;
        BADGE_SCENE_TYPE_ANCHOR = 12;}
    enum BadgeExhibitionType {
        BADGE_EXHIBITION_TYPE_BADGE = 0;
        BADGE_EXHIBITION_TYPE_IDENTITY_LABEL = 1;}
    enum DisplayStatus {
        DISPLAY_STATUS_NORMAL = 0;
        DISPLAY_STATUS_SHADOW = 1;}
    enum Position {
        POSITION_UNKNOWN = 0;
        POSITION_LEFT = 1;
        POSITION_RIGHT = 2;}
}

message CohostContent {
    JoinGroupBizContent join_group_biz_content = 1;
    PermitJoinGroupBizContent permit_join_group_biz_content = 2;
    ListChangeBizContent list_change_biz_content = 11;

}

message SubGoalPinInfo {
    int64 pin_start_time = 1;
    int64 pin_end_time = 2;
    int64 pin_ready_time = 3;

}

message GiftStructByCreator {
    string name = 1;
    int64 id = 2;
    int32 type = 3;
    int32 diamond_count = 4;
    ImageModel image = 5;
    ImageModel preview_image = 6;
    repeated GiftPanelCardletByCreator gift_panel_cardlets = 7;
    ImageModel gift_label_icon = 8;
    bool is_box_gift = 9;

}

message ExtraTimeCardInfo {
    string card_name_key = 1;
    ImageModel card_image = 2;
    int64 send_time_sec = 3;
    BattleUserInfo send_user = 4;
    int64 effect_last_duration = 5;
    string rule_url = 6;
    int64 effect_time_sec = 7;
    int64 to_anchor_id = 8;
    int64 extra_duration_sec = 9;
    string to_anchor_id_str = 10;

}

message EntranceConditionsPopup {
    repeated Condition conditions = 1;
    string title = 2;

    message Condition {
        string name = 1;
        string text = 2;
        bool match = 3;

    }
}

message ShortTouchExtra {
    ShortTouchPollData poll_data = 1;

}

message WebcastSubPinEventMessage {
    CommonMessageData base_message = 1;
    optional ActionType action_type = 2;
    SubPinCard card = 3;
    int64 operator_user_id = 4;

    enum ActionType {
        ACTION_TYPE_UNKNOWN = 0;
        ACTION_TYPE_PIN = 1;
        ACTION_TYPE_UNPIN = 2;}
}

message BattleTruthOrDareTips {
    repeated TruthOrDareTip truth_or_dare_tips = 1;
    string gift_guide_key = 2;

}

message PopMsgContainer {
    bool has_pop = 1;
    string content = 2;
    repeated string button_content = 3;
    string title = 4;
    bool has_jump = 5;
    string jump_title = 6;
    string jump_url = 7;
    int32 id = 8;

}

message PromoteAdBoostedUsers {
    int64 ad_id = 1;
    int64 cnt = 2;
    int64 percent = 3;
    int64 end_time = 4;

}

message MsgNotifyQuota {
    int32 component_type = 1;
    map<string, int64> position_count_map = 2;
    int64 default_count = 3;

}

message ApplyContent {
    Player applicant = 1;
    string applicant_link_mic_id = 2;

}

message WebcastLinkmicBattleTaskMessage {
    CommonMessageData base_message = 1;
    optional BattleTaskMessageType battle_task_message_type = 2;
    BattleTaskStart task_start = 3;
    BattleTaskUpdate task_update = 4;
    BattleTaskSettle task_settle = 5;
    BattleRewardSettle reward_settle = 6;
    int64 battle_id = 20;

    enum BattleTaskMessageType {
        BATTLE_TASK_MESSAGE_TYPE_START = 0;
        BATTLE_TASK_MESSAGE_TYPE_TASK_UPDATE = 1;
        BATTLE_TASK_MESSAGE_TYPE_TASK_SETTLE = 2;
        BATTLE_TASK_MESSAGE_TYPE_REWARD_SETTLE = 3;}
}

message LinkPosition {
    int32 position = 1;
    int32 position_type = 2;

}

message TextPieceGift {
    int64 gift_id = 1;
    PatternRef name_ref = 2;
    optional GiftShowType show_type = 3;
    int64 color_id = 4;

    enum GiftShowType {
        GIFT_SHOW_TYPE_GIFT_SHOW_DEFAULT = 0;
        GIFT_SHOW_TYPE_GIFT_SHOW_NAME = 1;}
}

message WebcastStarCommentPushMessage {
    CommonMessageData base_message = 1;
    int32 queue_version = 2;
    StarCommentMessage current = 3;
    StarCommentMessage next = 4;

}

message LiveStreamGoalIndicator {
    string key = 1;
    int32 op = 2;

}

message Video {
    string vid = 1;
    string url = 2;
    double duration = 3;
    int32 width = 4;
    int32 height = 5;

}

message Img {
    string key = 1;
    int32 width = 2;
    int32 height = 3;
    string url = 4;

}

message KickOutBizContent {
    User operator_user_info = 1;
    optional LinkMicUserAdminType operator_link_admin_type = 2;
    User kick_player_user_info = 3;

    enum LinkMicUserAdminType {
        LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE = 0;
        LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE = 1;
        LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE = 2;}
}

message WebcastEcTaskRefreshCouponListMessage {
    CommonMessageData base_message = 1;
    EcTaskRefreshCouponListEntity entity = 2;

}

message Avatar {
    int64 avatar_id = 1;
    ImageModel image = 2;
    Video video_static = 3;
    Video video_dynamic = 4;
    int64 style_id = 5;
    int64 created_at = 6;
    int64 updated_at = 7;
    int32 status = 8;
    string failed_title = 9;
    string failed_reason = 10;
    bool is_system = 12;

}

message GetUploadAuthResponse {
    ResponseData data = 1;

    message ResponseData {
        string access_key = 1;
        string secret_key = 2;
        string session_token = 3;
        string service_id = 4;
        string upload_domain = 5;
        int64 expired_time = 6;
        int64 current_time = 7;

    }
}

message WebcastShortTouchMessage {
    CommonMessageData base_message = 1;
    UnifyBaseActionData action_data = 2;
    ShortTouchExtra extra = 3;

}

message GuestShowdownStartParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 pre_play_id = 3;
    string stream_id = 4;
    GuestShowdownConfig play_config = 5;

}

message NoticeboardOfficialTemplateCreateResponse {
    ResponseData data = 1;

    message ResponseData {
        bool is_success = 1;
        NoticeboardTemplate template = 2;

    }
}

message ProductItem {
    int64 product_id = 1;
    BagIndex bag_index = 2;
    Title title = 3;
    ImageModel cover = 4;
    AtmosphereInfo atmosphere_info = 5;
    ShopBrandLogo shop_brand_logo = 6;
    LiveFlashSaleInfo live_flash_sale_info = 7;

}

message CancelJoinGroupContent {
    repeated GroupPlayer leaver = 1;
    GroupPlayer operator = 2;
    optional JoinType type = 3;
    GroupChannelAllUser group_user = 4;

    enum JoinType {
        JOIN_TYPE_UNKNOWN = 0;
        JOIN_TYPE_CHANNEL_APPLY = 1;
        JOIN_TYPE_CHANNEL_INVITE = 2;
        JOIN_TYPE_GROUP_APPLY = 100;
        JOIN_TYPE_GROUP_APPLY_FOLLOW = 101;
        JOIN_TYPE_GROUP_INVITE = 102;
        JOIN_TYPE_GROUP_INVITE_FOLLOW = 103;
        JOIN_TYPE_GROUP_OWNER_JOIN = 104;}
}

message WebcastEffectControlMessage {
    CommonMessageData base_message = 1;
    int32 control_type = 2;
    string resource_id = 3;
    bool replace_resume_effect = 4;
    Scene scene = 5;

}

message GoalPinInfo {
    bool pin = 1;
    bool unpin = 2;
    int64 pin_end_time = 3;
    int64 sub_goal_id = 4;
    string sub_goal_id_str = 5;

}

message AnchorSubWaveCurrentSettings {
    AnchorSubWaveTriggerSettings anchor_sub_wave_trigger_settings = 1;
    AnchorSubWaveChallengeSettings anchor_sub_wave_challenge_settings = 2;

}

message LinkmicSettingResult {
    string link_m_ic_ab_params = 102;
    repeated LinkmicSettingmodel settings = 200;

}

message GuessTemplate {
    int64 template_id_str = 1;
    GuessText title = 2;
    repeated GuessOptions guess_options = 3;
    string game_type_name = 4;
    AuditStatus audit_status = 5;
    int64 audit_detail = 6;

}

message BillboardInfo {
    int32 billboard_type = 1;
    repeated string billboard_ids = 2;
    int32 source_from = 3;

}

message WebcastKaraokeRedDotMessage {
    CommonMessageData base_message = 1;
    int64 host_sing_req_cumulative_count = 2;
    int64 you_sing_req_cumulative_count = 3;

}

message WebcastQuestionDeleteMessage {
    CommonMessageData base_message = 1;
    int64 question_id = 2;
    int64 user_id = 3;
    Scene scene = 4;

}

message MultiLiveUserApplySettings {
    MultiLiveUserApplyPermission multi_live_user_apply_permission = 1;
    int32 link_mic_service_version = 2;
    RoomHostMultiGuestPermissionInfo room_host_multi_guest_permission_info = 3;
    bool try_open_multi_guest = 4;
    RoomAudienceMultiGuestPermissionInfo room_audience_multi_guest_permission_info = 5;
    RoomMultiGuestLinkmicInfo room_multi_guest_linkmic_info = 6;
    int64 host_multi_guest_dev_mode = 7;
    int64 audience_shared_invitee_panel_type = 8;
    int64 host_gifter_linkmic_enum = 9;
    int64 viewer_gifter_linkmic_enum = 10;
    AnchorSettingInfo anchor_setting_info = 11;
    int64 host_send_gifts_to_all_enum = 20;
    int64 audience_send_gifts_to_all_enum = 21;
    MultiGuestPlayInfo multi_guest_play_info = 30;

}

message CompetitionLeaveResponse {
    ResponseData data = 1;

    message ResponseData {
        CompetitionCommon biz_common = 1;
        repeated CompetitionResultsTeamInfo team_infos = 2;

    }
}

message WebcastInRoomBannerMessage {
    CommonMessageData base_message = 1;
    map<string, string> extra = 2;
    int32 position = 3;
    int32 action_type = 4;

}

message WebcastShareGuideMessage {
    CommonMessageData base_message = 1;
    string share_channel = 2;

}

message DropsRoomInfo {
    bool show_claim_drops_gift_notice = 1;
    int32 earliest_gift_expire_ts = 2;
    bool drops_list_entrance = 3;
    bool show_drops_tag = 4;
    string promoting_drops_id = 5;
    string promoting_drops_game_id = 6;
    string promoting_drops_game_name_for_report = 7;

}

message Title {
    string text = 1;

}

message SubWaveSubscriberInfo {
    int64 user_id = 1;
    ImageModel avatar = 2;
    string display_id = 3;
    string user_id_str = 4;
    repeated BadgeStruct badge_list = 5;

}

message HostReportOpenLinkmicPanelResponse {
    ResponseData data = 1;
    Extra extra = 2;

    message ResponseData {

    }
    message Extra {
        int64 now = 1;

    }
}

message AtomAction {
    int32 type = 1;
    ReqItem request_item = 2;

}

message JoinGroupBizContent {
    int32 from_room_age_restricted = 1;
    PerceptionDialogInfo dialog = 3;
    PunishEventInfo punish_info = 4;
    CohostTopic topic_info = 5;
    string algo_request_id = 6;
    optional CohostLayoutMode cohost_layout_mode = 7;
    TagV2 tag = 8;
    RivalsGameTag game_tag = 9;
    string new_user_education = 11;
    JoinGroupMessageExtra join_group_msg_extra = 101;

    enum CohostLayoutMode {
        COHOST_LAYOUT_MODE_NORMAL = 0;
        COHOST_LAYOUT_MODE_SCREEN_SHARE = 1;}
}

message ReplyInviteContent {
    Player invitee = 1;
    ReplyStatus reply_status = 2;
    string invitee_link_mic_id = 3;
    MicPositionData position_data = 4;
    Player invite_operator_user = 5;
    repeated string linked_user_ui_positions = 6;
    repeated PosIdentity ui_pos = 7;

    enum AgreeStatus {
        AGREE_STATUS_AGREE_UNKNOWN = 0;
        AGREE_STATUS_AGREE = 1;
        AGREE_STATUS_REJECT = 2;}
}

message BattleTruthOrDareTriggerGuide {
    string anchor_content_key = 1;
    string audience_content_key = 2;
    int32 guide_duration_second = 3;
    string rule_detail_url = 4;

}

message WebcastEventMessage {
    CommonMessageData base_message = 1;
    int32 action_type = 2;
    EventCard card = 3;

}

message WebcastInRoomBannerEvent {
    CommonMessageData base_message = 1;
    int32 position = 2;
    BannerInRoomCollection data = 3;

}

message CancelViewerSingResp {
    LinkMicCommonResp common_resp = 1;
    bool is_only_del_song = 2;

}

message BizApplyParams {
    int64 link_type = 1;
    int64 anchor_id = 2;
    int32 user_return_type = 3;
    bool follow = 4;
    int32 share_revenue_setting = 5;
    int32 inviter_role = 6;
    int64 inviter_user_id = 7;

}

message ShowResult {
    bool banned = 1;

}

message MsgNotifyComponentRecoverInfo {
    bool recover = 1;
    int64 delay_ms = 2;

}

message CountdownEndResponse {
    ResponseData data = 1;

    message ResponseData {
        bool success = 1;
        CountdownContent countdown_content = 2;

    }
}

message UserLiveEventInfo {
    string live_event_id = 1;
    string quiz_id = 2;
    bool is_subscribed = 3;

}

message LinkedUser {
    int64 uid = 1;
    string link_mic_id = 2;
    int32 audio_mute_status = 3;
    int32 video_mute_status = 4;
    int32 position = 5;

}

message ProductSnapShot {
    string product_id = 1;
    string title = 2;
    Img cover = 3;
    int32 stock_type = 4;
    int64 timestamp = 5;
    AddToCartButton add_to_cart_button = 6;

}

message DispersionInfo {
    int32 dispersion_path = 1;
    DelayParam delay_param = 2;

}

message PictionaryFullInfo {
    PictionaryInfo pictionary_info = 1;
    PictionaryStatistics pictionary_statistics = 2;
    bool guess_correct = 3;

}

message BattleUserArmy {
    int64 user_id = 1;
    int64 score = 2;
    string nickname = 3;
    ImageModel avatar_thumb = 4;
    int64 diamond_score = 5;
    string user_id_str = 6;

}

message UserFanTicket {
    int64 user_id = 1;
    int64 fan_ticket = 2;
    int64 match_total_score = 3;
    int32 match_rank = 4;
    UserCountdownInfo countdown_info = 5;
    UserPlayInfo play_info = 6;
    string icon_name = 7;
    string animation_name = 8;

}

message SubWaveInfoCommon {
    AnchorSubWaveCurrentSettings sub_wave_settings = 1;
    int64 wave_sub_count = 2;
    int64 total_sub_count = 3;
    int64 start_time = 4;
    int64 end_time = 5;
    optional WaveStatus wave_status = 6;
    repeated SubWaveSubscriberInfo thanks_list = 7;
    int64 wave_target_sub_count = 8;
    int64 wave_open_record_id = 9;
    repeated SubWaveStrikeInfo sub_wave_strikes = 10;

    enum WaveStatus {
        WAVE_STATUS_RUNNING = 0;
        WAVE_STATUS_FINISHED = 1;
        WAVE_STATUS_FAILED = 2;
        WAVE_STATUS_STRIKE = 3;}
}

message BattleNoticeText {
    string text = 1;

}

message CapsuleBizParamsCommentFlaggedPromptForNewUser {
    int64 trigger = 1;
    repeated int64 comment_ids = 2;

}

message WebcastPlayTogetherMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    PlayTogetherBasicInfo basic_info = 3;
    PlayTogetherListChangeContent list_change_content = 4;
    PlayTogetherPermitNoticeContent permit_notice_content = 5;

    enum PlayTogetherMessageType {
        PLAY_TOGETHER_MESSAGE_TYPE_START = 0;
        PLAY_TOGETHER_MESSAGE_TYPE_END = 1;
        PLAY_TOGETHER_MESSAGE_TYPE_REVIEW_NOTICE = 2;
        PLAY_TOGETHER_MESSAGE_TYPE_LIST_CHANGE = 3;
        PLAY_TOGETHER_MESSAGE_TYPE_PERMIT_NOTICE = 4;
        PLAY_TOGETHER_MESSAGE_TYPE_IN_PROGRESS = 5;}
}

message QuizRulesIntroduction {
    MessageType message_type = 1;
    string quiz_id = 2;
    int32 quiz_type = 3;
    string extra = 4;
    string reward_amount = 5;
    int32 question_count = 6;
    int32 user_count = 7;
    string sponsor_code = 8;
    int32 display_duration_ms = 9;
    string extra1 = 51;
    string extra2 = 52;
    string extra3 = 53;
    string extra4 = 54;
    string extra5 = 55;

}

message ToplivePageData {
    repeated ToplivePageItem items = 1;

}

message WebcastSubContractStatusMessage {
    CommonMessageData base_message = 1;
    PushContractStatusResult data = 2;
    ResponseExtra extra = 3;

    message ResponseExtra {
        int64 now = 1;

    }
}

message CancelInviteResponse {

}

message CommerceInfo {
    map<int64, ProductItem> product_info = 1;
    PopCardInfo pop_card_info = 2;

}

message GiftMode {
    int64 gift_id = 1;
    string gift_name = 2;
    ImageModel gift_icon_image = 3;
    int64 gift_price = 4;
    ImageModel gift_background_image = 5;
    int64 release_version = 6;
    bool has_flash_effect = 7;
    ImageModel event_icon_image = 8;
    string label_text = 9;

}

message LinkerMicIdxUpdateInfo {
    optional MicIdxOperation operation = 1;
    int64 user_i_d = 2;
    int64 mic_index = 3;

    enum MicIdxOperation {
        MIC_IDX_OPERATION_MIC_I_DX_OP_ON = 0;
        MIC_IDX_OPERATION_MIC_I_DX_OP_OFF = 1;}
}

message SeparatorConfig {
    string color = 1;

}

message RivalsListsData {
    repeated Room followed_list = 1;
    repeated Room recent_list = 2;
    repeated Room recommend_list = 3;
    map<int64, RivalExtraInfo> rival_extra_infos = 4;
    AutoMatchBanner auto_match_banner = 5;
    string tips = 6;
    SearchBar search_bar = 7;
    BannerText banner_text = 8;
    map<int64, TopHostInfo> room_top_host_info = 9;
    repeated Room best_teammate_list = 10;
    repeated Room reserved_list = 11;
    repeated Room may_know_list = 12;
    repeated Room mixed_list = 13;
    repeated Room eoy_rank_list = 14;
    repeated Room game_list = 15;
    CohostTopic topic_banner = 21;
    TopicExtraInfo topic_extra_info = 22;
    GuidePopupBanner guide_popup_banner = 23;
    EOYBanner eoy_banner = 24;
    repeated BattleOptPair battle_opt_pair_list = 25;
    string status_text = 31;
    int32 status_text_type = 32;
    DynamicListConfig dynamic_list_config = 51;

    message BannerText {
        string title = 1;
        string sub_title = 2;
        string button_text = 3;
        bool is_match_valid = 4;
        bool is_in_ui_exp = 5;
        int32 banner_style = 6;
        QuickCohostContentInfo quick_cohost_content_info = 7;

    }
    message TopHostInfo {
        string rank_type = 1;
        int64 top_index = 2;

    }
}

message FansLevelInfo {
    int64 userid = 1;
    int64 anchorid = 2;
    int64 score = 3;
    int64 level = 4;
    bool is_sleeping = 5;
    int64 time_to_sleep = 6;
    FansScoreRule fans_score_rule = 7;
    BadgeStruct badge = 8;

}

message TopicSetResponse {
    ResponseData data = 1;

    message ResponseData {

    }
}

message GiftsInfoByCreator {
    repeated int64 gift_box_ids = 1;
    GiftPanelCardletByCreator live_goal_cardlet = 2;

}

message MsgFilter {
    bool is_gifter = 1;
    bool is_subscribed_to_anchor = 2;

}

message WebcastHourlyRankRewardMessage {
    CommonMessageData base_message = 1;
    repeated HourlyRankRewardInfo winners = 2;

}

message LynxGiftExtra {
    int64 id = 1;
    int64 code = 2;
    int64 type = 3;
    repeated string params = 4;
    string extra = 5;

}

message WebcastPictionaryStartMessage {
    CommonMessageData base_message = 1;
    PictionaryInfo data = 2;

}

message LiveRecordConfig {
    bool can_record = 1;
    bool has_fixed_floating_ball = 2;
    int64 max_record_duration = 3;
    int64 min_storage_size = 4;

}

message FansClubData {
    string club_name = 1;
    int32 level = 2;
    int32 user_fans_club_status = 3;
    UserBadge badge = 4;
    repeated int64 available_gift_ids = 5;
    int64 anchor_id = 6;

    message UserBadge {
        map<int32, ImageModel> icons = 1;
        string title = 2;

    }
}

message CompetitionSwitchTurn {
    TakeTheStageBiz take_the_stage_biz = 100;

    message TakeTheStageBiz {
        int64 performance_start_time = 1;
        TakeTheStageOrderInfo order_info = 2;

    }
}

message WebcastGuestInviteMessage {
    CommonMessageData base_message = 1;
    int64 room_id = 2;
    int64 inviter_user_id = 3;
    string inviter_nickname = 4;
    ImageModel inviter_avatar = 5;

}

message PinInfo {
    bool pin_enabled = 1;
    int64 display_duration = 2;

}

message RealtimeLiveCenterBaseData {
    int64 live_start_time = 1;
    int64 live_end_time = 2;
    int64 total_score = 3;
    int64 live_watch_cnt = 4;
    int64 live_new_fans_ucnt = 5;
    int64 live_consume_ucnt = 6;
    int64 live_comment_cnt = 7;
    int64 live_like_cnt = 8;
    int64 new_subscribers_cnt = 9;
    int64 live_online_watch_cnt = 10;
    int64 share_cnt = 11;

}

message WebcastNoticeMessage {
    CommonMessageData base_message = 1;
    string content = 2;
    int32 notice_type = 3;
    string style = 4;
    Text title = 5;
    Text violation_reason = 6;
    Text illegal_text = 7;
    Text bottom_tip = 8;
    string tip_url = 9;
    Text notice_title = 10;
    Text notice_content = 11;
    Scene scene = 12;

}

message ReplyReserveResponse {
    ResponseData data = 1;
    ReplyReserveExtra extra = 2;

    message ResponseData {

    }
    message LogPb {
        string impr_id = 1;

    }
    message ReplyReserveExtra {
        LogPb log_pb = 1;

    }
}

message AudienceReplyContent {
    int64 from_user_id = 1;

}

message CompetitionSettleStart {
    int64 planned_settlement_end_time = 1;
    int64 extra_time_interval = 2;
    CompetitionUserBase initiator = 3;

}

message CreateShowResponse {
    ResponseData data = 1;

    message ResponseData {
        bool show_exists = 1;
        ShowContent show_content = 2;

    }
}

message GiftGoalAutoUpdateSwitch {
    int32 value = 1;

}

message AnchorSubWaveChallengeSettings {
    int64 id = 1;
    string name = 2;
    int64 need_sub_counts = 3;
    int64 during_time = 4;
    repeated EmoteModel emote_list = 5;

}

message UserCountdownRecord {
    int64 countdown_id = 1;
    int32 status = 2;
    int64 duration = 3;
    int64 start_time = 4;
    int64 end_time = 5;
    int64 score = 6;
    int64 target_score = 7;
    bool achieved = 8;

}

message GetWallpaperContentResponse {
    ResponseData data = 1;

    message ResponseData {
        WallpaperContent wallpaper_content = 1;

    }
}

message CancelViewerSingReq {
    LinkCommon common = 1;
    int64 channel_id = 2;
    Player applier = 3;
    int64 song_id = 4;
    BizCancelApplyParams multi_guest_req_extra = 9527;

}

message NewAnchorIncentiveBannerData {
    string title = 1;
    string sub_title = 2;
    ImageModel image = 3;
    string url = 4;
    map<string, string> metrics_map = 5;
    int64 sub_type = 6;

}

message EventTracking {
    int64 gift_sub_sender_id = 1;
    int64 gift_sub_receiver_id = 2;
    int64 anchor_id = 3;
    int64 gift_sub_order_create_time = 4;

}

message GoodyBagCoinDetail {
    int32 total_coin = 1;

}

message GetRunningNoticeboardMaterialContentResponse {
    ResponseData data = 1;

    message ResponseData {
        string image_url = 1;
        string image_meta_url = 2;

    }
}

message SubWaveImMsg {
    optional SubWaveImMsgType msg_type = 1;
    SubWaveSubscriberInfo new_come_subscriber_info = 2;
    SubWaveInfoCommon sub_wave_info_common = 3;
    WaveReward wave_reward = 4;
    SubWaveStrikeInfo current_strike_round = 5;
    bool strike_enabled = 6;

    enum SubWaveImMsgType {
        SUB_WAVE_IM_MSG_TYPE_WAVE_START = 0;
        SUB_WAVE_IM_MSG_TYPE_NEW_COME_SUBSCRIBER = 1;
        SUB_WAVE_IM_MSG_TYPE_WAVE_FINISH = 2;
        SUB_WAVE_IM_MSG_TYPE_RECEIVE_REWARD = 3;
        SUB_WAVE_IM_MSG_TYPE_WAVE_FINISH_STRIKE_START = 4;
        SUB_WAVE_IM_MSG_TYPE_STRIKE_FINISH = 5;
        SUB_WAVE_IM_MSG_TYPE_STRIKE_FINISH_NEXT_STRIKE_START = 6;
        SUB_WAVE_IM_MSG_TYPE_REWARD_SENT = 7;}
}

message NoticeboardContent {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 noticeboard_id = 3;
    int32 status = 4;
    string linkmic_id = 5;
    MicPositionData position = 6;
    string stream_id = 7;
    int64 start_time = 8;
    int64 end_time = 9;
    string passed_media_node_id = 10;
    NoticeboardReviewInfo last_review_info = 11;
    int64 version = 12;

}

message UseSpecialEffectCard {
    SpecialEffectCardInfo card_info = 1;
    int64 anchor_id = 2;
    Text display_content = 3;
    repeated AnchorPair affected_anchor_pairs = 4;

}

message HighScoreControlCfg {
    bool normal_control_applied = 1;
    int64 threshold = 2;
    repeated int64 origin_display_to_user_list = 3;

}

message GiftConfigInfo {
    optional GiftConfigType config_type = 1;
    RoleConfig role_config = 2;

    enum GiftConfigType {
        GIFT_CONFIG_TYPE_UNKNOWN = 0;
        GIFT_CONFIG_TYPE_AUDIO = 1;}
    message RoleConfig {
        string viewer = 1;
        string anchor = 2;
        string gifter = 3;

    }
}

message GameLiveInfo {
    bool has_game_live = 1;
    bool has_game_live2_min = 2;
    bool has_comment_in_game_live = 3;

}

message GuestShowdownStartResponse {
    ResponseData data = 1;

    message ResponseData {
        bool is_exists = 1;
        GuestShowdownContent play_content = 2;

    }
}

message BattleRivalTag {
    ImageModel bg_image = 1;
    ImageModel icon_image = 2;
    string content = 3;

}

message ProductAtmosphereTag {
    string product_id = 1;
    string tag_desc = 2;
    int64 count = 3;

}

message BusinessLinksLiveMessage {
    int32 op = 2;
    int64 id = 3;
    string title = 4;
    string subtitle = 5;
    string url = 6;
    string pic = 7;
    int64 op_time = 8;
    int32 card_type = 9;
    string game_url = 10;
    string live_log_extra = 11;

}

message WebcastPartnershipDownloadCountMessage {
    CommonMessageData base_message = 1;
    int64 downloaded_count = 2;
    string game_id = 3;

}

message LinkReplyResult {
    bool can_join_channel_directly = 3;
    int32 confluence_type = 4;
    string rtc_ext_info = 5;
    string link_mic_id_str = 15;
    string rival_linkmic_id_str = 17;

}

message ImageModel {
    repeated string m_urls = 1;
    string m_uri = 2;
    int32 height = 3;
    int32 width = 4;
    string avg_color = 5;
    int32 image_type = 6;
    string schema = 7;
    Content content = 8;
    bool is_animated = 9;

    message Content {
        string name = 1;
        string font_color = 2;
        int64 level = 3;

    }
}

message WebcastGreetingMessage {
    CommonMessageData base_message = 1;
    UserIdentity user_identity = 2;
    int64 enter_msg_id = 3;
    Text greeting_text = 4;
    Text guide_text = 5;
    WaveAlgorithmData wave_algorithm_data = 6;

}

message UserAttrResponse {
    map<int64, int64> values = 1;

}

message ShortTouchItem {
    string schema = 1;
    int64 width = 2;
    int64 height = 3;
    int64 top_margin = 4;
    int64 left_margin = 5;
    int64 fc_second = 6;
    string name = 7;
    ShortTouchPreviewSetting preview_setting = 8;
    int32 anime_type = 9;
    string icon_skin = 10;
    string activity_id = 11;

}

message Sprite {
    string sprite_url = 1;
    int32 total_num = 2;
    int32 x_num = 3;
    int32 y_num = 4;
    int32 image_height = 5;
    int32 image_width = 6;
    string url = 7;
    int64 sprite_num = 8;
    int64 image_x_num = 9;
    int64 image_y_num = 10;
    int64 fps = 11;

}

message PushContractStatusResult {
    int32 pay_channel = 1;
    int32 status = 2;
    int32 tpl_type = 3;
    int32 sub_circle = 4;
    SubInfo sub_info = 5;
    string toast = 6;
    string contractid = 7;
    int32 create_contract_intent = 8;

}

message TextPieceHeart {
    string color = 1;

}

message WallpaperCreateResponse {
    ResponseData data = 1;

    message ResponseData {
        bool wallpaper_exists = 1;
        WallpaperContent wallpaper_content = 2;

    }
}

message AvatarStyle {
    int64 style_id = 1;
    ImageModel image = 2;

}

message Benefit {
    int32 type = 1;
    int64 value = 2;

}

message CompetitionResultsTeamInfo {
    int64 team_id = 1;
    int64 rank = 2;
    int64 score = 3;
    optional Result result = 4;
    repeated CompetitionContributorInfo contributors = 5;
    repeated CompetitionTeamMemberInfo members = 6;
    string team_id_str = 7;

    enum Result {
        RESULT_UNKNOWN = 0;
        RESULT_WIN = 1;
        RESULT_LOSE = 2;
        RESULT_DRAW = 3;}
}

message TimeTag {
    int64 operation_time = 1;

}

message WebcastLiveShowMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    ShowContent show_content = 3;
    optional ShowUserFinishReason showuserfinishreason = 4;
    LinkerMediaChangeOperator operator_user_info = 5;

    enum LiveShowMessageType {
        LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_UNKNOWN = 0;
        LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_CREATE_SHOW = 1;
        LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_NEXT_GUEST = 2;
        LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_FINISH_GUEST = 3;
        LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_SHOW_AGAIN_GUEST = 4;
        LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_END_SHOW = 5;
        LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_CONTENT_CHANGED = 6;
        LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_HOST_TRANSITION_START = 7;}
    enum ShowUserFinishReason {
        SHOW_USER_FINISH_REASON_UNKNOWN = 0;
        SHOW_USER_FINISH_REASON_TIME_ROVER_NORMALLY = 1;
        SHOW_USER_FINISH_REASON_HOST_FINISH_SHOWING_GUEST = 2;
        SHOW_USER_FINISH_REASON_SELF_FINISH_SHOWING_GUEST = 3;
        SHOW_USER_FINISH_REASON_LEAVE = 4;
        SHOW_USER_FINISH_REASON_KICK_OUT = 5;
        SHOW_USER_FINISH_REASON_RT_C_CALLBACK_LEAVE = 6;
        SHOW_USER_FINISH_REASON_HOST_END_SHOW = 7;
        SHOW_USER_FINISH_REASON_MULTI_GUEST_CLOSED = 8;
        SHOW_USER_FINISH_REASON_MULTI_GUEST_RESUMED = 9;
        SHOW_USER_FINISH_REASON_KICK_OUT_ALL_GUESTS = 10;
        SHOW_USER_FINISH_REASON_MODERATOR_FINISH_SHOWING_GUEST = 11;
        SHOW_USER_FINISH_REASON_MODERATOR_END_SHOW = 12;}
}

message WebcastSubWaveMessage {
    CommonMessageData base_message = 1;
    SubWaveImMsg sub_wave_im_msg = 2;

}

message BizResumeResponse {
    ResponseData data = 1;

    message ResponseData {
        bool is_showing = 1;
        ShowContent show_content = 2;
        repeated CountdownContent countdown_contents = 3;
        CountdownForAllContent countdown_for_all_content = 4;
        repeated NoticeboardContent noticeboard_contents = 5;
        ActivePlaybook active_playbook = 6;
        GuestShowdownContent guest_showdown_content = 7;

    }
}

message UpgradeInfo {
    bool is_upgrade = 1;
    int32 to_grade = 2;

}

message WebcastGameReqSetGuessMessage {
    CommonMessageData base_message = 1;
    Text toast_context = 2;
    string request_cnt_str = 3;
    string limit_supremacy_str = 4;
    string capsule_cnt_str = 5;

}

message WebcastLinkMicFanTicketMethod {
    CommonMessageData base_message = 1;
    FanTicketRoomNoticeContent fan_ticket_room_notice = 2;

}

message LinkMicAdContent {
    int64 room_id = 1;
    int64 ad_id = 2;
    int64 duration = 3;
    int64 play_times = 4;
    string url = 5;

}

message VideoResource {
    string video_type_name = 1;
    ResourceModel video_url = 2;
    string video_md5 = 3;

}

message WebcastSpeakerMessage {
    CommonMessageData base_message = 1;

}

message GroupChannelAllUser {
    int64 group_channel_id = 1;
    repeated GroupChannelUser user = 2;
    int64 content_version = 3;

}

message RankAnimationInfo {

}

message CrowdSelectionResponse {
    Data data = 1;

    message Data {
        int64 anchor_crowd = 1;

    }
}

message Product {
    string title = 1;
    ImageModel cover = 2;
    ProductPrice price = 3;

}

message CompetitionSettlementEndResponse {
    ResponseData data = 1;

    message ResponseData {
        CompetitionCommon biz_common = 1;
        CompetitionSettleEnd settle_end = 2;

    }
}

message LiveEventInfo {
    int64 id = 1;
    string title = 2;

    enum EventPayMethod {
        EVENT_PAY_METHOD_INVALID = 0;
        EVENT_PAY_METHOD_COINS = 1;
        EVENT_PAY_METHOD_CASH = 2;}
}

message SubPinCardText {
    optional TextType type = 1;
    string content = 2;

    enum TextType {
        TEXT_TYPE_UNKNOWN = 0;
        TEXT_TYPE_ORIGINAL = 1;
        TEXT_TYPE_STARLING_KEY = 2;}
}

message WebcastLinkMicAnchorGuideMessage {
    CommonMessageData base_message = 1;
    string guide_content = 2;
    string button_content = 3;
    int32 connect_type = 4;
    int32 guide_type = 5;
    User user = 6;
    string log_id = 7;
    ReserveInfo reserve_info = 8;
    int32 button_show_type = 9;
    OptPairInfo opt_pair_info = 10;
    repeated UserModelPredictionData user_model_prediction_data = 11;
    bool is_follow_rival = 21;
    int32 available_friend_number = 22;

}

message MsgNotifyWatchContinuousQuota {
    int32 component_type = 1;
    int64 coutinuous_room_cnt = 2;
    int64 count = 3;

}

message HotfixGiftDataForProp {
    Text display_text = 1;
    string describe = 2;
    int64 gift_id = 3;
    int64 group_count = 4;
    int64 repeat_count = 5;
    int64 combo_count = 6;
    int64 msg_id = 7;

}

message TriggerReserveNoticeResponse {
    ResponseData data = 1;

    message ResponseData {

    }
}

message PromoteOtherMessage {
    string recall_toast = 1;

}

message CompetitionTeamBase {
    int64 team_id = 1;
    repeated CompetitionUserBase users = 2;

}

message ResourceModel {
    repeated string url_list = 1;
    string uri = 2;

}

message WebcastCompetitionMessage {
    CommonMessageData base_message = 1;
    CompetitionCommon biz_common = 2;
    optional CompetitionMessageType type = 3;
    CompetitionInitiate initiate = 100;
    CompetitionReply reply = 101;
    CompetitionStart start = 102;
    CompetitionSettleStart settle_start = 103;
    CompetitionSettleEnd settle_end = 104;
    CompetitionScoreChange score_change = 105;
    CompetitionFinish finish = 106;
    CompetitionSwitchTurn switch_turn = 107;

    enum CompetitionMessageType {
        COMPETITION_MESSAGE_TYPE_UNKNOWN = 0;
        COMPETITION_MESSAGE_TYPE_INITIATE = 1;
        COMPETITION_MESSAGE_TYPE_REPLY = 2;
        COMPETITION_MESSAGE_TYPE_START = 3;
        COMPETITION_MESSAGE_TYPE_SETTLE_START = 4;
        COMPETITION_MESSAGE_TYPE_SETTLE_END = 5;
        COMPETITION_MESSAGE_TYPE_SCORE_CHANGE = 6;
        COMPETITION_MESSAGE_TYPE_FINISH = 7;
        COMPETITION_MESSAGE_TYPE_SWITCH_TURN = 8;}
}

message CompetitionCommon {
    optional BattleType type = 1;
    int64 channel_id = 2;
    int64 competition_id = 3;
    int64 room_id = 4;
    string competition_id_str = 5;
    string room_id_str = 6;

    enum BattleType {
        BATTLE_TYPE_UNKNOWN_BATTLE_TYPE = 0;
        BATTLE_TYPE_NORMAL_BATTLE = 1;
        BATTLE_TYPE_TEAM_BATTLE = 2;
        BATTLE_TYPE_INDIVIDUAL_BATTLE = 3;
        BATTLE_TYPE_1_V_N = 4;
        BATTLE_TYPE_TAKE_THE_STAGE = 51;
        BATTLE_TYPE_GROUP_SHOW = 52;}
}

message WebcastAvatarReportDeleteMessage {
    CommonMessageData base_message = 1;
    int64 avatar_id = 2;
    int64 avatar_owner_user_id = 3;

}

message WebcastEffectPreloadingMessage {
    CommonMessageData base_message = 1;
    repeated int64 gift_id = 2;
    repeated int64 effect_id = 3;
    GiftIMPriority priority = 14;
    string log_id = 16;

}

message PermitJoinGroupContent {
    GroupPlayer approver = 1;
    AgreeStatus agree_status = 2;
    optional JoinType type = 3;
    repeated RTCExtraInfo group_ext_info = 4;
    GroupChannelAllUser group_user = 5;
    MigrationDetails migration_details = 6;
    repeated string linked_user_ui_positions = 7;

    enum AgreeStatus {
        AGREE_STATUS_AGREE_UNKNOWN = 0;
        AGREE_STATUS_AGREE = 1;
        AGREE_STATUS_REJECT = 2;}
    enum JoinType {
        JOIN_TYPE_UNKNOWN = 0;
        JOIN_TYPE_CHANNEL_APPLY = 1;
        JOIN_TYPE_CHANNEL_INVITE = 2;
        JOIN_TYPE_GROUP_APPLY = 100;
        JOIN_TYPE_GROUP_APPLY_FOLLOW = 101;
        JOIN_TYPE_GROUP_INVITE = 102;
        JOIN_TYPE_GROUP_INVITE_FOLLOW = 103;
        JOIN_TYPE_GROUP_OWNER_JOIN = 104;}
}

message MigrationDetails {
    bool is_migrate = 1;
    int64 source_group_channel_id = 2;
    int64 target_group_channel_id = 3;

}

message ECTaskRegisterMessage {
    EcTaskRegisterMessageEntity entity = 2;

}

message FirstChargeData {
    bool is_first_charge = 1;
    FirstChargeGuideEffectRule rule = 2;
    Diamond diamond = 3;
    int32 gift_show_style = 4;

}

message DelayParam {
    int64 min_delay_ms = 1;
    int64 max_delay_ms = 2;

}

message FlashSaleAtmosphereInfo {
    string product_id = 1;
    int64 activity_id = 2;
    FlashSaleAtmosphere flash_sale_atmosphere = 3;
    FlashSaleStock flash_sale_stock = 4;
    bool pinned_product = 5;
    bool live_only_channel = 6;
    int32 creator_limit_type = 7;

}

message WebcastEnvelopeMessage {
    CommonMessageData base_message = 1;
    MessageRedEnvelopInfo envelope_info = 2;
    optional EnvelopeDisplay display = 3;

    enum EnvelopeDisplay {
        ENVELOPE_DISPLAY_UNKNOWN = 0;
        ENVELOPE_DISPLAY_NEW = 1;
        ENVELOPE_DISPLAY_HIDE = 2;}
}

message LinkmicInfo {
    string access_key = 1;
    int64 linkmic_id = 2;
    bool joinable = 3;
    int32 confluence_type = 4;
    string rtc_ext_info = 5;
    string rtc_app_id = 6;
    string rtc_app_sign = 7;
    string linkmic_id_str = 8;
    int32 vendor = 9;

}

message BattleABTestList {
    repeated BattleABTest ab_test_list = 1;

}

message LangTranslate {
    string locale = 1;
    string translate_result = 2;
    bool default_translate = 3;

}

message CohostUserInfo {
    int64 permission_type = 1;
    optional SourceType source_type = 2;
    bool is_low_version = 3;
    int64 best_teammate_uid = 4;
    bool has_topic_perm = 5;
    CohostStreamConfig stream_config = 6;
    bool in_different_invite_type_control_group = 7;
    string nickname = 11;
    string display_id = 12;
    ImageModel avatar_thumb = 13;
    int64 follow_status = 14;
    string user_id_str = 15;

    enum SourceType {
        SOURCE_TYPE_UNKNOWN = 0;
        SOURCE_TYPE_FRIEND_LIST = 1;
        SOURCE_TYPE_RECOMMEND_LIST = 2;
        SOURCE_TYPE_RECENT = 3;
        SOURCE_TYPE_OTHER_FOLLOW = 4;
        SOURCE_TYPE_QUICK_PAIR = 5;
        SOURCE_TYPE_ACTIVITY = 6;
        SOURCE_TYPE_QUICK_RECOMMEND = 7;
        SOURCE_TYPE_OFFICIAL_CHANNEL = 8;
        SOURCE_TYPE_BEST_TEAMMATE = 9;
        SOURCE_TYPE_RESERVATION = 10;
        SOURCE_TYPE_PAIRING = 11;
        SOURCE_TYPE_PAIRING_ON_RESERVATION = 12;
        SOURCE_TYPE_TOPIC_QUICK_PAIR = 13;
        SOURCE_TYPE_TOPIC_QUICK_RECOMMEND = 14;
        SOURCE_TYPE_ONLINE_FRIEND_CAPSULE = 15;
        SOURCE_TYPE_UNDEFINED_16 = 16;
        SOURCE_TYPE_UNDEFINED_17 = 17;
        SOURCE_TYPE_UNDEFINED_18 = 18;
        SOURCE_TYPE_UNDEFINED_19 = 19;
        SOURCE_TYPE_WEEKLY_RANK = 20;
        SOURCE_TYPE_HOURLY_RANK = 21;
        SOURCE_TYPE_UNDEFINED_22 = 22;
        SOURCE_TYPE_WEEKLY_RISING = 23;
        SOURCE_TYPE_WEEKLY_ROOKIE = 24;
        SOURCE_TYPE_CONNECTION_LIST = 25;
        SOURCE_TYPE_DAILY_RANK = 26;
        SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME = 27;
        SOURCE_TYPE_RESERVATION_BUBBLE = 28;
        SOURCE_TYPE_PAIRING_BUBBLE = 29;
        SOURCE_TYPE_LEAGUE_PHASE_ONE = 30;
        SOURCE_TYPE_LEAGUE_PHASE_TWO = 31;
        SOURCE_TYPE_LEAGUE_PHASE_THREE = 32;
        SOURCE_TYPE_DAILY_ROOKIE = 33;
        SOURCE_TYPE_MAY_KNOW_LIST = 34;
        SOURCE_TYPE_BANNER = 35;
        SOURCE_TYPE_FANS_TEAM_RANK = 36;
        SOURCE_TYPE_SEARCH = 37;
        SOURCE_TYPE_E_OY_RANK_LIST = 38;
        SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK = 39;
        SOURCE_TYPE_CREATOR_CLASS_RANK = 40;
        SOURCE_TYPE_HISTORY = 41;
        SOURCE_TYPE_UNDEFINED_42 = 42;
        SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST = 43;}
}

message BattleSetting {
    int64 battle_id = 1;
    int64 start_time_ms = 2;
    int32 duration = 3;
    int64 channel_id = 4;
    int32 status = 5;
    int32 invite_type = 6;
    GiftModeMeta gift_mode_meta = 7;
    int32 battle_type = 8;
    int64 extra_duration_second = 9;
    int64 end_time_ms = 10;

}

message WebcastColdStartMessage {
    CommonMessageData base_message = 1;
    int32 msg_type = 2;
    int32 status = 3;
    int64 viewer_count = 4;
    int64 total_count = 5;

}

message FansClubMember {
    FansClubData data = 1;
    map<int32, FansClubData> prefer_data = 2;

}

message GroupLiveInfo {
    CompetitionInfo group_show = 1;

}

message AboutMeResponse {
    ResponseData data = 1;

    message ResponseData {
        AboutMe about_me = 1;
        BenefitsInfo benefits_info = 2;
        IntroConflictInfo conflict_info = 3;
        int32 merge_type = 4;
        bool old_version = 5;

    }
}

message WebcastCountdownForAllMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    CountdownForAllContent play_content = 3;
    LinkerMediaChangeOperator operator_user_info = 4;
    int32 play_end_reason = 5;

}

message MultiGuestRecommendRoomInfo {
    int64 room_id = 1;
    User host_info = 2;
    repeated string host_reco_tags = 3;
    int64 guest_num = 4;
    int64 viewer_num = 5;
    string reco_reason = 6;
    int64 reco_rank = 7;

}

message WebcastGiftBroadcastMessage {
    CommonMessageData base_message = 1;
    int64 m_from_user_id = 2;
    ImageModel m_left_icon = 3;
    WebcastRoomNotifyMessage m_notify_message = 4;

}

message ChangePositionResp {
    repeated string linked_user_ui_positions = 2;

}

message MiddleTouchExtra {
    SubWaveData sub_wave_data = 1;
    SubGoalData sub_goal_data = 2;
    StreamGoalData live_goal_indicator_stream_goal = 3;
    GuessWidgetsData guess_widgets_data = 4;
    PlayTogetherWidgetsData play_together_widgets_data = 5;
    SubQueueData sub_queue_data = 6;

}

message BarrageTypeGiftGalleryParam {
    int64 from_user_id = 1;
    int64 to_user_id = 2;

}

message CampaignBannerDisplayResult {
    int32 campaign_banner_display_result = 1;

}

message UrlDataStruct {
    string uri = 1;
    repeated string url_list = 2;
    int32 url_sub_type = 3;
    string md5 = 4;
    repeated string url_prefix = 5;

}

message CardObtainGuide {
    int32 not_in_use = 1;

}

message LinkmicSettingmodel {
    int32 key = 1;
    int32 value = 2;

}

message PlayTogetherBasicInfo {
    string play_together_id = 1;
    string description = 2;
    string apply_note = 3;
    optional PlayTogetherStatus status = 4;
    optional ApplyLimitType apply_limit_type = 5;
    int64 apply_user_num = 6;
    bool is_applying = 7;
    int64 creator_id = 8;
    string creator_avatar = 9;
    string creator_nick_name = 10;

    enum ApplyLimitType {
        APPLY_LIMIT_TYPE_ALL_USER = 0;
        APPLY_LIMIT_TYPE_FOLLOWER_ONLY = 1;
        APPLY_LIMIT_TYPE_CREATOR_TEAM_ONLY = 2;
        APPLY_LIMIT_TYPE_SUBSCRIBER_ONLY = 3;}
    enum PlayTogetherStatus {
        PLAY_TOGETHER_STATUS_UNKNOWN = 0;
        PLAY_TOGETHER_STATUS_REVIEWING = 1;
        PLAY_TOGETHER_STATUS_REVIEW_PASS = 2;
        PLAY_TOGETHER_STATUS_DESC_NOT_PASS = 3;
        PLAY_TOGETHER_STATUS_APPLY_NOTE_NOT_PASS = 4;
        PLAY_TOGETHER_STATUS_ALL_NOT_REVIEW_PASS = 5;
        PLAY_TOGETHER_STATUS_START = 6;
        PLAY_TOGETHER_STATUS_END = 7;}
}

message BizLeaveJoinGroupParams {
    int64 not_suggest_to_uid = 1;

}

message ArrowConfig {
    ImageModel icon = 1;

}

message ManageViewerSingReq {
    LinkCommon common = 1;
    int64 channel_id = 2;
    Player permiter = 3;
    Player applier = 4;
    ReplyStatus reply_status = 5;
    DSLConfig dsl = 6;
    Player operator = 7;
    int64 song_id = 8;
    BizPermitParams multi_guest_req_extra = 9527;

}

message DynamicListConfig {
    repeated string list_sections = 1;
    map<string, SectionConfig> section_configs = 2;

    message SectionConfig {
        string schema = 1;
        string initial_data = 2;

    }
}

message BattleTeamUser {
    int64 user_id = 1;
    int64 score = 2;
    string user_id_str = 3;

}

message OfficialChannelInfo {
    User channel_user = 1;
    string channel_name = 2;
    int64 end_time_stamp = 3;
    int64 forbidden_before_end = 4;
    int64 max_next_time = 5;
    map<int64, int64> delay_enter_time = 6;
    int64 backup_room_id = 7;
    string backup_room_id_str = 8;
    int64 start_time_stamp = 9;
    int32 role_type = 10;
    bool exist_linkmic = 11;
    int32 linkmic_type = 12;

}

message GiftListAckResponse {
    Extra extra = 2;

    message Extra {
        string log_id = 1;

    }
}

message BestTeammateRelation {
    int64 user_id = 1;
    int64 best_teammate_id = 2;

}

message GuessOptions {
    GuessText text = 1;
    GuessOptionStats guess_option_stats = 2;
    int64 serial_num = 3;
    string option_id_str = 4;

}

message CompetitionSwitchTurnResponse {
    ResponseData data = 1;

    message ResponseData {
        CompetitionSwitchTurn switch_turn_info = 1;

    }
}

message GuideInfoResponse {
    Data data = 1;

    message GuidePageResource {
        repeated Text texts = 1;
        repeated ImageModel icons = 2;
        repeated ImageModel animations = 3;

    }
    message GuideEntry {
        repeated GuidePageResource guide_page_resources = 10;

    }
    message UserStats {
        int64 gift_panel_show_cnt = 1;
        int64 shortcut_gift_click_cnt = 2;
        int64 gift_guide_popup_show_cnt = 3;
        int64 like_cnt = 4;
        int64 watch_duration = 5;

    }
    message Data {
        UserStats user_stats = 1;
        string guide_type = 2;
        string schema_url = 3;
        bool should_use_config = 4;
        GuideEntry guide_entry = 5;
        UGGiftTaskInfo ug_gift_task_info = 6;

    }
}

message CombineBadgeStruct {
    int32 badge_display_type = 1;
    ImageModel icon = 2;
    BadgeText text = 3;
    string str = 4;
    PaddingInfo padding = 5;
    FontStyle font_style = 6;
    ProfileCardPanel profile_card_panel = 7;
    CombineBadgeBackground background = 11;
    CombineBadgeBackground background_dark_mode = 12;
    bool icon_auto_mirrored = 13;
    bool bg_auto_mirrored = 14;
    int32 public_screen_show_style = 15;
    int32 personal_card_show_style = 16;
    int32 rank_list_online_audience_show_style = 17;
    int32 multi_guest_show_style = 18;
    ArrowConfig arrow_config = 19;
    PaddingInfo padding_new_font = 20;

}

message CapsuleBizParamsNewAnchorEffect {
    string effect_panel = 1;
    string resource_id = 2;
    string category_id = 3;
    string tab_key = 4;

}

message GroupChatWatchLiveInfo {
    int64 room_id = 1;
    User user_info = 2;

}

message CompetitionUserBase {
    int64 user_id = 1;
    optional CompetitionRoleType role = 2;
    string nickname = 3;
    ImageModel avatar = 4;
    string user_id_str = 5;

    enum CompetitionRoleType {
        COMPETITION_ROLE_TYPE_UNKNOWN = 0;
        COMPETITION_ROLE_TYPE_ANCHOR = 1;
        COMPETITION_ROLE_TYPE_AUDIENCE = 2;}
}

message LiveStreamGoal {
    int64 id = 1;
    int32 type = 2;
    int32 status = 3;
    repeated LiveStreamSubGoal sub_goals = 4;
    string description = 5;
    AuditStatus audit_status = 6;
    int32 cycle_type = 7;
    int64 start_time = 8;
    int64 expire_time = 9;
    int64 real_finish_time = 10;
    repeated LiveStreamGoalContributor contributors = 11;
    int32 contributors_length = 12;
    string id_str = 13;
    string audit_description = 14;
    GoalStats stats = 15;
    string goal_extra_info = 16;
    int32 mode = 17;
    AuditInfo audit_info = 18;
    string challenge_type = 20;
    bool is_uneditable = 21;

    message AuditInfo {
        int64 violation_id = 1;
        int32 task_type = 2;

    }
}

message BubbleMetadata {
    string live_task_id = 1;
    int32 live_task_status = 2;

}

message LeaveJoinGroupResp {
    LinkMicCommonResp common_resp = 1;
    BizLeaveJoinGroupResponse cohost_biz_resp = 9527;

}

message WebcastPreviewGameMomentMessage {
    CommonMessageData base_message = 1;
    repeated PreviewGameMomentData moment_data_list = 2;

}

message EffectingCard {
    repeated CriticalStrikeCardInfo critical_strike_cards = 1;
    repeated SmokeCardInfo smoke_cards = 2;
    repeated ExtraTimeCardInfo extra_time_cards = 3;
    repeated SpecialEffectCardInfo special_effect_cards = 4;
    repeated PotionCardInfo potion_cards = 5;
    repeated WaveCardInfo wave_cards = 6;
    repeated Top2CardInfo top2_cards = 7;
    repeated Top3CardInfo top3_cards = 8;

}

message WebcastGameRecommendCreateGuessMessage {
    CommonMessageData base_message = 1;
    string template_id_str = 2;
    int64 bet_duration_in_second = 3;
    GuessText guess_title = 4;
    GuessText guess_opt1 = 5;
    GuessText guess_opt2 = 6;
    int64 diss_miss_duration = 7;
    int64 tips_type = 8;
    int64 tips_limit = 9;
    string server_timestamp_str = 10;
    string expire_time = 11;

}

message LiveFlashSaleInfo {
    int64 activity_id = 1;
    int32 type = 2;
    int32 status = 3;
    int32 stock_status = 4;
    int32 available_stock = 5;

}

message LinkerMuteContent {
    int64 user_id = 1;
    optional MuteStatus mute_status = 2;

    enum MuteStatus {
        MUTE_STATUS_MUTE = 0;
        MUTE_STATUS_UN_MUTE = 1;}
}

message BannerCollapseInfo {
    Text title = 1;
    ImageModel image = 2;
    bool enabled = 3;
    string background_color = 4;
    int64 collapse_height = 5;
    string vertical_line_color = 6;

}

message WebcastVideoLiveGoodsOrderMessage {
    CommonMessageData base_message = 1;
    User user = 2;
    GoodsOrder goods_order = 3;

    message GoodsOrder {
        int64 goods_room_order = 1;
        int64 order_num = 2;
        int64 order_money = 3;
        string order_id = 4;

    }
}

message FansLevelUpgradeInfo {
    int64 user_id = 1;
    int64 anchor_id = 2;
    int64 level = 3;
    int64 level_upgrade_expired_time = 4;

}

message LinkLayerListUser {
    Player link_user = 1;
    string link_mic_id = 2;
    MicPositionData position_data = 3;
    int64 linked_time_nano = 4;
    string app_version = 5;

}

message BattleTask {
    BattleBonusConfig battle_bonus_config = 1;
    BattleBonusStatus battle_bonus_status = 2;

}

message NoticeboardEndResponse {
    ResponseData data = 1;

    message ResponseData {
        bool success = 1;
        NoticeboardContent noticeboard_content = 2;

    }
}

message WebcastStarCommentNotificationMessage {
    CommonMessageData base_message = 1;
    optional StarCommentAction star_comment_action = 2;
    int64 msg_id = 3;
    User operator = 4;
    StarCommentMessage star_comment_message = 5;

    enum StarCommentAction {
        STAR_COMMENT_ACTION_UNKNOWN = 0;
        STAR_COMMENT_ACTION_DELETED = 1;
        STAR_COMMENT_ACTION_POLLING = 2;}
}

message HourlyRankRewardInfo {
    int64 user_id = 1;
    int64 asset_id = 2;
    WebcastRoomNotifyMessage notify_message = 3;
    BorderInfo border_info = 4;

}

message WebcastInRoomBannerRefreshMessage {
    CommonMessageData base_message = 1;
    int32 delay_seconds = 2;
    bool only_anchor = 3;

}

message BoostedUsersPoint {
    int64 m_point_time_stamp = 1;
    int64 m_total_users = 2;

}

message RealtimeReminderWordInfoMsg {
    Scene scene = 1;
    Text title = 2;
    string content = 3;
    string message_key = 4;

}

message PreviewPeriod {
    int64 duration = 1;
    BattlePrompt promot = 2;
    ImageModel icon = 25;

}

message GameAction {
    optional GameActionType action_type = 1;
    optional JumpPage jump_page = 2;
    int64 follow_user_id = 3;

    enum GameActionType {
        GAME_ACTION_TYPE_SHOW = 0;
        GAME_ACTION_TYPE_JUMP = 1;
        GAME_ACTION_TYPE_FOLLOW = 2;
        GAME_ACTION_TYPE_COMMENT = 3;}
    enum JumpPage {
        JUMP_PAGE_GIFT_GOAL_SOURCE = 0;
        JUMP_PAGE_GIFT_ALERT_SOURCE = 1;
        JUMP_PAGE_COHOST_SETTING = 2;
        JUMP_PAGE_GIFT_ER_RANK_LIST = 3;
        JUMP_PAGE_WEEKLY_GAME_RANK_LIST = 4;
        JUMP_PAGE_FANS_CLUB = 5;
        JUMP_PAGE_GOODY_BAG_SETTING = 6;
        JUMP_PAGE_GAME_GUESS_SETTING = 7;
        JUMP_PAGE_ADMIN_SETTING = 8;
        JUMP_PAGE_GIFT_ALERT_TT_S = 9;
        JUMP_PAGE_LIVE_GOAL = 10;
        JUMP_PAGE_TREASURE_BOX = 11;
        JUMP_PAGE_GAME_REWARDS = 12;
        JUMP_PAGE_POLL = 13;
        JUMP_PAGE_SUBSCRIPTION = 14;
        JUMP_PAGE_MONET_IZ_ATION_TIPS_SETTING = 15;
        JUMP_PAGE_EXTENDING_COUNTDOWN = 16;
        JUMP_PAGE_PLAY_TOGETHER = 17;
        JUMP_PAGE_MULTI_GUEST = 18;
        JUMP_PAGE_PARTNERSHIP = 19;
        JUMP_PAGE_GIFT_NOTIFICATION = 20;
        JUMP_PAGE_GIFT_GALLERY = 21;}
}

message TeamUsersInfo {
    int64 team_id = 1;
    repeated int64 user_ids = 2;

}

message GuestShowdownUpdateParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 play_id = 3;
    int32 guest_showdown_update_scene = 4;
    GuestShowdownConfigChange config_change = 5;

}

message WebcastRoomStickerMessage {
    CommonMessageData base_message = 1;
    repeated RoomSticker sticker_list = 2;

}

message FinishChannelContent {
    Player owner = 1;
    int64 finish_reason = 2;

}

message BizReplyResponseData {
    int64 link_type_permission = 1;
    int32 layout_type_action = 2;
    int32 fix_mic_num_action = 3;
    WebcastPerceptionMessage host_perception_info = 5;

}

message PosIdentity {
    optional PosIdentityType type = 1;
    string value = 2;

    enum PosIdentityType {
        POS_IDENTITY_TYPE_IDENTITY_EMPTY_SLOT = 0;
        POS_IDENTITY_TYPE_IDENTITY_RT_C_USER_ID = 1;
        POS_IDENTITY_TYPE_IDENTITY_RT_C_STREAM_ID = 2;
        POS_IDENTITY_TYPE_IDENTITY_LIVE_USER_ID = 3;}
}

message WebcastOChannelUserMessage {
    CommonMessageData base_message = 1;
    int64 start_time_stamp = 2;
    int64 max_enter_time = 3;

}

message ResumeReq {
    LinkCommon common = 1;
    Player myself = 2;
    int64 channel_id = 3;
    BizResumeParams multi_guest_req_extra = 9527;

}

message WallpaperContext {
    int64 user_id = 1;
    int64 wallpaper_start_time = 2;
    string nickname = 3;
    ImageModel avatar_thumb = 4;
    string user_keywords = 5;
    string linkmic_id_str = 6;

}

message BizPermitResponse {
    ResponseData data = 1;

    message ResponseData {
        WebcastPerceptionMessage host_perception_info = 1;

    }
}

message WebcastGiftProgressMessage {
    CommonMessageData base_message = 1;
    string progress_type = 2;
    repeated ProgressStruct progress = 3;

    message ProgressStruct {
        int64 progress_id = 1;
        int64 progress_value = 2;
        int32 progress_status = 3;

    }
}

message Text {
    string key = 1;
    string default_pattern = 2;
    TextFormat default_format = 3;
    repeated TextPiece pieces = 4;

}

message GiftsBoxInfo {
    repeated GiftInfoInBox gifts = 1;

}

message AudienceReserveContent {
    int64 from_user_id = 1;
    User user = 2;

}

message WebcastOecLiveManagerMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    PurchaseProductInfo purchase_product_info = 3;
    SubscriptionInfo subscription_info = 4;
    GiveawayInfo giveaway_info = 5;
    AskDemoInfo ask_demo_info = 6;

}

message TopicSessionStatus {
    int64 session_id = 1;
    int64 session_heat = 2;

}

message WebcastDiggMessage {
    CommonMessageData base_message = 1;
    int32 digg_count = 2;
    int32 duration = 3;
    int32 color = 4;
    User user = 5;
    string icon = 6;

}

message WebcastAILiveSummaryMessage {
    CommonMessageData base_message = 1;
    AILiveSummary ai_live_summary = 2;

}

message EffectListResponse {
    Data data = 1;

    message Data {
        string version = 1;
        Panel panel = 2;
        repeated EffectStruct effects = 3;
        repeated EffectStruct collection = 4;
        repeated EffectCategory category = 5;
        string front_effect_id = 6;
        string rear_effect_id = 7;
        repeated string url_prefix = 8;
        map<string, string> extra = 9;

    }
}

message P2PGroupChangeContent {
    repeated RTCExtraInfo group_ext_info = 1;
    GroupChannelAllUser group_user = 2;
    MigrationDetails migration_details = 3;
    repeated ContentPosition content_pos = 4;

}

message GiftResultData {
    Text display_text = 1;
    string describe = 2;
    int64 gift_id = 3;
    int32 group_count = 4;
    int32 repeat_count = 5;
    int32 combo_count = 6;
    int64 msg_id = 7;
    Text tray_display_text = 8;
    GiftTrayInfo m_tray_info = 10;
    Gift m_gift = 11;
    Text display_text_for_anchor = 12;
    Text display_text_for_audience = 13;
    GiftsBoxInfo gifts_in_box = 14;
    AssetsModel gift_asset = 15;

}

message TransitionConfig {
    int64 config_id = 1;
    ImageModel resource_image = 2;

}

message PartnershipInfo {
    bool partnership_room = 1;
    string promoting_task_id = 2;
    repeated string task_id_list = 3;
    string promoting_game_id = 4;
    string show_task_id = 5;
    string promoting_drops_id = 6;
    bool promoting_room = 7;
    int32 promoting_task_type = 8;
    int32 show_task_type = 9;

}

message RefreshPaidStreamResp {
    ResponseData data = 1;

    message ResponseData {
        StreamUrl stream_url = 1;
        StreamUrl multi_stream_url = 2;

    }
}

message GiftLockInfo {
    bool m_lock = 1;
    int32 m_lock_type = 2;
    int32 gift_level = 3;
    bool highlight_enabled = 4;
    string unlock_button_text = 5;
    string unlock_schema = 6;

}

message GuestShowdownConfig {
    int64 duration = 1;
    int32 loser_num = 2;

}

message LinkGetSettingResult {
    AnchorLinkmicUserSettings settings = 1;

}

message WebcastAnchorToolModificationMessage {
    CommonMessageData base_message = 1;
    AnchorToolModification modification = 2;

}

message WebcastLiveIntroMessage {
    CommonMessageData base_message = 1;
    int64 id = 2;
    AuditStatus audit_status = 3;
    string content = 4;
    User user = 5;
    int32 intro_mode = 6;
    repeated BadgeStruct badges = 7;
    string content_language = 8;

}

message CapsuleBizParamsMultiGuestInviteGuide {
    User invitee_user = 1;
    int32 display_strategy = 2;
    string linkmic_audience_invite_notice_reason = 3;

}

message LinkerCloseContent {

}

message CompetitionABInfo {
    TakeTheStageABInfo tts = 1;

    message TakeTheStageABInfo {
        bool atmosphere_animation = 1;
        bool atmosphere_duration = 2;

    }
}

message GiftIconInfo {
    int64 m_icon_id = 1;
    string m_name = 2;
    int64 m_valid_start_at = 3;
    int64 m_valid_end_at = 4;
    string m_icon_uri = 5;
    ImageModel m_icon = 6;
    bool m_with_effect = 7;
    string m_effect_uri = 8;
    ImageModel m_effect = 9;

}

message GiftFavouriteSaveResponse {
    Data data = 1;

    message Data {
        bool success = 1;
        repeated int64 favourite_gift_ids = 2;

    }
}

message GiftRecord {
    Message message = 1;
    Gift gift = 2;
    User from_user = 3;
    repeated string tags = 4;

    message User {
        int64 id = 1;
        string nickname = 2;
        ImageModel avatar = 3;

    }
    message Gift {
        int64 id = 1;
        string name = 2;
        ImageModel image = 3;
        int32 gift_count = 4;

    }
    message Message {
        int64 msg_id = 1;
        int64 group_id = 2;
        int64 created_on_timestamp = 3;

    }
}

message WebcastMGPunishCenterActionMessage {
    CommonMessageData base_message = 1;
    int32 action_type = 2;

}

message UnionAnimationInfo {
    optional UnionAnimationInfoType union_type = 1;
    repeated ProfitRankType rank_type_array = 2;
    int64 supported_version = 3;

    enum ProfitRankType {
        PROFIT_RANK_TYPE_TYPE_HOURLY_RANK = 0;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK = 1;
        PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK = 2;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY = 3;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK = 4;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE = 5;
        PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY = 6;
        PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY = 7;
        PROFIT_RANK_TYPE_TYPE_DAILY_RANK = 8;
        PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK = 9;
        PROFIT_RANK_TYPE_TYPE_GAME_RANK = 10;
        PROFIT_RANK_TYPE_TYPE_DAILY_GAME = 11;
        PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK = 12;
        PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE = 13;
        PROFIT_RANK_TYPE_DAILY_ROOKIE = 14;
        PROFIT_RANK_TYPE_TYPE_TEAM_RANK = 15;
        PROFIT_RANK_TYPE_TYPE_CLASS_RANK = 16;
        PROFIT_RANK_TYPE_UNDEFINED_17 = 17;
        PROFIT_RANK_TYPE_UNDEFINED_18 = 18;
        PROFIT_RANK_TYPE_UNDEFINED_19 = 19;
        PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G = 20;
        PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B = 21;
        PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE = 22;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE = 23;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO = 24;
        PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE = 25;}
    enum UnionAnimationInfoType {
        UNION_ANIMATION_INFO_TYPE_NO_UNION_ANIMATION = 0;
        UNION_ANIMATION_INFO_TYPE_LOOP = 1;
        UNION_ANIMATION_INFO_TYPE_LOCK = 2;}
}

message SubInfo {
    string user_id = 1;
    string anchor_id = 2;
    int64 sub_start_time = 3;
    int64 sub_end_time = 4;
    int64 next_renew_time = 5;
    int32 subscribed_month = 6;
    bool is_subscribing = 7;
    SubLevel sub_level = 8;
    optional PayStatus status = 9;
    bool sub_info_not_found = 10;
    string sku_name = 11;
    optional PayChannel pay_channel = 12;
    GraceInfo grace_info = 13;
    PriceChangeInfo price_change_info = 16;
    SubOperation last_operation = 17;
    string package_id = 18;
    int64 sub_circle = 19;
    int32 renewal_period = 20;
    bool is_mocked = 21;

    enum PayStatus {
        PAY_STATUS_SUB_STATUS_UNKNOWN = 0;
        PAY_STATUS_SUB_STATUS_ONE_TIME = 1;
        PAY_STATUS_SUB_STATUS_AUTO_DEDUCTION = 2;
        PAY_STATUS_SUB_STATUS_AUTO_DEDUCTION_CANCELED = 3;
        PAY_STATUS_SUB_STATUS_REVOKE = 4;}
    enum PayChannel {
        PAY_CHANNEL_PAY_CHAN_UNKNOWN = 0;
        PAY_CHANNEL_PAY_CHAN_COINS = 1;
        PAY_CHANNEL_PAY_CHAN_I_AP_CASH = 2;
        PAY_CHANNEL_PAY_CHAN_WEB_APP = 3;
        PAY_CHANNEL_PAY_CHAN_GIFT_SUB = 4;}
}

message ListChangeBizContent {
    map<int64, CohostUserInfo> user_infos = 1;
    repeated VirtualWaitingUser waiting_users = 2;

}

message NoticeboardGetUserRestrictedHistoryResponse {
    ResponseData data = 1;

    message ResponseData {
        map<string, int32> restricted_map = 1;

    }
}

message FlashSaleAtmosphere {
    int32 status = 1;
    int64 start_time = 2;
    int64 end_time = 3;
    int64 preheat_time = 4;

}

message PayGradeInfo {
    UserGrade user_grade = 1;
    UpgradeInfo upgrade_info = 2;

}

message AnchorReplayInfoResponse {
    AnchorReplayInfoData data = 1;

}

message RankListTabInfo {
    repeated RankTabInfo tabs = 1;
    int64 supported_version = 2;

}

message BetStats {
    string bet_option = 1;
    int64 bet_points = 2;
    int64 win_points = 3;
    int64 refund_points = 4;
    int64 rollback_points = 5;
    int64 bet_times = 6;

}

message PurchaseProductInfo {
    User user = 1;
    Product product = 2;

}

message JoinGroupResp {
    LinkMicCommonResp common_resp = 1;
    GroupChannelAllUser group_user = 2;
    repeated string linked_user_ui_positions = 3;
    repeated RTCExtraInfo group_rtc_info = 4;
    BizJoinGroupResponse cohost_resp_extra = 9527;

}

message DisplayControl {
    int32 priority = 1;
    int64 duration = 2;
    map<int32, ShowResult> target_group_show_rst = 3;
    optional HorizontalOnclickTriggerType horizontal_trigger_type = 4;

    enum HorizontalOnclickTriggerType {
        HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_UNKNOWN = 0;
        HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_LEFT = 1;
        HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_MIDDLE = 2;
        HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_RIGHT = 3;
        HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_ALL_AREA = 4;}
}

message WebcastPictionaryExitMessage {
    CommonMessageData base_message = 1;
    int64 session_id = 2;
    bool show_stats = 3;
    int32 pictionary_type = 4;

}

message SubscribeInfo {
    bool is_anchor_qualified = 1;
    bool is_subscribed = 2;
    SubscribeBadge subscribe_badge = 3;
    bool anchor_enable_subscription = 4;
    int32 subscriber_count = 5;
    bool is_in_grace_period = 6;
    bool is_subscribed_to_current_anchor = 7;
    TimerDetail timer_detail = 8;
    bool user_gift_sub_auth = 9;
    bool anchor_gift_sub_auth = 10;
    optional PayStatus status = 11;
    int64 sub_end_time = 12;
    string package_id = 13;
    string sol_room_display_text = 14;
    bool is_sol_eligible = 15;

    enum PayStatus {
        PAY_STATUS_SUB_STATUS_UNKNOWN = 0;
        PAY_STATUS_SUB_STATUS_ONE_TIME = 1;
        PAY_STATUS_SUB_STATUS_AUTO_DEDUCTION = 2;
        PAY_STATUS_SUB_STATUS_AUTO_DEDUCTION_CANCELED = 3;
        PAY_STATUS_SUB_STATUS_REVOKE = 4;}
}

message LiveJourneyImMessage {
    string msg = 1;
    int64 level = 2;
    int32 type = 3;

}

message WebcastQuestionNewMessage {
    CommonMessageData base_message = 1;
    Question question = 2;

}

message WebcastCountdownMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    CountdownContent countdown_content = 3;
    LinkerMediaChangeOperator operator_user_info = 4;

}

message WebcastGameServerFeatureMessage {
    CommonMessageData base_message = 1;
    repeated GameServerFeature all_features = 2;

}

message OwnerSettingResponse {
    Data data = 1;

    message Data {
        bool success = 1;

    }
}

message MsgNotifyWatchEarlyQuota {
    int32 component_type = 1;
    int64 watch_mill_seconds = 2;
    int64 count = 3;

}

message GuessTaskPackInfo {
    repeated GameTaskInfo tasks_info = 1;
    TaskWidgetConfig config = 2;

}

message WebcastPlaybookMessage {
    CommonMessageData base_message = 1;
    MessageType message_type = 2;
    int64 play_id = 3;
    int32 play_status = 4;
    string title = 5;
    string cover_url = 6;
    int32 playbook_end_reason = 7;

}

message WebcastGiftRecordCapsuleMessage {
    CommonMessageData base_message = 1;
    string extra = 2;

}

message ResumeResp {
    LinkMicCommonResp common_resp = 1;
    repeated LinkedUserInfo linked_user_info = 2;
    int64 channel_id = 3;
    string self_link_mic_id = 4;
    AllListUser list = 5;
    repeated string reject_enlarge_linkmic_id_list = 6;
    repeated string linked_user_ui_positions = 7;
    repeated ContentPosition content_pos = 8;
    repeated PosIdentity ui_pos = 9;
    BizResumeResponse multi_guest_resp_extra = 9527;

}

message UserVoteOptionInfo {
    int64 vote_option_index = 1;
    int64 vote_count = 2;

}

message LiveMessageSEI {
    LiveMessageID unique_i_d = 1;
    int64 timestamp = 2;

}

message CohostHistoryResponse {
    ResponseData data = 1;

    message Host {
        int64 user_id = 1;
        int64 history_group_channel_id = 2;

    }
    message User {
        int64 user_id = 1;
        int64 points = 2;

    }
    message Team {
        repeated User users = 1;

    }
    message MatchRecord {
        int64 match_id = 1;
        int64 history_group_channel_id = 2;
        int32 match_type = 3;
        int64 start_timestamp_sec = 4;
        int32 result = 6;
        Team my_team = 7;
        repeated Team opposing_teams = 8;

    }
    message TakeTheStageUser {
        int64 user_id = 1;
        int64 rank = 2;
        int64 points = 3;

    }
    message TakeTheStageRecord {
        int64 showdown_id = 1;
        int64 start_timestamp_sec = 2;
        int64 history_group_channel_id = 3;
        TakeTheStageUser my_take_the_stage_info = 4;
        repeated TakeTheStageUser other_take_the_stage_infos = 5;

    }
    message CohostSession {
        int64 id = 1;
        int64 start_timestamp_sec = 3;
        int64 viewers_accumulated = 4;
        repeated Host hosts = 5;
        repeated MatchRecord match_records = 6;
        repeated TakeTheStageRecord take_the_stage_records = 7;

    }
    message UserInfo {
        Room room = 1;
        RivalExtraInfo extra_info = 2;

    }
    message ResponseData {
        repeated CohostSession cohost_sessions = 1;
        map<int64, UserInfo> user_infos = 2;
        int64 oldest_timestamp_sec = 10;
        bool has_more = 11;

    }
}

message WebcastQuickChatListMessage {
    CommonMessageData base_message = 1;
    int64 duration = 2;
    repeated QuickChatContent content_list = 3;
    int64 priority = 4;
    Scene scene = 5;

}

message RecommendComment {
    int64 priority = 1;
    int64 duration = 2;
    Text recommend_text = 3;
    int64 tips_type = 4;

}

message WebcastPartnershipCardChangeMessage {
    CommonMessageData base_message = 1;
    int32 change_mode = 2;
    int32 sequence_id = 3;
    string task_id = 4;

}

message CurrentInteractionQuestion {
    Question question = 1;
    int64 like_cnt = 2;
    int32 self_like_status = 3;
    int32 favorite_status = 4;

}

message Prop {
    int32 primary_effect_id = 1;
    int64 next_expire = 2;
    string description = 3;
    int64 id = 4;
    string manual = 5;
    int32 diamond = 6;
    bool reddot_tip = 7;
    ImageModel icon = 8;
    int32 count = 9;
    string name = 10;
    Gift gift = 11;
    ImageModel label_icon = 12;
    bool is_fragment = 13;
    int64 fragments_compound_count = 14;
    int32 is_aweme_free_gift = 15;
    ImageModel diamond_label = 16;
    BannerInRoom banner = 17;
    int64 prop_type = 18;
    repeated HotfixGiftDataForProp gifts = 19;
    string scheme_url = 20;

}

message AssetsListResult {
    repeated AssetsModel assets = 1;

}

message FeedBannerContainer {
    repeated FeedBanner banner_list = 1;
    int32 total = 2;
    ImageModel background = 3;
    string title = 4;
    int32 switch_type = 5;
    int32 banners_type = 6;

}

message PaidEventPreview {
    int64 allow_preview = 1;
    int64 allow_preview_time = 2;

}

message CombineBadgeBackground {
    ImageModel image = 1;
    string background_color_code = 2;
    string border_color_code = 3;

}

message StarCommentPurchaseResponse {
    Data data = 1;
    Extra extra = 2;

    message Data {
        int32 purchase_result = 1;
        StarCommentQueue queue = 2;
        int64 server_cur_msg_start_time_ms = 3;
        PayGradeInfo pay_grade_info = 4;
        int64 room_user_count = 5;
        int64 coins = 6;
        int64 msg_id = 7;

    }
    message Extra {
        RechargeCustomError custom_error = 1;

    }
}

message QuizUserIdentityInfo {
    MessageType message_type = 1;
    string quiz_id = 2;
    int32 quiz_type = 3;
    string extra = 4;
    int32 user_data_version = 5;
    string device_id = 6;
    int32 user_status = 7;
    int32 respawn_balance = 8;
    int32 double_bonus_balance = 9;
    int32 spectator_type = 10;
    bool is_question_encrypt = 11;
    string question_encrypt_key = 12;
    repeated QuizUserQuestionResult user_question_result = 13;
    int32 available_respawn_balance = 14;
    int32 available_double_bonus_balance = 15;
    bool is_retain_if_wrong = 16;
    repeated UserLiveEventInfo user_live_event_infos = 17;
    repeated QuizUserIdentityInfo user_identity_infos = 18;
    string extra1 = 51;
    string extra2 = 52;
    string extra3 = 53;
    string extra4 = 54;
    string extra5 = 55;

}

message GetLiveEventUserResponse {
    ResponseData data = 1;

    message InvitedListUser {
        User user = 1;

    }
    message RegisteredListUser {
        User user = 1;
        bool already_read = 2;
        int64 registered_time = 3;

    }
    message ResponseData {
        repeated InvitedListUser invited_users = 1;
        repeated RegisteredListUser registered_users = 2;

    }
}

message GuessRankUserInfo {
    string avatar_uri = 1;

}

message ShopBrandLogo {
    string seller_name = 1;
    ImageModel seller_logo = 2;
    ImageModel blue_v_image = 3;
    ImageModel dark_blue_v_image = 4;
    ImageModel top_brand_image = 5;
    ImageModel dark_top_brand_image = 6;

}

message ChannelInfo {
    int32 layout = 1;
    int32 vendor = 2;
    int32 dimension = 3;
    int64 inner_channel_id = 4;
    int64 group_channel_id = 5;

}

message GuessWidget {
    int64 version_id = 1;
    GuessRound guess_round = 2;
    repeated BetStats bet_stats = 3;

}

message LinkListUser {
    User user = 1;
    int64 modify_time = 2;
    int32 link_type = 3;
    int32 role_type = 4;
    string link_mic_id = 5;
    int64 payed_money = 6;
    int64 fan_ticket = 7;
    int32 fan_ticket_type = 8;
    int32 link_user_type = 9;

}

message GoodyBagWinnerInfo {
    GoodyBagUserInfo user_info = 1;
    int32 coins = 2;

}

message BizJoinGroupResponse {
    ResponseData data = 1;

    message ResponseData {
        int32 perception_status = 1;
        WebcastPerceptionMessage perception_message = 2;

    }
}

message TaskWidgetConfig {
    int32 refresh_gap = 1;
    int32 show_countdown_time = 2;
    int32 red_point_show_time = 3;

}

message LiveGiftBoostCardUserStatusResponse {
    int64 m_total_users = 1;
    repeated BoostedUsersPoint m_points = 2;

}

message Room {
    int64 id = 1;
    string id_str = 2;
    int32 status = 3;
    int64 owner_user_id = 4;
    string title = 5;
    int32 user_count = 6;
    int64 create_time = 7;
    int64 finish_time = 9;
    int32 platform = 16;
    string client_version = 17;
    bool with_link_mic = 18;
    ImageModel cover = 20;
    ImageModel dynamic_cover = 21;
    ImageModel dynamic_cover_low = 22;
    string share_url = 23;
    string anchor_share_text = 24;
    string user_share_text = 25;
    int64 stream_id = 26;
    StreamUrl stream_url = 28;
    int32 mosaic_status = 29;
    RoomLinkInfo link_mic_info_gson = 32;
    repeated RoomDecoration decoration_list = 34;
    repeated TopFanTicket top_fan_tickets = 35;
    RoomStats stats = 36;
    ImageModel feed_room_label = 42;
    string labels = 43;
    User owner = 46;
    bool has_commerce_goods = 48;
    bool live_type_audio = 51;
    bool is_third_party = 52;
    bool is_screenshot = 53;
    bool live_type_sandbox = 54;
    int64 start_time = 63;
    RoomAuthStatus m_room_auth_status = 72;
    ImageModel background = 83;
    int64 layout = 84;
    bool unused_effect = 90;
    int32 gift_message_style = 91;
    string finish_url = 93;
    int32 room_layout = 101;
    int64 like_count = 111;
    int64 anchor_tab_type = 120;
    OfficialChannelInfo official_channel_info = 122;
    map<string, int64> linker_map = 130;
    int64 webcast_sdk_version = 138;
    int32 m_name_mode = 139;
    string room_create_ab_param = 140;
    CommerceStruct commerce_struct = 145;
    ImageModel stream_cover = 147;
    int32 question_version = 149;
    LiveEventInfo live_event_info = 151;
    Hashtag hashtag = 152;
    BALinkStruct ba_link_struct = 153;
    string answering_question = 155;
    WarningTag warning_tag = 157;
    MaskLayer mask_layer = 158;
    int32 live_room_mode = 159;
    string finish_url_lynx = 163;
    LikeInfo like_info = 165;
    repeated ShortTouchItem short_touch_items = 166;
    repeated LiveFilterMsgRule filter_rule = 167;
    LiveGiftBoostCardRoomStatus m_boost_card_room_status = 169;
    repeated FeedRoomLabel feed_room_label_list = 170;
    bool have_wish_list = 172;
    MultiLiveUserSettings multi_live_user_settings = 174;
    InteractionQuestionInfo interaction_question = 176;
    repeated RoomSticker room_sticker_list = 177;
    repeated GameTag game_tags = 178;
    PollInfo advanced_poll_info = 179;
    bool gift_poll_vote_enabled = 180;
    Skin skin = 182;
    ImageModel square_cover_img = 183;
    ImageModel rectangle_cover_img = 184;
    RoomAuthMessage m_room_auth_message = 185;
    PaidEvent paid_event = 186;
    PictionaryFullInfo pictionary_full_info = 187;
    AgeRestricted age_restricted = 189;
    PinInfo pin_info = 191;
    repeated string m_indicators = 192;
    TopFrameSummary top_frame_summary = 193;
    BcToggleInfo bc_toggle_info = 194;
    int32 comment_has_text_emoji_emote = 196;
    PartnershipInfo partnership_info = 197;
    int32 stream_status = 198;
    Creator creator = 199;
    string drawer_tab_position = 200;
    BaLeadsGenInfo ba_leads_gen_info = 201;
    repeated EffectInfo effect_info = 202;
    int32 audio_mute = 203;
    EventCard live_event_card = 204;
    int64 live_sub_only = 205;
    int64 support_quiz = 206;
    map<int64, int64> admin_ec_show_permission = 207;
    ImageModel blurred_cover = 208;
    CaptionInfo caption_info = 209;
    int64 adjust_display_order = 210;
    CommerceStruct commerce_info_backup = 211;
    int64 allow_preview_time = 212;
    PaidContentInfo paid_content_info = 213;
    SubPinCard sub_pin_card = 214;
    int64 enable_server_drop = 215;
    int64 disable_preview_sub_only = 216;
    bool lite_user_visible = 217;
    bool lite_user_not_visible = 218;
    int64 drop_comment_group = 219;
    int32 pico_live_type = 220;
    GiftSuspension gift_suspension = 221;
    bool polling_star_comment = 222;
    bool has_used_music = 223;
    LiveProInfo anchor_live_pro_info = 224;
    repeated string rank_comment_groups = 225;
    int64 multi_stream_scene = 226;
    int64 multi_stream_id = 227;
    string multi_stream_id_str = 228;
    StreamUrl multi_stream_url = 229;
    string idc_region = 230;
    RegionalRestricted regional_restricted = 231;
    CommercialContentToggle commercial_content_toggle = 232;
    int64 max_preview_time = 233;
    KaraokeInfo karaoke_info = 234;
    StarCommentConfig star_comment_config = 235;
    bool show_star_comment_entrance = 236;
    int32 cpp_version = 237;
    int64 live_sub_only_use_music = 238;
    LikeEffect like_effect = 239;
    int64 room_pcu = 240;
    FYPCommerceStruct fyp_commerce_info = 241;
    int64 net_mode = 242;
    string rtc_app_id = 245;
    int64 game_demo = 246;
    QuickGift quick_gift = 247;
    OnlineAudience online_audience = 248;
    repeated ProtoMessageFetchResult.BaseProtoMessage history_comment_list = 249;
    bool has_more_history_comment = 250;
    string history_comment_cursor = 251;
    LikeIconInfo like_icon_info = 253;
    GuessWidgets guess_widgets = 254;
    GuessTaskPackInfo guess_task_pack_info = 255;
    CurrentInteractionQuestion current_interaction_question = 256;
    PollConf poll_conf = 257;
    EpiphronDecision decisions = 258;
    AggregationData aggregation_data = 259;
    PlayTogetherBasicInfo play_together_info = 260;
    int32 multi_stream_source = 261;
    HighlightFragmentInfo highlight_fragment_info = 262;
    map<int64, MsgNotifyQuota> quota_config = 263;
    LiveRecordConfig live_record_config = 264;
    int64 effect_frame_upload_demotion = 265;
    SubUpsellInfo sub_upsell_info = 266;
    int64 cover_type = 267;
    bool reposted = 268;
    RepostInfo repost_info = 269;
    DropsRoomInfo drops_info = 270;
    bool enable_stream_encryption = 271;
    bool disable_screen_record = 272;
    GameTagDetail game_tag_detail = 273;
    bool enable_optimize_sensitive_word = 274;
    CustomTabInfo custom_tab_info = 275;
    string room_llm_title = 276;
    GameEmotesTab game_emotes_tab = 277;
    BcToggleInfo official_channel_bc_toggle_info = 280;
    LiveProInfo official_channel_anchor_live_pro_info = 281;
    PreviewCommentInfo preview_comment_info = 282;
    int32 ec_age_interval = 283;
    TaxonomyTagInfo taxonomy_tag_info = 284;
    int64 sub_tag = 285;
    int64 live_sub_only_tier = 286;
    int64 live_sub_only_month = 287;
    MsgNotifyComAvoidConfig avoid_config = 288;
    bool aigc_self_disclosure_switch = 289;
    repeated EcommerceRoomTag ecommerce_room_tags = 290;
    GroupLiveInfo group_live_info = 291;
    GroupLiveSession group_live_session = 292;
    map<int64, MsgNotifyWatchEarlyQuota> watch_early_quota_config = 293;
    map<int64, MsgNotifyWatchContinuousQuota> continuous_room_quota_config = 294;
    int64 max_continue_watch_mill_seconds = 295;
    AILiveSummary ai_live_summary = 296;
    ParallelPullStreamInfo parallel_pull_stream_info = 297;
    GameGiftGuideKeywordsConfig game_gift_guide_config = 298;
    repeated RoomSticker biz_sticker_list = 299;
    repeated string emoji_list = 300;
    QueueInfo queue_info = 301;

}

message AllListUser {
    repeated LinkLayerListUser linked_list = 2;
    repeated LinkLayerListUser applied_list = 3;
    repeated LinkLayerListUser invited_list = 4;
    repeated LinkLayerListUser ready_list = 5;

}

message WebcastScreenChatMessage {
    CommonMessageData base_message = 1;
    User user_info = 2;
    int32 chat_type = 3;
    string content = 4;
    int32 priority = 5;
    CeremonyEffect effect = 6;
    ImageModel background_image = 7;
    CeremonyEffect ceremony_effect = 8;
    ImageModel background = 9;
    PublicAreaCommon public_area_common = 10;

}

message WebcastGameEmoteUpdateMessage {
    CommonMessageData base_message = 1;
    GameEmotesTab game_emotes_tab = 2;

}

message WebcastBoostCardMessage {
    CommonMessageData base_message = 1;
    repeated BoostCard m_cards = 3;

}

message GroupChatLiveEntranceResponse {
    ResponseData data = 1;

    message ResponseData {
        int32 entrance_status = 1;
        repeated GroupChatWatchLiveInfo watch_live_infos = 2;

    }
}

message RoomReplay {
    string id = 1;
    int64 create_time = 2;
    int64 finish_time = 3;
    int64 moment_gen_stats = 4;
    int64 push_status = 5;
    repeated RoomReplayMoment moments = 6;
    bool available = 7;
    ImageModel cover = 8;
    string title = 9;
    string fragment_id = 10;
    int32 live_mode = 11;
    string play_url = 12;
    string download_url = 13;
    int64 fan_ticket = 14;
    int64 total_user = 15;
    int64 punish_type = 16;
    int64 fragment_count = 17;
    int64 mark_count = 18;
    string play_url_vcodec = 19;
    int64 start_time = 20;
    string failed_reason = 21;
    int64 generate_duration = 22;
    int32 replay_prompt = 23;
    int32 status = 24;
    string m3u8_url = 25;
    VideoInfo video_info = 26;
    int32 watch_status = 27;
    string vid = 28;
    repeated FragmentTypeCount fragment_count_with_type = 29;
    VideoMetaInfo mp4_video_meta_info = 30;
    repeated SpriteImageItem sprite_list = 31;
    RemuxInfo remux_info = 32;
    VideoMetaInfo hls_video_meta_info = 33;
    TranscodeInfo transcode_info = 34;
    int32 download_mode = 35;
    string room_id_encode = 36;
    string message_content_pb = 38;
    repeated int64 start_offsets = 39;
    repeated int64 end_offsets = 40;

}

message LinkerUpdateUserContent {
    int64 from_user_id = 1;
    int64 to_user_id = 2;
    map<string, string> update_info = 3;

}

message CheckLineupResponse {
    ResponseData data = 1;

    message ResponseData {
        bool disconnect = 1;

    }
}

message ColdStartStat {
    int32 seconds = 1;
    int64 total_count = 2;
    int64 viewer_count = 3;

}

message RTCOther {
    int32 trans_coding_second = 1;

}

message FilterInfoData {
    bool is_filtered = 1;
    string reason = 2;

}

message SubLevel {
    int32 level = 1;
    string desc = 2;
    int32 month_limit = 3;
    LevelBadge badge = 4;
    BadgeStruct badge_struct = 5;

}

message ShortTouchPollData {
    string poll_id = 1;
    int64 poll_end_time = 2;
    bool poll_show_result = 3;

}

message TeamMatchCampaign {
    repeated BestTeammateRelation best_teammate_relation = 1;
    repeated int64 start_sfx_team_id = 2;
    bool has_team_match_mvp_sfx = 3;

}

message WebcastRoomPinMessage {
    CommonMessageData base_message = 1;
    WebcastChatMessage chat_message = 2;
    WebcastSocialMessage social_message = 3;
    WebcastGiftMessage gift_message = 4;
    WebcastMemberMessage member_message = 5;
    WebcastLikeMessage like_message = 6;
    string method = 30;
    int64 pin_time = 31;
    User operator = 32;
    int32 action = 33;
    int64 display_duration = 34;
    int64 pin_id = 35;
    string ec_streamer_key = 36;

}

message BizApplyResponse {
    BizApplyResponseData response_data = 1;

}

message CppBannerInfo {
    int32 cpp_banner_status_enum = 1;

}

message PollStartContent {
    int64 start_time = 1;
    int64 end_time = 2;
    repeated PollOptionInfo option_list = 3;
    string title = 4;
    User operator = 5;

}

message ProductPrice {
    string format_price = 1;

}

message UpdateShowContentParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    int64 show_id = 3;
    int32 update_type = 4;
    bool allow_open_mic_freely = 5;
    int64 target_user_id = 6;
    int64 pre_user_id = 7;
    int64 next_user_id = 8;
    int64 transition_duration_of_config = 9;

}

message GuessRoundStats {
    int64 member_nums = 1;
    int64 points_num = 2;
    int64 points_split_num = 3;
    int64 points_voted_to_anchor = 4;

}

message LinkmicUser {
    int64 user_id = 1;
    int64 room_id = 2;
    string link_mic_id_str = 3;
    string nick_name = 4;
    string display_id = 5;
    ImageModel avatar = 6;
    string user_id_str = 7;
    string room_id_str = 8;

}

message WebcastProjectDModifyH5 {
    CommonMessageData base_message = 1;
    string m_top_left_url = 2;
    string m_bottom_right_url = 3;

}

message BattleUserInfo {
    BattleBaseUserInfo user = 1;
    repeated BattleRivalTag tags = 2;

}

message BillboardDisplayResult {
    int32 billboard_type = 1;
    string billboard_id = 2;
    int32 display_result = 3;

}

message CreateInfoPerceptionMessage {
    string title = 1;
    string sub_title = 2;
    string detail_url = 3;
    PunishEventInfo punish_info = 4;
    int32 access_type = 5;

}

message CohostABTestList {
    repeated CohostABTest ab_test_list = 1;

}

message RechargeReq {
    LinkCommon common = 1;
    int64 channel_id = 2;
    Player myself = 3;
    Player target = 4;
    int32 type = 5;
    int64 route_id = 6;

}

message LikeInfo {
    int32 click_cnt = 1;
    int32 show_cnt = 2;

}

message AboutMeInputBox {
    string guide_content = 1;
    int32 max_character_count = 2;
    string content = 3;

}

message LinkerMicIdxUpdateContent {
    LinkerMicIdxUpdateInfo mic_index_update_info = 1;

}

message TopFanTicket {
    int64 fan_ticket = 1;
    User user = 2;

}

message ExampleSetting {
    int64 value = 1;

}

message RoomStats {
    int64 id = 1;
    string id_str = 2;
    int64 ticket = 3;
    int32 total_user = 5;
    int32 gift_u_v_count = 6;
    int32 follow_count = 7;
    int32 watermelon = 9;
    int32 enter_count = 11;
    int32 replay_viewers = 16;
    int32 share_count = 17;

}

message GameGiftGuideKeyword {
    int64 type = 1;
    string value = 2;
    string regrex_pattern = 3;

}

message RoomNotifyMessageExtra {
    int64 duration = 1;
    Background background = 2;
    NotifyHighlightInfo highlight_info = 3;

    message Background {

    }
}

message WebcastRoomStreamAdaptationMessage {
    CommonMessageData base_message = 1;
    int64 action = 2;
    SubjectPositionInfo subject_position_info = 3;

}

message WebcastLinkmicBattleNoticeMessage {
    CommonMessageData base_message = 1;
    optional BattleNoticeType notice_type = 2;
    BattleNoticeAnchorGuide anchor_guide = 3;
    BattleNoticeToast toast = 4;
    BattleNoticeBubbleGuide bubble_guide = 5;
    BattleNoticeAnchorGiftGuide anchor_gift_guide = 6;
    BattleNoticeRuleGuide battle_rule_guide = 7;
    BattleNoticeCommonGuide common_guide = 8;
    BattleNoticeExtremeHighScoreNotice extreme_high_score_notice = 9;

    enum BattleNoticeType {
        BATTLE_NOTICE_TYPE_ANCHOR_GUIDE = 0;
        BATTLE_NOTICE_TYPE_TOAST = 1;
        BATTLE_NOTICE_TYPE_BUBBLE_GUIDE = 2;
        BATTLE_NOTICE_TYPE_ANCHOR_GIFT_GUIDE = 3;
        BATTLE_NOTICE_TYPE_RULE_GUIDE = 4;
        BATTLE_NOTICE_TYPE_ANCHOR_MULTI_MATCH_GUIDE = 5;
        BATTLE_NOTICE_TYPE_COMMON_GUIDE = 6;
        BATTLE_NOTICE_TYPE_EXTREME_HIGH_SCORE = 7;}
}

message UseExtraTimeCard {
    ExtraTimeCardInfo card_info = 1;
    int64 anchor_id = 2;
    Text display_content = 3;

}

message BizJoinDirectResponseData {
    int64 reply_im_msg_id = 1;
    int64 link_type_permission = 2;
    int32 layout_type_action = 3;
    int32 fix_mic_num_action = 4;

}

message LinkMicCommonResp {
    int64 error_code = 1;
    string error_msg = 2;
    map<string, bytes> extra = 3;

}

message TransitionInfo {
    int64 user_id = 1;
    string linkmic_id_str = 2;
    string nickname = 3;
    ImageModel avatar_thumb = 4;
    int64 transition_duration_of_current = 5;
    int64 transition_start_time = 6;

}

message LayoutState {
    string layout_id = 1;

}

message AILiveSummary {
    string room_llm_title = 1;
    string result_key = 2;
    int64 create_timestamp = 3;
    int32 ai_live_summary_switch = 4;

}

message GetUserPlaySettingsParams {
    repeated string setting_keys = 1;

}

message RivalsListExtra {
    LogPbBean log_pb_bean = 1;

    message LogPbBean {
        string impr_id = 1;
        string client_log_id = 2;

    }
}

message LiveGiftBoostCardAckResponse {

}

message BattleTruthOrDare {
    bool triggered = 1;
    string rule_detail_url = 2;
    string anchor_region = 3;
    string lap_guide_key = 4;
    int32 lap_guide_duration_second = 5;

}

message MicPositionData {
    int32 type = 1;
    LinkPosition link_position = 2;

}

message FontStyle {
    int32 font_size = 1;
    int32 font_width = 2;
    string font_color = 3;
    string border_color = 4;

}

message VirtualWaitingUser {
    int64 send_user_id = 1;
    int64 send_timestamp = 2;
    repeated ImageModel avatars = 3;

}

message AccessControlCaptcha {
    int64 captcha_record_id = 1;
    int64 room_id = 2;
    int64 verify_duration_in_sec = 3;

}

message DSLConfig {
    int32 scene_version = 1;
    string layout_id = 2;

}

message QuizAnswerInfo {
    MessageType message_type = 1;
    string quiz_id = 2;
    int32 quiz_type = 3;
    string extra = 4;
    int64 participants_count = 5;
    string question_id = 6;
    int32 question_no = 7;
    int32 question_count = 8;
    int32 question_type = 9;
    string title = 10;
    repeated QuizImage image = 11;
    repeated QuizQuestionOption options = 12;
    string correct_answer = 15;
    QuizStatistics statistics = 16;
    repeated QuizNextQuiz next_quiz = 17;
    string reward_amount = 18;
    repeated QuizImage correct_answer_image = 19;
    string sponsor_code = 20;
    int32 display_duration_ms = 21;
    string extra1 = 51;
    string extra2 = 52;
    string extra3 = 53;
    string extra4 = 54;
    string extra5 = 55;

}

message CustomTab {
    int64 id = 1;
    string tab_title = 2;
    string tab_schema = 3;
    int32 tab_schema_type = 4;
    int64 tab_priority = 5;

}

message FlashSaleStock {
    int32 activity_stock_status = 1;
    int32 activity_stock = 2;
    string activity_stock_text = 3;

}

message CompetitionReply {
    optional CompetitionReplyType reply_type = 1;
    CompetitionUserBase replier = 2;
    CompetitionInitiate initiate = 3;
    map<int64, CompetitionABInfo> ab_info = 4;
    TakeTheStageBiz take_the_stage_biz = 100;

    enum CompetitionReplyType {
        COMPETITION_REPLY_TYPE_UNKNOWN = 0;
        COMPETITION_REPLY_TYPE_ACCEPT = 1;
        COMPETITION_REPLY_TYPE_REJECT = 2;
        COMPETITION_REPLY_TYPE_WITHDRAW = 3;}
    message AnchorInfo {
        int64 user_id = 1;

    }
    message TakeTheStageBiz {
        optional TakeTheStageStatus take_the_stage_status = 1;
        int64 performance_start_time = 2;
        repeated AnchorInfo anchors = 3;

        enum TakeTheStageStatus {
            TAKE_THE_STAGE_STATUS_UNKNOWN = 0;
            TAKE_THE_STAGE_STATUS_NOT_STARTED = 1;
            TAKE_THE_STAGE_STATUS_CANCELLED = 2;
            TAKE_THE_STAGE_STATUS_STARTED = 3;
            TAKE_THE_STAGE_STATUS_FINAL_CALL = 4;
            TAKE_THE_STAGE_STATUS_VICTORY_LAP = 5;
            TAKE_THE_STAGE_STATUS_FINISHED = 6;}
    }
}

message CreateShowParams {
    int64 room_id = 1;
    int64 channel_id = 2;
    ShowConfig show_config = 3;
    repeated ListUser show_users = 4;

    message ListUser {
        int64 user_id = 1;
        string linkmic_id = 2;
        int32 order = 3;

    }
}

message DiffInfo {
    UrlDataStruct diff_url = 1;
    UrlDataStruct base_url = 2;
    string extra = 3;

}

message AtmosphereTagInfo {
    int32 tag_type = 1;
    repeated ProductAtmosphereTag atmosphere_tags = 2;
    repeated ProductAtmosphereTag pin_atmosphere_tags = 3;

}

message WebcastGoodyBagMessage {
    CommonMessageData base_message = 1;
    GoodyBagBaseInfo base_info = 2;
    repeated GoodyBagWinnerInfo winners = 3;
    optional GoodyBagMessageType type = 4;

    enum GoodyBagMessageType {
        GOODY_BAG_MESSAGE_TYPE_UNKNOWN = 0;
        GOODY_BAG_MESSAGE_TYPES_END = 1;
        GOODY_BAG_MESSAGE_TYPE_JOIN = 2;
        GOODY_BAG_MESSAGE_TYPE_WINNERS_INFO = 3;}
}

message PromotionInfo {
    string promotion_id = 1;
    repeated string product_ids = 100;

}
