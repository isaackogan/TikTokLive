# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: enums.proto, webcast.proto
# plugin: python-betterproto
# This file has been @generated
import builtins
from dataclasses import dataclass
from typing import (
    Dict,
    List,
    Optional,
)

import betterproto


class ActionType(betterproto.Enum):
    UNKNOWN = 0
    PIN = 1
    UNPIN = 2


class ExhibitionType(betterproto.Enum):
    DEFAULT = 0
    FOLD = 1
    PUBLIC_SCREEN = 2


class SubscribeType(betterproto.Enum):
    ONCE = 0
    AUTO = 1
    DEFAULT = 100


class OldSubscribeStatus(betterproto.Enum):
    FIRST = 0
    RE_SUB = 1
    SUB_IN_GRACE_PERIOD = 2
    SUB_NOT_IN_GRACE_PERIOD = 3
    DEFAULT = 100


class MessageType(betterproto.Enum):
    SUB_SUCCESS = 0
    ANCHOR_REMINDER = 1
    ENTER_ROOM_EXPIRE_SOON = 2
    SUB_GOAL_CREATE_TO_ANCHOR = 3
    SUB_GOAL_COMPLETE_TO_AUDIENCE = 4
    SUB_GOAL_COMPLETE_TO_ANCHOR = 5
    SUB_GIFT_TIK_TOK_2_USER_NOTICE = 6
    SUB_GIFT_TIK_TOK_2_ANCHOR_NOTICE = 7
    SUB_GIFT_T_RECEIVES_END_NOTICE = 8
    SUB_GIFTS_END_SUCCEED_ROOM_MESSAGE = 9
    SUB_GIFTS_END_SUCCEED_ANCHOR_NOTICE = 10
    SUB_GIFT_LOW_VERSION_UPGRADE_NOTICE = 11
    SUB_GIFT_USER_BUY_AU_TH_NOTICE = 12
    SUB_COMMON_TEXT_NOTICE = 13
    SUB_MODERATOR_PIN_PERK = 14


class SubscribingStatus(betterproto.Enum):
    UNKNOWN = 0
    ONCE = 1
    CIRCLE = 2
    CIRCLE_CANCEL = 3
    REFUND = 4
    IN_GRACE_PERIOD = 5
    NOT_IN_GRACE_PERIOD = 6


class GiftSource(betterproto.Enum):
    UNKNOWN = 0
    PLATFORM = 1
    USER_BUY_RANDOM = 2
    USER_BUY_SPECIFIC = 3


class MessageDisplayStyle(betterproto.Enum):
    DEFAULT = 0
    POPUP = 1


class ProfitRankType(betterproto.Enum):
    TYPE_HOURLY_RANK = 0
    TYPE_WEEKLY_RANK = 1
    TYPE_HOURLY_STAR_RANK = 2
    TYPE_WEEKLY_RISING_RANK_ACTIVITY = 3
    TYPE_WEEKLY_RISING_RANK = 4
    TYPE_WEEKLY_ROOKIE = 5
    TYPE_E_COMMERCE_WEEKLY = 6
    TYPE_E_COMMERCE_DAILY = 7
    TYPE_DAILY_RANK = 8
    TYPE_FIRST_GIFT_RANK = 9
    TYPE_GAME_RANK = 10
    TYPE_DAILY_GAME = 11
    TYPE_HALL_OF_FAME_RANK = 12
    TYPE_RANK_LEAGUE = 13
    DAILY_ROOKIE = 14
    TYPE_TEAM_RANK = 15
    TYPE_CLASS_RANK = 16
    UNDEFINED_17 = 17
    UNDEFINED_18 = 18
    UNDEFINED_19 = 19
    TYPE_DAILY_GAME_PUB_G = 20
    TYPE_DAILY_GAME_MLB_B = 21
    TYPE_DAILY_GAME_FREE_FIRE = 22
    TYPE_WEEKLY_GAME_SUBCATEGORY_ONE = 23
    TYPE_WEEKLY_GAME_SUBCATEGORY_TWO = 24
    TYPE_WEEKLY_GAME_SUBCATEGORY_THREE = 25


class GuessStatus(betterproto.Enum):
    BETTING = 0
    STOP_BETTING = 1
    SETTLING = 2
    SETTLED = 3
    INVALID = 20


class GuessPinType(betterproto.Enum):
    PIN = 0
    UNPIN = 1
    FROZEN = 2


class GiftShowType(betterproto.Enum):
    GIFT_SHOW_DEFAULT = 0
    GIFT_SHOW_NAME = 1


class UserMetricsType(betterproto.Enum):
    UNKNOWN = 0
    GRADE = 1
    SUBSCRIBE = 2
    FOLLOW = 3
    FANS_CLUB = 4
    TOP_VIEWER = 5
    GIFT = 6


class ImDispatchStrategy(betterproto.Enum):
    DEFAULT = 0
    BYPASS_DISPATCH_QUEUE = 1


class MultiplierType(betterproto.Enum):
    UNSPECIFIED = 0
    CRITICAL_STRIKE = 1
    TOP_2 = 2
    TOP_3 = 3


class LinkmicGiftExpressionStrategy(betterproto.Enum):
    CONTROL_V_1 = 0
    EXPERIMENT_V_1 = 1
    EXPERIMENT_V_2 = 2


class GiftChallengeStatus(betterproto.Enum):
    UNKNOWN = 0
    NOT_JOINED = 1
    JOINED = 2
    COMPLETED = 3


class GiftConfigType(betterproto.Enum):
    UNKNOWN = 0
    AUDIO = 1


class GiftPanelBeaconBubbleType(betterproto.Enum):
    UNKNOWN = 0
    DEFAULT = 1
    LYNX_DEFAULT = 2
    LIVE_GOAL = 3
    GIFT_GALLERY = 4
    UG_HIGH_PRIORITY = 5
    UG_LOW_PRIORITY = 6
    VIEWER_PICKS = 7


class GoodyBagBiz(betterproto.Enum):
    UNKNOWN = 0
    NORMAL_COIN = 1
    FANS_CLUB = 2
    PLATFORM_NORMAL = 100
    PLATFORM_FANS_CLUB = 101
    LEVEL_UP_PARTY_REWARD_NORMAL = 110
    LEVEL_UP_PARTY_REWARD_FANS_CLUB = 111


class ParticipateMethod(betterproto.Enum):
    UNKNOWN = 0
    COMMENT = 1
    SHARE = 2
    NO_THRESHOLD = 3


class ParticipateThresholdType(betterproto.Enum):
    PARTICIPATE_THRESHOLD_UNKNOWN = 0
    PARTICIPATE_THRESHOLD_ALL_VIEWER = 1
    PARTICIPATE_THRESHOLD_FANS_CLUB = 2


class PollStatus(betterproto.Enum):
    PS_UNKNOWN = 0
    ENABLE = 1
    DISABLE = 2


class PollEndType(betterproto.Enum):
    POLL_END_BY_TIME = 0
    POLL_END_BY_OWNER = 1
    POLL_END_BY_OTHER = 2
    POLL_END_BY_ADMIN = 3


class PollKind(betterproto.Enum):
    NORMAL = 0
    GIFT = 1
    CUSTOMIZABLE = 2
    CUSTOMIZABLE_GIFT = 3
    QUICK_GIFT = 4
    EMOTE = 5


class PollTemplateStatus(betterproto.Enum):
    TO_BE_REVIEWED = 0
    UNDER_REVIEW = 1
    REVIEWED = 2
    REFUSED = 3


class PollAppealStatus(betterproto.Enum):
    UNKNOWN = 0
    PASS = 1
    FAIL = 2


class PollVoteLimitType(betterproto.Enum):
    SINGLE = 0
    MULTIPLE = 1


class HorizontalOnclickTriggerType(betterproto.Enum):
    ONCLICK_TRIGGER_TYPE_UNKNOWN = 0
    ONCLICK_TRIGGER_TYPE_LEFT = 1
    ONCLICK_TRIGGER_TYPE_MIDDLE = 2
    ONCLICK_TRIGGER_TYPE_RIGHT = 3
    ONCLICK_TRIGGER_TYPE_ALL_AREA = 4


class StarCommentOption(betterproto.Enum):
    UNKNOWN = 0
    V_1_BASIC = 10
    V_1_ELEVATED = 20


class GrantGroup(betterproto.Enum):
    UNKNOWN = 0
    ALL_USER = 1
    USER_LEVEL = 2
    FANS_LEVEL = 3


class ResourceLocation(betterproto.Enum):
    UNKNOWN = 0
    GECKO = 1


class WaveStatus(betterproto.Enum):
    RUNNING = 0
    FINISHED = 1
    FAILED = 2
    STRIKE = 3


class SubWaveImMsgType(betterproto.Enum):
    WAVE_START = 0
    NEW_COME_SUBSCRIBER = 1
    WAVE_FINISH = 2
    RECEIVE_REWARD = 3
    WAVE_FINISH_STRIKE_START = 4
    STRIKE_FINISH = 5
    STRIKE_FINISH_NEXT_STRIKE_START = 6
    REWARD_SENT = 7


class BarrageType(betterproto.Enum):
    UNKNOWN = 0
    E_COM_ORDERING = 1
    E_COM_BUYING = 2
    NORMAL = 3
    SUBSCRIBE = 4
    EVENT_VIEW = 5
    EVENT_REGISTERED = 6
    SUBSCRIBE_GIFT = 7
    USER_UPGRADE = 8
    GRADE_USER_ENTRANCE_NOTIFICATION = 9
    FANS_LEVEL_UPGRADE = 10
    FANS_LEVEL_ENTRANCE = 11
    GAME_PARTNERSHIP = 12
    GIFT_GALLERY = 13
    E_COM_BOUGHT = 14
    COMMON_BARRAGE = 100


class ShowType(betterproto.Enum):
    NORMAL = 0
    FADE_IN_OUT = 1


class RenderType(betterproto.Enum):
    NATIVE = 0
    HYBRID = 1
    ALPHA = 2


class IconDisplayType(betterproto.Enum):
    IMAGE = 0
    BADGE = 1


class TextType(betterproto.Enum):
    DISPLAY_TEXT = 0
    CONTENT = 1


class BizType(betterproto.Enum):
    DEFAULT = 0
    RETHINK_CHAT = 1
    RETHINK_QA = 2
    WARNING_TAG_CURRENT_ROOM = 3
    WARNING_TAG_COHOST_ROOM = 4
    A_GS_AT_RISK_OF_UNABLE_TO_COMMENT = 5
    PERCEPTION_CENTER = 6


class ChangeMode(betterproto.Enum):
    SHOW = 0
    UPDATE = 1
    CLOSE = 2


class MsgType(betterproto.Enum):
    RANK_IN_OUT = 0
    RANK_CHANGE = 1
    ANCHOR_ENCOURAGE = 2
    UN_KNOW = 255


class GameActionType(betterproto.Enum):
    SHOW = 0
    JUMP = 1
    FOLLOW = 2
    COMMENT = 3


class JumpPage(betterproto.Enum):
    GIFT_GOAL_SOURCE = 0
    GIFT_ALERT_SOURCE = 1
    COHOST_SETTING = 2
    GIFT_ER_RANK_LIST = 3
    WEEKLY_GAME_RANK_LIST = 4
    FANS_CLUB = 5
    GOODY_BAG_SETTING = 6
    GAME_GUESS_SETTING = 7
    ADMIN_SETTING = 8
    GIFT_ALERT_TT_S = 9
    LIVE_GOAL = 10
    TREASURE_BOX = 11
    GAME_REWARDS = 12
    POLL = 13
    SUBSCRIPTION = 14
    MONET_IZ_ATION_TIPS_SETTING = 15
    EXTENDING_COUNTDOWN = 16
    PLAY_TOGETHER = 17
    MULTI_GUEST = 18
    PARTNERSHIP = 19
    GIFT_NOTIFICATION = 20
    GIFT_GALLERY = 21


class GoodyBagMessageType(betterproto.Enum):
    UNKNOWN = 0
    S_END = 1
    JOIN = 2
    WINNERS_INFO = 3


class LiveInfoAuditContentType(betterproto.Enum):
    TITLE = 0
    COVER = 1
    ABOUT_ME = 2


class LiveInfoAuditStatus(betterproto.Enum):
    ONGOING = 0
    PASS = 1
    UNKNOWN = 2
    REJECT = 3


class StarCommentAction(betterproto.Enum):
    UNKNOWN = 0
    DELETED = 1
    POLLING = 2


class Result(betterproto.Enum):
    WIN = 0
    LOSE = 1
    DRAW = 2


class GiftPermissionType(betterproto.Enum):
    UNKNOWN_TYPE = 0
    NO_GIFT_PERMISSION = 1
    ANCHOR_CLOSE = 2
    HAS_GIFT_PERMISSION = 3
    ANCHOR_BANNED = 4


class BattleType(betterproto.Enum):
    UNKNOWN_BATTLE_TYPE = 0
    NORMAL_BATTLE = 1
    TEAM_BATTLE = 2
    INDIVIDUAL_BATTLE = 3
    _1_V_N = 4
    TAKE_THE_STAGE = 51
    GROUP_SHOW = 52


class BattleAbTestType(betterproto.Enum):
    BATTLE_A_B_TEST_TYPE_UNKNOWN_AB_TEST_TYPE = 0
    BATTLE_A_B_TEST_TYPE_MEANWHILE_INVITE = 1
    BATTLE_A_B_TEST_TYPE_SPECIFIED_GIFT = 2
    BATTLE_A_B_TEST_TYPE_RT_C_MESSAGE_CHANNEL = 3
    BATTLE_A_B_TEST_TYPE_CONNECTION_TIME_OUT = 4
    BATTLE_A_B_TEST_TYPE_REMATCH_SKIP_TEAMMATE = 5
    BATTLE_A_B_TEST_TYPE_OPT_INVITEE_4048 = 6
    TIME_CALIBRATE = 7


class SwitchTurnReason(betterproto.Enum):
    UNKNOWN = 0
    USER_CLICK = 1
    USER_LEFT = 2


class TakeTheStageStatus(betterproto.Enum):
    UNKNOWN = 0
    NOT_STARTED = 1
    CANCELLED = 2
    STARTED = 3
    FINAL_CALL = 4
    VICTORY_LAP = 5
    FINISHED = 6


class CompetitionRoleType(betterproto.Enum):
    UNKNOWN = 0
    ANCHOR = 1
    AUDIENCE = 2


class CompetitionInitiateType(betterproto.Enum):
    NORMAL = 0
    REMATCH = 1


class CompetitionReplyType(betterproto.Enum):
    UNKNOWN = 0
    ACCEPT = 1
    REJECT = 2
    WITHDRAW = 3


class CompetitionEndReason(betterproto.Enum):
    UNKNOWN = 0
    NORMAL = 1
    CUT_SHORT = 2


class GroupShowStatus(betterproto.Enum):
    UNKNOWN = 0
    STARTED = 1
    UNDEFINED_2 = 2
    UNDEFINED_3 = 3
    UNDEFINED_4 = 4
    UNDEFINED_5 = 5
    UNDEFINED_6 = 6
    UNDEFINED_7 = 7
    UNDEFINED_8 = 8
    UNDEFINED_9 = 9
    FINISHED = 10


class EnvelopeDisplay(betterproto.Enum):
    UNKNOWN = 0
    NEW = 1
    HIDE = 2


class ReplyStatus(betterproto.Enum):
    UNKNOWN = 0
    AGREE = 1
    REFUSE_PERSONALLY = 2
    REFUSE_TYPE_NOT_SUPPORT = 3
    REFUSE_PROCESSING_INVITATION = 4
    REFUSE_BY_TIME_OUT = 5
    REFUSE_EXCEPTION = 6
    REFUSE_SYSTEM_NOT_SUPPORTED = 7
    REFUSE_SUBTYPE_DIFFERENCE = 8
    REFUSE_IN_MIC_ROOM = 9
    REFUSE_NOT_LOAD_PLUGIN = 10
    REFUSE_IN_MULTI_GUEST = 11
    REFUSE_PAUSE_LIVE = 12
    REFUSE_OPEN_CAMERA_DIALOG_SHOWING = 13
    REFUSE_DRAW_GUESSING = 14
    REFUSE_RANDOM_MATCHING = 15
    REFUSE_IN_MATCH_PROCESSING = 16
    REFUSE_IN_MIC_ROOM_FOR_MULTI_COHOST = 17
    REFUSE_COHOST_FINISHED = 18
    REFUSE_NOT_CONNECTED = 19
    REFUSE_LINK_MIC_FULL = 20
    REFUSE_ARC_INCOMPATIBLE = 21
    REFUSE_PROCESSING_OTHER_INVITE = 22
    REFUSE_PROCESSING_OTHER_APPLY = 23
    REFUSE_IN_ANCHOR_COHOST = 24
    REFUSE_TOPIC_PAIRING = 25
    REFUSE_POSITION_CONFLICT = 26
    REFUSE_CONFLICT_QUICK_COHOST = 27
    REFUSE_IN_TAKE_STAGE_PROCESSING = 28


class SourceType(betterproto.Enum):
    UNKNOWN = 0
    FRIEND_LIST = 1
    RECOMMEND_LIST = 2
    RECENT = 3
    OTHER_FOLLOW = 4
    QUICK_PAIR = 5
    ACTIVITY = 6
    QUICK_RECOMMEND = 7
    OFFICIAL_CHANNEL = 8
    BEST_TEAMMATE = 9
    RESERVATION = 10
    PAIRING = 11
    PAIRING_ON_RESERVATION = 12
    TOPIC_QUICK_PAIR = 13
    TOPIC_QUICK_RECOMMEND = 14
    ONLINE_FRIEND_CAPSULE = 15
    UNDEFINED_16 = 16
    UNDEFINED_17 = 17
    UNDEFINED_18 = 18
    UNDEFINED_19 = 19
    WEEKLY_RANK = 20
    HOURLY_RANK = 21
    UNDEFINED_22 = 22
    WEEKLY_RISING = 23
    WEEKLY_ROOKIE = 24
    CONNECTION_LIST = 25
    DAILY_RANK = 26
    DAILY_RANK_HALL_OF_FAME = 27
    RESERVATION_BUBBLE = 28
    PAIRING_BUBBLE = 29
    LEAGUE_PHASE_ONE = 30
    LEAGUE_PHASE_TWO = 31
    LEAGUE_PHASE_THREE = 32
    DAILY_ROOKIE = 33
    MAY_KNOW_LIST = 34
    BANNER = 35
    FANS_TEAM_RANK = 36
    SEARCH = 37
    E_OY_RANK_LIST = 38
    LEAGUE_CAMPAIGN_RANK = 39
    CREATOR_CLASS_RANK = 40
    HISTORY = 41
    UNDEFINED_42 = 42
    QUICK_RECOMMEND_DURING_COHOST = 43


class LinkmicShareRevenueSetting(betterproto.Enum):
    LINK_MIC_SHARE_REVENUE_NOT_SET = 0
    LINK_MIC_SHARE_REVENUE_OPEN = 1
    LINK_MIC_SHARE_REVENUE_CLOSE = 2


class PunishTypeId(betterproto.Enum):
    UN_KNOWN = 0
    BAN_LINK_MIC = 9
    BAN_GAME_PARTNERSHIP = 25
    REMOVE_GAME_PARTNERSHIP = 26
    BANCO_HOST_LINK_MIC = 55
    AUTHORITY_LIMIT_MATCH = 57
    BAN_VOICE_CHAT = 59
    BAN_LIVE_GOAL = 64
    VIEWER_LIMIT = 70


class PerceptionDialogIconType(betterproto.Enum):
    ICON_TYPE_NONE = 0
    ICON_TYPE_WARNING = 1
    ICON_TYPE_LINK_MIC = 2
    ICON_TYPE_GUEST_LINK_MIC = 3
    ICON_TYPE_LIVE = 4
    ICON_TYPE_TREASURE_BOX = 5
    ICON_TYPE_MUTE = 6
    ICON_GAMEPAD_ACCESS_REVOKED = 7
    ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8
    ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9
    ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10
    ICON_TYPE_GIFT = 11
    ICON_TYPE_APPEAL_SUCCESS = 12
    ICON_TYPE_MATCH = 13
    ICON_TYPE_LIVE_GOAL = 14
    ICON_TYPE_SUBSCRIPTION = 15
    ICON_TYPE_STAR_COMMENT = 16
    ICON_TYPE_RANKING = 17
    ICON_TYPE_COMMON = 18


class BattleCardMsgType(betterproto.Enum):
    UNKNOWN_CARD_ACTION = 0
    CARD_OBTAIN_GUIDE = 1
    USE_CRITICAL_STRIKE_CARD = 2
    USE_SMOKE_CARD = 3
    AWARD_CARD_NOTICE = 4
    USE_EXTRA_TIME_CARD = 5
    USE_SPECIAL_EFFECT_CARD = 6
    USE_POTION_CARD = 7
    USE_WAVE_CARD = 8
    SPECIAL_EFFECT_NOTICE = 9
    USE_TOP_2_CARD = 10
    USE_TOP_3_CARD = 11


class BattleAction(betterproto.Enum):
    UNKNOWN = 0
    INVITE = 1
    REJECT = 2
    CANCEL = 3
    OPEN = 4
    FINISH = 5
    CUT_SHORT = 6
    ACCEPT = 7
    QUIT_APPLY = 8
    DECLINE_QUIT = 9
    DECLINE_OFF_QUIT = 10
    LEAVE_LINK_MIC = 11


class LinkScreenChangeMessageType(betterproto.Enum):
    BIZ_T_PYE_LINKER_UNKNOWN = 0
    BIZ_TYPE_LINKER_CANCEL_ENLARGE = 1
    BIZ_TYPE_ENLARGE_STATUS_SYN = 2
    BIZ_TYPE_ENLARGE_POSITION_STATUS_SYN = 3


class ContentInviteSource(betterproto.Enum):
    INVITE_SOURCE_UNKNOWN = 0
    INVITE_SOURCE_PANEL_GO_LIVE = 1
    INVITE_SOURCE_MUTUAL_NOTICE = 2
    INVITE_SOURCE_USER_PROFILE = 3
    INVITE_SOURCE_RESERVE = 4


class LinkLayerMessageType(betterproto.Enum):
    LINKER_UNKNOWN = 0
    LINKER_CREATE = 1
    LINKER_INVITE = 2
    LINKER_APPLY = 3
    LINKER_PERMIT = 4
    LINKER_REPLY = 5
    LINKER_KICK_OUT = 6
    LINKER_CANCEL_APPLY = 7
    LINKER_CANCEL_INVITE = 8
    LINKER_LEAVE = 9
    LINKER_FINISH = 10
    LINKER_LIST_CHANGE = 11
    LINKER_JOIN_DIRECT = 12
    LINKER_JOIN_GROUP = 13
    LINKER_PERMIT_GROUP = 14
    LINKER_CANCEL_GROUP = 15
    LINKER_LEAVE_GROUP = 16
    LINKER_P_2_P_GROUP_CHANGE = 17
    LINKER_GROUP_CHANGE = 18


class FansTaskType(betterproto.Enum):
    UNKNOWN = 0
    FANS_GIFT = 1
    WATCH_LIVE = 2
    SENDING_GIFT = 3
    COMMENT = 4
    MONTH_GIFT = 11
    MONTH_COMMENT = 12
    LONG_ACTIVE = 21
    LIVE_NOTIFY = 22
    LONG_HEART_ME = 23
    LONG_WATCH = 24
    LONG_COMMENT = 25
    WEEKLY_TREASURE_BOX = 31


class FansEventType(betterproto.Enum):
    UNKNOWN = 0
    NEW_FANS = 1
    EXP_CHANGE = 2
    TASK_COMPLETE = 3
    LEVEL_UPGRADE = 4
    GET_UNCLAIMED_POINTS = 5
    TEAM_RANK_UPDATE = 6
    ENTRANCE_GUIDANCE = 7
    FANS_LEVEL_UPGRADE = 8
    REFRESH_TASK_PAGE = 1001


class EntranceGuidanceType(betterproto.Enum):
    UNKNOWN = 0
    ABOUT_TO_UPGRADE = 1


class LinkType(betterproto.Enum):
    TYPE_UNKNOWN = 0
    TYPE_VIDEO = 1
    TYPE_AUDIO = 2
    TYPE_VIRTUAL = 3


class LinkListStatus(betterproto.Enum):
    STATUS_UN_KOWN = 0
    STATUS_WAITING = 1
    STATUS_LINKED = 2
    STATUS_FINISHED = 3
    STATUS_WAITING_OR_LINKED = 4


class LinkSilenceStatus(betterproto.Enum):
    STATUS_UN_SILENCE = 0
    STATUS_SILENCE_BY_SELF = 1
    STATUS_SILENCE_BY_OWNER = 2


class LinkRoleType(betterproto.Enum):
    TYPE_ROLE_TYPE_UN_KOWN = 0
    TYPE_LEADER = 1
    TYPE_PLAYER = 2
    TYPE_INVITEE = 3
    TYPE_APP_LIER = 4


class EntranceGroupType(betterproto.Enum):
    DEFAULT = 0
    GIFT = 1
    E_COMMERCE = 2
    GAME = 3


class MicIdxOperation(betterproto.Enum):
    MIC_I_DX_OP_ON = 0
    MIC_I_DX_OP_OFF = 1


class AudienceReserveType(betterproto.Enum):
    UNKNOWN_FIELD = 0
    RESERVE = 1
    CANCEL = 2
    WAIT = 3
    DONE = 4
    REJECT = 5


class OpType(betterproto.Enum):
    DEFAULT = 0
    ADD = 1
    REMOVE = 2
    RELOAD = 3
    BASIC_EFFECT = 4


class UnionAnimationInfoType(betterproto.Enum):
    NO_UNION_ANIMATION = 0
    LOOP = 1
    LOCK = 2


class BadgeDisplayType(betterproto.Enum):
    UNKNOWN = 0
    IMAGE = 1
    TEXT = 2
    STRING = 3
    COMBINE = 4


class BadgePriorityType(betterproto.Enum):
    UNKNOWN = 0
    STRONG_RELATION = 10
    PLATFORM = 20
    RELATION = 30
    ACTIVITY = 40
    RANK_LIST = 50


class BadgeSceneType(betterproto.Enum):
    UNKNOWN = 0
    ADMIN = 1
    FIRST_RECHARGE = 2
    FRIENDS = 3
    SUBSCRIBER = 4
    ACTIVITY = 5
    RANK_LIST = 6
    NEW_SUBSCRIBER = 7
    USER_GRADE = 8
    STATE_CONTROLLED_MEDIA = 9
    FANS = 10
    LIVE_PRO = 11
    ANCHOR = 12


class BadgeExhibitionType(betterproto.Enum):
    BADGE = 0
    IDENTITY_LABEL = 1


class DisplayStatus(betterproto.Enum):
    NORMAL = 0
    SHADOW = 1


class HorizontalPaddingRule(betterproto.Enum):
    USE_MIDDLE_AND_WIDTH = 0
    USE_LEFT_AND_MIDDLE_AND_RIGHT = 1


class VerticalPaddingRule(betterproto.Enum):
    USE_DEFAULT = 0
    USE_TOP_AND_BOTTOM = 1


class Position(betterproto.Enum):
    UNKNOWN = 0
    LEFT = 1
    RIGHT = 2


class BadgeTextPosition(betterproto.Enum):
    UNKNOWN = 0
    RIGHT = 1
    BELOW = 2


class TagType(betterproto.Enum):
    CREATOR_CR_M_TAG_TYPE_UNKNOWN = 0
    CREATOR_CR_M_TAG_TYPE_USER_GRADE = 1
    CREATOR_CR_M_TAG_TYPE_FANS_LEVEL = 2
    CREATOR_CR_M_TAG_TYPE_WATCH_ME_DAYS_AGO = 3
    CREATOR_CR_M_TAG_TYPE_CUSTOM = 4
    CREATOR_CR_M_TAG_TYPE_TITLE_GIFT = 5
    CREATOR_CR_M_TAG_TYPE_FIRST_JOINED_TEAM = 6
    CREATOR_CR_M_TAG_TYPE_PAY_ACCOMPANY_DAYS = 7
    CREATOR_CR_M_TAG_TYPE_SPONSOR_GIFT_LAST_ROOM = 8
    CREATOR_CR_M_TAG_TYPE_MATCH_MVP_LAST_ROOM = 9
    CREATOR_CR_M_TAG_TYPE_LARGE_AMOUNT_GIFT_LAST_ROOM = 10
    CREATOR_CR_M_TAG_TYPE_COMMENT_LAST_ROOM = 11
    CREATOR_CR_M_TAG_TYPE_RECENT_TITLED_GIFT = 12
    CREATOR_CR_M_TAG_TYPE_MEET_ANNIVERSARY = 13
    CREATOR_CR_M_TAG_TYPE_FANS_SLEEP = 14
    CREATOR_CR_M_TAG_TYPE_NOT_SEND_HEART_ME = 15
    CREATOR_CR_M_TAG_TYPE_NOT_JOIN_TEAM = 16
    CREATOR_CR_M_TAG_TYPE_FIRST_WATCH_LIVE = 17
    CREATOR_CR_M_TAG_TYPE_RECENT_COMMENT = 18
    CREATOR_CR_M_TAG_TYPE_RECENT_GIFT_TIMES = 19
    CREATOR_CR_M_TAG_TYPE_RECENT_WATCH_LIVE_DURATION = 20
    CREATOR_CR_M_TAG_TYPE_RECENT_GIFT = 21
    CREATOR_CR_M_TAG_TYPE_RECENT_LIVE_CONTRIBUTION_TOP = 22
    UNDEFINED_23 = 23
    UNDEFINED_24 = 24
    UNDEFINED_25 = 25
    UNDEFINED_26 = 26
    UNDEFINED_27 = 27
    CREATOR_CR_M_TAG_TYPE_JUST_UPGRADE = 28
    CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_WATCH_DURATION = 29
    CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_COMMENT_NUM = 30
    CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_GIFT_SENT_NUM = 31


class TopicActionType(betterproto.Enum):
    UNKNOWN = 0
    FOLLOW = 1


class GameTagType(betterproto.Enum):
    UNKNOWN = 0
    PC_GAME = 1
    MOBILE_GAME = 2
    CONSOLE_GAME = 3


class HashtagNamespace(betterproto.Enum):
    GLOBAL = 0
    GAMING = 1


class AnchorLayer(betterproto.Enum):
    UNKNOWN = 0
    TOP = 1
    SMALL = 2


class InviteBlockReason(betterproto.Enum):
    NONE = 0
    IS_LINKING = 1
    INVITATION_DENIED = 2
    PERMISSION_DENIED = 3
    LOW_CLIENT_VERSION = 4
    ROOM_PAUSED = 5
    LINK_MIC_FULL = 6
    MATURE_THEME_NOT_MATCH = 7
    RESERVE_FULL = 8
    REGIONAL_BLOCK = 9


class BattleInfoType(betterproto.Enum):
    NONE = 0
    AVERAGE_SCORE = 1
    MAX_SCORE = 2
    LAST_SCORE = 3
    WIN_STREAK = 4


class TagClassification(betterproto.Enum):
    UNKNOWN = 0
    COHOST_HISTORY = 1
    FIRST_DEGREE_RELATION = 2
    SECOND_DEGREE_RELATION = 3
    RANK = 4
    SIMILAR_INTERESTS = 5


class StreakType(betterproto.Enum):
    UNKNOWN = 0
    COMBO = 1
    WIN = 2


class LinkmicStatus(betterproto.Enum):
    DISABLE = 0
    ENABLE = 1
    JUST_FOLLOWING = 2
    MULTI_LINKING = 3
    MULTI_LINKING_ONLY_FOLLOWING = 4


class MuteStatus(betterproto.Enum):
    MUTE = 0
    UN_MUTE = 1


class LinkmicPlayType(betterproto.Enum):
    PLAY_TYPE_INVITE = 0
    PLAY_TYPE_APPLY = 1
    PLAY_TYPE_RESERVE = 2


class CoHostPermissoinType(betterproto.Enum):
    NO_PERM = 0
    COHOST_PERM = 1
    MULTI_HOST_PERM = 2


class LinkmicUserStatus(betterproto.Enum):
    USER_STATUS_NONE = 0
    USER_STATUS_LINKED = 1
    USER_STATUS_APPLYING = 2
    USER_STATUS_INVITING = 3


class DetailBlockReason(betterproto.Enum):
    BLOCK_REASON_NONE = 0
    IN_LINK_MIC = 100
    MULTI_HOST_FULL = 101
    IN_COHOST_LINK_MIC = 102
    DEAL_OTHER_INVITE = 103
    DEAL_OTHER_APPLY = 104
    IN_PK_STATUS = 105
    SELF_IN_PK_STATUS = 106
    IN_COHOST_INVITE_APPLY = 107
    IN_AUDIENCE_LINK_MIC = 108
    WAITING_AUTO_MATCH = 109
    INVITE_NEED_TO_JOIN = 110
    JOIN_NEED_TO_INVITE = 111
    IN_TAKE_THE_STAGE_STATUS = 112
    SELF_IN_TAKE_THE_STAGE_STATUS = 113
    NOLINK_MIC_PERMISSION = 200
    ANCHOR_LINK_MIC_SETTING_CLOSED = 202
    ANCHOR_LINK_MIC_REFUSE_NOT_FOLLOWER = 203
    ANCHOR_LINK_MIC_BLOCK_INVITATION_OF_LIVE = 204
    ANCHOR_LINK_MIC_REFUSE_FRIEND_INVITE = 205
    ANCHOR_LINK_MIC_REFUSE_FRIEND_APPLY = 206
    ANCHOR_LINK_MIC_REFUSE_NOT_FRIEND_INVITE = 207
    ANCHOR_LINK_MIC_REFUSE_NOT_FRIEND_APPLY = 208
    ANCHOR_LINK_MIC_BLOCK_INVITATION_OF_MULTI_HOST = 209
    ANCHOR_LINK_MIC_BLOCK_APPLY_OF_MULTI_HOST = 210
    ROOM_PAUSED = 300
    LIVE_TYPE_AUDIO = 301
    ROOM_INTERACTION_CONFLICT = 302
    RIVAL_VERSION_NOT_SUPPORT = 303
    SELF_VERSION_NOT_SUPPORT = 304
    MATURE_THEME_MISMATCH = 305
    SELF_IN_OFFICIAL_CHANNEL = 306
    RIVAL_IN_OFFICIAL_CHANNEL = 307
    IN_OFFICIAL_BACKUP_CHANNEL = 308
    RIVAL_RESERVE_FULL = 309
    ANCHOR_NOT_LIVING = 310
    ANCHOR_IS_SELF = 311
    PRIVATE_ROOM = 312
    BLOCKED_BY_RIVAL = 313
    SELF_BLOCKED_RIVAL = 314
    VIEWER_REGION_NOT_SUPPORT = 315
    SUBSCRIBER_ROOM = 316
    REGIONAL_BLOCK = 317
    PENALTY_BANNED = 318
    BLOCK_PROGRAM_LIVE_TAB_ROOM = 319
    NETWORK_ERROR = 400
    ROOM_FILTER_ERROR = 401


class CohostLayoutMode(betterproto.Enum):
    NORMAL = 0
    SCREEN_SHARE = 1


class LinkmicMultiLiveEnum(betterproto.Enum):
    DEFAULT = 0
    ANCHOR_USE_NEW_LAYOUT = 1


class ReserveReplyStatus(betterproto.Enum):
    UNKNOWN = 0
    WAIT_FORME = 1


class OptPairStatus(betterproto.Enum):
    UNKNOWN = 0
    OFFLINE = 1
    FINISHED = 2


class CohostAbTestType(betterproto.Enum):
    UNKNOWN = 0
    LINK_TIME_OUT_STRATEGY = 1
    COHOST_RESERVATION = 2
    QUICK_PAIR_NEW_ARCH_SWITCH = 3
    COHOST_INVITATION_TEXT = 4


class CohostNudgeInfo(betterproto.Enum):
    NONE = 0
    YOUR_NUDGE = 1
    NUDGED_YOU = 2


class EventPayMethod(betterproto.Enum):
    INVALID = 0
    COINS = 1
    CASH = 2


class PaidType(betterproto.Enum):
    FREE = 0
    PAID = 1


class AntidirtStatus(betterproto.Enum):
    PASS = 0
    FAILED = 1


class AuditStatus(betterproto.Enum):
    UNKNOWN = 0
    PASS = 1
    FAILED = 2
    REVIEWING = 3
    FORBIDDEN = 4


class AuditTaskType(betterproto.Enum):
    DEFAULT = 0
    APPEAL = 1


class TimerOpType(betterproto.Enum):
    START = 0
    PAUSE = 1
    RESUME = 2
    CANCEL = 3


class TimerStatus(betterproto.Enum):
    NOT_STARTED = 0
    RUNNING = 1
    PAUSED = 2
    CANCELLED = 3
    FINISHED = 4


class SubTimerStickerChangeType(betterproto.Enum):
    TITLE_CHANGE = 0
    STATUS_CHANGE = 1
    POSITION_CHANGE = 2
    SUB_INCREASE = 3
    ALIGN = 4


class PayStatus(betterproto.Enum):
    SUB_STATUS_UNKNOWN = 0
    SUB_STATUS_ONE_TIME = 1
    SUB_STATUS_AUTO_DEDUCTION = 2
    SUB_STATUS_AUTO_DEDUCTION_CANCELED = 3
    SUB_STATUS_REVOKE = 4


class EntranceType(betterproto.Enum):
    PROFILE = 0
    SHOWCASE = 1
    SHOP = 2


class CreatorType(betterproto.Enum):
    UNDEFINED = 0
    OFFICIAL = 1
    MARKET = 2
    NORMAL = 3


class ViewVersion(betterproto.Enum):
    UNKNOWN = 0
    STAR_SHOP = 1


class LiveSellingPointType(betterproto.Enum):
    UNDEFINED = 0
    QUALITY = 1
    SOLD = 2
    TRUST_BETTER_THAN_OTHER_SHOP = 3
    TRUST_REPLY_IN_TIME = 4
    TRUST_CREATE_SHIP_IN_TIME = 5
    TRUST_POSITIVE_REVIEW_RATE = 6


class StoreBrandLabelType(betterproto.Enum):
    NONE = 0
    OFFICIAL = 1
    AUTHORIZED = 2
    BLUE_V = 3
    TOP_CHOICE = 4
    MALL = 5


class PlayScene(betterproto.Enum):
    UNKNOWN = 0
    COUNTDOWN_FOR_ALL = 1
    COUNTDOWN_FOR_SINGLE = 2
    LIVE_SHOW = 3
    AIG_C = 4
    KARAOKE = 5
    DRAW_GUESS = 6
    ENLARGE_GRID = 7
    GIFT_PRIORITY_LINK = 8
    GIFT_THRESHOLD_LINK = 9
    NOTICE_BOARD = 10
    PLAY_BOOK = 11
    GUEST_SHOWDOWN = 12


class PlayUserTag(betterproto.Enum):
    UNKNOWN = 0
    GUEST_SHOWDOWN_NORMAL = 1
    GUEST_SHOWDOWN_WINNER = 2
    GUEST_SHOWDOWN_LOSER = 3


class ApplyLimitType(betterproto.Enum):
    ALL_USER = 0
    FOLLOWER_ONLY = 1
    CREATOR_TEAM_ONLY = 2
    SUBSCRIBER_ONLY = 3


class PlayTogetherStatus(betterproto.Enum):
    UNKNOWN = 0
    REVIEWING = 1
    REVIEW_PASS = 2
    DESC_NOT_PASS = 3
    APPLY_NOTE_NOT_PASS = 4
    ALL_NOT_REVIEW_PASS = 5
    START = 6
    END = 7


class PlayTogetherRelationTag(betterproto.Enum):
    UNKNOWN = 0
    FRIEND = 1
    SUBSCRIBER = 2
    TEAM_MEMBER = 3


class PlayTogetherPermitType(betterproto.Enum):
    UNKNOWN = 0
    ACCEPT = 1
    REJECT = 2


class GameMomentMessageType(betterproto.Enum):
    UNKNOWN = 0
    VICTORY = 1
    HIGHLIGHT = 2
    DEFEAT = 3
    KILL_NUM = 4
    REMAIN_NUM = 5


class GameMomentEffectType(betterproto.Enum):
    UNKNOWN = 0
    GIFT_GUIDANCE = 1
    QUICK_COMMENT = 2


class PreviewGameInfoType(betterproto.Enum):
    UNKNOWN = 0
    REALTIME = 1
    MOMENT_ACCUMULATE_INFO = 2


class OfflineType(betterproto.Enum):
    TASK_OFFLINE = 0
    EVENT_OFFLINE = 1
    DROPS_OFFLINE = 2


class GiftGalleryMsgType(betterproto.Enum):
    UNUSED = 0
    LIGHT_UP = 1
    ALL_SPONSORED = 2
    SPONSOR_CHANGE = 3
    LONG_TERM_RECALL = 4


class GiftMessageVersion(betterproto.Enum):
    _0 = 0
    _1 = 1


class GiftMessageIgnoreConfig(betterproto.Enum):
    NOT_IGNORE = 0
    IGNORE_TRAY = 1
    IGNORE_PS_M = 2
    IGNORE_TRAY_AND_PS_M = 3


class RankTestMessageScene(betterproto.Enum):
    UNKNOWN = 0
    ONLINE_AUDIENCE_TOP_N_UPDATE_PUBLIC_SCREEN = 1


class TriggerReason(betterproto.Enum):
    UNKNOWN = 0
    SCORE_UPDATE = 1
    BATTLE_END = 2
    OPT_OUT_UPDATE = 3
    KEEP_ALIVE = 4


class BattleNoticeType(betterproto.Enum):
    ANCHOR_GUIDE = 0
    TOAST = 1
    BUBBLE_GUIDE = 2
    ANCHOR_GIFT_GUIDE = 3
    RULE_GUIDE = 4
    ANCHOR_MULTI_MATCH_GUIDE = 5
    COMMON_GUIDE = 6
    EXTREME_HIGH_SCORE = 7


class Reason(betterproto.Enum):
    TIME_UP = 0
    CUT_SHORT = 1


class RewardStatus(betterproto.Enum):
    SUCCEED = 0
    FAILED = 1


class BattleTaskMessageType(betterproto.Enum):
    START = 0
    TASK_UPDATE = 1
    TASK_SETTLE = 2
    REWARD_SETTLE = 3


class CompetitionMessageType(betterproto.Enum):
    UNKNOWN = 0
    INITIATE = 1
    REPLY = 2
    START = 3
    SETTLE_START = 4
    SETTLE_END = 5
    SCORE_CHANGE = 6
    FINISH = 7
    SWITCH_TURN = 8


class DisplayStyle(betterproto.Enum):
    NORMAL = 0
    STAY = 1
    CHAT = 2


class HitAbStatus(betterproto.Enum):
    NO_HIT = 0
    ENTER_FROM_EXTERNAL_LINK_NEW_TEXT = 1
    ENTER_FROM_RE_POST_NEW_TEXT = 2


class LiveShowMessageType(betterproto.Enum):
    LIVE_SHOW_UNKNOWN = 0
    LIVE_SHOW_CREATE_SHOW = 1
    LIVE_SHOW_NEXT_GUEST = 2
    LIVE_SHOW_FINISH_GUEST = 3
    LIVE_SHOW_SHOW_AGAIN_GUEST = 4
    LIVE_SHOW_END_SHOW = 5
    LIVE_SHOW_CONTENT_CHANGED = 6
    LIVE_SHOW_HOST_TRANSITION_START = 7


class ShowUserFinishReason(betterproto.Enum):
    UNKNOWN = 0
    TIME_ROVER_NORMALLY = 1
    HOST_FINISH_SHOWING_GUEST = 2
    SELF_FINISH_SHOWING_GUEST = 3
    LEAVE = 4
    KICK_OUT = 5
    RT_C_CALLBACK_LEAVE = 6
    HOST_END_SHOW = 7
    MULTI_GUEST_CLOSED = 8
    MULTI_GUEST_RESUMED = 9
    KICK_OUT_ALL_GUESTS = 10
    MODERATOR_FINISH_SHOWING_GUEST = 11
    MODERATOR_END_SHOW = 12


class PlayTogetherMessageType(betterproto.Enum):
    START = 0
    END = 1
    REVIEW_NOTICE = 2
    LIST_CHANGE = 3
    PERMIT_NOTICE = 4
    IN_PROGRESS = 5


class GoalMessageSource(betterproto.Enum):
    UNKNOWN = 0
    COMMIT = 1
    PROGRESS_UPDATE = 2
    PIN = 3
    UNPIN = 4
    REVIEW_CALLBACK = 5
    SUSPEND = 6
    CHALLENGE_PROMPT = 7


class EmoteScene(betterproto.Enum):
    SUBSCRIPTION = 0
    GAME = 1


class EmoteType(betterproto.Enum):
    NORMAL = 0
    WITH_STICKER = 1


class ContentSource(betterproto.Enum):
    UNKNOWN = 0
    NORMAL = 1
    CAMERA = 2


class RewardCondition(betterproto.Enum):
    SUBSCRIPTION = 0
    SUB_WAVE_CUSTOM = 1


class EmotePrivateType(betterproto.Enum):
    NORMAL = 0
    SUB_WAVE = 1
    GUESSING = 101


class UserEmoteUploadSource(betterproto.Enum):
    EMOTE_UPLOAD_SOURCE_ANCHOR = 0
    EMOTE_UPLOAD_SOURCE_SUBSCRIBER = 1
    EMOTE_UPLOAD_SOURCE_MODERATOR = 2


class BillingType(betterproto.Enum):
    UNKNOWN = 0
    GP = 1
    WEB = 2
    APP_B = 3
    GP_COMMON_S_KU = 4


class SubOperationType(betterproto.Enum):
    OPERATION_TYPE_UNKNOWN = 0
    OPERATION_TYPE_NEW_SUBSCRIPTION = 1
    OPERATION_TYPE_SINGLE_RENEWAL = 2
    OPERATION_TYPE_AUTO_RENEWAL = 3
    OPERATION_TYPE_UPGRADE = 4
    OPERATION_TYPE_CANCELLATION = 5


class PayChannel(betterproto.Enum):
    PAY_CHAN_UNKNOWN = 0
    PAY_CHAN_COINS = 1
    PAY_CHAN_I_AP_CASH = 2
    PAY_CHAN_WEB_APP = 3
    PAY_CHAN_GIFT_SUB = 4


class PinCardType(betterproto.Enum):
    UNKNOWN_PIN_CARD_TYPE = 0
    CUSTOMIZED_BENEFIT_E_NUM = 1
    SUB_GOAL_E_NUM = 2
    UP_SELL_DM = 3
    UP_SELL_LEAD_SGEN = 4


class CommentTag(betterproto.Enum):
    NORMAL = 0
    CANDIDATE = 1
    OVERAGE = 2


class ContentPositionType(betterproto.Enum):
    UNKNOWN = 0
    STREAM = 1
    LIVE_STUDIO_STREAM_PORTRAIT = 2
    LIVE_STUDIO_STREAM_LANDSCAPE = 3


class AgreeStatus(betterproto.Enum):
    AGREE_UNKNOWN = 0
    AGREE = 1
    REJECT = 2


class Scene(betterproto.Enum):
    UNKNOWN = 0
    UNDEFINED_1 = 1
    CO_HOST = 2
    UNDEFINED_3 = 3
    MULTI_LIVE = 4


class JoinType(betterproto.Enum):
    UNKNOWN = 0
    CHANNEL_APPLY = 1
    CHANNEL_INVITE = 2
    GROUP_APPLY = 100
    GROUP_APPLY_FOLLOW = 101
    GROUP_INVITE = 102
    GROUP_INVITE_FOLLOW = 103
    GROUP_OWNER_JOIN = 104


class GroupStatus(betterproto.Enum):
    UNKNOWN = 0
    WAITING = 1
    UNDEFINED_2 = 2
    LINKED = 3


class KickoutReason(betterproto.Enum):
    KICK_OUT_REASON_UNKNOWN = 0
    KICK_OUT_REASON_FIRST_FRAME_TIME_OUT = 1
    KICK_OUT_REASON_BY_HOST = 2
    KICK_OUT_REASON_RT_C_LOST_CONNECTION = 3
    KICK_OUT_REASON_BY_PUNISH = 4
    KICK_OUT_REASON_BY_ADMIN = 5
    KICK_OUT_REASON_HOST_REMOVE_ALL_GUESTS = 6


class StateType(betterproto.Enum):
    STATE_INVALID = 0
    STATE_LAYOUT = 1
    STATE_ONLINE_USER_STATE = 2
    STATE_AUDIO_MUTE = 3
    STATE_VIDEO_MUTE = 4
    STATE_RT_C_CONNECTION = 5
    STATE_NETWORK = 6
    STATE_BACKGROUND_IMAGE = 7
    STATE_SCREEN_ORIENTATION = 8
    STATE_AVATAR_ID = 9


class OnlineUserState(betterproto.Enum):
    STATE_UNDEFINED = 0
    STATE_NORMAL = 1
    STATE_PAUSED = 2


class RtcConnectionState(betterproto.Enum):
    STATE_RT_C_UNDEFINED = 0
    STATE_RT_C_NORMAL = 1
    STATE_RT_C_DISCONNECT = 2


class MediaState(betterproto.Enum):
    MEDIA_UNDEFINED = 0
    MEDIA_NORMAL = 1
    MEDIA_MUTED = 2
    MEDIA_UN_MUTE_OCCUPIED = 3
    MEDIA_MUTED_OCCUPIED = 4


class NetworkState(betterproto.Enum):
    STATE_NETWORK_UNDEFINED = 0
    STATE_NETWORK_EXCELLENT = 1
    STATE_NETWORK_GOOD = 2
    STATE_NETWORK_POOR = 3
    STATE_NETWORK_BAD = 4
    STATE_NETWORK_V_BAD = 5
    STATE_NETWORK_DOWN = 6


class LinkMicUserAdminType(betterproto.Enum):
    UNDEFINED_TYPE = 0
    MANAGER_TYPE = 1
    HOST_TYPE = 2


class PosIdentityType(betterproto.Enum):
    IDENTITY_EMPTY_SLOT = 0
    IDENTITY_RT_C_USER_ID = 1
    IDENTITY_RT_C_STREAM_ID = 2
    IDENTITY_LIVE_USER_ID = 3


class LinkmicAudienceType(betterproto.Enum):
    AUDIENCE_TYPE_UNKNOWN = 0
    VIDEO = 1
    AUDIO = 2


class LinkmicRoleType(betterproto.Enum):
    ROLE_TYPE_UN_KOWN = 0
    LEADER = 1
    PLAYER = 2
    INVITEE = 3


class LinkmicReplyType(betterproto.Enum):
    RT_UNKNOWN = 0
    RT_AGREE = 1
    RT_REJECT = 2


class GuestMicCameraManageOp(betterproto.Enum):
    OPEN_MIC = 0
    OPEN_CAMERA = 1
    CLOSE_MIC = 2
    CLOSE_CAMERA = 3
    CLOSE_MIC_PUNISH = 4


class GuestMicCameraChangeScene(betterproto.Enum):
    CHANGE_SCENE_UNKNOWN = 0
    LIVE_SHOW_BY_ANCHOR_AUTO = 1
    LIVE_SHOW_BY_SERVER_NORMAL = 2
    LIVE_SHOW_BY_SHOW_END = 3


class EnlargeScreenScene(betterproto.Enum):
    ENLARGE_UNKNOWN = 0
    ENLARGE_HOST_SCREEN = 1
    INVITE_ENLARGE_GUEST_SCREEN = 2
    CANCEL_ENLARGE_FOR_HOST = 3
    CANCEL_ENLARGE_FOR_GUEST = 4
    HOST_RECEIVE_CANCEL_ENLARGE = 5
    GET_ENLARGE_STATUS = 6
    ENLARGE_POSITION = 7
    CANCEL_ENLARGE_POSITION = 8
    CANCEL_ENLARGE_FOR_ALL = 9
    CHANGE_ENLARGE_RECORD = 10


class LinkUserType(betterproto.Enum):
    DEFAULT = 0
    KARAOKE = 1


class MultiGuestOutsideRoomInviteSource(betterproto.Enum):
    OUTSIDE_ROOM_INVITE_SOURCE_UNKNOWN = 0
    OUTSIDE_ROOM_INVITE_SOURCE_PANEL = 1
    OUTSIDE_ROOM_INVITE_SOURCE_CAPSULE = 2
    OUTSIDE_ROOM_INVITE_SOURCE_EMPTY_POSITION = 3


class GuessPinCardStatus(betterproto.Enum):
    PIN = 0
    UNPIN = 1
    FROZEN = 2


class StickerAssetVariant(betterproto.Enum):
    UNKNOWN = 0
    NORMAL = 1
    DOWNGRADE = 2
    FALLBACK = 3


class StickerAssetVariantReason(betterproto.Enum):
    UNKNOWN = 0
    APP_VERSION = 1
    DEVICE_IN_BLACKLIST = 2
    DEVICE_NOT_IN_WHITELIST = 3
    SDK_VERSION = 4
    ES_VERS_WI_ON = 5
    DEVICE_SCORE = 6


class GiftBadgeType(betterproto.Enum):
    DEFAULT_GIFT_BADGE = 0
    CAMPAIGN_GIFT_BADGE = 1
    TRENDING_GIFT_BADGE = 2
    NEW_GIFT_BADGE = 3
    RANDOM_GIFT_BADGE = 4
    COLOR_GIFT_BADGE = 5
    AUDIO_GIFT_BADGE = 6
    UNIVERSE_GIFT_BADGE = 7
    GL_UP_GIFT_BADGE = 8
    FANS_CLUB_GIFT_BADGE = 9
    PARTNERSHIP_GIFT_BADGE = 10
    CHRISTMAS_GIFT_BADGE = 11
    CUSTOM_GIFT_BADGE = 12
    GALLERY_GIFT_ER = 13
    PK = 14
    VAULT = 15
    LIVE_GOAL = 16
    VIEWER_PICKS = 17


class MaterialAuditStatus(betterproto.Enum):
    NOT_REVIEWED = 0
    UNDER_REVIEW = 1
    REVIEW_PASS = 2
    REVIEW_REJECTED = 3
    REVIEW_ABANDON = 4


class BattleInviteType(betterproto.Enum):
    NORMAL = 0
    AGAIN = 1


class BattleConfigMode(betterproto.Enum):
    NORMAL = 0
    GAME = 1


class ComboType(betterproto.Enum):
    UN_KNOW = 0
    NORMAL = 1
    ACTIVITY = 2


class EnvelopeBusinessType(betterproto.Enum):
    BUSINESS_TYPE_UNKNOWN = 0
    BUSINESS_TYPE_USER_DIAMOND = 1
    BUSINESS_TYPE_PLATFORM_DIAMOND = 2
    BUSINESS_TYPE_PLATFORM_SHELL = 3
    BUSINESS_TYPE_PORTAL = 4
    BUSINESS_TYPE_PLATFORM_MER_CH = 5
    BUSINESS_TYPE_E_OY_DIAMOND = 6
    BUSINESS_TYPE_FANCLUB_GT_M = 7
    UNDEFINED_8 = 8
    BUSINESS_TYPE_PLATFORM_PORTAL = 9
    BUSINESS_TYPE_EO_YG_TM_POPULARITY_TICKET = 10
    BUSINESS_TYPE_EO_YG_TM_REVENUE_DIAMOND = 11
    BUSINESS_TYPE_EO_YG_TM_GAME_DIAMOND = 12
    BUSINESS_TYPE_CREATOR_LEAGUE_PROMOTION_GT_M = 13
    BUSINESS_TYPE_MOY_GT_M_POPULARITY_TICKET = 14


class EnvelopeFollowShowStatus(betterproto.Enum):
    ENVELOPE_FOLLOW_SHOW_UNKNOWN = 0
    ENVELOPE_FOLLOW_SHOW = 1
    ENVELOPE_FOLLOW_NOT_SHOW = 2


class LinkmicUserSettingLayout(betterproto.Enum):
    LINK_MIC_USER_SETTING_LAYOUT_GRID = 0
    LINK_MIC_USER_SETTING_LAYOUT_FLOATING = 1


class LinkmicApplierSortSetting(betterproto.Enum):
    LINK_MIC_APP_LIER_SORT_SETTING_NONE = 0
    LINK_MIC_APP_LIER_SORT_SETTING_BY_GIFT_SCORE = 1


class LinkmicUserSettingShowAction(betterproto.Enum):
    LINK_MIC_USER_SETTING_SHOW_ACTION_CHECKED = 0
    LINK_MIC_USER_SETTING_SHOW_ACTION_NOT_CHECKED = 1
    LINK_MIC_USER_SETTING_SHOW_ACTION_HIDE = 2
    LINK_MIC_USER_SETTING_SHOW_ACTION_OPEN = 3
    LINK_MIC_USER_SETTING_SHOW_ACTION_CLOSE = 4


class GiftPickStatus(betterproto.Enum):
    UNKNOWN = 0
    UNAVAILABLE = 1
    REJECTED = 2
    APPROVED = 3
    REVIEWING = 4


class ViewerPicksStatus(betterproto.Enum):
    UNKNOWN = 0
    STARTED = 1
    SETTLED = 2
    CUT_SHORT = 3
    FINISHED = 4


class ViewerPicksUpdateType(betterproto.Enum):
    UNKNOWN = 0
    START = 1
    UPDATE = 2
    SETTLE = 3
    FINISH = 4


class ListChangeType(betterproto.Enum):
    LIST_LEAVE = 0
    LIST_JOIN_CHANNEL = 1
    LIST_APPLY = 2
    LIST_INVITE = 3
    LIST_KICK_OUT = 4
    LIST_CANCEL_INVITE = 5
    LIST_CANCEL_APPLY = 6
    LIST_JOIN_DIRECT = 7
    LIST_PERMIT = 8
    LIST_M_UPDATE_POSITION = 9
    LIST_CHANGE_LAYOUT = 10
    LIST_CONTENT_POSITION_UPDATED = 11
    LIST_INNER_STATE_CHANGE_NOTIFY = 1000000


class EnableStatus(betterproto.Enum):
    UNKNOWN = 0
    OPEN = 1
    CLOSE = 2


class FansTaskDurationType(betterproto.Enum):
    UNKNOWN = 0
    DAILY = 1
    MONTHLY = 2
    LONG_TERM = 3


class FansTaskRewardType(betterproto.Enum):
    UNKNOWN = 0
    AVERAGE = 1
    LEVEL = 2


class FansPrivilegeType(betterproto.Enum):
    LEVEL_PRIVILEGE_TYPE_UNKNOWN = 0
    LEVEL_PRIVILEGE_TYPE_BADGE = 1
    LEVEL_PRIVILEGE_TYPE_GIFT = 2
    LEVEL_PRIVILEGE_TYPE_UPGRADE_ANNOUNCEMENT = 3
    LEVEL_PRIVILEGE_TYPE_ENTRANCE_EFFECTS = 4
    LEVEL_PRIVILEGE_TYPE_CELEBRATION_GIFTS = 5


class PopularityRankRegionType(betterproto.Enum):
    UNKNOWN = 0
    EU = 1
    NA = 2
    BR = 3
    US = 4
    OTHERS = 100


class FansGiftType(betterproto.Enum):
    UNKNOWN = 0
    HEART_ME = 1
    BONUS_TIME = 2
    TEAM_RANK_REWARD_GIFT = 3


class TeamRankPunishType(betterproto.Enum):
    UNKNOWN = 0
    LOCATION = 1
    VIOLATION = 2
    SHARK = 3
    GROUP_CREATOR = 100


class TipType(betterproto.Enum):
    UNKNOWN = 0
    NO_MEMBER = 1
    NO_EU_GIFT_POINTS = 2
    NO_EU_WATCH_POINTS = 3
    NO_EU_NEW_FANS = 4
    EU_CONSUME = 5
    EU_GIFT_POINTS = 6
    EU_COMMENT_POINTS = 7
    EU_NEW_FANS = 8
    DAILY_TASK_PROGRESS = 9
    DAILY_TASK_COMPLETE = 10
    FANS_CLUB_EDIT_NAME = 11
    TASK_DETAIL_CARD = 12
    TEAM_MISSION_TIP = 13
    TEAM_RANK_BONUS_TIME_TIP = 14
    TEAM_RANK_PUNISHED = 15
    UNDEFINED_16 = 16
    UNDEFINED_17 = 17
    UNDEFINED_18 = 18
    UNDEFINED_19 = 19
    UNDEFINED_20 = 20
    TEAM_RANK_OPT_OUT = 21


class TipCardType(betterproto.Enum):
    COMMON = 0
    TEAM_MISSION = 1


class FansClubNameReviewStatus(betterproto.Enum):
    UNKNOWN = 0
    UNDER_REVIEW = 1
    PASSED = 2
    REJECTED = 3
    APPEAL_UNDER_REVIEW = 4
    APPEAL_PASSED = 5
    APPEAL_REJECTED = 6


class FansClubValidateNameStatus(betterproto.Enum):
    FANS_CLUB_NAME_CAN_EDIT = 0
    FANS_CLUB_NAME_CANNOT_EDIT_MONTH_FREQUENCY = 1
    FANS_CLUB_NAME_CANNOT_EDIT_YEAR_FREQUENCY = 2
    FANS_CLUB_NAME_CANNOT_EDIT_UNDER_REVIEW = 3
    FANS_CLUB_NAME_CANNOT_EDIT_NAME_CONFLICT = 4
    FANS_CLUB_NAME_CANNOT_EDIT_NAME_TOO_LONG = 5


class FansClubBannerType(betterproto.Enum):
    UNKNOWN = 0
    NORMAL = 1
    COMPLEX = 2
    FULL_PAGE = 3


class FansClubBannerBackGroundType(betterproto.Enum):
    FANS_CLUB_BANNER_BACKGROUND_TYPE_UNKNOWN = 0
    FANS_CLUB_BANNER_BACKGROUND_TYPE_COLOR = 1
    FANS_CLUB_BANNER_BACKGROUND_TYPE_IMAGE = 2


class MissionJoinStatus(betterproto.Enum):
    UNKNOWN = 0
    CANT_JOIN = 1
    UN_JOIN = 2
    UN_CLAIM = 3
    JOINED = 4


class AnimationInfoType(betterproto.Enum):
    NO_ANIMATION = 0
    ENTER_RANK = 1
    LEAVE_RANK = 2
    RISE = 3
    FALL = 4
    AFTER_SETTLE = 5
    CLASS_GET_STAR = 6
    CLASS_LOSE_STAR = 7
    CLASS_UP_TOP = 8
    CLASS_DOWN_BOTTOM = 9
    NEW_PERIOD_START = 10
    TEAM_RANK_BONUS_TIME = 11


class VipStatus(betterproto.Enum):
    UNKNOWN = 0
    V_I_P_STATUS_RENEWING = 1
    V_I_P_STATUS_RENEW_SUCCESS = 2
    V_I_P_STATUS_PROTECTIVE = 3


class ExemptionType(betterproto.Enum):
    UNDEFINED_0 = 0
    DSL = 1
    ENCRYPTED_DATA = 2
    DEPRECATED_EMPTY_FIELD = 3
    NON_US_DATA = 4
    BYTES = 5


class TexasCatalog(betterproto.Enum):
    TEXAS_UNKNOWN = 0
    TEXAS_USER_DATA_PUBLIC_DATA = 1
    TEXAS_USER_DATA_PROTECTED_DATA = 2
    TEXAS_USER_DATA_EXCEPTED_DATA_INTEROPERABILITY_DATA_ID_FIELDS = 3
    TEXAS_USER_DATA_EXCEPTED_DATA_INTEROPERABILITY_DATA_USER_STATUS = 4
    TEXAS_USER_DATA_EXCEPTED_DATA_INTEROPERABILITY_DATA_VIDEO_STATUS = 5
    TEXAS_USER_DATA_EXCEPTED_DATA_INTEROPERABILITY_DATA_BLOCK_OR_UNBLOCK_LIST = 6
    TEXAS_USER_DATA_EXCEPTED_DATA_INTEROPERABILITY_DATA_VIDEO_COMMENT_STATUS = 7
    TEXAS_USER_DATA_EXCEPTED_DATA_INTEROPERABILITY_DATA_LIVE_ROOM_STATUS = 8
    TEXAS_USER_DATA_EXCEPTED_DATA_INTEROPERABILITY_DATA_USER_OR_CONTENT_SAFETY_STATUS = (
        9
    )
    TEXAS_USER_DATA_EXCEPTED_DATA_INTEROPERABILITY_DATA_PERMISSION_SETTINGS = 10
    TEXAS_USER_DATA_EXCEPTED_DATA_INTEROPERABILITY_DATA_SOCIAL_INTERACTION_ACTIVITY = 11
    TEXAS_USER_DATA_EXCEPTED_DATA_INTEROPERABILITY_DATA_CONTENT_CHARACTERISTICS = 12
    TEXAS_USER_DATA_EXCEPTED_DATA_INTEROPERABILITY_DATA_EVENT_TIME = 13
    TEXAS_USER_DATA_BUYERS_DATA_ACCOUNT_BASIC_INFORMATION = 14
    TEXAS_USER_DATA_BUYERS_DATA_ACCOUNT_CONTACT_INFORMATION = 15
    TEXAS_USER_DATA_BUYERS_DATA_ACCOUNT_PAYMENT_METHOD = 16
    TEXAS_USER_DATA_BUYERS_DATA_TRANSACTION_ORDER_INFORMATION = 17
    TEXAS_USER_DATA_BUYERS_DATA_TRANSACTION_CUSTOMER_SERVICE = 18
    TEXAS_USER_DATA_BUYERS_DATA_LOGISTICS_ORDER_INFO = 19
    TEXAS_USER_DATA_PROMOTERS_DATA_ACCOUNT_BASIC_INFORMATION = 20
    TEXAS_USER_DATA_PROMOTERS_DATA_ACCOUNT_AUTHORITY_INFORMATION = 21
    TEXAS_USER_DATA_PROMOTERS_DATA_ACCOUNT_CONTACT_INFORMATION = 22
    TEXAS_USER_DATA_PROMOTERS_DATA_INFLUENCE_BEHAVIORS = 23
    TEXAS_USER_DATA_PROMOTERS_DATA_CONTENT_BASIC_INFO = 24
    TEXAS_USER_DATA_PROMOTERS_DATA_CONTENT_MODERATION_INFO = 25
    TEXAS_USER_DATA_PROMOTERS_DATA_COMMISSIONS = 26
    TEXAS_USER_DATA_PROMOTERS_DATA_COMMISSION_PERFORMANCE_DATA = 27
    TEXAS_TIK_TOK_BUSINESS_USER_DATA_TCM_CREATOR_DATA = 28
    TEXAS_TIK_TOK_BUSINESS_USER_DATA_LIVE_AN_CHORDATA = 29
    TEXAS_TIK_TOK_BUSINESS_USER_DATA_BUSINESS_ACCOUNT_DATA = 30
    TEXAS_TIK_TOK_BUSINESS_USER_DATA_EFFECT_CREATOR_DATA = 31
    TEXAS_TIK_TOK_BUSINESS_USER_DATA_AD_VIDEO_CREATORS_DATA = 32
    TEXAS_TIK_TOK_BUSINESS_USER_DATA_PROMOTE_ACCOUNT_DATA = 33
    TEXAS_TIK_TOK_BUSINESS_USER_DATA_E_COMMERCE_USERS_DATA = 34
    TEXAS_TIK_TOK_BUSINESS_USER_DATA_SOUND_ON_CREATORS_DATA = 35
    TEXAS_TIK_TOK_BUSINESS_USER_DATA_CREATORS_DATA = 36
    TEXAS_THIRD_PARTY_BUSINESS_DATA_ADVERTISER_DATA = 37
    TEXAS_THIRD_PARTY_BUSINESS_DATA_E_COMMERCE_SELLERS_DATA = 38
    TEXAS_THIRD_PARTY_BUSINESS_DATA_MUSIC_PROVIDERS_DATA = 39
    TEXAS_THIRD_PARTY_BUSINESS_DATA_TT_4_D_DEVELOPERS_DATA = 40
    TEXAS_THIRD_PARTY_BUSINESS_DATA_GLOBAL_PAYMENT_MERCHANTS_DATA = 41
    TEXAS_OPERATION_DATA_PRODUCT_OPERATIONAL_DATA = 42
    TEXAS_OPERATION_DATA_BUSINESS_OPERATIONAL_DATA = 43
    TEXAS_ENGINEERING_DATA_ENGINEERING_OPERATIONAL_DATA = 44
    TEXAS_CORPORATION_DATA = 45


class TikTokCatalog(betterproto.Enum):
    TIK_TOK_UNKNOWN = 0
    TIK_TOK_TIK_TOK_USER_CORE_BASE_INFO = 1
    TIK_TOK_TIK_TOK_USER_CORE_SETTINGS = 2
    TIK_TOK_TIK_TOK_USER_CORE_FEATURE_AND_TAG = 3
    TIK_TOK_TIK_TOK_USER_CORE_ACCOUNT_PRIVILEGE = 4
    TIK_TOK_TIK_TOK_USER_CORE_DATA_EARTH = 5
    TIK_TOK_TIK_TOK_USER_CORE_UMP = 6
    TIK_TOK_TIK_TOK_USER_CORE_RECOMMENDATION = 7
    TIK_TOK_TIK_TOK_EXPLORING_HASH_TAG = 8
    TIK_TOK_TIK_TOK_EXPLORING_PLAYLIST = 9
    TIK_TOK_TIK_TOK_EXPLORING_CHALLENGE_COUNT = 10
    TIK_TOK_TIK_TOK_EXPLORING_MUSIC_COUNT = 11
    TIK_TOK_TIK_TOK_EXPLORING_MV_COUNT = 12
    TIK_TOK_TIK_TOK_EXPLORING_STICKER_COUNT = 13
    TIK_TOK_TIK_TOK_EXPLORING_ANCHOR_COUNT = 14
    TIK_TOK_TIK_TOK_EXPLORING_PLAYLIST_COUNT = 15
    TIK_TOK_TIK_TOK_EXPLORING_VOTE_COUNT = 16
    TIK_TOK_TIK_TOK_EXPLORING_POI = 17
    TIK_TOK_TIK_TOK_EXPLORING_CREATION_LIST = 18
    TIK_TOK_TIK_TOK_EXPLORING_HASH_TAG_LIST = 19
    TIK_TOK_TIK_TOK_EXPLORING_HASH_TAG_BASED_ITEM_LIST = 20
    TIK_TOK_TIK_TOK_EXPLORING_MUSIC_BASED_ITEM_LIST = 21
    TIK_TOK_TIK_TOK_EXPLORING_ANCHOR_BASED_ITEM_LIST = 22
    TIK_TOK_TIK_TOK_EXPLORING_POI_BASED_ITEM_LIST = 23
    TIK_TOK_TIK_TOK_EXPLORING_DUET_BASED_ITEM_LIST = 24
    TIK_TOK_TIK_TOK_EXPLORING_STICKER = 25
    TIK_TOK_TIK_TOK_EXPLORING_BOOK_TOK = 26
    TIK_TOK_TIK_TOK_EXPLORING_MOVIE_TOK = 27
    TIK_TOK_TIK_TOK_SOCIAL_NOTICE_NOTICE_ADMIN_TEMPLATE = 28
    TIK_TOK_TIK_TOK_SOCIAL_NOTICE_NOTICE_ADMIN_TASK = 29
    TIK_TOK_TIK_TOK_SOCIAL_NOTICE_ANNOUNCEMENT = 30
    TIK_TOK_TIK_TOK_SOCIAL_NOTICE_SYSTEM_NOTIFICATION = 31
    TIK_TOK_TIK_TOK_SOCIAL_NOTICE_NOTICE_USER_INTERACTION = 32
    TIK_TOK_TIK_TOK_SOCIAL_NOTICE_DELETE_OLD_NOTICE_MSG = 33
    TIK_TOK_TIK_TOK_SOCIAL_NOTICE_NOTICE_COUNT = 34
    TIK_TOK_TIK_TOK_SOCIAL_NOTICE_IN_APP_PUSH = 35
    TIK_TOK_TIK_TOK_SOCIAL_RELATION_THIRD_PARTY_PLATFORM_USER_CONNECT_INFO = 36
    TIK_TOK_TIK_TOK_SOCIAL_RELATION_THIRD_PARTY_PLATFORM_FORWARD_BINDING_INFO = 37
    TIK_TOK_TIK_TOK_SOCIAL_RELATION_THIRD_PARTY_PLATFORM_REVERSE_BINDING_INFO = 38
    TIK_TOK_TIK_TOK_SOCIAL_RELATION_THIRD_PARTY_PLATFORM_BINDING_INFO = 39
    TIK_TOK_TIK_TOK_SOCIAL_RELATION_GUEST_USER_BLOCKING_SET = 40
    TIK_TOK_TIK_TOK_SOCIAL_RELATION_LINK_RELATION_NOTICE = 41
    TIK_TOK_TIK_TOK_SOCIAL_RELATION_USER_RELATION = 42
    TIK_TOK_TIK_TOK_SOCIAL_RELATION_USER_BLOCK_RELATION = 43
    TIK_TOK_TIK_TOK_SOCIAL_RELATION_USER_CIRCLE_RELATION = 44
    TIK_TOK_TIK_TOK_SOCIAL_RELATION_RELATION_COUNT = 45
    TIK_TOK_TIK_TOK_SOCIAL_RELATION_FRIEND_INVITATION = 46
    TIK_TOK_TIK_TOK_SOCIAL_IM_GROUP_INVITE = 47
    TIK_TOK_TIK_TOK_SOCIAL_IM_BA_SETTINGS = 48
    TIK_TOK_TIK_TOK_SOCIAL_IM_E_MOJI = 49
    TIK_TOK_TIK_TOK_SOCIAL_IM_STRANGER = 50
    TIK_TOK_TIK_TOK_SOCIAL_IM_GROUP_FREQUENCY = 51
    TIK_TOK_TIK_TOK_SOCIAL_IM_PUSH_FREQUENCY = 52
    TIK_TOK_TIK_TOK_SOCIAL_IM_URL_SHARE = 53
    TIK_TOK_TIK_TOK_SOCIAL_STORY_STORY_IN_BOX = 54
    TIK_TOK_TIK_TOK_SOCIAL_STORY_STORY_OUT_BOX = 55
    TIK_TOK_TIK_TOK_SOCIAL_STORY_STORY_INTERACTION_INFO = 56
    TIK_TOK_TIK_TOK_SOCIAL_COMMENT_VIDEO_COMMENT = 57
    TIK_TOK_TIK_TOK_SOCIAL_COMMENT_COMMENT_DIGG = 58
    TIK_TOK_TIK_TOK_SOCIAL_MENTION = 59
    TIK_TOK_TIK_TOK_SOCIAL_LIKE_VIDEO_LIKE = 60
    TIK_TOK_TIK_TOK_USER_PROTECT_TOOLS_FAMILY_PAIRING_SETTING = 61
    TIK_TOK_TIK_TOK_DATA_RETENTION_RETENTION_TASK = 62
    TIK_TOK_TIK_TOK_MUSIC_SONG = 63
    TIK_TOK_TIK_TOK_MUSIC_CLIP = 64
    TIK_TOK_TIK_TOK_MUSIC_ARTIST = 65
    TIK_TOK_TIK_TOK_MUSIC_LICENSE = 66
    TIK_TOK_TIK_TOK_MUSIC_ALBUM = 67
    TIK_TOK_TIK_TOK_MUSIC_COPYRIGHT = 68
    TIK_TOK_TIK_TOK_MUSIC_LYRIC = 69
    TIK_TOK_TIK_TOK_MUSIC_LABEL = 70
    TIK_TOK_TIK_TOK_MUSIC_GROUP = 71
    TIK_TOK_TIK_TOK_MUSIC_TAG = 72
    TIK_TOK_TIK_TOK_ARENA_CONFIG_DATA = 73
    TIK_TOK_TIK_TOK_MINT_LABEL = 74
    TIK_TOK_TIK_TOK_MINT_APPROVAL = 75
    TIK_TOK_TIK_TOK_MINT_BOOST = 76
    TIK_TOK_TIK_TOK_MINT_PLATFORM = 77
    TIK_TOK_TIK_TOK_MINT_NOTICE = 78
    TIK_TOK_TIK_TOK_MINT_USER = 79
    TIK_TOK_TIK_TOK_MINT_ANCHOR = 80
    TIK_TOK_TIK_TOK_MINT_CONTENT = 81
    TIK_TOK_TIK_TOK_MINT_ARTICLE = 82
    TIK_TOK_TIK_TOK_MINT_THEMATIC = 83
    TIK_TOK_TIK_TOK_EFFECT_USER_FAVORITE = 84
    TIK_TOK_TIK_TOK_EFFECT_MODEL = 85
    TIK_TOK_TIK_TOK_EFFECT_EFFECT_GRADE = 86
    TIK_TOK_TIK_TOK_EFFECT_BENCHMARK = 87
    TIK_TOK_TIK_TOK_EFFECT_MEDIA = 88
    TIK_TOK_TIK_TOK_EFFECT_EFFECT_CHARACTERISTICS = 89
    TIK_TOK_TIK_TOK_EFFECT_ITEM_CHARACTERISTICS = 90
    TIK_TOK_TIK_TOK_INTELLIGENCE_CREATION_VISION_MODEL = 91
    TIK_TOK_TIK_TOK_INTELLIGENCE_CREATION_SPEECH_MODEL = 92
    TIK_TOK_TIK_TOK_LER_T_PLATFORM_LEGAL_REQUEST = 93
    TIK_TOK_TIK_TOK_LER_T_PLATFORM_LEGAL_REQUEST_CATEGORY = 94
    TIK_TOK_TIK_TOK_LIVE_SOCIAL_LINK_MIC = 95
    TIK_TOK_TIK_TOK_LIVE_SOCIAL_PK = 96
    TIK_TOK_TIK_TOK_LIVE_SOCIAL_ROOM_COUNT = 97
    TIK_TOK_TIK_TOK_LIVE_SOCIAL_SUBSCRIBE_COUNT = 98
    TIK_TOK_TIK_TOK_LIVE_SOCIAL_GAME_LIVE = 99
    TIK_TOK_TIK_TOK_LIVE_ACTIVITY_RANK_LIST = 100
    TIK_TOK_TIK_TOK_LIVE_ACTIVITY_TASK = 101
    TIK_TOK_TIK_TOK_LIVE_ACTIVITY_ACTIVITY_META = 102
    TIK_TOK_TIK_TOK_LIVE_ACTIVITY_ACTIVITY_MUTE_X = 103
    TIK_TOK_TIK_TOK_LIVE_ACTIVITY_ACTIVITY_COUNTER = 104
    TIK_TOK_TIK_TOK_LIVE_ACTIVITY_LIVE_EVENT = 105
    TIK_TOK_TIK_TOK_LIVE_ACTIVITY_LOTTERY = 106
    TIK_TOK_TIK_TOK_LIVE_ACTIVITY_PK = 107
    TIK_TOK_TIK_TOK_LIVE_ACTIVITY_APPLY = 108
    TIK_TOK_TIK_TOK_LIVE_ACTIVITY_TEAM = 109
    TIK_TOK_TIK_TOK_LIVE_ACTIVITY_VOTE = 110
    TIK_TOK_TIK_TOK_LIVE_FUNDAMENTAL_BUSINESS_ROOM = 111
    TIK_TOK_TIK_TOK_LIVE_FUNDAMENTAL_BUSINESS_ANCHOR = 112
    TIK_TOK_TIK_TOK_LIVE_FUNDAMENTAL_BUSINESS_MESSAGE = 113
    TIK_TOK_TIK_TOK_LIVE_FUNDAMENTAL_BUSINESS_BANNER = 114
    TIK_TOK_TIK_TOK_LIVE_FUNDAMENTAL_BUSINESS_DIGG = 115
    TIK_TOK_TIK_TOK_LIVE_FUNDAMENTAL_BUSINESS_ADMIN = 116
    TIK_TOK_TIK_TOK_LIVE_FUNDAMENTAL_BUSINESS_STICKER = 117
    TIK_TOK_TIK_TOK_LIVE_FUNDAMENTAL_BUSINESS_HASH_TAG = 118
    TIK_TOK_TIK_TOK_LIVE_FUNDAMENTAL_BUSINESS_EVENT = 119
    TIK_TOK_TIK_TOK_LIVE_FUNDAMENTAL_BUSINESS_BOOST_TOOL = 120
    TIK_TOK_TIK_TOK_LIVE_FUNDAMENTAL_BUSINESS_ECOSYSTEM = 121
    TIK_TOK_TIK_TOK_LIVE_REVENUE_GIFT = 122
    TIK_TOK_TIK_TOK_LIVE_REVENUE_RECHARGE_PACKAGES = 123
    TIK_TOK_TIK_TOK_LIVE_REVENUE_RANK_LIST = 124
    TIK_TOK_TIK_TOK_LIVE_REVENUE_USER_PRIVILEGE = 125
    TIK_TOK_TIK_TOK_LIVE_REVENUE_SUBSCRIPTION = 126
    TIK_TOK_TIK_TOK_LIVE_REVENUE_ENVELOPE = 127
    TIK_TOK_TIK_TOK_LIVE_REVENUE_HOST_REFERRAL = 128
    TIK_TOK_TIK_TOK_LIVE_REVENUE_WISH_LIST = 129
    TIK_TOK_TIK_TOK_LIVE_REVENUE_CREW = 130
    TIK_TOK_TIK_TOK_LIVE_BACKSTAGE_UNION_CONTRACT = 131
    TIK_TOK_TIK_TOK_LIVE_BACKSTAGE_UNION_TASK = 132
    TIK_TOK_TIK_TOK_LIVE_BACKSTAGE_UNION_ANCHOR = 133
    TIK_TOK_TIK_TOK_LIVE_BACKSTAGE_GROUP = 134
    TIK_TOK_TIK_TOK_LIVE_BACKSTAGE_UNION = 135
    TIK_TOK_TIK_TOK_LIVE_BACKSTAGE_PLATFORM_USER = 136
    TIK_TOK_TIK_TOK_LIVE_WALLET_ACCOUNT = 137
    TIK_TOK_TIK_TOK_LIVE_WALLET_ORDER = 138
    TIK_TOK_TIK_TOK_LIVE_WALLET_CONTRACT = 139
    TIK_TOK_TIK_TOK_LIVE_WALLET_TICKET = 140
    TIK_TOK_TIK_TOK_LIVE_DATA_PLATFORM = 141
    TIK_TOK_TIK_TOK_LIVE_STRATEGY = 142
    TIK_TOK_TIK_TOK_UNKNOWN_DOMAIN_UNKNOWN_ENTITY = 143
    TIK_TOK_TIK_TOK_UNKNOWN_DOMAIN_PRIVATE_MEASUREMENT = 144
    TIK_TOK_TIK_TOK_UNKNOWN_DOMAIN_MUSIC_MODERATION = 145
    TIK_TOK_TIK_TOK_UNKNOWN_DOMAIN_USER_SEARCH_DOWN_RANK = 146
    TIK_TOK_TIK_TOK_UNKNOWN_DOMAIN_S_UG_MODERATION = 147
    TIK_TOK_TIK_TOK_UNKNOWN_DOMAIN_HASH_TAG_MODERATION = 148
    TIK_TOK_TIK_TOK_UNKNOWN_DOMAIN_USER_MODERATION = 149
    TIK_TOK_TIK_TOK_CREATOR_MONET_IZ_ATION_CREATOR_FUND_INFO = 150
    TIK_TOK_TIK_TOK_CREATOR_MONET_IZ_ATION_PRO_ACCOUNT = 151
    TIK_TOK_TIK_TOK_CREATOR_MONET_IZ_ATION_VIDEO_GIFTS = 152
    TIK_TOK_TIK_TOK_CREATOR_MONET_IZ_ATION_TIPPING = 153
    TIK_TOK_TIK_TOK_CREATOR_MONET_IZ_ATION_ANALYTICS = 154
    TIK_TOK_TIK_TOK_CREATOR_MONET_IZ_ATION_PAID_CONTENT = 155
    TIK_TOK_TIK_TOK_EFFECT_PLATFORM_EFFECT = 156
    TIK_TOK_TIK_TOK_EFFECT_PLATFORM_EFFECT_PREVIEW = 157
    TIK_TOK_TIK_TOK_EFFECT_PLATFORM_NOTIFICATION = 158
    TIK_TOK_TIK_TOK_EFFECT_PLATFORM_LOKI_PUBLISH = 159
    TIK_TOK_TIK_TOK_EFFECT_PLATFORM_TRANSITION = 160
    TIK_TOK_TIK_TOK_EFFECT_PLATFORM_EVENT = 161
    TIK_TOK_TIK_TOK_EFFECT_PLATFORM_PUBLIC_STORAGE = 162
    TIK_TOK_TIK_TOK_EFFECT_PLATFORM_INTERNAL_STORAGE = 163
    TIK_TOK_TIK_TOK_EFFECT_PLATFORM_EFFECT_FILE = 164
    TIK_TOK_TIK_TOK_EFFECT_PLATFORM_EFFECT_MODERATION_EVENT = 165
    TIK_TOK_TIK_TOK_ITEM_ITEM_COUNT = 166
    TIK_TOK_TIK_TOK_ITEM_USER_SETTINGS = 167
    TIK_TOK_TIK_TOK_ITEM_MONET_IZ_ATION = 168
    TIK_TOK_TIK_TOK_ITEM_CONTENT_CHARACTERISTICS = 169
    TIK_TOK_TIK_TOK_ITEM_MODERATION = 170
    TIK_TOK_TIK_TOK_ITEM_RECOMMENDATION = 171
    TIK_TOK_TIK_TOK_USER_USER_COUNT = 172
    TIK_TOK_TIK_TOK_USER_REGISTRATION = 173
    TIK_TOK_TIK_TOK_USER_MINT = 174
    TIK_TOK_TIK_TOK_USER_MODERATION = 175
    TIK_TOK_TIK_TOK_USER_MONET_IZ_ATION = 176
    TIK_TOK_TIK_TOK_USER_PRIVACY = 177
    TIK_TOK_TIK_TOK_AD_FORMAT_ENTITY_FOR_PREVIEW_TABLE = 178
    TIK_TOK_TIK_TOK_AD_FORMAT_PREVIEW = 179
    TIK_TOK_TIK_TOK_AD_FORMAT_AD_STYLE = 180
    TIK_TOK_TIK_TOK_DEVICE_REGISTRATION = 181
    TIK_TOK_TIK_TOK_CONTENT_MOBILITY_CROWD_SOURCING_LIKE_COUNTER = 182
    TIK_TOK_TIK_TOK_CONTENT_MOBILITY_C_LA_CAPTION = 183
    TIK_TOK_TIK_TOK_CONTENT_CREATION_NAVI = 184
    TIK_TOK_TIK_TOK_CONTENT_CREATION_CREATOR_MONET_IZ_ATION = 185
    TIK_TOK_TIK_TOK_CONTENT_CREATION_QANDA = 186
    TIK_TOK_TIK_TOK_CONTENT_CREATION_TIP_PAYMENT = 187
    TIK_TOK_TIK_TOK_CONTENT_CREATION_UGC_POST = 188
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_MUSIC_SHARE = 189
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_VIDEO_SHARE = 190
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_ANCHOR = 191
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_DONATION = 192
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_DEVELOPER_INFO = 193
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_PLATFORM_CONFIGURATION = 194
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_COMMENT = 195
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_LIVE = 196
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_VIDEO = 197
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_MUSIC = 198
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_SHARE = 199
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_SHOP = 200
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_TCM = 201
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_USER = 202
    TIK_TOK_TIK_TOK_OPEN_PLATFORM_MESSAGE = 203
    TIK_TOK_TIK_TOK_GECKO_PLATFORM = 204
    TIK_TOK_TIK_TOK_GECKO_OPEN_API = 205
    TIK_TOK_TIK_TOK_BE_S_SCENE = 206
    TIK_TOK_TIK_TOK_BE_S_DASH_BORD = 207
    TIK_TOK_TIK_TOK_BE_S_INDICATOR = 208
    TIK_TOK_TIK_TOK_BE_S_MONITOR = 209
    TIK_TOK_TIK_TOK_BE_S_PLAN = 210
    TIK_TOK_TIK_TOK_BE_S_SERVICE_EVENT = 211
    TIK_TOK_TIK_TOK_BE_S_DEPENDENCY_TOPOLOGY = 212
    TIK_TOK_TIK_TOK_BE_S_ALARM = 213
    TIK_TOK_TIK_TOK_BE_S_ON_CALL = 214
    TIK_TOK_TIK_TOK_CORE_CLIENT_MONITORING_PRODUCT_LIST = 215
    TIK_TOK_TIK_TOK_CORE_CLIENT_MONITORING_PRODUCT_PANELS = 216
    TIK_TOK_TIK_TOK_CORE_CLIENT_MONITORING_PRODUCT_OVERVIEW_PANELS = 217
    TIK_TOK_TIK_TOK_CORE_CLIENT_MONITORING_PRODUCT_DETAIL_PANELS = 218
    TIK_TOK_TIK_TOK_CORE_CLIENT_MONITORING_DATE_PROXY = 219
    TIK_TOK_TIK_TOK_I_ESQ_A_PLATFORM_USER = 220
    TIK_TOK_TIK_TOK_I_ESQ_A_PLATFORM_CONFIG = 221
    TIK_TOK_TIK_TOK_I_ESQ_A_PLATFORM_MONITOR = 222
    TIK_TOK_TIK_TOK_I_ESQ_A_PLATFORM_BOARD = 223
    TIK_TOK_TIK_TOK_I_ESQ_A_PLATFORM_TICKET = 224
    TIK_TOK_TIK_TOK_I_ESQ_A_PLATFORM_TAG = 225
    TIK_TOK_TIK_TOK_I_ESQ_A_PLATFORM_LARK = 226
    TIK_TOK_TIK_TOK_I_ESQ_A_PLATFORM_APP = 227
    TIK_TOK_TIK_TOK_CUSTOMER_SERVICE_ISSUE = 228
    TIK_TOK_TIK_TOK_CUSTOMER_SERVICE_FEEDBACK = 229
    TIK_TOK_TIK_TOK_CUSTOMER_SERVICE_TICKET = 230
    TIK_TOK_TIK_TOK_CUSTOMER_SERVICE_METRIC = 231
    TIK_TOK_TIK_TOK_CUSTOMER_SERVICE_AGENT_INFO = 232
    TIK_TOK_TIK_TOK_CUSTOMER_SERVICE_QUALITY_CHECK = 233
    TIK_TOK_TIK_TOK_CUSTOMER_SERVICE_TOOLS = 234
    TIK_TOK_TIK_TOK_CUSTOMER_SERVICE_INFO = 235
    TIK_TOK_TIK_TOK_CUSTOMER_SERVICE_TASK = 236
    TIK_TOK_TIK_TOK_CUSTOMER_SERVICE_ROUTE = 237
    TIK_TOK_TIK_TOK_CUSTOMER_SERVICE_CONFIG = 238
    TIK_TOK_TIK_TOK_CUSTOMER_SERVICE_KNOWLEDGE = 239
    TIK_TOK_TIK_TOK_FEEDBACK_EMAIL = 240
    TIK_TOK_TIK_TOK_RHINO_PS_M = 241
    TIK_TOK_TIK_TOK_RHINO_TRACE = 242
    TIK_TOK_TIK_TOK_RHINO_TASK = 243
    TIK_TOK_TIK_TOK_RHINO_RESULT = 244
    TIK_TOK_TIK_TOK_RHINO_NET_FLOW = 245
    TIK_TOK_TIK_TOK_RHINO_MACHINE = 246
    TIK_TOK_TIK_TOK_RHINO_SCHEDULING = 247
    TIK_TOK_TIK_TOK_RHINO_MONITOR = 248
    TIK_TOK_TIK_TOK_TRANS_CODE_VIDEO_LADDER = 249
    TIK_TOK_TIK_TOK_TRANS_CODE_TRANS_CODE_TASK = 250
    TIK_TOK_TIK_TOK_TRANS_CODE_PLAY_COUNTER_MSG = 251
    TIK_TOK_TIK_TOK_USER_GROWTH_SEO_BOT_REQUEST = 252
    TIK_TOK_TIK_TOK_USER_GROWTH_SEO_KEYWORD = 253
    TIK_TOK_TIK_TOK_USER_GROWTH_SEO_SITE_MAP = 254
    TIK_TOK_TIK_TOK_USER_GROWTH_SEO_KEYWORDS_EXPANSION_PAGE = 255
    TIK_TOK_TIK_TOK_USER_GROWTH_SEO_TDK = 256
    TIK_TOK_TIK_TOK_USER_GROWTH_SEO_METRIC = 257
    TIK_TOK_TIK_TOK_USER_GROWTH_SEO_SEO_ENGINEERING_DATA = 258
    TIK_TOK_TIK_TOK_LIVE_ARCHITECTURE_IM = 259
    TIK_TOK_TIK_TOK_LIVE_ARCHITECTURE_ROUTER = 260
    TIK_TOK_TIK_TOK_NEBULA_NEBULA_USER = 261
    TIK_TOK_TIK_TOK_NEBULA_TEST_ACCOUNT = 262
    TIK_TOK_TIK_TOK_NEBULA_CONFIG = 263
    TIK_TOK_TIK_TOK_NEBULA_MONITOR = 264
    TIK_TOK_TIK_TOK_NEBULA_TEST_TASK = 265
    TIK_TOK_TIK_TOK_NEBULA_SERVICE = 266
    TIK_TOK_TIK_TOK_NEBULA_LOG = 267
    TIK_TOK_TIK_TOK_MIS_2_GLOBAL_RPC_INFO = 268
    TIK_TOK_TIK_TOK_MIS_2_STAGE_INFO = 269
    TIK_TOK_TIK_TOK_MIS_2_LAYOUT_INFO = 270
    TIK_TOK_TIK_TOK_MIS_2_RELEASE_HISTORY_INFO = 271
    TIK_TOK_TIK_TOK_MIS_2_VISIT_INFO = 272
    TIK_TOK_TIK_TOK_MIS_2_STATISTIC_INFO = 273
    TIK_TOK_TIK_TOK_MIS_2_EDIT_HISTORY_INFO = 274
    TIK_TOK_TIK_TOK_MIS_2_CODE_HISTORY_INFO = 275
    TIK_TOK_TIK_TOK_MIS_2_FAVOR_INFO = 276
    TIK_TOK_TIK_TOK_MIS_2_MATERIAL_INFO = 277
    TIK_TOK_TIK_TOK_MIS_2_USER_INFO = 278
    TIK_TOK_TIK_TOK_MIS_2_PAGE_VIEW_INFO = 279
    TIK_TOK_TIK_TOK_MIS_2_PERMISSION_INFO = 280
    TIK_TOK_TIK_TOK_MIS_2_REPOSITORY_FILE_INFO = 281
    TIK_TOK_TIK_TOK_MONITOR_PROXY_STATEMENT = 282
    TIK_TOK_TIK_TOK_MONITOR_PROXY_METRICS = 283
    TIK_TOK_TIK_TOK_MONITOR_PROXY_TAG_VALUES = 284
    TIK_TOK_TIK_TOK_MONITOR_PROXY_USE_RAU_TH = 285
    TIK_TOK_TIK_TOK_TRAFFIC_MONITOR_TRAFFIC_RECORD = 286
    TIK_TOK_TIK_TOK_TRAFFIC_MONITOR_PATH = 287
    TIK_TOK_TIK_TOK_TRAFFIC_MONITOR_RULE = 288
    TIK_TOK_TIK_TOK_USER_GROWTH_ON_BOARDING = 289
    TIK_TOK_TIK_TOK_USER_GROWTH_INCENTIVE_GROWTH = 290
    TIK_TOK_TIK_TOK_USER_GROWTH_AMPLIFY = 291
    TIK_TOK_TIK_TOK_USER_GROWTH_SHARING = 292
    TIK_TOK_TIK_TOK_USER_GROWTH_PUSH = 293
    TIK_TOK_TIK_TOK_USER_GROWTH_EMAIL = 294
    TIK_TOK_TIK_TOK_USER_GROWTH_GAM_IF_I_CATION = 295
    TIK_TOK_TIK_TOK_USER_GROWTH_SEO = 296
    TIK_TOK_TIK_TOK_USER_GROWTH_WEB_APP = 297
    TIK_TOK_TIK_TOK_USER_GROWTH_TIK_TOK_TV = 298
    TIK_TOK_TIK_TOK_USER_GROWTH_QA = 299
    TIK_TOK_TIK_TOK_EXP_DATA_PLATFORM_MONITOR = 300
    TIK_TOK_TIK_TOK_EXP_DATA_PLATFORM_DATA_SOURCE_NAME = 301
    TIK_TOK_TIK_TOK_JIRA_ISSUE_INFO = 302
    TIK_TOK_TIK_TOK_SAMI_PLATFORM_BPM = 303
    TIK_TOK_TIK_TOK_SAMI_PLATFORM_EMPLOYEE = 304
    TIK_TOK_TIK_TOK_SAMI_PLATFORM_DEVO_PS = 305
    TIK_TOK_TIK_TOK_SAMI_PLATFORM_COMMON_PARAM = 306
    TIK_TOK_TIK_TOK_BYTE_STATE_SCENE = 307
    TIK_TOK_TIK_TOK_BYTE_STATE_TASK = 308
    TIK_TOK_TIK_TOK_HASH_TAG_HASH_TAG_CHARACTERISTICS = 309
    TIK_TOK_TIK_TOK_HASH_TAG_ITEM_CHARACTERISTICS = 310
    TIK_TOK_TIK_TOK_DATA_INVENTORY_SAMPLING = 311
    TIK_TOK_TIK_TOK_DATA_INVENTORY_DATA_DISCOVERY = 312
    TIK_TOK_TIK_TOK_DATA_INVENTORY_PLATFORM = 313
    TIK_TOK_TIK_TOK_DATA_INVENTORY_DATA_LINEAGE = 314
    TIK_TOK_TIK_TOK_COPYRIGHT_APPEAL = 315
    TIK_TOK_TIK_TOK_COPYRIGHT_ACTION = 316
    TIK_TOK_TIK_TOK_COPYRIGHT_MATCH = 317
    TIK_TOK_TIK_TOK_COPYRIGHT_EVENT = 318
    TIK_TOK_TIK_TOK_COPYRIGHT_AUDIT = 319
    TIK_TOK_TIK_TOK_MONEY_PLATFORM_MERCHANTS_DATA = 320
    TIK_TOK_TIK_TOK_MONEY_PLATFORM_ORDER = 321
    TIK_TOK_TIK_TOK_SOCIAL_PROFILE_USER_PROFILE_VIEWS = 322
    TIK_TOK_TIK_TOK_SOCIAL_PROFILE_THIRD_PARTY_ACCOUNTS = 323
    TIK_TOK_TIK_TOK_SOCIAL_PROFILE_USER_PROFILE = 324
    TIK_TOK_TIK_TOK_SOCIAL_FRIEND_FEED = 325
    TIK_TOK_TIK_TOK_MAGIC = 326
    TIK_TOK_TIK_TOK_DATA_ACCESS_CONTROL_ILLEGAL_ACCESS_EVENT = 327
    TIK_TOK_TIK_TOK_STARLING = 328
    TIK_TOK_TIK_TOK_PRIVACY_SETTINGS = 329
    TIK_TOK_TIK_TOK_PRODUCT_PRIVACY_COMPLIANCE_SETTINGS = 330
    TIK_TOK_TIK_TOK_PRODUCT_PRIVACY_INTERACTION_CONTROL = 331
    TIK_TOK_TIK_TOK_PRODUCT_PRIVACY_DATA_CONTROL = 332
    TIK_TOK_TIK_TOK_PRODUCT_PRIVACY_PRIVACY_AWARENESS = 333
    TIK_TOK_TIK_TOK_PNS_TOOLBOX_TEST_ACCOUNT_OPERATION_STATUS = 334
    TIK_TOK_TIK_TOK_TS_M_DISPATCH_PLAN = 335
    TIK_TOK_TIK_TOK_TICKER_TASK = 336
    TIK_TOK_TIK_TOK_TICKER_INSTANCE = 337
    TIK_TOK_TIK_TOK_TICKER_PLATFORM = 338
    TIK_TOK_TIK_TOK_SOCIAL_NOW_NOW_OUT_BOX = 339
    TIK_TOK_TIK_TOK_SOCIAL_NOW_NOW_INTERACTION_INFO = 340
    TIK_TOK_TIK_TOK_LIVE_ECOS_PUNISH_CENTER = 341
    TIK_TOK_TIK_TOK_USER_GROWTH_INCENTIVE_REWARD = 342
    TIK_TOK_TIK_TOK_USER_GROWTH_INCENTIVE_USER_GROUP = 343
    TIK_TOK_TIK_TOK_USER_GROWTH_INCENTIVE_INCENTIVE_CONFIG = 344
    TIK_TOK_TIK_TOK_USER_GROWTH_INCENTIVE_USER_CROWD = 345
    TIK_TOK_TIK_TOK_USER_GROWTH_SHARING_TIK_TOK_CODE = 346
    TIK_TOK_TIK_TOK_USER_GROWTH_SHARING_WATERMARK_FEATURE = 347
    TIK_TOK_TIK_TOK_USER_GROWTH_RECOMMEND_USER_BE_HA_IVER = 348
    TIK_TOK_TIK_TOK_USER_GROWTH_USER_CARRIER_FLOW_USER_CARRIER_FLOW_RECORD = 349
    TIK_TOK_TIK_TOK_USER_GROWTH_ACTIVITY_ZERO_RATING_USER_ACTIVITY_INFO = 350
    TIK_TOK_TIK_TOK_USER_GROWTH_ACTIVITY_ZERO_RATING_USER_STATUS = 351
    TIK_TOK_TIK_TOK_USER_GROWTH_ACTIVITY_ZERO_RATING_ACTIVITY_INFO = 352
    TIK_TOK_TIK_TOK_USER_GROWTH_ACTIVITY_ZERO_RATING_GIFT_INFO = 353
    TIK_TOK_TIK_TOK_USER_GROWTH_ACTIVITY_ZERO_RATING_AGE_INFO = 354
    TIK_TOK_TIK_TOK_USER_GROWTH_ACTIVITY_ZERO_RATING_ACTIVITY_CONFIG = 355
    TIK_TOK_TIK_TOK_USER_GROWTH_ACTIVITY_ZERO_RATING_USER_INFO = 356
    TIK_TOK_TIK_TOK_USER_GROWTH_EDM_SUBSCRIBE_INFO = 357
    TIK_TOK_TIK_TOK_USER_GROWTH_EDM_SUBSCRIBE_EVENT = 358
    TIK_TOK_TIK_TOK_USER_GROWTH_EDM_EMAIL_SENT_EVENT = 359
    TIK_TOK_TIK_TOK_USER_GROWTH_GAM_IF_I_CATION_GOG_USER_GAMING_INFO = 360
    TIK_TOK_TIK_TOK_USER_GROWTH_GAM_IF_I_CATION_GOG_CONFIG = 361
    TIK_TOK_TIK_TOK_FUND_SECURITY_SPACE = 362
    TIK_TOK_TIK_TOK_FUND_SECURITY_DATA_SOURCE = 363
    TIK_TOK_TIK_TOK_FUND_SECURITY_AGGREGATION_TASK = 364
    TIK_TOK_TIK_TOK_FUND_SECURITY_CHECK_RULE = 365
    TIK_TOK_TIK_TOK_FUND_SECURITY_CHECK_CASE = 366
    TIK_TOK_TIK_TOK_FUND_SECURITY_CANVAS = 367
    TIK_TOK_TIK_TOK_FUND_SECURITY_TASK = 368
    TIK_TOK_TIK_TOK_FUND_SECURITY_RISK = 369
    TIK_TOK_TIK_TOK_FUND_SECURITY_ALARM = 370
    TIK_TOK_TIK_TOK_FUND_SECURITY_PRODUCT_LINE = 371
    TIK_TOK_TIK_TOK_FUND_SECURITY_MONITOR = 372
    TIK_TOK_TIK_TOK_FUND_SECURITY_PAGE = 373
    TIK_TOK_TIK_TOK_FUND_SECURITY_CONFIG = 374
    TIK_TOK_TIK_TOK_FUND_SECURITY_PLATFORM_USER = 375
    TIK_TOK_TIK_TOK_USER_GROWTH_TOUCH_POINT = 376
    TIK_TOK_TIK_TOK_CO_GOS_TASK_INFO = 377
    TIK_TOK_TIK_TOK_LIVE_GAME_TAG = 378
    TIK_TOK_TIK_TOK_LIVE_GAME_TC_S = 379
    TIK_TOK_TIK_TOK_LIVE_GAME_BUSINESS = 380
    TIK_TOK_TIK_TOK_LIVE_GAME_GAMEPLAY = 381
    TIK_TOK_TIK_TOK_LIVE_GAME_PARTNERSHIP = 382
    TIK_TOK_TIK_TOK_LIVE_GAME_PLATFORM = 383
    TIK_TOK_INFRASTRUCTURE_BPM_API_SERVER = 384
    TIK_TOK_INFRASTRUCTURE_BYTE_TREE_GATEWAY = 385
    TIK_TOK_INFRASTRUCTURE_ELASTIC_SEARCH_DATA_PALACE = 386
    TIK_TOK_INFRASTRUCTURE_METRICS_MOP = 387
    TIK_TOK_INFRASTRUCTURE_METRICS_QUERY_PROXY = 388
    TIK_TOK_INFRASTRUCTURE_METRICS_QUERY = 389
    TIK_TOK_INFRASTRUCTURE_METRICS_TS_DC = 390
    TIK_TOK_INFRASTRUCTURE_METRICS_ARE_STOR = 391
    TIK_TOK_INFRASTRUCTURE_METRICS_CONSUMER = 392
    TIK_TOK_INFRASTRUCTURE_METRICS_P_RESHUFFLE = 393
    TIK_TOK_INFRASTRUCTURE_METRICS_PRODUCER = 394
    TIK_TOK_INFRASTRUCTURE_METRICS_MS_2 = 395
    TIK_TOK_INFRASTRUCTURE_METRICS_SUGGEST = 396
    TIK_TOK_INFRASTRUCTURE_METRICS_COORDINATOR = 397
    TIK_TOK_INFRASTRUCTURE_SPA_AS_SOPS = 398
    TIK_TOK_INFRASTRUCTURE_SPA_AS_CM_DB = 399
    TIK_TOK_INFRASTRUCTURE_STREAM_LOG_MOP = 400
    TIK_TOK_INFRASTRUCTURE_STREAM_LOG_QUERY = 401
    TIK_TOK_INFRASTRUCTURE_TAO_PA_AS = 402
    TIK_TOK_INFRASTRUCTURE_BYTE_DOC_BYTE_DOC_PLATFORM = 403
    TIK_TOK_INFRASTRUCTURE_BYTE_DRIVE_BYTE_DRIVE_OPS = 404
    TIK_TOK_INFRASTRUCTURE_BYTE_GRAPH_GRAPH_STUDIO = 405
    TIK_TOK_INFRASTRUCTURE_BYTE_GRAPH_SERVER = 406
    TIK_TOK_INFRASTRUCTURE_BYTE_KV_S_RE_PLATFORM = 407
    TIK_TOK_INFRASTRUCTURE_BYTE_KV_USER_PLATFORM = 408
    TIK_TOK_INFRASTRUCTURE_BYTE_STORE_HORUS = 409
    TIK_TOK_INFRASTRUCTURE_CACHE_A_BASE = 410
    TIK_TOK_INFRASTRUCTURE_CACHE_RED_IS = 411
    TIK_TOK_INFRASTRUCTURE_CACHE_A_CDT_S = 412
    TIK_TOK_INFRASTRUCTURE_HDF_S_INSIGHT = 413
    TIK_TOK_INFRASTRUCTURE_HDF_S_S_REPORT_AL = 414
    TIK_TOK_INFRASTRUCTURE_HDF_S_THRALL = 415
    TIK_TOK_INFRASTRUCTURE_HDF_S_L_CM = 416
    TIK_TOK_INFRASTRUCTURE_HDF_S_USER_PORTAL = 417
    TIK_TOK_INFRASTRUCTURE_HDF_S_MIGRATION = 418
    TIK_TOK_INFRASTRUCTURE_RDS_D_BUS = 419
    TIK_TOK_INFRASTRUCTURE_RDS_RDS_PLATFORM = 420
    TIK_TOK_INFRASTRUCTURE_RDS_D_SYNC_ER = 421
    TIK_TOK_INFRASTRUCTURE_RDS_DRC = 422
    TIK_TOK_INFRASTRUCTURE_S_RE_CN_CP = 423
    TIK_TOK_INFRASTRUCTURE_TO_S_S_RE_PLAT_FROM = 424
    TIK_TOK_INFRASTRUCTURE_BYTE_QUOTA_BYTE_QUOTA = 425
    TIK_TOK_INFRASTRUCTURE_CR_ON_JOB_CR_ON_JOB = 426
    TIK_TOK_INFRASTRUCTURE_FA_AS_FUNCTIONS = 427
    TIK_TOK_INFRASTRUCTURE_RELEASE_MANAGER_RELEASE_MANAGER = 428
    TIK_TOK_INFRASTRUCTURE_SERVICE_MESH_CP = 429
    TIK_TOK_INFRASTRUCTURE_SERVICE_MESH_BYTE_MESH_PLATFORM = 430
    TIK_TOK_INFRASTRUCTURE_T_CC_API = 431
    TIK_TOK_INFRASTRUCTURE_T_CE_T_CE_PLATFORM = 432
    TIK_TOK_INFRASTRUCTURE_F_LINK_VE_STACK = 433
    TIK_TOK_INFRASTRUCTURE_I_A_AS_VE_STACK = 435
    TIK_TOK_INFRASTRUCTURE_I_A_AS_SABER = 436
    TIK_TOK_INFRASTRUCTURE_K_8_S_DISCERN = 437
    TIK_TOK_INFRASTRUCTURE_KAFKA_CONFIG_CENTER = 438
    TIK_TOK_INFRASTRUCTURE_KAFKA_USER_PLATFORM = 439
    TIK_TOK_INFRASTRUCTURE_LOG_HOUSE_LOG_HOUSE_MASTER = 440
    TIK_TOK_INFRASTRUCTURE_YARN_YAO_P = 441
    TIK_TOK_INFRASTRUCTURE_YARN_HAD_OOP_YARN = 442
    TIK_TOK_INFRASTRUCTURE_YARN_YA_OPS_RE = 443
    TIK_TOK_INFRASTRUCTURE_YARN_PLATFORM = 444
    TIK_TOK_INFRASTRUCTURE_ZOOKEEPER_Z_K_PLATFORM = 445
    TIK_TOK_INFRASTRUCTURE_BYTE_CLOUD_SERVICE_MANAGER = 446
    TIK_TOK_INFRASTRUCTURE_BYTE_CLOUD_CLOUD_PAGE = 447
    TIK_TOK_INFRASTRUCTURE_BYTE_CLOUD_OPEN_API = 448
    TIK_TOK_INFRASTRUCTURE_BYTE_CLOUD_IAM = 449
    TIK_TOK_INFRASTRUCTURE_BYTE_COPY_API_SERVER = 450
    TIK_TOK_INFRASTRUCTURE_BYTE_CYCLE_T_CC = 451
    TIK_TOK_INFRASTRUCTURE_BYTE_CYCLE_PROJECT = 452
    TIK_TOK_INFRASTRUCTURE_BYTE_CYCLE_PIPELINE = 453
    TIK_TOK_INFRASTRUCTURE_BYTE_CYCLE_WORK_FLOW = 454
    TIK_TOK_INFRASTRUCTURE_BYTE_CYCLE_FE_PROJECT = 455
    TIK_TOK_INFRASTRUCTURE_BYTE_CYCLE_CR_ON_JOB_FA_AS = 456
    TIK_TOK_INFRASTRUCTURE_BYTE_CYCLE_CONTINUOUS_INTEGRATION = 457
    TIK_TOK_INFRASTRUCTURE_BYTE_CYCLE_RELEASE_TRAIN = 458
    TIK_TOK_INFRASTRUCTURE_BYTE_MOCK_MOCK_HUB = 459
    TIK_TOK_INFRASTRUCTURE_M_Q_OP_PLATFORM = 460
    TIK_TOK_INFRASTRUCTURE_M_Q_USER_PLATFORM = 461
    TIK_TOK_INFRASTRUCTURE_ROCKET_M_Q = 462
    TIK_TOK_INFRASTRUCTURE_NEPTUNE_GOVERN = 463
    TIK_TOK_INFRASTRUCTURE_EVENT_BUS_PLATFORM = 464
    TIK_TOK_INFRASTRUCTURE_EVENT_BUS_MDS = 465
    TIK_TOK_INFRASTRUCTURE_ARGOS_ARGOS = 466
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_SPACE = 467
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_MODULE = 468
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_ASPECT = 469
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_METRICS = 470
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_C_LIAM = 471
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_TIME_SERIES = 472
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_TAGS = 473
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_MONITOR = 474
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_ALERT = 475
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_INDICATOR = 476
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_CHECK_RESULT = 477
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_SERVICE_BASE_INFO = 478
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_DASHBOARD = 479
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_SLO = 480
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_TRACE = 481
    TIK_TOK_INFRASTRUCTURE_WATCHMAN_TOPOLOGY = 482
    TIK_TOK_INFRASTRUCTURE_MIS_SITE_IN_FOR_PC_INFO = 483
    TIK_TOK_INFRASTRUCTURE_MIS_SITE_IN_FOR_PC_INTERFACE = 484
    TIK_TOK_INFRASTRUCTURE_MIS_SITE_INFO_MOCK_DATA = 485
    TIK_TOK_INFRASTRUCTURE_MIS_SITE_INFO_SQL_INFO = 486
    TIK_TOK_INFRASTRUCTURE_MIS_SITE_INFO_SQL_MODEL = 487
    TIK_TOK_INFRASTRUCTURE_MIS_SITE_INFO_HOST_INFO = 488
    TIK_TOK_INFRASTRUCTURE_MIS_SITE_INFO_MATERIAL = 489
    TIK_TOK_INFRASTRUCTURE_MIS_SITE_INFO_API_INFO = 490
    TIK_TOK_INFRASTRUCTURE_MIS_SITE_INFO_COMPONENT_INFO = 491
    TIK_TOK_INFRASTRUCTURE_MIS_SITE_INFO_COMPONENT_MIX_IN = 492
    TIK_TOK_INFRASTRUCTURE_MIS_SITE_INFO_GROUP_INFO = 493
    TIK_TOK_INFRASTRUCTURE_MIS_PAGE_INFO_PAGE_DETAIL = 494
    TIK_TOK_INFRASTRUCTURE_MIS_PAGE_INFO_OPERATING_RECORD = 495
    TIK_TOK_INFRASTRUCTURE_MIS_PAGE_INFO_SCHEMA_INFO = 496
    TIK_TOK_INFRASTRUCTURE_MIS_USER_INFO_USER_FAVOR = 497
    TIK_TOK_INFRASTRUCTURE_MIS_USER_INFO_ROLE = 498
    TIK_TOK_INFRASTRUCTURE_FRAMEWORK_RPC = 499
    TIK_TOK_INFRASTRUCTURE_FRAMEWORK_HTTP = 500
    TIK_TOK_INFRASTRUCTURE_N_IFF_LER_DETECTOR_TASK = 501
    TIK_TOK_INFRASTRUCTURE_N_IFF_LER_DETECTION_ENTITY = 502
    TIK_TOK_INFRASTRUCTURE_N_IFF_LER_DETECTION_RULE = 503
    TIK_TOK_INFRASTRUCTURE_TEF_SERVER = 504
    TIK_TOK_INFRASTRUCTURE_TEF_ADAPTOR = 505
    TIK_TOK_INFRASTRUCTURE_SPACE_X_H_BASE = 506
    TIK_TOK_INFRASTRUCTURE_FE_DEPLOY_WEB_SERVER = 507
    TIK_TOK_INFRASTRUCTURE_FE_DEPLOY_CONTROLLER = 508
    TIK_TOK_INFRASTRUCTURE_FE_DEPLOY_BUSINESS = 509
    TIK_TOK_INFRASTRUCTURE_FE_DEPLOY_CD_N = 510
    TIK_TOK_INFRASTRUCTURE_EN_V_GATEWAY = 511
    TIK_TOK_INFRASTRUCTURE_EN_V_PLATFORM = 512
    TIK_TOK_INFRASTRUCTURE_EN_V_ATOM = 513
    TIK_TOK_INFRASTRUCTURE_DES_M_Q = 514
    TIK_TOK_INFRASTRUCTURE_DES_DEC_C = 515
    TIK_TOK_INFRASTRUCTURE_DES_RPC = 516
    TIK_TOK_INFRASTRUCTURE_DATA_EYES_INFO = 517
    TIK_TOK_INFRASTRUCTURE_DATA_EYES_CONF = 518
    TIK_TOK_INFRASTRUCTURE_DATA_EYES_STATUS = 519
    TIK_TOK_INFRASTRUCTURE_DATA_EYES_RUNNING_INFO = 520
    TIK_TOK_INFRASTRUCTURE_DATA_EYES_RESOURCE = 521
    TIK_TOK_INFRASTRUCTURE_DATA_EYES_TICKET_INFO = 522
    TIK_TOK_INFRASTRUCTURE_DATA_EYES_DATABASE_INFO = 523
    TIK_TOK_INFRASTRUCTURE_TO_S_USER_PLAT_FROM = 524
    TIK_TOK_INFRASTRUCTURE_BFC_ADMIN = 525
    TIK_TOK_INFRASTRUCTURE_DEVS_RE_ADMIN = 526
    TIK_TOK_INFRASTRUCTURE_BATCH_SPARK = 527
    TIK_TOK_INFRASTRUCTURE_BATCH_MAP_REDUCE = 528
    TIK_TOK_INFRASTRUCTURE_BATCH_PRIMUS = 529
    TIK_TOK_INFRASTRUCTURE_S_LARD_ARAP_P_SYMBOL = 530
    TIK_TOK_INFRASTRUCTURE_S_LARD_ARAP_P_LOG = 531
    TIK_TOK_INFRASTRUCTURE_S_LARD_ARAP_P_PLATFORM_USER = 532
    TIK_TOK_INFRASTRUCTURE_S_LARD_ARAP_P_AGGREGATION_DATA = 533
    TIK_TOK_INFRASTRUCTURE_S_LARD_ARAP_P_SYSTEM_CONFIG = 534
    TIK_TOK_INFRASTRUCTURE_JANUS_DATA_PLANE = 535
    TIK_TOK_INFRASTRUCTURE_JANUS_PORTAL = 536
    TIK_TOK_INFRASTRUCTURE_LI_DAR_PLATFORM = 537
    TIK_TOK_INFRASTRUCTURE_S_LARD_AR_BROWSER_METADATA = 538
    TIK_TOK_INFRASTRUCTURE_S_LARD_AR_BROWSER_AGGREGATION_DATA = 539
    TIK_TOK_INFRASTRUCTURE_S_LARD_AR_BROWSER_SYSTEM_CONFIG = 540
    TIK_TOK_INFRASTRUCTURE_S_LARD_AR_BROWSER_DETAIL = 541
    TIK_TOK_INFRASTRUCTURE_GOOFY_WEB_DEPLOY = 542
    TIK_TOK_INFRASTRUCTURE_GOOFY_WEB_RECORD_DATA = 543
    TIK_TOK_INFRASTRUCTURE_GOOFY_WEB_CHECKPOINT_DATA = 544
    TIK_TOK_INFRASTRUCTURE_GOOFY_NODE_DEPLOY_DATA = 545
    TIK_TOK_INFRASTRUCTURE_GOOFY_NODE_RECORD_DATA = 546
    TIK_TOK_INFRASTRUCTURE_GOOFY_NODE_CHECKPOINT_DATA = 547
    TIK_TOK_INFRASTRUCTURE_ROS_API_SERVER = 548
    TIK_TOK_INFRASTRUCTURE_U_8_S_SERVER = 549
    TIK_TOK_INFRASTRUCTURE_BKE_SERVER = 550
    TIK_TOK_INFRASTRUCTURE_BYTE_P_2_P_SERVER = 551
    TIK_TOK_INFRASTRUCTURE_BYTES_D_PLATFORM = 552
    TIK_TOK_INFRASTRUCTURE_BYTE_FLOW_API_SERVER = 553
    TIK_TOK_INFRASTRUCTURE_JAVA_MYSQL = 554
    TIK_TOK_INFRASTRUCTURE_JAVA_RED_IS = 555
    TIK_TOK_INFRASTRUCTURE_JAVA_T_CC = 556
    TIK_TOK_INFRASTRUCTURE_JAVA_HTTP_CLIENT = 557
    TIK_TOK_INFRASTRUCTURE_JAVA_RPC = 558
    TIK_TOK_INFRASTRUCTURE_JAVA_HTTP = 559
    TIK_TOK_INFRASTRUCTURE_JAVA_TO_S = 560
    TIK_TOK_INFRASTRUCTURE_JAVA_ID_GENERATOR = 561
    TIK_TOK_INFRASTRUCTURE_ON_CALL_PLATFORM_SERVER = 562
    TIK_TOK_INFRASTRUCTURE_PEN_DAH_FONTS = 563
    TIK_TOK_INFRASTRUCTURE_HYPER_SEARCH_PLATFORM = 564
    TIK_TOK_INFRASTRUCTURE_SPACE_X_MACHINE_CENTER = 565
    TIK_TOK_INFRASTRUCTURE_SPACE_X_CHANGE_CONTROL = 566
    TIK_TOK_INFRASTRUCTURE_SPACE_X_CONFIG_CENTER = 567
    TIK_TOK_INFRASTRUCTURE_SPACE_X_EVENT_CENTER = 568
    TIK_TOK_INFRASTRUCTURE_SPACE_X_MONITOR_DASHBOARD = 569
    TIK_TOK_INFRASTRUCTURE_SPACE_X_ALARM_MANAGER = 570
    TIK_TOK_INFRASTRUCTURE_SPACE_X_SERVICE_CENTER = 571
    TIK_TOK_INFRASTRUCTURE_SPACE_X_C_ICD = 572
    TIK_TOK_INFRASTRUCTURE_SPACE_X_CM_DB = 573
    TIK_TOK_INFRASTRUCTURE_EVE_HTTP = 574
    TIK_TOK_INFRASTRUCTURE_LUB_AN_LUB_AN_PLATFORM = 575
    TIK_TOK_INFRASTRUCTURE_SPACE_XFE_CONFIG_CENTER = 576
    TIK_TOK_INFRASTRUCTURE_STARRY_BUTTER_OPEN = 577
    TIK_TOK_INFRASTRUCTURE_STARRY_STARRY_OPEN = 578
    TIK_TOK_INFRASTRUCTURE_BY_TEST_OPEN_API = 579
    TIK_TOK_INFRASTRUCTURE_ERROR_DETECTOR_ERROR_LIST = 580
    TIK_TOK_INFRASTRUCTURE_BYTE_CHAOS_EXPERIMENT = 581
    TIK_TOK_MONET_IZ_ATION_AD_BASE_AD_GROUP = 582
    TIK_TOK_MONET_IZ_ATION_AD_BASE_AD = 583
    TIK_TOK_MONET_IZ_ATION_AD_BASE_CAMPAIGN = 584
    TIK_TOK_MONET_IZ_ATION_AD_BASE_ADVERTISER = 585
    TIK_TOK_MONET_IZ_ATION_AD_BASE_DELIVERY_OPTIMIZATION_SETTING = 586
    TIK_TOK_MONET_IZ_ATION_AD_BASE_BASIC_SETTING = 587
    TIK_TOK_MONET_IZ_ATION_AD_BASE_ORGANIZATION = 588
    TIK_TOK_MONET_IZ_ATION_AD_BASE_TARGETING = 589
    TIK_TOK_MONET_IZ_ATION_AD_BASE_BUSINESS_PRODUCT = 590
    TIK_TOK_MONET_IZ_ATION_AD_BASE_DELIVERY_SYSTEM_COMPONENT = 591
    TIK_TOK_MONET_IZ_ATION_AD_BASE_INVENTORY = 592
    TIK_TOK_MONET_IZ_ATION_AD_BASE_USER_AUTHORIZATION = 593
    TIK_TOK_MONET_IZ_ATION_VERTICAL_VERTICAL = 594
    TIK_TOK_MONET_IZ_ATION_VERTICAL_ITEM = 595
    TIK_TOK_MONET_IZ_ATION_VERTICAL_CATALOG = 596
    TIK_TOK_MONET_IZ_ATION_VERTICAL_COMMERCE_PLATFORM = 597
    TIK_TOK_MONET_IZ_ATION_VERTICAL_SHOP = 598
    TIK_TOK_MONET_IZ_ATION_PROMOTE_ORDER = 599
    TIK_TOK_MONET_IZ_ATION_PROMOTE_COUPON = 600
    TIK_TOK_MONET_IZ_ATION_PROMOTE_VIDEO = 601
    TIK_TOK_MONET_IZ_ATION_PROMOTE_MARKETING_CAMPAIGN = 602
    TIK_TOK_MONET_IZ_ATION_PROMOTE_MESSAGE = 603
    TIK_TOK_MONET_IZ_ATION_PROMOTE_TOAST = 604
    TIK_TOK_MONET_IZ_ATION_CREATIVE_BASE_INFO = 605
    TIK_TOK_MONET_IZ_ATION_CREATIVE_MATERIAL = 606
    TIK_TOK_MONET_IZ_ATION_CREATIVE_VIDEO = 607
    TIK_TOK_MONET_IZ_ATION_CREATIVE_MUSIC = 608
    TIK_TOK_MONET_IZ_ATION_CREATIVE_TEXT = 609
    TIK_TOK_MONET_IZ_ATION_CREATIVE_ELEMENT = 610
    TIK_TOK_MONET_IZ_ATION_CREATIVE_TEMPLATE = 611
    TIK_TOK_MONET_IZ_ATION_CREATIVE_CREATIVE_TOOL = 612
    TIK_TOK_MONET_IZ_ATION_CREATIVE_PAGE = 613
    TIK_TOK_MONET_IZ_ATION_CREATIVE_PARTNER = 614
    TIK_TOK_MONET_IZ_ATION_CREATIVE_LEAD = 615
    TIK_TOK_MONET_IZ_ATION_CREATIVE_FORMAT = 616
    TIK_TOK_MONET_IZ_ATION_CREATIVE_CREATIVE_PRODUCT = 617
    TIK_TOK_MONET_IZ_ATION_TCM_ORDER = 618
    TIK_TOK_MONET_IZ_ATION_TCM_CLIENT = 619
    TIK_TOK_MONET_IZ_ATION_TCM_CREATOR = 620
    TIK_TOK_MONET_IZ_ATION_TCM_VIDEO = 621
    TIK_TOK_MONET_IZ_ATION_TCM_INVITATION = 622
    TIK_TOK_MONET_IZ_ATION_BUSINESS_ACCOUNT_BASE_INFO = 623
    TIK_TOK_MONET_IZ_ATION_BUSINESS_ACCOUNT_VIDEO = 624
    TIK_TOK_MONET_IZ_ATION_BUSINESS_ACCOUNT_DIRECT_MESSAGE = 625
    TIK_TOK_MONET_IZ_ATION_BUSINESS_ACCOUNT_NOTICE = 626
    TIK_TOK_MONET_IZ_ATION_BUSINESS_ACCOUNT_MUSIC = 627
    TIK_TOK_MONET_IZ_ATION_BUSINESS_ACCOUNT_LIVE_ROOM = 628
    TIK_TOK_MONET_IZ_ATION_AD_EXPERIENCE_ITEM = 629
    TIK_TOK_MONET_IZ_ATION_AD_EXPERIENCE_USER = 630
    TIK_TOK_MONET_IZ_ATION_AD_EXPERIENCE_FEEDBACK = 631
    TIK_TOK_MONET_IZ_ATION_AD_EXPERIENCE_COMMENT = 632
    TIK_TOK_MONET_IZ_ATION_AD_EXPERIENCE_SURVEY = 633
    TIK_TOK_MONET_IZ_ATION_MEASUREMENT_PIXEL = 634
    TIK_TOK_MONET_IZ_ATION_MEASUREMENT_STUDY = 635
    TIK_TOK_MONET_IZ_ATION_MEASUREMENT_VENDOR = 636
    TIK_TOK_MONET_IZ_ATION_MEASUREMENT_AD_SIGNAL = 637
    TIK_TOK_MONET_IZ_ATION_MEASUREMENT_PRIVATE_MEASUREMENT = 638
    TIK_TOK_MONET_IZ_ATION_MEASUREMENT_PIPELINE = 639
    TIK_TOK_MONET_IZ_ATION_MEASUREMENT_PIPELINE_INSTANCE = 640
    TIK_TOK_MONET_IZ_ATION_MEASUREMENT_TASK = 641
    TIK_TOK_MONET_IZ_ATION_MEASUREMENT_TASK_INSTANCE = 642
    TIK_TOK_MONET_IZ_ATION_MEASUREMENT_VARIABLE = 643
    TIK_TOK_MONET_IZ_ATION_MEASUREMENT_ERROR_LOG = 644
    TIK_TOK_MONET_IZ_ATION_MARKETING_API_DEVELOPER_API = 645
    TIK_TOK_MONET_IZ_ATION_MARKETING_API_DEVELOPER = 646
    TIK_TOK_MONET_IZ_ATION_MARKETING_API_BUSINESS_ENTITY = 647
    TIK_TOK_MONET_IZ_ATION_MARKETING_API_PARTNER_MATERIAL = 648
    TIK_TOK_MONET_IZ_ATION_MARKETING_API_API_ENDPOINT = 649
    TIK_TOK_MONET_IZ_ATION_INTEGRITY_AUDITOR = 650
    TIK_TOK_MONET_IZ_ATION_INTEGRITY_INSPECTOR = 651
    TIK_TOK_MONET_IZ_ATION_INTEGRITY_AUDIT_QUEUE = 652
    TIK_TOK_MONET_IZ_ATION_INTEGRITY_POLICY = 653
    TIK_TOK_MONET_IZ_ATION_INTEGRITY_RISK_FACTOR = 654
    TIK_TOK_MONET_IZ_ATION_INTEGRITY_USER_FEEDBACK = 655
    TIK_TOK_MONET_IZ_ATION_SEARCH_ADS_QUERY = 656
    TIK_TOK_MONET_IZ_ATION_SEARCH_ADS_KEYWORD = 657
    TIK_TOK_MONET_IZ_ATION_SEARCH_ADS_SEARCH_SOURCE = 658
    TIK_TOK_MONET_IZ_ATION_SEARCH_ADS_SEARCH_RESULTS = 659
    TIK_TOK_MONET_IZ_ATION_EXPERIMENT_EXPERIMENT_GROUP = 660
    TIK_TOK_MONET_IZ_ATION_EXPERIMENT_EXPERIMENT_BUCKET = 661
    TIK_TOK_MONET_IZ_ATION_EXPERIMENT_TRAFFIC_LABEL = 662
    TIK_TOK_MONET_IZ_ATION_GROWTH_TRAFFIC_TYPE = 663
    TIK_TOK_MONET_IZ_ATION_GROWTH_TRAFFIC_SOURCE = 664
    TIK_TOK_MONET_IZ_ATION_GROWTH_MARKETING_CAMPAIGN = 665
    TIK_TOK_MONET_IZ_ATION_GROWTH_ACTION = 666
    TIK_TOK_MONET_IZ_ATION_GROWTH_TOUCH = 667
    TIK_TOK_MONET_IZ_ATION_GROWTH_CUSTOMIZED_AUDIENCE = 668
    TIK_TOK_MONET_IZ_ATION_GROWTH_EM_POLY_EE = 669
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_CUSTOMER = 670
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_LEAD = 671
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_OPPORTUNITY = 672
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_EMPLOYEE = 673
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_DEPARTMENT = 674
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_INDUSTRY = 675
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_CITY = 676
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_CONTRACT = 677
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_ORDER = 678
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_IN_VOICE = 679
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_STATEMENT = 680
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_SHOWCASE = 681
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_COURSE = 682
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_LEARNING_RECORD = 683
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_PAYMENT = 684
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_TAX = 685
    TIK_TOK_MONET_IZ_ATION_CR_MOR_MMM_AGENT = 686
    TIK_TOK_MONET_IZ_ATION_BILLING_CAPITAL_POOL = 687
    TIK_TOK_MONET_IZ_ATION_BILLING_CURRENCY = 688
    TIK_TOK_MONET_IZ_ATION_BILLING_COUPON = 689
    TIK_TOK_MONET_IZ_ATION_BILLING_BILLING_ORDER = 690
    TIK_TOK_MONET_IZ_ATION_PERFORMANCE_SERVER = 691
    TIK_TOK_MONET_IZ_ATION_RH_2_RESOURCE = 692
    TIK_TOK_MONET_IZ_ATION_RH_2_JOB_DEF = 693
    TIK_TOK_MONET_IZ_ATION_RH_2_JOB_RUN = 694
    TIK_TOK_MONET_IZ_ATION_RH_2_JOB_PRODUCT = 695
    TIK_TOK_MONET_IZ_ATION_RH_2_RAW_DATA_SET = 696
    TIK_TOK_MONET_IZ_ATION_RH_2_PACKED_DATA_SET = 697
    TIK_TOK_MONET_IZ_ATION_RH_2_RAW_MODEL = 698
    TIK_TOK_MONET_IZ_ATION_RH_2_MODEL_EVALUATION = 699
    TIK_TOK_MONET_IZ_ATION_RH_2_PIPELINE_DEF = 700
    TIK_TOK_MONET_IZ_ATION_RH_2_PIPELINE_RUN = 701
    TIK_TOK_MONET_IZ_ATION_RH_2_TRIGGER = 702
    TIK_TOK_MONET_IZ_ATION_RH_2_MODEL_STORE = 703
    TIK_TOK_MONET_IZ_ATION_RH_2_MODEL_SERVICE = 704
    TIK_TOK_MONET_IZ_ATION_RH_2_PHOTON_X_DATA_SET = 705
    TIK_TOK_MONET_IZ_ATION_RH_2_EXPERIMENT = 706
    TIK_TOK_MONET_IZ_ATION_RH_2_PROJECT = 707
    TIK_TOK_MONET_IZ_ATION_RH_2_SYSTEM = 708
    TIK_TOK_MONET_IZ_ATION_RH_2_USER = 709
    TIK_TOK_MONET_IZ_ATION_AD_FORMAT_PREVIEW = 710
    TIK_TOK_MONET_IZ_ATION_AD_FORMAT_PACK = 711
    TIK_TOK_MONET_IZ_ATION_SUPERSET = 712
    TIK_TOK_MONET_IZ_ATION_PROPHET_MONITOR_EMPLOYEE_INFO = 713
    TIK_TOK_MONET_IZ_ATION_PROPHET_MONITOR_RULE_INFO = 714
    TIK_TOK_MONET_IZ_ATION_PROPHET_MONITOR_ALERT_INFO = 715
    TIK_TOK_MONET_IZ_ATION_PROPHET_MONITOR_SCHEMA = 716
    TIK_TOK_MONET_IZ_ATION_PROPHET_MONITOR_DRUID_DATA = 717
    TIK_TOK_MONET_IZ_ATION_PROPHET_MONITOR_SY_SEN_V = 718
    TIK_TOK_MONET_IZ_ATION_PROPHET_MONITOR_CONFIG = 719
    TIK_TOK_MONET_IZ_ATION_REALTIME_ATTRIBUTION_EMPLOYEE_INFO = 720
    TIK_TOK_MONET_IZ_ATION_REALTIME_ATTRIBUTION_NAVIGATION = 721
    TIK_TOK_MONET_IZ_ATION_REALTIME_ATTRIBUTION_FLOW_CONFIG = 722
    TIK_TOK_MONET_IZ_ATION_REALTIME_ATTRIBUTION_METRICS_CONFIG = 723
    TIK_TOK_MONET_IZ_ATION_REALTIME_ATTRIBUTION_SYSTEM_EVENTS = 724
    TIK_TOK_MONET_IZ_ATION_REALTIME_ATTRIBUTION_METRICS_DATA = 725
    TIK_TOK_MONET_IZ_ATION_REALTIME_ATTRIBUTION_EMPLOYEE_PERMISSION = 726
    TIK_TOK_MONET_IZ_ATION_REALTIME_ATTRIBUTION_SYSTEM = 727
    TIK_TOK_MONET_IZ_ATION_OMEGA_RESOURCES = 728
    TIK_TOK_MONET_IZ_ATION_OMEGA_ENVIRONMENT = 729
    TIK_TOK_MONET_IZ_ATION_OMEGA_TASK = 730
    TIK_TOK_MONET_IZ_ATION_OMEGA_JOB = 731
    TIK_TOK_MONET_IZ_ATION_OMEGA_REPORT = 732
    TIK_TOK_MONET_IZ_ATION_OMEGA_MODULE = 733
    TIK_TOK_MONET_IZ_ATION_OMEGA_USER = 734
    TIK_TOK_MONET_IZ_ATION_OMEGA_PRESS = 735
    TIK_TOK_MONET_IZ_ATION_OMEGA_CAPTURE = 736
    TIK_TOK_MONET_IZ_ATION_BRAND_ADS_MISSION = 737
    TIK_TOK_MONET_IZ_ATION_BRAND_ADS_HASH_TAG = 738
    TIK_TOK_MONET_IZ_ATION_BRAND_ADS_BRAND_EFFECT = 739
    TIK_TOK_MONET_IZ_ATION_DATA_PALACE_DRUID_CLUSTER = 740
    TIK_TOK_MONET_IZ_ATION_DATA_PALACE_DRUID_CLUSTER_NODE = 741
    TIK_TOK_MONET_IZ_ATION_DATA_PALACE_DRUID_DATA_SOURCE = 742
    TIK_TOK_MONET_IZ_ATION_DATA_PALACE_DRUID_MATERIALIZED_VIEW = 743
    TIK_TOK_MONET_IZ_ATION_DATA_PALACE_DRUID_LOGICAL_VIEW = 744
    TIK_TOK_MONET_IZ_ATION_DATA_PALACE_DRUID_TICKET = 745
    TIK_TOK_MONET_IZ_ATION_DATA_PALACE_DRUID_TASK = 746
    TIK_TOK_MONET_IZ_ATION_DATA_PALACE_DRUID_INSTANCE = 747
    TIK_TOK_MONET_IZ_ATION_DATA_PALACE_DRUID_PERMISSIONS = 748
    TIK_TOK_MONET_IZ_ATION_DATA_PALACE_DRUID_DEPLOYMENT_PROCESS = 749
    TIK_TOK_MONET_IZ_ATION_DATA_PALACE_DRUID_USER = 750
    TIK_TOK_MONET_IZ_ATION_DATA_PALACE_DRUID_PARAMETER_VALIDATION = 751
    TIK_TOK_MONET_IZ_ATION_DATA_PALACE_DRUID_ADDITIONAL_INFORMATION = 752
    TIK_TOK_MONET_IZ_ATION_DATA_PALACE_DRUID_ERROR_MESSAGE = 753
    TIK_TOK_MONET_IZ_ATION_TARGETING_TARGETING = 754
    TIK_TOK_MONET_IZ_ATION_BYTE_DIFF_RESOURCES = 755
    TIK_TOK_MONET_IZ_ATION_BYTE_DIFF_ENVIRONMENT = 756
    TIK_TOK_MONET_IZ_ATION_BYTE_DIFF_TASK = 757
    TIK_TOK_MONET_IZ_ATION_BYTE_DIFF_JOB = 758
    TIK_TOK_MONET_IZ_ATION_BYTE_DIFF_REPORT = 759
    TIK_TOK_MONET_IZ_ATION_BYTE_DIFF_MODULE = 760
    TIK_TOK_MONET_IZ_ATION_BYTE_DIFF_USER = 761
    TIK_TOK_MONET_IZ_ATION_BYTE_DIFF_PRESS = 762
    TIK_TOK_MONET_IZ_ATION_BYTE_DIFF_CAPTURE = 763
    TIK_TOK_MONET_IZ_ATION_QA_FRA_TEST = 764
    TIK_TOK_MONET_IZ_ATION_CREATOR_FOR_CREATIVE_CLIENT = 765
    TIK_TOK_MONET_IZ_ATION_CREATOR_FOR_CREATIVE_CREATOR = 766
    TIK_TOK_MONET_IZ_ATION_CREATOR_FOR_CREATIVE_VIDEO = 767
    TIK_TOK_MONET_IZ_ATION_CREATOR_FOR_CREATIVE_INVITATION = 768
    TIK_TOK_MONET_IZ_ATION_COMPLIANCE_ARCH_PLATFORM = 769
    TIK_TOK_MONET_IZ_ATION_QUANTUM_TEMPLATE = 770
    TIK_TOK_MONET_IZ_ATION_QUANTUM_EMPLOYEE_INFO = 771
    TIK_TOK_MONET_IZ_ATION_QUANTUM_ENVIRONMENT = 772
    TIK_TOK_MONET_IZ_ATION_QUANTUM_RPC_TEST = 773
    TIK_TOK_MONET_IZ_ATION_QUANTUM_M_Q_TEST = 774
    TIK_TOK_MONET_IZ_ATION_QUANTUM_BPM_TICKET = 775
    TIK_TOK_MONET_IZ_ATION_QUANTUM_SQL_DIFF = 776
    TIK_TOK_MONET_IZ_ATION_BYTE_FLOW_USER = 777
    TIK_TOK_MONET_IZ_ATION_BYTE_FLOW_STATUS = 778
    TIK_TOK_MONET_IZ_ATION_BYTE_FLOW_PROJECT = 779
    TIK_TOK_MONET_IZ_ATION_BYTE_FLOW_FLOW_INFO = 780
    TIK_TOK_MONET_IZ_ATION_BYTE_FLOW_TEST_CASE = 781
    TIK_TOK_MONET_IZ_ATION_BYTE_FLOW_TEST_TASK = 782
    TIK_TOK_MONET_IZ_ATION_BYTE_FLOW_ENVIRONMENT = 783
    TIK_TOK_MONET_IZ_ATION_BYTE_FLOW_TRAFFIC = 784
    TIK_TOK_MONET_IZ_ATION_BYTE_FLOW_DIFF_TEST = 785
    TIK_TOK_MONET_IZ_ATION_GLOBAL_ADS_INFRA_ACADEMY = 786
    TIK_TOK_MONET_IZ_ATION_OCTOPUS_SYSTEM_EVENTS = 787
    TIK_TOK_MONET_IZ_ATION_OCTOPUS_METRICS_DATA = 788
    TIK_TOK_MONET_IZ_ATION_OCTOPUS_JOB_CONFIG = 789
    TIK_TOK_MONET_IZ_ATION_TARDIS_PRODUCT = 790
    TIK_TOK_MONET_IZ_ATION_TARDIS_MODULE = 791
    TIK_TOK_MONET_IZ_ATION_TARDIS_MODEL = 792
    TIK_TOK_MONET_IZ_ATION_TARDIS_LIBRA = 793
    TIK_TOK_MONET_IZ_ATION_TARDIS_ALARM = 794
    TIK_TOK_MONET_IZ_ATION_AMP_AD_BOOST = 795
    TIK_TOK_MONET_IZ_ATION_BUSINESS_CENTER_BASE_INFO = 796
    TIK_TOK_OE_C_TIK_TOK_SHOP_SHOWCASE = 797
    TIK_TOK_OE_C_TIK_TOK_SHOP_LIVE = 798
    TIK_TOK_OE_C_TIK_TOK_SHOP_ANCHOR = 799
    TIK_TOK_OE_C_TIK_TOK_SHOP_SHOP = 800
    TIK_TOK_OE_C_TIK_TOK_SHOP_REVIEW = 801
    TIK_TOK_OE_C_TIK_TOK_SHOP_PROMOTION = 802
    TIK_TOK_OE_C_TIK_TOK_SHOP_PRODUCT = 803
    TIK_TOK_OE_C_TIK_TOK_SHOP_TRADE = 804
    TIK_TOK_OE_C_TIK_TOK_SHOP_USER = 805
    TIK_TOK_OE_C_TIK_TOK_SHOP_LOGISTICS = 806
    TIK_TOK_OE_C_TIK_TOK_SHOP_GLOBAL_PRODUCT = 807
    TIK_TOK_OE_C_AFFILIATE_AUDIT = 808
    TIK_TOK_OE_C_AFFILIATE_RELATION = 809
    TIK_TOK_OE_C_AFFILIATE_PERMISSION = 810
    TIK_TOK_OE_C_AFFILIATE_ACCOUNT = 811
    TIK_TOK_OE_C_AFFILIATE_PLAN = 812
    TIK_TOK_OE_C_AFFILIATE_MARKETING = 813
    TIK_TOK_OE_C_AFFILIATE_REWARD = 814
    TIK_TOK_OE_C_AFFILIATE_PARTNER = 815
    TIK_TOK_OE_C_AUDIT_RECORD = 816
    TIK_TOK_OE_C_AUDIT_TASK = 817
    TIK_TOK_OE_C_PRODUCT_AUDIT_RECORD = 818
    TIK_TOK_OE_C_PRODUCT_AUDIT_SNAPSHOT = 819
    TIK_TOK_OE_C_PRODUCT_OUTER_PRODUCT_RELATION = 820
    TIK_TOK_OE_C_PRODUCT_PRODUCT = 821
    TIK_TOK_OE_C_PRODUCT_PRODUCT_AUDIT_VERSION = 822
    TIK_TOK_OE_C_PRODUCT_PRODUCT_LOCALIZATION = 823
    TIK_TOK_OE_C_PRODUCT_PRODUCT_OPERATION_RECORD = 824
    TIK_TOK_OE_C_PRODUCT_PRODUCT_OPERATION_RECORD_LATEST = 825
    TIK_TOK_OE_C_PRODUCT_PRODUCT_PROPERTY_RELATION = 826
    TIK_TOK_OE_C_PRODUCT_PRODUCT_SALE_STATUS = 827
    TIK_TOK_OE_C_PRODUCT_S_KU = 828
    TIK_TOK_OE_C_PRODUCT_SKUP_RICE = 829
    TIK_TOK_OE_C_PRODUCT_S_KU_PROPERTY_RELATION = 830
    TIK_TOK_OE_C_PRODUCT_GLOBAL_PRODUCT = 831
    TIK_TOK_OE_C_PRODUCT_LOCAL_PRODUCT = 832
    TIK_TOK_OE_C_SECURITY_AND_COMPLIANCE_ID_MAP = 833
    TIK_TOK_OE_C_SELLER_GLOBAL_SELLER = 834
    TIK_TOK_OE_C_SELLER_SELLER = 835
    TIK_TOK_OE_C_SELLER_ACCOUNT = 836
    TIK_TOK_OE_C_SELLER_GLOBAL_SELLER_WAREHOUSE = 837
    TIK_TOK_OE_C_SELLER_SELLER_WAREHOUSE = 838
    TIK_TOK_OE_C_SELLER_SELLER_TRADEMARK = 839
    TIK_TOK_OE_C_SELLER_SELLER_TRADEMARK_AUDIT_SNAPSHOT = 840
    TIK_TOK_OE_C_SELLER_SHOP_CODE_GENERATOR = 841
    TIK_TOK_OE_C_SELLER_GLOBAL_SELLER_TRADEMARK_AUTHORIZATION = 842
    TIK_TOK_OE_C_SELLER_SELLER_AUDIT_SHEET = 843
    TIK_TOK_OE_C_SELLER_SELLER_AUDIT_SNAPSHOT = 844
    TIK_TOK_OE_C_SELLER_SELLER_BRAND = 845
    TIK_TOK_OE_C_SELLER_SELLER_CATE_G_ROY = 846
    TIK_TOK_OE_C_SELLER_SELLER_SOURCE = 847
    TIK_TOK_OE_C_SELLER_SHOP_OV_L_RULE = 848
    TIK_TOK_OE_C_SELLER_SHOP_OV_L_STATUS = 849
    TIK_TOK_OE_C_SELLER_ASSET_WAREHOUSE_NOTIFICATION = 850
    TIK_TOK_OE_C_SELLER_ASSET_WAREHOUSE_HOLIDAY_MODE = 851
    TIK_TOK_OE_C_SELLER_ONBOARD_MAIN_FLOW = 852
    TIK_TOK_OE_C_SELLER_ONBOARD_SUB_FLOW = 853
    TIK_TOK_OE_C_SELLER_ONBOARD_DRAFT = 854
    TIK_TOK_OE_C_SELLER_MISSION_MISSION_TEMPLATE = 855
    TIK_TOK_OE_C_SELLER_MISSION_SELLER_MISSION = 856
    TIK_TOK_OE_C_STOCK_STOCK = 857
    TIK_TOK_OE_C_STOCK_REVIEW = 858
    TIK_TOK_OE_C_REVIEW_REVIEW = 859
    TIK_TOK_OE_C_PRODUCT_ASSET_CATEGORY = 860
    TIK_TOK_OE_C_PRODUCT_ASSET_PROPERTY = 861
    TIK_TOK_OE_C_PRODUCT_ASSET_TAG = 862
    TIK_TOK_OE_C_PRODUCT_ASSET_BRAND = 863
    TIK_TOK_OE_C_PRODUCT_ASSET_SIZE_CHART = 864
    TIK_TOK_OE_C_PRODUCT_TASK_TASK = 865
    TIK_TOK_OE_C_PRODUCT_OPERATION_THEME_PRODUCT_POOL = 866
    TIK_TOK_OE_C_PRODUCT_OPERATION_SELLING_POINT = 867
    TIK_TOK_OE_C_PRODUCT_OPERATION_PRODUCT_QUALITY = 868
    TIK_TOK_OE_C_PRODUCT_OPERATION_PRODUCT_RANKING = 869
    TIK_TOK_OE_C_PRODUCT_OPERATION_OPPORTUNITY_PRODUCT_POOL = 870
    TIK_TOK_OE_C_LOGISTICS_LOGISTICS_SERVICE = 871
    TIK_TOK_OE_C_LOGISTICS_WAREHOUSE = 872
    TIK_TOK_OE_C_LOGISTICS_DELIVERY_ORDER = 873
    TIK_TOK_OE_C_LOGISTICS_ALLOCATION = 874
    TIK_TOK_OE_C_LOGISTICS_PACKAGE = 875
    TIK_TOK_OE_C_LOGISTICS_PACKAGE_ITEM = 876
    TIK_TOK_OE_C_LOGISTICS_CARD_META = 877
    TIK_TOK_OE_C_LOGISTICS_RATE_CARD = 878
    TIK_TOK_OE_C_LOGISTICS_BILLING_EVENT = 879
    TIK_TOK_OE_C_LOGISTICS_SETTLEMENT = 880
    TIK_TOK_OE_C_LOGISTICS_EXPRESSION = 881
    TIK_TOK_OE_C_LOGISTICS_NETWORK = 882
    TIK_TOK_OE_C_LOGISTICS_RESTRICTION_ENGINE = 883
    TIK_TOK_OE_C_LOGISTICS_LOGISTICS_SERVICE_PROVIDER = 884
    TIK_TOK_OE_C_LOGISTICS_TICKET = 885
    TIK_TOK_OE_C_MODERATION_RECORD = 886
    TIK_TOK_OE_C_MODERATION_TASK = 887
    TIK_TOK_OE_C_PENALTY_CENTER_VIOLATION_RECORD = 888
    TIK_TOK_OE_C_PENALTY_CENTER_NAME_LIST_OF_EXEMPTION = 889
    TIK_TOK_OE_C_PENALTY_CENTER_JUDGE_RECORD = 890
    TIK_TOK_OE_C_PENALTY_CENTER_EXECUTION_RECORD = 891
    TIK_TOK_OE_C_PENALTY_CENTER_OPERATION_TICKET = 892
    TIK_TOK_OE_C_PENALTY_CENTER_APPEAL_RECORD = 893
    TIK_TOK_OE_C_NOVICE_VILLAGE_NOVICE_STATUS = 894
    TIK_TOK_OE_C_NOVICE_VILLAGE_NOVICE_PLAN = 895
    TIK_TOK_OE_C_LABEL_LABEL = 896
    TIK_TOK_OE_C_LABEL_LABEL_GROUP = 897
    TIK_TOK_OE_C_OPERATOR_SYSTEM_OP_TASK = 898
    TIK_TOK_OE_C_OPERATOR_SYSTEM_OP_TICKET = 899
    TIK_TOK_OE_C_SENTRY_TASK_CENTER = 900
    TIK_TOK_OE_C_SENTRY_EVENT = 901
    TIK_TOK_OE_C_SENTRY_WORK_FLOW = 902
    TIK_TOK_OE_C_SENTRY_STRAT_GY_PACKAGE = 903
    TIK_TOK_OE_C_SENTRY_STRATEGY = 904
    TIK_TOK_OE_C_SENTRY_FACTOR = 905
    TIK_TOK_OE_C_SENTRY_DATA_SOURCE = 906
    TIK_TOK_OE_C_SENTRY_INDICATOR = 907
    TIK_TOK_OE_C_SENTRY_NAME_LIST = 908
    TIK_TOK_OE_C_REVERSE_MAIN_ORDER = 909
    TIK_TOK_OE_C_REVERSE_ORDER_LINE = 910
    TIK_TOK_OE_C_REVERSE_ARBITRATION_ORDER = 911
    TIK_TOK_OE_C_REVERSE_REFUND_ORDER = 912
    TIK_TOK_OE_C_REVERSE_ACTIVITY_EVENT = 913
    TIK_TOK_OE_C_REVERSE_S_KU_CANCEL_TIME_RULE = 914
    TIK_TOK_OE_C_REVERSE_CANCEL_TIME_RULE = 915
    TIK_TOK_OE_C_REVERSE_REVERSE_REASON = 916
    TIK_TOK_OE_C_REVERSE_TIME_OUT_CONFIG = 917
    TIK_TOK_OE_C_REVERSE_REVERSE_FLOW = 918
    TIK_TOK_OE_C_REVERSE_RECONCILIATION_RESULT = 919
    TIK_TOK_OE_C_REVERSE_POLICY = 920
    TIK_TOK_OE_C_MESSAGE_TEMPLATE = 921
    TIK_TOK_OE_C_MESSAGE_TASK = 922
    TIK_TOK_OE_C_MESSAGE_CHANNEL = 923
    TIK_TOK_OE_C_OPERATION_COMMON_DOWNLOAD_CENTER_TASK = 924
    TIK_TOK_OE_C_OPERATION_COMMON_DOWNLOAD_CENTER_RECORD = 925
    TIK_TOK_OE_C_OPERATION_COMMON_OPERATION_RECORD = 926
    TIK_TOK_OE_C_OPERATION_COMMON_PAGE_CONTENT = 927
    TIK_TOK_OE_C_OPERATION_COMMON_ANNOUNCEMENT = 928
    TIK_TOK_OE_C_OPERATION_COMMON_APPROVE_INFO = 929
    TIK_TOK_OE_C_OPERATION_PLATFORM_LEAD = 930
    TIK_TOK_OE_C_OPERATION_PLATFORM_AM = 931
    TIK_TOK_OE_C_OPERATION_PLATFORM_CM = 932
    TIK_TOK_OE_C_OPERATION_PLATFORM_SELLER_INVITATION = 933
    TIK_TOK_OE_C_OPERATION_PLATFORM_SELLER_INVITATION_CODE = 934
    TIK_TOK_OE_C_OPERATION_PLATFORM_BIND_INFO = 935
    TIK_TOK_OE_C_OPERATION_PLATFORM_GROUP_SET = 936
    TIK_TOK_OE_C_FULFILLMENT_FULFILLMENT_ORDER = 937
    TIK_TOK_OE_C_FULFILLMENT_FULFILLMENT_SUBORDER = 938
    TIK_TOK_OE_C_FULFILLMENT_FULFILLMENT_UNIT = 939
    TIK_TOK_OE_C_FULFILLMENT_FULFILLMENT_EVENT = 940
    TIK_TOK_OE_C_FULFILLMENT_REVERSE_FULFILLMENT_ORDER = 941
    TIK_TOK_OE_C_FULFILLMENT_REVERSE_FULFILLMENT_SUBORDER = 942
    TIK_TOK_OE_C_FULFILLMENT_FULFILLMENT_SPLIT_COMBINE_HISTORY = 943
    TIK_TOK_OE_C_FULFILLMENT_FULFILLMENT_ADDRESS_UPDATE_ORDER = 944
    TIK_TOK_OE_C_FULFILLMENT_FULFILLMENT_PRE_COMBINE_P_KG = 945
    TIK_TOK_OE_C_FULFILLMENT_FULFILLMENT_EXTRA_INFO = 946
    TIK_TOK_OE_C_FULFILLMENT_FULFILLMENT_SELLER_DEFAULT = 947
    TIK_TOK_OE_C_FULFILLMENT_FULFILLMENT_SELLER_TAG = 948
    TIK_TOK_OE_C_FULFILLMENT_FULFILLMENT_SETTING = 949
    TIK_TOK_OE_C_FULFILLMENT_RTS_RECORD = 950
    TIK_TOK_OE_C_FULFILLMENT_DIGITAL_ORDER = 951
    TIK_TOK_OE_C_FULFILLMENT_DIGITAL_DELIVERY_TASK = 952
    TIK_TOK_OE_C_FULFILLMENT_DIGITAL_EVENT = 953
    TIK_TOK_OE_C_ORDER_COMBO_ORDER = 954
    TIK_TOK_OE_C_ORDER_MAIN_ORDER = 955
    TIK_TOK_OE_C_ORDER_ORDER_LINE = 956
    TIK_TOK_OE_C_ORDER_MAIN_ORDER_TAG = 957
    TIK_TOK_OE_C_ORDER_ORDER_LINE_TAG = 958
    TIK_TOK_OE_C_ORDER_TRADE_CART = 959
    TIK_TOK_OE_C_ORDER_ORDER_SNAPSHOT = 960
    TIK_TOK_OE_C_ORDER_ORDER_EVENT = 961
    TIK_TOK_OE_C_ORDER_CART_EVENT = 962
    TIK_TOK_OE_C_OPEN_PLATFORM_APPLICATION = 963
    TIK_TOK_OE_C_OPEN_PLATFORM_ACCOUNT = 964
    TIK_TOK_OE_C_OPEN_PLATFORM_MILESTONE = 965
    TIK_TOK_OE_C_OPEN_PLATFORM_TICKET = 966
    TIK_TOK_OE_C_OPEN_PLATFORM_INTERFACE_DEFINITION = 967
    TIK_TOK_OE_C_OPEN_PLATFORM_AUTHORIZATION_INFO = 968
    TIK_TOK_OE_C_OPEN_PLATFORM_CERTIFICATION = 969
    TIK_TOK_OE_C_OPEN_PLATFORM_REVIEW_APPLICATION = 970
    TIK_TOK_OE_C_PROMOTION_ACTIVITY_INFO = 971
    TIK_TOK_OE_C_PROMOTION_BUDGET_INFO = 972
    TIK_TOK_OE_C_PROMOTION_VOUCHER_INFO = 973
    TIK_TOK_OE_C_PROMOTION_PROPOSAL_INFO = 974
    TIK_TOK_OE_C_PROMOTION_CAMPAIGN_INFO = 975
    TIK_TOK_OE_C_PROMOTION_SELECTION_INFO = 976
    TIK_TOK_OE_C_SELLER_PLATFORM_SHOP = 977
    TIK_TOK_OE_C_SELLER_PLATFORM_SHOP_PRODUCT = 978
    TIK_TOK_OE_C_SELLER_PLATFORM_SHOP_PAGE = 979
    TIK_TOK_OE_C_SELLER_PLATFORM_SELLER_PERMISSION = 980
    TIK_TOK_OE_C_CUSTOMER_SERVICE_CS_MONITOR = 981
    TIK_TOK_OE_C_SELLER_IM_CONVERSATION = 982
    TIK_TOK_OE_C_SELLER_IM_QUEUE = 983
    TIK_TOK_OE_C_SELLER_IM_SHOP_CONFIG = 984
    TIK_TOK_OE_C_SELLER_IM_USER_DATA = 985
    TIK_TOK_OE_C_SELLER_IM_IM_DATA = 986
    TIK_TOK_OE_C_SELLER_IM_STATISTIC_DATA = 987
    TIK_TOK_OE_C_TAX_ENTITY = 988
    TIK_TOK_OE_C_TAX_IN_VOICE = 989
    TIK_TOK_OE_C_TAX_IN_VOICE_ITEM = 990
    TIK_TOK_OE_C_TAX_TAX = 991
    TIK_TOK_OE_C_TAX_ENTITY_COMPANY = 992
    TIK_TOK_OE_C_TAX_IN_VOICE_BILL = 993
    TIK_TOK_OE_C_TAX_REGION_ENTITY_COMPANY = 994
    TIK_TOK_OE_C_DATACENTER_DMP_META = 995
    TIK_TOK_OE_C_DATACENTER_DMP_CONFIG = 996
    TIK_TOK_OE_C_DATACENTER_DMP_TAG = 997
    TIK_TOK_OE_C_DATACENTER_OPERATION_PLATFORM_ENGINEERING_DATA = 998
    TIK_TOK_OE_C_DATACENTER_OPERATION_PLATFORM_USER_CONFIG_DATA = 999
    TIK_TOK_OE_C_DATACENTER_OPERATION_PLATFORM_OPERATIONAL_DATA = 1000
    TIK_TOK_OE_C_ACCOUNT_CLIENT = 1001
    TIK_TOK_OE_C_ACCOUNT_MERCHANT = 1002
    TIK_TOK_OE_C_ACCOUNT_ACCOUNT = 1003
    TIK_TOK_OE_C_PAYMENT_COMBINE_PAY_ORDER = 1004
    TIK_TOK_OE_C_PAYMENT_SUB_PAY_ORDER = 1005
    TIK_TOK_OE_C_PAYMENT_PAYMENT_METHOD = 1006
    TIK_TOK_OE_C_PAYMENT_PAYER = 1007
    TIK_TOK_OE_C_PAYMENT_PAYEE = 1008
    TIK_TOK_OE_C_REFUND_REFUND_ORDER = 1009
    TIK_TOK_OE_C_REFUND_REFUND_METHOD = 1010
    TIK_TOK_OE_C_BILLING_FEE = 1011
    TIK_TOK_OE_C_BILLING_BILLING_ORDER = 1012
    TIK_TOK_OE_C_BILLING_BILLING_OTHERS = 1013
    TIK_TOK_OE_C_SETTLEMENT_SETT_COLLECT = 1014
    TIK_TOK_OE_C_SETTLEMENT_PARTY_SETT_COLLECT = 1015
    TIK_TOK_OE_C_PAY_OUT_WITHDRAW = 1016
    TIK_TOK_OE_C_ARCH_BASIC_PLATFORM = 1017
    TIK_TOK_OE_C_ARCH_PERFORMANCE_COST = 1018
    TIK_TOK_OE_C_ARCH_STABILITY = 1019
    TIK_TOK_OE_C_ARCH_QUALITY_EFFICIENCY = 1020
    TIK_TOK_OE_C_ARCH_SO_A = 1021
    TIK_TOK_OE_C_SUPPLY_CHAIN_GOODS = 1022
    TIK_TOK_OE_C_SUPPLY_CHAIN_MERCHANT = 1023
    TIK_TOK_OE_C_SUPPLY_CHAIN_WAREHOUSE = 1024
    TIK_TOK_OE_C_SUPPLY_CHAIN_REPLENISHMENT_PLAN = 1025
    TIK_TOK_OE_C_SUPPLY_CHAIN_INBOUND_ORDER = 1026
    TIK_TOK_OE_C_SUPPLY_CHAIN_OUTBOUND_ORDER = 1027
    TIK_TOK_OE_C_SUPPLY_CHAIN_EXCEPTION = 1028
    TIK_TOK_OE_C_SUPPLY_CHAIN_BILL = 1029
    TIK_TOK_OE_C_SUPPLY_CHAIN_RATE_CARD = 1030
    TIK_TOK_OE_C_S_RE_SLI = 1031
    TIK_TOK_OE_C_S_RE_SLI_GROUP = 1032
    TIK_TOK_OE_C_S_RE_QP_S = 1033
    TIK_TOK_OE_C_S_RE_PS_M_INFO = 1034
    TIK_TOK_OE_C_S_RE_PS_M_DEPLOYMENT_INFO = 1035
    TIK_TOK_OE_C_S_RE_JANUS_INFO = 1036
    TIK_TOK_OE_C_S_RE_ERROR_DETECTOR_INFO = 1037
    TIK_TOK_OE_C_S_RE_VERTICAL = 1038
    TIK_TOK_OE_C_S_RE_PRODUCT_LINE = 1039
    TIK_TOK_TECHNICAL_PLATFORM_IAM_ACCOUNT = 1040
    TIK_TOK_TECHNICAL_PLATFORM_IAM_ACCOUNT_SAFE_PROFILE = 1041
    TIK_TOK_TECHNICAL_PLATFORM_IAM_ACCOUNT_STRIKE = 1042
    TIK_TOK_TECHNICAL_PLATFORM_IAM_ACCOUNT_OPERATION_LOG = 1043
    TIK_TOK_TECHNICAL_PLATFORM_IAM_PASSPORT_CONF = 1044
    TIK_TOK_TECHNICAL_PLATFORM_IAM_PASSPORT_REGION = 1045
    TIK_TOK_TECHNICAL_PLATFORM_IAM_SESSION = 1046
    TIK_TOK_TECHNICAL_PLATFORM_IAM_ODIN_INFO = 1047
    TIK_TOK_TECHNICAL_PLATFORM_IAM_BYTE_DANCES_SO = 1048
    TIK_TOK_TECHNICAL_PLATFORM_OPEN_PLATFORM_OAUTH_INFO = 1049
    TIK_TOK_TECHNICAL_PLATFORM_OPEN_PLATFORM_OPEN_CONF = 1050
    TIK_TOK_TECHNICAL_PLATFORM_PORTFOLIO_USER_INFO = 1051
    TIK_TOK_TECHNICAL_PLATFORM_PORTFOLIO_USER_INFO_CONF = 1052
    TIK_TOK_TECHNICAL_PLATFORM_RELATION_USER_DEVICE = 1053
    TIK_TOK_TECHNICAL_PLATFORM_RELATION_USER_MOBILE_ID = 1054
    TIK_TOK_TECHNICAL_PLATFORM_RELATION_NATURAL_PERSON = 1055
    TIK_TOK_TECHNICAL_PLATFORM_DEVICE_DEVICE_MODEL_OFFICIAL = 1056
    TIK_TOK_TECHNICAL_PLATFORM_DEVICE_DEVICE_GRAPH_MODEL = 1057
    TIK_TOK_TECHNICAL_PLATFORM_DEVICE_TABLE_PARTITION = 1058
    TIK_TOK_TECHNICAL_PLATFORM_DEVICE_DEVICE_INFO = 1059
    TIK_TOK_TECHNICAL_PLATFORM_DEVICE_INSTALLATION_INFO = 1060
    TIK_TOK_TECHNICAL_PLATFORM_PUSH_PUSH_TEMPLATE = 1061
    TIK_TOK_TECHNICAL_PLATFORM_PUSH_APP_CONFIG = 1062
    TIK_TOK_TECHNICAL_PLATFORM_PUSH_CHANNEL_CONFIG = 1063
    TIK_TOK_TECHNICAL_PLATFORM_PUSH_DEPLOY_CONFIG = 1064
    TIK_TOK_TECHNICAL_PLATFORM_PUSH_AU_TH_CONFIG = 1065
    TIK_TOK_TECHNICAL_PLATFORM_PUSH_DEVICE_INFO = 1066
    TIK_TOK_TECHNICAL_PLATFORM_PUSH_PUSH_MESSAGE = 1067
    TIK_TOK_TECHNICAL_PLATFORM_EMAIL_EMAIL_TEMPLATE = 1068
    TIK_TOK_TECHNICAL_PLATFORM_EMAIL_CHANNEL_CONFIG = 1069
    TIK_TOK_TECHNICAL_PLATFORM_EMAIL_AU_TH_CONFIG = 1070
    TIK_TOK_TECHNICAL_PLATFORM_EMAIL_EMAIL_MESSAGE = 1071
    TIK_TOK_TECHNICAL_PLATFORM_SMS_SMS_TEMPLATE = 1072
    TIK_TOK_TECHNICAL_PLATFORM_SMS_CHANNEL_CONFIG = 1073
    TIK_TOK_TECHNICAL_PLATFORM_SMS_AU_TH_CONFIG = 1074
    TIK_TOK_TECHNICAL_PLATFORM_SMS_DEVICE_INFO = 1075
    TIK_TOK_TECHNICAL_PLATFORM_SMS_MOBILE_INFO = 1076
    TIK_TOK_TECHNICAL_PLATFORM_SMS_SMS_MESSAGE = 1077
    TIK_TOK_TECHNICAL_PLATFORM_OLYMPUS_APP_INFO = 1078
    TIK_TOK_TECHNICAL_PLATFORM_OLYMPUS_PRODUCT_INFO = 1079
    TIK_TOK_TECHNICAL_PLATFORM_OLYMPUS_OLYMPUS_PLATFORM_INFO = 1080
    TIK_TOK_TECHNICAL_PLATFORM_LBS_PRECISE_LOCATION = 1081
    TIK_TOK_TECHNICAL_PLATFORM_LBS_APPROXIMATE_LOCATION = 1082
    TIK_TOK_TECHNICAL_PLATFORM_LBS_IP_LIBRARY = 1083
    TIK_TOK_TECHNICAL_PLATFORM_LBS_LOCATION_NAMES = 1084
    TIK_TOK_TECHNICAL_PLATFORM_LBS_LOCATION_RULES = 1085
    TIK_TOK_TECHNICAL_PLATFORM_LBS_LOCATION_CONTEXT = 1086
    TIK_TOK_TECHNICAL_PLATFORM_LBS_LOCATION_PROFILE = 1087
    TIK_TOK_TECHNICAL_PLATFORM_LBS_AUTHORIZATION_STATUS = 1088
    TIK_TOK_TECHNICAL_PLATFORM_LBS_STAT_INFO_BY_IP = 1089
    TIK_TOK_TECHNICAL_PLATFORM_LBS_STAT_INFO_BY_REGION = 1090
    TIK_TOK_TECHNICAL_PLATFORM_LBS_STAT_INFO_BY_DEVICE = 1091
    TIK_TOK_TECHNICAL_PLATFORM_LBS_STAT_INFO_BY_USER = 1092
    TIK_TOK_TECHNICAL_PLATFORM_IM_SYNC_META = 1093
    TIK_TOK_TECHNICAL_PLATFORM_IM_SEND_MESSAGE_EVENT = 1094
    TIK_TOK_TECHNICAL_PLATFORM_IM_STRANGERS_END_MESSAGE_EVENT = 1095
    TIK_TOK_TECHNICAL_PLATFORM_IM_MARK_READ_EVENT = 1096
    TIK_TOK_TECHNICAL_PLATFORM_IM_TO_PUSH_MODE_EVENT = 1097
    TIK_TOK_TECHNICAL_PLATFORM_IM_MODIFY_MESSAGE_PROPERTY_EVENT = 1098
    TIK_TOK_TECHNICAL_PLATFORM_IM_CREATE_CONVERSATION_EVENT = 1099
    TIK_TOK_TECHNICAL_PLATFORM_IM_SET_CORE_INFO_EVENT = 1100
    TIK_TOK_TECHNICAL_PLATFORM_IM_ADD_PARTICIPANT_EVENT = 1101
    TIK_TOK_TECHNICAL_PLATFORM_IM_REMOVE_PARTICIPANT_EVENT = 1102
    TIK_TOK_TECHNICAL_PLATFORM_IM_UPDATE_PARTICIPANT_EVENT = 1103
    TIK_TOK_TECHNICAL_PLATFORM_IM_LEAVE_CONVERSATION_EVENT = 1104
    TIK_TOK_TECHNICAL_PLATFORM_IM_DISSOLVE_CONVERSATION_EVENT = 1105
    TIK_TOK_TECHNICAL_PLATFORM_IM_UPDATE_AUDIT_SWITCH_EVENT = 1106
    TIK_TOK_TECHNICAL_PLATFORM_IM_SEND_CONVERSATION_APPLY_EVENT = 1107
    TIK_TOK_TECHNICAL_PLATFORM_IM_A_CK_CONVERSATION_APPLY_EVENT = 1108
    TIK_TOK_TECHNICAL_PLATFORM_IM_MESSAGE = 1109
    TIK_TOK_TECHNICAL_PLATFORM_IM_USER_IN_BOX = 1110
    TIK_TOK_TECHNICAL_PLATFORM_IM_CONVERSATION_IN_BOX = 1111
    TIK_TOK_TECHNICAL_PLATFORM_IM_CONVERSATION_CORE = 1112
    TIK_TOK_TECHNICAL_PLATFORM_IM_CONVERSATION_MEMBER = 1113
    TIK_TOK_TECHNICAL_PLATFORM_IM_CONVERSATION_SETTING = 1114
    TIK_TOK_TECHNICAL_PLATFORM_IM_CONVERSATION_AUDIT = 1115
    TIK_TOK_TECHNICAL_PLATFORM_IM_RECENT_CONVERSATION = 1116
    TIK_TOK_TECHNICAL_PLATFORM_IM_STRANGER_CONVERSATION = 1117
    TIK_TOK_TECHNICAL_PLATFORM_IM_DELETE_MESSAGE_EVENT = 1118
    TIK_TOK_TECHNICAL_PLATFORM_IM_DELETE_CONVERSATION_EVENT = 1119
    TIK_TOK_TECHNICAL_PLATFORM_IM_DELETE_STRANGER_CONVERSATION_EVENT = 1120
    TIK_TOK_TECHNICAL_PLATFORM_IM_DELETE_STRANGER_MESSAGE_EVENT = 1121
    TIK_TOK_TECHNICAL_PLATFORM_IM_RESET_ALL_CONVERSATION_COUNTER_EVENT = 1122
    TIK_TOK_TECHNICAL_PLATFORM_IM_SET_CONVERSATION_SETTING_EVENT = 1123
    TIK_TOK_TECHNICAL_PLATFORM_IM_RESET_CONVERSATION_COUNTER_EVENT = 1124
    TIK_TOK_TECHNICAL_PLATFORM_IM_DELETE_ALL_STRANGER_CONVERSATION_EVENT = 1125
    TIK_TOK_TECHNICAL_PLATFORM_IM_DIRECT_PUSH_EVENT = 1126
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_MULTICHANNEL_TASK = 1127
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_I_MC_CROWD_META = 1128
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_I_MC_CROWD_INSTANCE = 1129
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_NOTIFY_CROWD_META = 1130
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_NOTIFY_CROWD_INSTANCE = 1131
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_APPROVAL = 1132
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_CAMPAIGN = 1133
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_ACTION_META = 1134
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_EVENT_META = 1135
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_PROCESS_META = 1136
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_FEATURE_META = 1137
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_USER = 1138
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_USER_ROLE = 1139
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_ENGINE_GROUP = 1140
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_F_RE_QUE_N_CE_CONTROL = 1141
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_TASK_REPORT = 1142
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_TEMPLATE_REPORT = 1143
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_CANDIDATE_REPORT = 1144
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_CANDIDATE = 1145
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_CANDIDATE_TAG = 1146
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_T_QS_RECORD = 1147
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_UPLOAD_FILE_INFO = 1148
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_NOTIFY_SEND_TASK = 1149
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_NOTIFY_PUSH_TASK_STATS = 1150
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_NOTIFY_SMS_MAIL_TASK_STATS = 1151
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_SHORT_LINK_STATS = 1152
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_STRATEGY = 1153
    TIK_TOK_TECHNICAL_PLATFORM_I_MC_TAG_PUSH = 1154
    TIK_TOK_TECHNICAL_PLATFORM_API_MOBILE_PLATFORM_HISTORY = 1155
    TIK_TOK_TECHNICAL_PLATFORM_API_MOBILE_PLATFORM_API_GATEWAY = 1156
    TIK_TOK_TECHNICAL_PLATFORM_API_MOBILE_PLATFORM_BYTE_SYNC = 1157
    TIK_TOK_TECHNICAL_PLATFORM_API_MOBILE_PLATFORM_BYTE_API = 1158
    TIK_TOK_TECHNICAL_PLATFORM_SERVICE_DEVELOPMENT_PLATFORM_APP_SETTINGS = 1159
    TIK_TOK_TECHNICAL_PLATFORM_SERVICE_DEVELOPMENT_PLATFORM_CDS = 1160
    TIK_TOK_TECHNICAL_PLATFORM_SERVICE_DEVELOPMENT_PLATFORM_PLUGIN = 1161
    TIK_TOK_TECHNICAL_PLATFORM_SERVICE_DEVELOPMENT_PLATFORM_S_CM_VERSION = 1162
    TIK_TOK_TECHNICAL_PLATFORM_SERVICE_DEVELOPMENT_PLATFORM_PUBLISH_HISTORY = 1163
    TIK_TOK_TECHNICAL_PLATFORM_SERVICE_DEVELOPMENT_PLATFORM_PUBLISH_PIPELINE = 1164
    TIK_TOK_TECHNICAL_PLATFORM_SERVICE_DEVELOPMENT_PLATFORM_PIPELINE_TASK = 1165
    TIK_TOK_TECHNICAL_PLATFORM_SERVICE_DEVELOPMENT_PLATFORM_A_SYNC_CLOUD = 1166
    TIK_TOK_TECHNICAL_PLATFORM_SERVICE_DEVELOPMENT_PLATFORM_BYTE_CONF = 1167
    TIK_TOK_TECHNICAL_PLATFORM_BY_TEES_METADATA = 1168
    TIK_TOK_TECHNICAL_PLATFORM_BY_TEES_BUSINESS_DATA = 1169
    TIK_TOK_TECHNICAL_PLATFORM_PAID_ADS_GROWTH_MEDIA_SOURCE = 1170
    TIK_TOK_TECHNICAL_PLATFORM_PAID_ADS_GROWTH_PROMOTED_APP = 1171
    TIK_TOK_TECHNICAL_PLATFORM_PAID_ADS_GROWTH_AD_ACCOUNT = 1172
    TIK_TOK_TECHNICAL_PLATFORM_PAID_ADS_GROWTH_AD_OBJECT = 1173
    TIK_TOK_TECHNICAL_PLATFORM_PAID_ADS_GROWTH_AD_INSIGHT = 1174
    TIK_TOK_TECHNICAL_PLATFORM_PAID_ADS_GROWTH_AUDIENCE = 1175
    TIK_TOK_TECHNICAL_PLATFORM_PAID_ADS_GROWTH_AD_EVENT = 1176
    TIK_TOK_TECHNICAL_PLATFORM_PAID_ADS_GROWTH_ACTIVATION_RULE = 1177
    TIK_TOK_TECHNICAL_PLATFORM_PAID_ADS_GROWTH_AD_CREATIVE = 1178
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_DEVICE = 1179
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_USER = 1180
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_TASK_INFO = 1181
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_USER_BEHAVIOR = 1182
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_COST = 1183
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_INCOME = 1184
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_WITHDRAWAL = 1185
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_WRITE_OFF = 1186
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_USER_RELATION = 1187
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_EXPERIMENT = 1188
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_POLARIS_ACCESS_INFO = 1189
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_POLARIS_BUDGET = 1190
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_POLARIS_SCORE_TASK_DATA_ANALYSIS = 1191
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_POLARIS_TASK_ALARM = 1192
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_POLARIS_REPO_INFO = 1193
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_POLARIS_SCORE_TASK_DATA_CONFIG = 1194
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_POLARIS_BROADCAST_CONFIG = 1195
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_POLARIS_ROI_CONFIG = 1196
    TIK_TOK_TECHNICAL_PLATFORM_INCENTIVE_GROWTH_POLARIS_TASK_CONFIG = 1197
    TIK_TOK_TECHNICAL_PLATFORM_GENERAL_GROWTH_DATA_APP_INFO = 1198
    TIK_TOK_TECHNICAL_PLATFORM_GENERAL_GROWTH_DATA_USER_ACTIVATION = 1199
    TIK_TOK_TECHNICAL_PLATFORM_GENERAL_GROWTH_DATA_USER_BEHAVIOR = 1200
    TIK_TOK_TECHNICAL_PLATFORM_GENERAL_GROWTH_DATA_LOGIN_INFO = 1201
    TIK_TOK_TECHNICAL_PLATFORM_GENERAL_GROWTH_DATA_INSTALLMENT_INFO = 1202
    TIK_TOK_TECHNICAL_PLATFORM_GENERAL_GROWTH_DATA_ITEM_CONSUMPTION = 1203
    TIK_TOK_TECHNICAL_PLATFORM_TIK_TOK_GAME_EVENT = 1204
    TIK_TOK_TECHNICAL_PLATFORM_TIK_TOK_GAME_TASK = 1205
    TIK_TOK_TECHNICAL_PLATFORM_TIK_TOK_GAME_BEHAVIOR = 1206
    TIK_TOK_TECHNICAL_PLATFORM_TIK_TOK_GAME_USER_RELATION = 1207
    TIK_TOK_TECHNICAL_PLATFORM_TIK_TOK_GAME_PLANT = 1208
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_BUSINESS_SEARCH_RESULT = 1209
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_BUSINESS_SEARCH_IMPRESSION = 1210
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_BUSINESS_SEARCH_ACTIVITY = 1211
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_BUSINESS_TRENDING_HOTSPOT = 1212
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_BUSINESS_TRENDING_BILLBOARD = 1213
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_BUSINESS_TRENDING_HOTSPOT_ITEM = 1214
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_INTERVENTION_QUERY_INTERVENTION_RULES = 1215
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_INTERVENTION_GLOBAL_INTERVENTION_RULES = 1216
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_INTERVENTION_PERMISSION_GROUP = 1217
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_INTERVENTION_INTERVENTION_CHANNEL = 1218
    TIK_TOK_TECHNICAL_PLATFORM_GROWTH_DATA_STRATEGY_GROWTH_ML_FEATURE = 1231
    TIK_TOK_TECHNICAL_PLATFORM_GROWTH_DATA_STRATEGY_GROWTH_ML_TASK = 1232
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_CRAWL_EVALUATE_PROJECT = 1233
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_CRAWL_EVALUATE_TASK = 1234
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_CRAWL_EVALUATE_MISSION = 1235
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_CRAWL_EVALUATE_MISSION_TASK = 1236
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_CRAWL_EVALUATE_REVIEWER = 1237
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_CRAWL_MISSION_EVALUATE_PROJECT = 1238
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_CRAWL_MISSION_REVIEWER = 1239
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_CRAWL_TASK_REVIEWER = 1240
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_STABILITY_COMBO_EVENT = 1241
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_CONFIGURATION_PLATFORM_RULE_RECALL = 1242
    TIK_TOK_TECHNICAL_PLATFORM_D_IT_DATA_CHECK_RULE = 1243
    TIK_TOK_TECHNICAL_PLATFORM_D_IT_DATA_CHECK_RESULT = 1244
    TIK_TOK_TECHNICAL_PLATFORM_D_IT_DATA_CHECK_STAGE = 1245
    TIK_TOK_TECHNICAL_PLATFORM_SEARCH_CLOUD_PLATFORM_INFO = 1246
    TIK_TOK_TECHNICAL_PLATFORM_GAME_STATION_GAME_STATION_CONFIG = 1247
    TIK_TOK_TECHNICAL_PLATFORM_GAME_STATION_GAME_STATION_ALLOW_LIST = 1248
    TIK_TOK_TECHNICAL_PLATFORM_SERVICE_GOVERNANCE_B_MT_CONFIG = 1249
    TIK_TOK_TECHNICAL_PLATFORM_SERVICE_GOVERNANCE_BYTE_TIM_CONFIG = 1250
    TIK_TOK_TECHNICAL_PLATFORM_SERVICE_GOVERNANCE_PSN_S = 1251
    TIK_TOK_TECHNICAL_PLATFORM_CENTRAL_PRODUCT_PLATFORM_QA_TEST_ACCOUNT_DATA = 1253
    TIK_TOK_TECHNICAL_PLATFORM_ID_GENERATOR_ID = 1254
    TIK_TOK_DATA_ARCH_TEST_MUSE_GROUP_PLAY_COUNT_DES_COUNTER = 1255
    TIK_TOK_DATA_ARCH_BYTE_REC_SERVICE = 1256
    TIK_TOK_DATA_ARCH_BYTE_REC_MODEL = 1257
    TIK_TOK_DATA_ARCH_BYTE_REC_RESOURCE = 1258
    TIK_TOK_DATA_ARCH_BYTE_REC_STAFF = 1259
    TIK_TOK_DATA_ARCH_BYTE_REC_TASK = 1260
    TIK_TOK_DATA_ARCH_BYTE_REC_NAMESPACE = 1261
    TIK_TOK_DATA_ARCH_BYTE_REC_CONFIG = 1262
    TIK_TOK_DATA_ARCH_BYTE_REC_ELEMENTS = 1263
    TIK_TOK_DATA_ARCH_BYTE_REC_VERTEX = 1264
    TIK_TOK_DATA_ARCH_BYTE_REC_N_IFF_LER = 1265
    TIK_TOK_DATA_ARCH_BYTE_REC_OTHERS = 1266
    TIK_TOK_DATA_ARCH_HOLMES_COUNTER = 1267
    TIK_TOK_DATA_ARCH_HOLMES_DATA_TRACE_SYSTEM = 1268
    TIK_TOK_DATA_ARCH_HOLMES_T_BASE = 1269
    TIK_TOK_DATA_ARCH_HOLMES_DEMOTION = 1270
    TIK_TOK_DATA_ARCH_HOLMES_PROFILE = 1271
    TIK_TOK_DATA_ARCH_HOLMES_S_RE = 1272
    TIK_TOK_DATA_ARCH_HOLMES_DRONE = 1273
    TIK_TOK_DATA_ARCH_HOLMES_BYTE_CORE = 1274
    TIK_TOK_DATA_ARCH_HOLMES_LOAD_TEST = 1275
    TIK_TOK_DATA_PLATFORM_DORADO_TASK_DEVELOP = 1276
    TIK_TOK_DATA_PLATFORM_DORADO_TASK_OPERATE = 1277
    TIK_TOK_DATA_PLATFORM_DORADO_INSTANCE_OPERATE = 1278
    TIK_TOK_DATA_PLATFORM_DORADO_TASK_BACK_FILL = 1279
    TIK_TOK_DATA_PLATFORM_DORADO_TASK_ALARM = 1280
    TIK_TOK_DATA_PLATFORM_DORADO_CONSOLE = 1281
    TIK_TOK_DATA_PLATFORM_DORADO_METADATA = 1282
    TIK_TOK_DATA_PLATFORM_DORADO_FUNCTION_RESOURCE = 1283
    TIK_TOK_DATA_PLATFORM_DORADO_DATA_SOURCE = 1284
    TIK_TOK_DATA_PLATFORM_CLICK_HOUSE_CLICK_HOUSE_OPS = 1285
    TIK_TOK_DATA_PLATFORM_BYTE_QUERY_CANCEL_JOB = 1286
    TIK_TOK_DATA_PLATFORM_BYTE_QUERY_GET_JOB = 1287
    TIK_TOK_DATA_PLATFORM_BYTE_QUERY_RE_DISPATCH = 1288
    TIK_TOK_DATA_PLATFORM_BYTE_QUERY_REFRESH_CACHE = 1289
    TIK_TOK_DATA_PLATFORM_BYTE_QUERY_REMOVE_WORKER = 1290
    TIK_TOK_DATA_PLATFORM_BYTE_QUERY_ANALYZE = 1291
    TIK_TOK_DATA_PLATFORM_BYTE_QUERY_SCHEMA_ANALYZE = 1292
    TIK_TOK_DATA_PLATFORM_BYTE_QUERY_START_JOB = 1293
    TIK_TOK_DATA_PLATFORM_BYTE_QUERY_WATCH_JOB = 1294
    TIK_TOK_DATA_PLATFORM_BYTE_QUERY_RESTART_SCHEDULER = 1295
    TIK_TOK_DATA_PLATFORM_GEMINI_GEM_IN_IT_TOPS = 1296
    TIK_TOK_DATA_PLATFORM_CORAL_RETRIEVAL = 1297
    TIK_TOK_DATA_PLATFORM_CORAL_LINEAGE = 1298
    TIK_TOK_DATA_PLATFORM_CORAL_MANAGEMENT = 1299
    TIK_TOK_DATA_PLATFORM_MANTA_MONITOR_RULE = 1300
    TIK_TOK_DATA_PLATFORM_MANTA_MONITOR_RESULT = 1301
    TIK_TOK_DATA_PLATFORM_MANTA_DATA_COM_PARISI_ON = 1302
    TIK_TOK_DATA_PLATFORM_DATA_ROCKS_DATA_SET_MANAGEMENT = 1303
    TIK_TOK_DATA_PLATFORM_DATA_ROCKS_API_MANAGEMENT = 1304
    TIK_TOK_DATA_PLATFORM_DATA_ROCKS_API_MARKET = 1305
    TIK_TOK_DATA_PLATFORM_DATA_ROCKS_DATA_QUERY = 1306
    TIK_TOK_DATA_PLATFORM_BYTE_IO_TRANSFORM_DEVELOP = 1307
    TIK_TOK_DATA_PLATFORM_BYTE_IO_JOB_MANAGEMENT = 1308
    TIK_TOK_DATA_PLATFORM_BYTE_IO_AUDIT = 1309
    TIK_TOK_DATA_PLATFORM_BYTE_IO_DATA_SET_OPERATION = 1310
    TIK_TOK_DATA_PLATFORM_BYTE_IO_FUNCTION_OPERATION = 1311
    TIK_TOK_DATA_PLATFORM_BYTE_IO_SDK_ACCESS_OPERATION = 1312
    TIK_TOK_DATA_PLATFORM_BYTE_IO_PERMISSION_MONITOR = 1313
    TIK_TOK_DATA_PLATFORM_TRITON_AU_TH_MANAGEMENT = 1314
    TIK_TOK_DATA_PLATFORM_TRITON_AUDIT = 1315
    TIK_TOK_DATA_PLATFORM_TRITON_APPROVAL_CENTER = 1316
    TIK_TOK_DATA_PLATFORM_AEOLUS_ITEMID = 1317
    TIK_TOK_DATA_PLATFORM_AEOLUS_ITEM_NAME = 1318
    TIK_TOK_DATA_PLATFORM_AEOLUS_ITEM_DATE_TIME = 1319
    TIK_TOK_DATA_PLATFORM_AEOLUS_ITEM_STATUS = 1320
    TIK_TOK_DATA_PLATFORM_AEOLUS_ITEM_TYPE = 1321
    TIK_TOK_DATA_PLATFORM_AEOLUS_ITEM_DESCRIPTION = 1322
    TIK_TOK_DATA_PLATFORM_AEOLUS_ITEM_URL = 1323
    TIK_TOK_DATA_PLATFORM_AEOLUS_ITEM_TOKEN = 1324
    TIK_TOK_DATA_PLATFORM_AEOLUS_ITEM_REGION = 1325
    TIK_TOK_DATA_PLATFORM_AEOLUS_RED_IS_KEY = 1326
    TIK_TOK_DATA_PLATFORM_AEOLUS_RED_IS_VALUE = 1327
    TIK_TOK_DATA_PLATFORM_AEOLUS_CONFIGURATION_NAME = 1328
    TIK_TOK_DATA_PLATFORM_AEOLUS_CONFIGURATION_VALUE = 1329
    TIK_TOK_DATA_PLATFORM_AEOLUS_EMPLOYEE_EMAIL = 1330
    TIK_TOK_DATA_PLATFORM_AEOLUS_EMPLOYEE_NAME = 1331
    TIK_TOK_DATA_PLATFORM_AEOLUS_EMPLOYEE_ID = 1332
    TIK_TOK_DATA_PLATFORM_TITAN_USER_INFO = 1333
    TIK_TOK_DATA_PLATFORM_TITAN_USER_PASSPORT = 1334
    TIK_TOK_DATA_PLATFORM_LIBRA_LIBRA_VERSION_MANAGER = 1335
    TIK_TOK_DATA_PLATFORM_LIBRA_LIBRA_OPEN_API = 1336
    TIK_TOK_DATA_PLATFORM_LIBRA_LIBRA_AB_INSIGHT = 1337
    TIK_TOK_DATA_PLATFORM_MAAT_APPLICATION_INFO = 1338
    TIK_TOK_DATA_PLATFORM_MAAT_QUERY_INFO = 1339
    TIK_TOK_DATA_PLATFORM_MAAT_OPERATOR_INFO = 1340
    TIK_TOK_DATA_PLATFORM_DATA_RETENTION_BUSINESS_TABLE_MANAGEMENT = 1341
    TIK_TOK_DATA_PLATFORM_DATA_RETENTION_STRATEGY_MANAGEMENT = 1342
    TIK_TOK_DATA_PLATFORM_DATA_RETENTION_SYSTEM_MANAGEMENT = 1343
    TIK_TOK_DATA_PLATFORM_FEEDBACK_FEEDBACK = 1344
    TIK_TOK_DATA_PLATFORM_FEEDBACK_QA = 1345
    TIK_TOK_DATA_PLATFORM_FEEDBACK_DUTY = 1346
    TIK_TOK_DATA_PLATFORM_DATA_DISCOVERY_TASK_MANAGEMENT = 1347
    TIK_TOK_DATA_PLATFORM_DATA_DISCOVERY_RULE_MANAGEMENT = 1348
    TIK_TOK_DATA_PLATFORM_ONE_SERVICE_API_MANAGEMENT = 1349
    TIK_TOK_DATA_PLATFORM_ONE_SERVICE_API_ALARM = 1350
    TIK_TOK_DATA_PLATFORM_ONE_SERVICE_CATALOG_MANAGEMENT = 1351
    TIK_TOK_DATA_PLATFORM_ONE_SERVICE_ACCOUNT_MANAGEMENT = 1352
    TIK_TOK_DATA_PLATFORM_ONE_SERVICE_PROJECT_MANAGEMENT = 1353
    TIK_TOK_DATA_PLATFORM_HEALER_GOVERN_METADATA = 1354
    TIK_TOK_DATA_PLATFORM_HEALER_SLA_METADATA = 1355
    TIK_TOK_DATA_PLATFORM_HEALER_DELAY_RECORD = 1356
    TIK_TOK_SYSTEM_B_GE_TICKETS_AND_WORK_ORDERS = 1357
    TIK_TOK_SYSTEM_B_GE_USAGE_AND_BILLING = 1358
    TIK_TOK_SYSTEM_B_GE_PS_M_INFO = 1359
    TIK_TOK_SYSTEM_B_GE_SECRET_STORAGE = 1360
    TIK_TOK_SYSTEM_ET_M_CONTROLLER_PROCESS = 1361
    TIK_TOK_SYSTEM_ET_M_BMP_PROCESS = 1362
    TIK_TOK_SYSTEM_ET_M_BGP_PROCESS = 1363
    TIK_TOK_SYSTEM_ET_M_RULES_IN_EFFECT = 1364
    TIK_TOK_SYSTEM_ET_M_BGP_INFO = 1365
    TIK_TOK_SYSTEM_ET_M_BMP_INFO = 1366
    TIK_TOK_SYSTEM_ET_M_LOG_TAIL = 1367
    TIK_TOK_SYSTEM_ET_M_GRAF_AN_A_LINK = 1368
    TIK_TOK_SYSTEM_S_SO_T_TO_IDENTITIES = 1369
    TIK_TOK_SYSTEM_S_SO_IDENTITY_VALIDATION = 1370
    TIK_TOK_SYSTEM_CM_DB_SERVER_EC_SERVER_V_PC_ETC = 1371
    TIK_TOK_SYSTEM_T_LB_T_LB_CONF_MANAGER = 1372
    TIK_TOK_SYSTEM_FRONTIER_FRONTIER_CONF_MANAGER = 1373
    TIK_TOK_SYSTEM_CM_DB_RESOURCE_DATA_MANAGER = 1374
    TIK_TOK_SYSTEM_X_FLOW_BUSINESS_PROCESS_MANAGER = 1375
    TIK_TOK_SYSTEM_CERTIFICATE_CERTIFICATE_MANAGER = 1376
    TIK_TOK_SYSTEM_TNC_TNC_CONF_MANAGER = 1377
    TIK_TOK_SYSTEM_HTTP_DNS_HTTP_DNS_CONTROLLER = 1378
    TIK_TOK_SYSTEM_DOMAIN_DOMAIN_MANAGER = 1379
    TIK_TOK_SYSTEM_BYTE_BOX_SERVICE_TREE_MANAGER = 1380
    TIK_TOK_SYSTEM_BYTE_BOX_BYTE_BOX_MANAGER = 1381
    TIK_TOK_SYSTEM_BYTE_BOX_FE_MANAGER = 1382
    TIK_TOK_SYSTEM_BYTE_BOX_KONG_MANAGER = 1383
    TIK_TOK_SYSTEM_DNS_FUSION_DNS = 1384
    TIK_TOK_SYSTEM_TIA_GW_TIA_GW_ADMIN = 1385
    TIK_TOK_SYSTEM_TIP_A_AS_TIP_A_AS = 1386
    TIK_TOK_SYSTEM_TII_AM_TI_ACCESS_CONTROL = 1387
    TIK_TOK_SYSTEM_FUSION_CD_N_FUSION_C_DNS_RE = 1388
    TIK_TOK_SYSTEM_FUSION_CD_N_FUSION_C_DNC_S_CM = 1389
    TIK_TOK_SYSTEM_FUSION_CD_N_FUSION_CD_N_CONSOLE = 1390
    TIK_TOK_SYSTEM_OR_THRUS_SYSTEM_ADMIN_INFO = 1391
    TIK_TOK_SYSTEM_OR_THRUS_SERVER_PERMISSION_INFO = 1392
    TIK_TOK_SYSTEM_OR_THRUS_PS_M_PERMISSION_INFO = 1393
    TIK_TOK_SYSTEM_OR_THRUS_CIDR_PERMISSION_INFO = 1394
    TIK_TOK_SYSTEM_OR_THRUS_PERMISSION_STATUS_INFO = 1395
    TIK_TOK_SYSTEM_FAULT_SERVER_FAULT_MANAGER = 1396
    TIK_TOK_SYSTEM_VELA_MONITORING_METRICS = 1397
    TIK_TOK_SYSTEM_VELA_ALERT_DATA = 1398
    TIK_TOK_SYSTEM_VELA_SERVER_MANAGEMENT_DATA = 1399
    TIK_TOK_SYSTEM_VELA_SYSTEM_ADMIN_DATA = 1400
    TIK_TOK_SYSTEM_GRAF_AN_A_DASHBOARD_MANAGER_INTERFACE = 1401
    TIK_TOK_SYSTEM_GRAF_AN_A_LOGIN_AU_TH_MANAGER_INTERFACE = 1402
    TIK_TOK_SYSTEM_CD_N_CD_N_METRIC = 1403
    TIK_TOK_SYSTEM_CD_N_CD_N_GEO_INFO = 1404
    TIK_TOK_SYSTEM_GCS_APP_STATUS = 1405
    TIK_TOK_SYSTEM_GCS_POP_STATUS = 1406
    TIK_TOK_SYSTEM_GCS_DEPLOY_TASK_STATUS = 1407
    TIK_TOK_SYSTEM_GCS_APP_SERVICE_STATUS = 1408
    TIK_TOK_SYSTEM_SAO_S_SAO_S_SERVER_MANAGER = 1409
    TIK_TOK_SYSTEM_SDP_SERVER_MANAGEMENT_DATA = 1410
    TIK_TOK_SEARCH_SEARCH_BUSINESS_SEARCH_RESULT = 1411
    TIK_TOK_SEARCH_SEARCH_BUSINESS_SEARCH_IMPRESSION = 1412
    TIK_TOK_SEARCH_SEARCH_BUSINESS_SEARCH_ACTIVITY = 1413
    TIK_TOK_SEARCH_SEARCH_BUSINESS_TRENDING_HOTSPOT = 1414
    TIK_TOK_SEARCH_SEARCH_BUSINESS_TRENDING_BILLBOARD = 1415
    TIK_TOK_SEARCH_SEARCH_BUSINESS_TRENDING_HOTSPOT_ITEM = 1416
    TIK_TOK_SEARCH_SEARCH_ENGINE_SEARCH_CLICK_THROUGH = 1417
    TIK_TOK_SEARCH_SEARCH_ENGINE_VIDEO_OFFLINE_STATUS = 1418
    TIK_TOK_SEARCH_SEARCH_ENGINE_VIDEO_RELEVANCE_DATA = 1419
    TIK_TOK_SEARCH_SEARCH_ENGINE_VIDEO_COUNTER_CHANGE = 1420
    TIK_TOK_SEARCH_SEARCH_ENGINE_STABILITY_METRICS = 1421
    TIK_TOK_SEARCH_SEARCH_REC_SEARCH_SUGGESTION = 1422
    TIK_TOK_SEARCH_SEARCH_NLP_SEARCH_CLICK_THROUGH = 1423
    TIK_TOK_SEARCH_SEARCH_NLP_VIDEO_OFFLINE_STATUS = 1424
    TIK_TOK_SEARCH_SEARCH_NLP_VIDEO_RELEVANCE_DATA = 1425
    TIK_TOK_SEARCH_SEARCH_DA_SEARCH_EVENTS = 1426
    TIK_TOK_SEARCH_SEARCH_DA_SEARCH_REN_TENT_ION = 1427
    TIK_TOK_SEARCH_SEARCH_DA_S_UG = 1428
    TIK_TOK_SEARCH_SEARCH_DA_SEARCH_RESULTS = 1429
    TIK_TOK_SECURITY_ENG_KANI_AGENT = 1430
    TIK_TOK_SECURITY_ENG_KANI_REQUEST = 1431
    TIK_TOK_SECURITY_ENG_KANI_WORK_FLOW = 1432
    TIK_TOK_SECURITY_ENG_KANI_REVIEW = 1433
    TIK_TOK_SECURITY_ENG_KANI_APP = 1434
    TIK_TOK_SECURITY_ENG_KANI_CUSTOM_TAG = 1435
    TIK_TOK_SECURITY_ENG_KANI_GENERAL_TAG = 1436
    TIK_TOK_SECURITY_ENG_KANI_IDENTITY = 1437
    TIK_TOK_SECURITY_ENG_KANI_KANI = 1438
    TIK_TOK_SECURITY_ENG_KANI_LOG = 1439
    TIK_TOK_SECURITY_ENG_KANI_ROLE = 1440
    TIK_TOK_SECURITY_ENG_KANI_REGION = 1441
    TIK_TOK_SECURITY_ENG_KANI_PERMISSION = 1442
    TIK_TOK_SECURITY_ENG_KANI_RESOURCE = 1443
    TIK_TOK_SECURITY_ENG_KANI_USER_GROUP = 1444
    TIK_TOK_SECURITY_ENG_KANI_USER = 1445
    TIK_TOK_SECURITY_ENG_A_CP_EMPLOYEE_USER = 1446
    TIK_TOK_SECURITY_ENG_A_CP_PLATFORM = 1447
    TIK_TOK_SECURITY_ENG_A_CP_DOWNGRADE_INFO = 1448
    TIK_TOK_SECURITY_ENG_A_CP_RESOURCE = 1449
    TIK_TOK_SECURITY_ENG_A_CP_PERMISSION = 1450
    TIK_TOK_SECURITY_ENG_A_CP_EMPLOYEE_USER_GROUP = 1451
    TIK_TOK_SECURITY_ENG_A_CP_SERVICE = 1452
    TIK_TOK_SECURITY_ENG_A_CP_DEPARTMENT = 1453
    TIK_TOK_SECURITY_ENG_A_CP_PRODUCT = 1454
    TIK_TOK_SECURITY_ENG_A_CP_CONTENTS = 1455
    TIK_TOK_SECURITY_ENG_KM_SV_2_INFO = 1456
    TIK_TOK_SECURITY_ENG_KM_SV_2_KEY_RING = 1457
    TIK_TOK_SECURITY_ENG_KM_SV_2_CUSTOMER_KEY = 1458
    TIK_TOK_SECURITY_ENG_KM_SV_2_SECRET = 1459
    TIK_TOK_SECURITY_ENG_KM_SV_2_SPIFF_E_MATCH_ER = 1460
    TIK_TOK_SECURITY_ENG_KM_SV_2_ACCESS_CONTROL_LIST = 1461
    TIK_TOK_SECURITY_ENG_PUNISH_CENTER_PUNISH_LOG = 1462
    TIK_TOK_SECURITY_ENG_PUNISH_CENTER_PUNISH_STATUS = 1463
    TIK_TOK_SECURITY_ENG_PUNISH_CENTER_PUNISH_TASK = 1464
    TIK_TOK_SECURITY_ENG_RISK_META_SERVICE_RISK_METADATA = 1465
    TIK_TOK_SECURITY_ENG_DOLPHIN_PLATFORM_METADATA = 1466
    TIK_TOK_SECURITY_ENG_DOLPHIN_RULE_EXPRESSION = 1467
    TIK_TOK_SECURITY_ENG_DOLPHIN_FACTOR = 1468
    TIK_TOK_SECURITY_ENG_DOLPHIN_NAME_LIST = 1469
    TIK_TOK_SECURITY_ENG_IP_BASIC_OR_RISK_INFO_LOCATION_INFO = 1470
    TIK_TOK_SECURITY_ENG_IP_BASIC_OR_RISK_INFO_RISK_INFO = 1471
    TIK_TOK_SECURITY_ENG_PHONE_RISK_INFO_RISK_INFO = 1472
    TIK_TOK_SECURITY_ENG_SHARK_RULE = 1473
    TIK_TOK_SECURITY_ENG_SHARK_FACTOR = 1474
    TIK_TOK_SECURITY_ENG_SHARK_ALERT = 1475
    TIK_TOK_SECURITY_ENG_SHARK_PLATFORM_META = 1476
    TIK_TOK_SECURITY_ENG_SHARK_NAME_LIST_META = 1477
    TIK_TOK_SECURITY_ENG_WHALE_RULE = 1478
    TIK_TOK_SECURITY_ENG_WHALE_FACTOR = 1479
    TIK_TOK_SECURITY_ENG_WHALE_ALERT = 1480
    TIK_TOK_SECURITY_ENG_WHALE_PLATFORM_META = 1481
    TIK_TOK_SECURITY_ENG_WHALE_NAME_LIST_META = 1482
    TIK_TOK_SECURITY_ENG_AQUA_VERIFICATION = 1483
    TIK_TOK_SECURITY_ENG_AQUA_GATEWAY_CONNECTION_PATHS = 1484
    TIK_TOK_SECURITY_ENG_TUNA_ML_MODELS = 1485
    TIK_TOK_SECURITY_ENG_SEC_LINK_RULE = 1486
    TIK_TOK_SECURITY_ENG_SEC_LINK_APP_SETTING = 1487
    TIK_TOK_SECURITY_ENG_SEC_LINK_SEC_LINK_SCENE = 1488
    TIK_TOK_SECURITY_ENG_LIVE_GIFT_GRAPH_MERGE = 1489
    TIK_TOK_SECURITY_ENG_BYTE_SECURITY_EMPLOYEE_USER = 1490
    TIK_TOK_SECURITY_ENG_BYTE_SECURITY_PERMISSION = 1491
    TIK_TOK_SECURITY_ENG_BYTE_SECURITY_VULNERABILITY = 1492
    TIK_TOK_SECURITY_ENG_BYTE_SECURITY_COMMENT = 1493
    TIK_TOK_SECURITY_ENG_BYTE_SECURITY_RECORD = 1494
    TIK_TOK_SECURITY_ENG_BYTE_SECURITY_PARAMETER = 1495
    TIK_TOK_SECURITY_ENG_BYTE_SECURITY_TICKET_DETAIL = 1496
    TIK_TOK_SECURITY_ENG_ORCA_DATA_SOURCE_INFO = 1497
    TIK_TOK_SECURITY_ENG_ORCA_TASK_INFO = 1498
    TIK_TOK_SECURITY_ENG_ORCA_STRATEGY_INFO = 1499
    TIK_TOK_SECURITY_ENG_ORCA_STRATEGY_OPERATION = 1500
    TIK_TOK_SECURITY_ENG_ORCA_OPERATOR_INFO = 1501
    TIK_TOK_SECURITY_ENG_CSR_F = 1502
    TIK_TOK_SECURITY_ENG_DEVICE_RISK_INFO_WEB_RISK_INFO = 1503
    TIK_TOK_SECURITY_ENG_DEVICE_RISK_INFO_MOBILE_RISK_INFO = 1504
    TIK_TOK_SECURITY_ENG_NEMO_RISK_CONTENT = 1505
    TIK_TOK_SECURITY_ENG_NETWORK_SECURITY_NT_A_STATISTICS = 1506
    TIK_TOK_VIDEO_ARCH_V_ADMIN_STREAM = 1507
    TIK_TOK_VIDEO_ARCH_V_ADMIN_TASK = 1508
    TIK_TOK_VIDEO_ARCH_V_ADMIN_CONFIG = 1509
    TIK_TOK_VIDEO_ARCH_V_ADMIN_SOURCE_STATION = 1510
    TIK_TOK_VIDEO_ARCH_V_ADMIN_NODE = 1511
    TIK_TOK_VIDEO_ARCH_V_ADMIN_SCHEDULE = 1512
    TIK_TOK_VIDEO_ARCH_VO_D_VIDEO = 1513
    TIK_TOK_VIDEO_ARCH_VO_D_VIDEO_FILE = 1514
    TIK_TOK_VIDEO_ARCH_VO_D_OBJECT_FILE_META = 1515
    TIK_TOK_VIDEO_ARCH_VO_D_TRACKING_DATA = 1516
    TIK_TOK_VIDEO_ARCH_VO_D_DOMAIN_SCHEDULER = 1517
    TIK_TOK_VIDEO_ARCH_VO_D_VO_D_CONF = 1518
    TIK_TOK_VIDEO_ARCH_VO_D_VIDEO_DER_IVAN_T = 1519
    TIK_TOK_VIDEO_ARCH_LIVE_SCHEDULER_STREAM = 1520
    TIK_TOK_VIDEO_ARCH_LIVE_SCHEDULER_CD_N = 1521
    TIK_TOK_VIDEO_ARCH_LIVE_SCHEDULER_PUSH_C_DNA_PP = 1522
    TIK_TOK_VIDEO_ARCH_LIVE_SCHEDULER_PLAY_C_DNA_PP = 1523
    TIK_TOK_VIDEO_ARCH_LIVE_SCHEDULER_TEMPLATE = 1524
    TIK_TOK_VIDEO_ARCH_LIVE_SCHEDULER_VO_D_FILE = 1525
    TIK_TOK_VIDEO_ARCH_LIVE_SCHEDULER_CONFIG = 1526
    TIK_TOK_VIDEO_ARCH_RT_C_SIGNAL_CLIENT = 1527
    TIK_TOK_VIDEO_ARCH_RT_C_SIGNAL_STREAM = 1528
    TIK_TOK_VIDEO_ARCH_RT_C_SIGNAL_CHANNEL = 1529
    TIK_TOK_VIDEO_ARCH_RT_C_SIGNAL_EDGE_SIGNAL_AND_EDGE_INFO = 1530
    TIK_TOK_VIDEO_ARCH_RT_C_SIGNAL_ROOM_STATUS = 1531
    TIK_TOK_VIDEO_ARCH_RT_C_SIGNAL_MS_RPC_RE_QV_2 = 1532
    TIK_TOK_VIDEO_ARCH_RT_C_SIGNAL_P_2_P_MESSAGE = 1533
    TIK_TOK_VIDEO_ARCH_RT_C_SIGNAL_TM_Q_MESSAGE = 1534
    TIK_TOK_VIDEO_ARCH_RT_C_SIGNAL_CAST_MESSAGE = 1535
    TIK_TOK_VIDEO_ARCH_RT_C_SCHEDULE_REPORT_STREAM_REQUEST = 1536
    TIK_TOK_VIDEO_ARCH_RT_C_SCHEDULE_BATCH_REPORT_STREAMS_REQUEST = 1537
    TIK_TOK_VIDEO_ARCH_RT_C_SCHEDULE_REPORT_MEDIA_REQUEST = 1538
    TIK_TOK_VIDEO_ARCH_RT_C_SCHEDULE_REPORT_FEEDBACK_REQUEST = 1539
    TIK_TOK_VIDEO_ARCH_RT_C_SCHEDULE_SCHEDULE_IN_FOR_EQ = 1540
    TIK_TOK_VIDEO_ARCH_INFRA_BUCKET_META = 1541
    TIK_TOK_VIDEO_ARCH_INFRA_BUCKET_I_DC_CONFIG = 1542
    TIK_TOK_VIDEO_ARCH_INFRA_I_DC_META = 1543
    TIK_TOK_VIDEO_ARCH_INFRA_I_DC_PROXY = 1544
    TIK_TOK_VIDEO_ARCH_INFRA_ACCOUNT = 1545
    TIK_TOK_VIDEO_ARCH_INFRA_ACCOUNT_CONFIG = 1546
    TIK_TOK_VIDEO_ARCH_INFRA_EVENT_TYPE = 1547
    TIK_TOK_VIDEO_ARCH_INFRA_NOTIFY_INFO = 1548
    TIK_TOK_VIDEO_ARCH_INFRA_RATE_LIMIT_CONFIG = 1549
    TIK_TOK_VIDEO_ARCH_INFRA_RE_Q_SIGN = 1550
    TIK_TOK_VIDEO_ARCH_IMAGE_X_TEMPLATE = 1551
    TIK_TOK_VIDEO_ARCH_IMAGE_X_DOMAIN = 1552
    TIK_TOK_VIDEO_ARCH_IMAGE_X_IMAGE = 1553
    TIK_TOK_VIDEO_ARCH_IMAGE_X_SERVICE = 1554
    TIK_TOK_VIDEO_ARCH_IMAGE_X_STORAGE = 1555
    TIK_TOK_VIDEO_ARCH_IMAGE_X_ACCOUNT = 1556
    TIK_TOK_VIDEO_ARCH_IMAGE_X_IMAGE_SERVICE_APP = 1557
    TIK_TOK_VIDEO_ARCH_V_FRAME_JOB = 1558
    TIK_TOK_VIDEO_ARCH_V_FRAME_SNAPSHOT_DATA = 1559
    TIK_TOK_VIDEO_ARCH_V_FRAME_AUDIO_DATA = 1560
    TIK_TOK_VIDEO_ARCH_V_FRAME_POSTER_CANDIDATE_DATA = 1561
    TIK_TOK_VIDEO_ARCH_V_FRAME_SPEAKER_IDENTIFICATION_DATA = 1562
    TIK_TOK_VIDEO_ARCH_V_FRAME_AUDIO_EVENT_DETECTION_DATA = 1563
    TIK_TOK_VIDEO_ARCH_V_FRAME_AUTOMATIC_SPEECH_RECOGNITION_DATA = 1564
    TIK_TOK_VIDEO_ARCH_V_FRAME_LANGUAGE_IDENTIFY_DETECTION_DATA = 1565
    TIK_TOK_VIDEO_ARCH_V_FRAME_GOOGLE_AUTOMATIC_SPEECH_RECOGNITION_DATA = 1566
    TIK_TOK_VIDEO_ARCH_V_FRAME_BETTER_FRAMES_DATA = 1567
    TIK_TOK_VIDEO_ARCH_V_FRAME_VIDEO_FRAME = 1568
    TIK_TOK_VIDEO_ARCH_V_FRAME_AUDIOFILE = 1569
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_APP_ID = 1570
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_OS = 1571
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_APP_VERSION = 1572
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_IES_DEVICE_LEVEL = 1573
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_CHANNEL = 1574
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_COUNTRY = 1575
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_FIRST_FRAME_TIME = 1576
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_AVERAGE_SEEK_TIME = 1577
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_AVERAGE_VIEW_COUNT = 1578
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_ERROR_RATE = 1579
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_BROKEN_RATE = 1580
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_LEAVE_WITHOUT_PLAY_RATE = 1581
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_BUFFERED_RATE = 1582
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_BUFFERED_TIMES_PER_100_SECONDS = 1583
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_BUFFERED_DURATION_PER_100_SECONDS = 1584
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_AVERAGE_BITRATE = 1585
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_OUT_SYNC_RATE = 1586
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_AVERAGE_PLAY_TIME = 1587
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_AVERAGE_PLAY_COUNT = 1588
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_AVERAGE_FINISH_PLAY_COUNT = 1589
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_UV = 1590
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_FINISH_PLAY_RATE = 1591
    TIK_TOK_VIDEO_ARCH_VO_D_QO_S_AVERAGE_VIDEO_TIME = 1592
    TIK_TOK_VIDEO_ARCH_LIVE_FCD_N_STREAM = 1593
    TIK_TOK_VIDEO_ARCH_LIVE_FCD_N_TASK = 1594
    TIK_TOK_VIDEO_ARCH_LIVE_FCD_N_CONFIG = 1595
    TIK_TOK_VIDEO_ARCH_LIVE_FCD_N_SOURCE_STATION = 1596
    TIK_TOK_VIDEO_ARCH_LIVE_FCD_N_NODE = 1597
    TIK_TOK_VIDEO_ARCH_LIVE_FCD_N_SCHEDULE = 1598
    TIK_TOK_VIDEO_ARCH_CONSOLE_REQUEST_DATA = 1599
    TIK_TOK_VIDEO_ARCH_NEXUS_CONFIG = 1600
    TIK_TOK_VIDEO_ARCH_NEXUS_TICKET = 1601
    TIK_TOK_VIDEO_ARCH_NEXUS_FORM = 1602
    TIK_TOK_VIDEO_ARCH_NEXUS_PROJECT = 1603
    TIK_TOK_VIDEO_ARCH_NEXUS_PROJECT_USER = 1604
    TIK_TOK_VIDEO_ARCH_NEXUS_PERMISSION = 1605
    TIK_TOK_VIDEO_ARCH_NEXUS_CATEGORY = 1606
    TIK_TOK_VIDEO_ARCH_NEXUS_TAG = 1607
    TIK_TOK_VIDEO_ARCH_NEXUS_TEMPLATE = 1608
    TIK_TOK_VIDEO_ARCH_NEXUS_WORK_FLOWS = 1609
    TIK_TOK_VIDEO_ARCH_NEXUS_LARK = 1610
    TIK_TOK_VIDEO_ARCH_TESLA_CONFIG = 1611
    TIK_TOK_VIDEO_ARCH_TESLA_TASK_INFO = 1612
    TIK_TOK_VIDEO_ARCH_TESLA_TESTING_REPORT = 1613
    TIK_TOK_VIDEO_ARCH_TESLA_EXECUTION_INFO = 1614
    TIK_TOK_VIDEO_ARCH_TESLA_CASE_INFO = 1615
    TIK_TOK_VIDEO_ARCH_TESLA_CASE_LIST = 1616
    TIK_TOK_VIDEO_ARCH_M_DE_DR = 1617
    TIK_TOK_VIDEO_ARCH_M_DE_SHIRO = 1618
    TIK_TOK_VIDEO_ARCH_M_DE_MEASURE = 1619
    TIK_TOK_VIDEO_ARCH_M_DE_ONE_ACCESS = 1620
    TIK_TOK_VIDEO_ARCH_M_DE_V_QUERY = 1621
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_DEPLOYMENT_RECORD = 1622
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_LOGO_TEMPLATE = 1623
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_TASK_LIST = 1624
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_TASK_TEMPLATE = 1625
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_TASK_TEMPLATE_COMMIT = 1626
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_TRAFFIC_CONFIG = 1627
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_TRANS_CODE_ACTIVITY = 1628
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_WORK_FLOW_TEMPLATE = 1629
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_WORK_FLOW_TEMPLATE_COMMIT = 1630
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_ACTIVITIES = 1631
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_ACTIVITY_TYPE = 1632
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_AUTHORIZATIONS = 1633
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_DOMAIN = 1634
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_ENTITY_VERSION_ALIASES = 1635
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_WORK_FLOW_TYPE = 1636
    TIK_TOK_VIDEO_ARCH_TRANS_CODE_WORK_FLOWS = 1637
    TIK_TOK_VIDEO_ARCH_M_CP_FUNCTION_INFO = 1638
    TIK_TOK_VIDEO_ARCH_M_CP_TASK_INFO = 1639
    TIK_TOK_VIDEO_ARCH_M_CP_CLUSTER_INFO = 1640
    TIK_TOK_VIDEO_ARCH_R_TCQ_OS_STATISTICS_AUDIO_OR_VIDEOS_TALL_AND_DELAY = 1641
    TIK_TOK_VIDEO_ARCH_R_TCQ_OS_STATISTICS_CRASH = 1642
    TIK_TOK_VIDEO_ARCH_R_TCQ_OS_STATISTICS_FIRST_FRAME_RECEIVE = 1643
    TIK_TOK_VIDEO_ARCH_R_TCQ_OS_STATISTICS_FIRST_FRAMES_END = 1644
    TIK_TOK_VIDEO_ARCH_R_TCQ_OS_STATISTICS_JOIN_ROOM = 1645
    TIK_TOK_VIDEO_ARCH_R_TCQ_OS_STATISTICS_RECORD = 1646
    TIK_TOK_VIDEO_ARCH_R_TCQ_OS_STATISTICS_TRANS_CODE = 1647
    TIK_TOK_VIDEO_ARCH_R_TCQ_OS_STATISTICS_BILLING = 1648
    TIK_TOK_VIDEO_ARCH_R_TCQ_OS_STATISTICS_MEDIA_CAPACITY = 1649
    TIK_TOK_VIDEO_ARCH_RT_C_BILLING_BYTE_MEASURE_DAILY = 1650
    TIK_TOK_VIDEO_ARCH_RT_C_BILLING_BYTE_MEASURE_HOURLY = 1651
    TIK_TOK_VIDEO_ARCH_RT_C_BILLING_SERVICE = 1652
    TIK_TOK_VIDEO_ARCH_S_RE_INFRASTRUCTURE_LARK = 1653
    TIK_TOK_VIDEO_ARCH_RT_C_DECISION_POLICY = 1654
    TIK_TOK_VIDEO_ARCH_RT_C_DECISION_HISTORY = 1655
    TIK_TOK_VIDEO_ARCH_RT_C_DECISION_BUSINESS_INFO = 1656
    TIK_TOK_VIDEO_ARCH_RT_C_DECISION_CONFIG = 1657
    TIK_TOK_DATA_A_ML_BERNARD_MODEL = 1658
    TIK_TOK_DATA_A_ML_BERNARD_DEPLOYMENT = 1659
    TIK_TOK_DATA_A_ML_BERNARD_SERVICE = 1660
    TIK_TOK_DATA_A_ML_BERNARD_INSTANCE = 1661
    TIK_TOK_DATA_A_ML_BERNARD_U_8_S_STATUS = 1662
    TIK_TOK_DATA_A_ML_BERNARD_QUOTA = 1663
    TIK_TOK_DATA_A_ML_BERNARD_AUDIT_LOG = 1664
    TIK_TOK_DATA_A_ML_BERNARD_SERVICE_MS_INFO = 1665
    TIK_TOK_DATA_A_ML_BERNARD_MACHINE_METRICS = 1666
    TIK_TOK_DATA_A_ML_BERNARD_DEPLOYMENT_AUTO_SCALE_TASK = 1667
    TIK_TOK_DATA_A_ML_BERNARD_MODEL_A_CL = 1668
    TIK_TOK_DATA_A_ML_BERNARD_USER = 1669
    TIK_TOK_DATA_A_ML_ARNOLD_JOB = 1670
    TIK_TOK_DATA_A_ML_ARNOLD_TASK = 1671
    TIK_TOK_DATA_A_ML_ARNOLD_TRIAL = 1672
    TIK_TOK_DATA_A_ML_ARNOLD_INSTANCE = 1673
    TIK_TOK_DATA_A_ML_ARNOLD_GROUP = 1674
    TIK_TOK_DATA_A_ML_ARNOLD_CLUSTER = 1675
    TIK_TOK_DATA_A_ML_ARNOLD_BUILD = 1676
    TIK_TOK_DATA_A_ML_ARNOLD_SERVICE_TREE = 1677
    TIK_TOK_DATA_A_ML_ARNOLD_INTERNAL_USER = 1678
    TIK_TOK_DATA_A_ML_PS_DB_CLUSTER = 1679
    TIK_TOK_DATA_A_ML_PS_DB_MODEL = 1680
    TIK_TOK_DATA_A_ML_PS_DB_PS_REPLICA = 1681
    TIK_TOK_DATA_A_ML_PS_DB_PSS_LOT = 1682
    TIK_TOK_DATA_A_ML_PS_DB_MACHINE_METRICS = 1683
    TIK_TOK_DATA_A_ML_PS_DB_USER = 1684
    TIK_TOK_DATA_A_ML_PS_DB_FEATURE_EVICT = 1685
    TIK_TOK_DATA_A_ML_PS_DB_LINK_INFO = 1686
    TIK_TOK_DATA_A_ML_PS_DB_STATUS = 1687
    TIK_TOK_DATA_A_ML_PS_DB_MESSAGE = 1688
    TIK_TOK_DATA_A_ML_PS_DB_DC = 1689
    TIK_TOK_DATA_A_ML_PS_DB_TASK = 1690
    TIK_TOK_DATA_A_ML_PS_DB_BUILD = 1691
    TIK_TOK_DATA_A_ML_PS_DB_DEPLOYMENT = 1692
    TIK_TOK_DATA_A_ML_PS_DB_VERSION = 1693
    TIK_TOK_DATA_A_ML_PS_DB_ROLE = 1694
    TIK_TOK_DATA_A_ML_PS_DB_JOB = 1695
    TIK_TOK_DATA_A_ML_PS_DB_ACTION = 1696
    TIK_TOK_DATA_A_ML_REAM_DISPLAY_QUERY = 1697
    TIK_TOK_DATA_A_ML_RECKON_COMMON = 1698
    TIK_TOK_DATA_A_ML_RECKON_ACCOUNT = 1699
    TIK_TOK_DATA_A_ML_RECKON_AUDIT = 1700
    TIK_TOK_DATA_A_ML_RECKON_BUSINESS = 1701
    TIK_TOK_DATA_A_ML_RECKON_RESOURCE = 1702
    TIK_TOK_DATA_A_ML_RECKON_FORGE = 1703
    TIK_TOK_DATA_A_ML_RECKON_GROOT = 1704
    TIK_TOK_DATA_A_ML_RECKON_INDEX_SERVICE = 1705
    TIK_TOK_DATA_A_ML_RECKON_JARVIS = 1706
    TIK_TOK_DATA_A_ML_RECKON_FOLDERS = 1707
    TIK_TOK_DATA_A_ML_RECKON_ML_X_STUDIO = 1708
    TIK_TOK_DATA_A_ML_RECKON_MODEL_HUB = 1709
    TIK_TOK_DATA_A_ML_RECKON_MODEL_SERVING = 1710
    TIK_TOK_DATA_A_ML_RECKON_M_STEP = 1711
    TIK_TOK_DATA_A_ML_RECKON_DATA_COLLECTION = 1712
    TIK_TOK_DATA_A_ML_RECKON_PRODUCT = 1713
    TIK_TOK_DATA_A_ML_RECKON_SEARCH = 1714
    TIK_TOK_DATA_A_ML_RECKON_SURVEY = 1715
    TIK_TOK_DATA_A_ML_RECKON_UNIVERSAL_EMBEDDING = 1716
    TIK_TOK_DATA_A_ML_RECKON_VIKING = 1717
    TIK_TOK_DATA_A_ML_RECKON_DESIGNER_USERNAME = 1718
    TIK_TOK_DATA_A_ML_RECKON_DESIGNER_BOOTSTRAP = 1719
    TIK_TOK_DATA_A_ML_RECKON_DESIGNER_OPERATOR = 1720
    TIK_TOK_DATA_A_ML_RECKON_DESIGNER_OPERATOR_VERSION = 1721
    TIK_TOK_DATA_A_ML_RECKON_DESIGNER_GENERAL_RESPONSE = 1722
    TIK_TOK_DATA_A_ML_RECKON_DESIGNER_CODE = 1723
    TIK_TOK_DATA_A_ML_RECKON_DESIGNER_EXPERIMENT = 1724
    TIK_TOK_DATA_A_ML_RECKON_DESIGNER_EXPERIMENT_RUN = 1725
    TIK_TOK_DATA_A_ML_RECKON_DESIGNER_TASK = 1726
    TIK_TOK_DATA_A_ML_RECKON_DESIGNER_ALGORITHM = 1727
    TIK_TOK_DATA_A_ML_RECKON_DESIGNER_DATA_SET = 1728
    TIK_TOK_DATA_A_ML_RECKON_DESIGNER_OPCODE = 1729
    TIK_TOK_DATA_A_ML_RECKON_AUTO_ML = 1730
    TIK_TOK_DATA_A_ML_TRAINING_SAILOR = 1731
    TIK_TOK_TN_S_CONTENT_ITEM = 1732
    TIK_TOK_TN_S_CONTENT_AUDIO = 1733
    TIK_TOK_TN_S_CONTENT_HASH_TAG = 1734
    TIK_TOK_TN_S_CONTENT_PLAYLIST = 1735
    TIK_TOK_TN_S_CONTENT_C_LA = 1736
    TIK_TOK_TN_S_CONTENT_EFFECT = 1737
    TIK_TOK_TN_S_CONTENT_STICKER = 1738
    TIK_TOK_TN_S_CONTENT_FORUM = 1739
    TIK_TOK_TN_S_CONTENT_PHOTO = 1740
    TIK_TOK_TN_S_CONTENT_BOOK_TOK = 1741
    TIK_TOK_TN_S_CONTENT_PAID_CONTENT = 1742
    TIK_TOK_TN_S_ACCOUNT_USER = 1743
    TIK_TOK_TN_S_ACCOUNT_USER_PROFILE = 1744
    TIK_TOK_TN_S_DIRECT_MESSAGE_CHAT_AND_CHAT_GROUP = 1745
    TIK_TOK_TN_S_SEARCH_S_UG = 1746
    TIK_TOK_TN_S_SEARCH_SEARCH_RESULTS = 1747
    TIK_TOK_TN_S_SEARCH_S_UG_REPORT = 1748
    TIK_TOK_TN_S_SEARCH_SEARCH_DEMOTION_CONFIGURATION = 1749
    TIK_TOK_TN_S_ANCHOR_ANCHOR = 1750
    TIK_TOK_TN_S_LIVE_ROOM = 1751
    TIK_TOK_TN_S_LIVE_OPERATION = 1752
    TIK_TOK_TN_S_LIVE_ISSUE_REVIEW = 1753
    TIK_TOK_TN_S_LIVE_NEWTYPE_REVIEW = 1754
    TIK_TOK_TN_S_LIVE_COMMENT = 1755
    TIK_TOK_TN_S_LIVE_AUDIO_SLICE = 1756
    TIK_TOK_TN_S_LIVE_ROOM_REPLAY = 1757
    TIK_TOK_TN_S_LIVE_SCREENSHOT = 1758
    TIK_TOK_TN_S_LIVE_REPORT = 1759
    TIK_TOK_TN_S_COMMENT_COMMENT = 1760
    TIK_TOK_TN_S_COMMENT_USER = 1761
    TIK_TOK_TN_S_COMMENT_ITEM = 1762
    TIK_TOK_TN_S_COMMENT_ITEM_CREATOR = 1763
    TIK_TOK_TN_S_REPORT_AND_APPEAL_REPORT = 1764
    TIK_TOK_TN_S_REPORT_AND_APPEAL_APPEAL = 1765
    TIK_TOK_TN_S_EMERGENCY_PROCESSING_PLATFORM_FE_DISPLAY_CONFIG = 1766
    TIK_TOK_TN_S_EMERGENCY_PROCESSING_PLATFORM_MEDIA_SEARCH = 1767
    TIK_TOK_TN_S_EMERGENCY_PROCESSING_PLATFORM_USER_RELATION = 1768
    TIK_TOK_TN_S_EMERGENCY_PROCESSING_PLATFORM_USER_INFO = 1769
    TIK_TOK_TN_S_EMERGENCY_PROCESSING_PLATFORM_BUSINESS_OPERATION_DATA = 1770
    TIK_TOK_TN_S_SENSITIVE_TEXT_SCE_AN_RIO_CONFIGURATION = 1771
    TIK_TOK_TN_S_SENSITIVE_TEXT_WORDS_CONFIGURATION = 1772
    TIK_TOK_TN_S_SENSITIVE_TEXT_EVALUATION_SAMPLE_DATA = 1773
    TIK_TOK_TN_S_SIMILARITY_DETECTION_DED_UP_ORIGINAL = 1774
    TIK_TOK_TN_S_SIMILARITY_DETECTION_DED_UP_MODEL_RESULT = 1775
    TIK_TOK_TN_S_SIMILARITY_DETECTION_DED_UP_MODEL_REQUEST = 1776
    TIK_TOK_TN_S_MODERATION_PIPELINE_TRACKING_PLATFORM_EVENT = 1777
    TIK_TOK_TN_S_MACHINE_MODERATION_STRATEGY_CONFIG = 1778
    TIK_TOK_TN_S_MACHINE_MODERATION_MODERATION_FEATURE = 1779
    TIK_TOK_TN_S_MACHINE_MODERATION_MODERATION_RESULT = 1780
    TIK_TOK_TN_S_MACHINE_MODERATION_PLATFORM_CONFIG = 1781
    TIK_TOK_TN_S_MACHINE_MODERATION_PLATFORM_RUNTIME_INFO = 1782
    TIK_TOK_TN_S_MACHINE_MODERATION_PLATFORM_OPERATION = 1783
    TIK_TOK_TN_S_MACHINE_MODERATION_MODERATION_BUSINESS_INFO = 1784
    TIK_TOK_TN_S_MACHINE_MODERATION_MODERATION_USER_INFO = 1785
    TIK_TOK_TN_S_HUMAN_MODERATION_TASK = 1786
    TIK_TOK_TN_S_HUMAN_MODERATION_TASK_VERIFY = 1787
    TIK_TOK_TN_S_HUMAN_MODERATION_JIM_U_TEMPLATE = 1788
    TIK_TOK_TN_S_HUMAN_MODERATION_PROJECT = 1789
    TIK_TOK_TN_S_HUMAN_MODERATION_PRACTICE = 1790
    TIK_TOK_TN_S_HUMAN_MODERATION_WORK_HOUR = 1791
    TIK_TOK_TN_S_HUMAN_MODERATION_TC_S_USER = 1792
    TIK_TOK_TN_S_HUMAN_MODERATION_USER_TIMELINE = 1793
    TIK_TOK_TN_S_HUMAN_MODERATION_EXPORT = 1794
    TIK_TOK_TN_S_HUMAN_MODERATION_TASKS_LIST_SETTING = 1795
    TIK_TOK_TN_S_HUMAN_MODERATION_READ_OPTION = 1796
    TIK_TOK_TN_S_HUMAN_MODERATION_HIGHLIGHT_WORDS = 1797
    TIK_TOK_TN_S_HUMAN_MODERATION_PRODUCT_TYPE = 1798
    TIK_TOK_TN_S_HUMAN_MODERATION_USER_CONFIG = 1799
    TIK_TOK_TN_S_HUMAN_MODERATION_USER_MEDIA = 1800
    TIK_TOK_TN_S_HUMAN_MODERATION_ATTENDANCE_CLOCK_DATA = 1801
    TIK_TOK_TN_S_GENERAL_SERVICES_TENANT = 1802
    TIK_TOK_TN_S_GENERAL_SERVICES_TENANT_SOURCE_INFO = 1803
    TIK_TOK_TN_S_GENERAL_SERVICES_DEPARTMENT = 1804
    TIK_TOK_TN_S_GENERAL_SERVICES_USER = 1805
    TIK_TOK_TN_S_GENERAL_SERVICES_USER_BACKUP = 1806
    TIK_TOK_TN_S_GENERAL_SERVICES_TAG = 1807
    TIK_TOK_TN_S_GENERAL_SERVICES_TAG_ENTITY = 1808
    TIK_TOK_TN_S_GENERAL_SERVICES_DEPARTMENT_MANAGER = 1809
    TIK_TOK_TN_S_GENERAL_SERVICES_USER_VARIATION = 1810
    TIK_TOK_TN_S_GENERAL_SERVICES_AUDIT_BASE = 1811
    TIK_TOK_TN_S_GENERAL_SERVICES_ACCOUNT = 1812
    TIK_TOK_TN_S_GENERAL_SERVICES_DEPARTMENT_TAG_WATCH = 1813
    TIK_TOK_TN_S_GENERAL_SERVICES_DEPARTMENT_TAG_RELATION = 1814
    TIK_TOK_TN_S_GENERAL_SERVICES_UC_ADMIN = 1815
    TIK_TOK_TN_S_GENERAL_SERVICES_PEOPLE_EMPLOYEE = 1816
    TIK_TOK_TN_S_GENERAL_SERVICES_PEOPLE_DEPARTMENT = 1817
    TIK_TOK_TN_S_GENERAL_SERVICES_APPROVAL_TICKET = 1818
    TIK_TOK_TN_S_GENERAL_SERVICES_APPROVAL_CALLBACK = 1819
    TIK_TOK_TN_S_GENERAL_SERVICES_DUTY_INFO = 1820
    TIK_TOK_TN_S_GENERAL_SERVICES_USER_SCHEDULE_INFO = 1821
    TIK_TOK_TN_S_GENERAL_SERVICES_IP_LOCATION_INFO = 1822
    TIK_TOK_TN_S_SPEECH_MODEL_AUDIO_RECORD = 1823
    TIK_TOK_TN_S_SPEECH_MODEL_ALPACA_AGENT_TASK = 1824
    TIK_TOK_TN_S_SPEECH_MODEL_PELICAN_TEST_SET = 1825
    TIK_TOK_TN_S_SPEECH_MODEL_PELICAN_LABEL_JOB = 1826
    TIK_TOK_TN_S_SPEECH_MODEL_PELICAN_MODEL_TEST = 1827
    TIK_TOK_TN_S_SPEECH_MODEL_PELICAN_BATCH_JOB = 1828
    TIK_TOK_TN_S_SPEECH_MODEL_PELICAN_ONLINE_JOB = 1829
    TIK_TOK_TN_S_SPEECH_MODEL_FALCON_WORK_FLOW = 1830
    TIK_TOK_TN_S_SPEECH_MODEL_FALCON_INSTANCE = 1831
    TIK_TOK_TN_S_SPEECH_MODEL_FALCON_OPERATOR = 1832
    TIK_TOK_TN_S_SPEECH_MODEL_FALCON_TRIGGER = 1833
    TIK_TOK_TN_S_SPEECH_MODEL_FALCON_TASK = 1834
    TIK_TOK_TN_S_SPEECH_MODEL_FALCON_HANDLER = 1835
    TIK_TOK_TN_S_SPEECH_MODEL_FALCON_THIRD_PARTY = 1836
    TIK_TOK_TN_S_SPEECH_MODEL_FALCON_ENGINEERING = 1837
    TIK_TOK_TN_S_SPEECH_MODEL_ALPACA_PLATFORM_TASK = 1838
    TIK_TOK_TN_S_SPEECH_MODEL_ALPACA_PLATFORM_SUB_TASK = 1839
    TIK_TOK_TN_S_SPEECH_MODEL_ALPACA_PLATFORM_JOB = 1840
    TIK_TOK_TN_S_SPEECH_MODEL_ALPACA_PLATFORM_RECORD = 1841
    TIK_TOK_TN_S_SPEECH_MODEL_ALPACA_PLATFORM_USER = 1842
    TIK_TOK_TN_S_SPEECH_MODEL_ALPACA_PLATFORM_DATA_SET = 1843
    TIK_TOK_TN_S_SPEECH_MODEL_ALPACA_PLATFORM_TEMPLATE = 1844
    TIK_TOK_TN_S_SPEECH_MODEL_ALPACA_PLATFORM_STATISTICS = 1845
    TIK_TOK_TN_S_SPEECH_MODEL_ALPACA_PLATFORM_SUBSCRIPTION = 1846
    TIK_TOK_TN_S_SPEECH_MODEL_ALPACA_PLATFORM_AGENT = 1847
    TIK_TOK_TN_S_SPEECH_MODEL_AUDIO_DED_UP_SERVICE = 1848
    TIK_TOK_TN_S_SPEECH_MODEL_AUDIO_SEARCH_SERVICE = 1849
    TIK_TOK_TN_S_SPEECH_MODEL_SPEECH_MODEL_PRODUCT = 1850
    TIK_TOK_TN_S_SPEECH_MODEL_VIDEO_CAPTION_SERVICE = 1851
    TIK_TOK_TN_S_SENSITIVE_TEXT_FRAMEWORK_SERVICE_CONFIG = 1852
    TIK_TOK_TN_S_SENSITIVE_TEXT_FRAMEWORK_HIT_INFO = 1853
    TIK_TOK_TN_S_SENSITIVE_TEXT_FRAMEWORK_MODEL_RESULTS = 1854
    TIK_TOK_TN_S_MODERATION_QUALITY_SPOT_CHECK_TASK = 1855
    TIK_TOK_TN_S_MODERATION_QUALITY_SPOT_CHECK_JOB = 1856
    TIK_TOK_TN_S_MODERATION_QUALITY_STREAM_SPOT_CHECK = 1857
    TIK_TOK_TN_S_MODERATION_QUALITY_SPOT_CHECK_CASE = 1858
    TIK_TOK_TN_S_MODERATION_QUALITY_SPOT_CHECK_DATA = 1859
    TIK_TOK_TN_S_MODERATION_QUALITY_APPEAL_CONFIG = 1860
    TIK_TOK_TN_S_MODERATION_QUALITY_APPEAL_CASE = 1861
    TIK_TOK_TN_S_MODERATION_QUALITY_APPEAL_LOG = 1862
    TIK_TOK_TN_S_MODERATION_QUALITY_APPEAL_USER = 1863
    TIK_TOK_TN_S_MODERATION_QUALITY_APPEAL_STATISTICS = 1864
    TIK_TOK_TN_S_MODERATION_QUALITY_LARK_MESSAGE = 1865
    TIK_TOK_TN_S_MODERATION_QUALITY_EXPORT_RECORD = 1866
    TIK_TOK_TN_S_MODERATION_QUALITY_SMART_PUT_META = 1867
    TIK_TOK_TN_S_MODERATION_QUALITY_SMART_PUT_HAWK_PARAM = 1868
    TIK_TOK_TN_S_MODERATION_QUALITY_SMART_PUT_DATA = 1869
    TIK_TOK_TN_S_MODERATION_QUALITY_EXAM = 1870
    TIK_TOK_TN_S_MODERATION_QUALITY_BUCKET = 1871
    TIK_TOK_TN_S_MODERATION_QUALITY_TEST_CONFIG = 1872
    TIK_TOK_TN_S_MODERATION_QUALITY_EXAM_ER = 1873
    TIK_TOK_TN_S_MODERATION_QUALITY_ANSWER = 1874
    TIK_TOK_TN_S_MODERATION_QUALITY_QUESTION = 1875
    TIK_TOK_TN_S_MODERATION_QUALITY_PAPER_QUESTION = 1876
    TIK_TOK_TN_S_MODERATION_QUALITY_TASK = 1877
    TIK_TOK_TN_S_MODERATION_QUALITY_ACCIDENT_ISSUE_RECORD = 1878
    TIK_TOK_TN_S_MODERATION_QUALITY_ACCIDENT_ISSUE_CONF = 1879
    TIK_TOK_TN_S_MODERATION_QUALITY_ACCIDENT_ISSUE_LABEL_REF = 1880
    TIK_TOK_TN_S_MODERATION_QUALITY_PEOPLE_INFO = 1881
    TIK_TOK_TN_S_MODERATION_QUALITY_RISK_PREDICT_DATA = 1882
    TIK_TOK_TN_S_MODERATION_QUALITY_RECORD_PROXY_DATA = 1883
    TIK_TOK_TN_S_MODERATION_QUALITY_ALL_CONFIG_KEY_DATA = 1884
    TIK_TOK_TN_S_MODERATION_QUALITY_TC_S_TASK_INFO = 1885
    TIK_TOK_TN_S_MODERATION_QUALITY_CONFIG_KEY_INFO = 1886
    TIK_TOK_TN_S_MODERATION_QUALITY_PS_M_MODEL_INFO = 1887
    TIK_TOK_TN_S_MODERATION_QUALITY_FORM_PROPERTIES = 1888
    TIK_TOK_TN_S_MODERATION_QUALITY_CONTENT_PROCESS_DATA = 1889
    TIK_TOK_TN_S_MODERATION_QUALITY_EXPORT_INFO = 1890
    TIK_TOK_TN_S_FALCON_CR_ON = 1891
    TIK_TOK_TN_S_FALCON_OPERATOR = 1892
    TIK_TOK_TN_S_FALCON_INSTANCE = 1893
    TIK_TOK_TN_S_FALCON_WORK_FLOW = 1894
    TIK_TOK_TN_S_FALCON_TASK = 1895
    TIK_TOK_TN_S_FALCON_TRIGGER = 1896
    TIK_TOK_TN_S_FALCON_HANDLER = 1897
    TIK_TOK_TN_S_FALCON_ARNOLD = 1898
    TIK_TOK_TN_S_FALCON_KANI = 1899
    TIK_TOK_TN_S_FALCON_FRONTEND = 1900
    TIK_TOK_TN_S_PELICAN_LABEL_JOB = 1901
    TIK_TOK_TN_S_PELICAN_TEST_SET = 1902
    TIK_TOK_TN_S_PELICAN_MODEL_TEST = 1903
    TIK_TOK_TN_S_PELICAN_BATCH_JOB = 1904
    TIK_TOK_TN_S_PELICAN_ONLINE_JOB = 1905
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_TENANT = 1906
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_TENANT_SOURCE_INFO = 1907
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_DEPARTMENT = 1908
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_USER_EMPLOYEE = 1909
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_USER_EMPLOYEE_BACKUP = 1910
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_TAG = 1911
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_TAG_ENTITY = 1912
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_DEPARTMENT_MANAGER = 1913
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_USER_VARIATION = 1914
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_AUDIT_BASE = 1915
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_ACCOUNT = 1916
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_DEPARTMENT_TAG_WATCH = 1917
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_DEPARTMENT_TAG_RELATION = 1918
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_UC_ADMIN = 1919
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_PEOPLE_EMPLOYEE = 1920
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_PLAN_DATA = 1921
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_USER_DOOR_GOD_EVENT = 1922
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_APPROVAL_TICKET = 1923
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_PLATFORM_ENGINEERING = 1924
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_ROLE = 1925
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_ROLE_CATALOG = 1926
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_APPLICATION = 1927
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_RESOURCE = 1928
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_RESOURCE_PUBLIC = 1929
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_RESOURCE_POINT = 1930
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_AU_TH_POINT = 1931
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_GROUP = 1932
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_DATA_RANGE = 1933
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_DATA_VALUE = 1934
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_DATA_PERMISSION = 1935
    TIK_TOK_TN_S_IDENTITY_AND_ACCESS_MANAGEMENT_TASK = 1936
    TIK_TOK_TN_S_FEEDBACK_MANAGEMENT_DUTY_INFO = 1937
    TIK_TOK_TN_S_FEEDBACK_MANAGEMENT_USER_SCHEDULE_INFO = 1938
    TIK_TOK_TN_S_AL_GO_GANDALF_MODEL_RESULT = 1939
    TIK_TOK_TN_S_AL_GO_CV_OR_NLP_MODEL_RESULT = 1940
    TIK_TOK_TN_S_TSO_P_PLATFORM = 1941
    TIK_TOK_TN_S_TSO_P_S_SO = 1942
    TIK_TOK_TN_S_TSO_P_THIRD_PARTY = 1943
    TIK_TOK_TN_S_TSO_P_PERMISSION = 1944
    TIK_TOK_LARK_IM_MESSAGE = 1945
    TIK_TOK_LARK_IM_CHAT = 1946
    TIK_TOK_LARK_IM_BOT = 1947
    TIK_TOK_LARK_CONTACT_USER = 1948
    TIK_TOK_LARK_CONTACT_DEPARTMENT = 1949
    TIK_TOK_LARK_EXCHANGE_ID = 1950
    TIK_TOK_LARK_AU_TH_TOKEN = 1951
    TIK_TOK_LARK_PEOPLE_PERSON_INFO = 1952
    TIK_TOK_LARK_PEOPLE_DEPARTMENT = 1953
    TIK_TOK_LARK_PEOPLE_COMPANY = 1954
    TIK_TOK_LARK_APP_ENGINE_OPEN_API = 1955
    TIK_TOK_EA_S_RE_C_ICD = 1956
    TIK_TOK_EA_S_RE_GAIA = 1957
    TIK_TOK_EA_S_RE_OWL = 1958
    TIK_TOK_EA_APPROVAL_PORTAL = 1959
    TIK_TOK_EA_APPROVAL_SOURCE = 1960
    TIK_TOK_EA_INFRA_MESSAGE = 1961
    TIK_TOK_EA_INFRA_U_AMS = 1962
    TIK_TOK_EA_INFRA_BYTE_DANCE_DEPARTMENT = 1963
    TIK_TOK_EA_INFRA_BYTE_DANCE_EMPLOYEE = 1964
    TIK_TOK_EA_INFRA_BYTE_DANCE_MD_M = 1965
    TIK_TOK_EA_FINANCE_FUND_PAYMENT = 1966
    TIK_TOK_EA_FINANCE_CORPORATE_ACCOUNT = 1967
    TIK_TOK_EA_FINANCE_CAPITAL_REPORT = 1968
    TIK_TOK_EA_FINANCE_TREASURE_MANAGEMENT = 1969
    TIK_TOK_EA_FINANCE_F_SSC_OPERATION = 1970
    TIK_TOK_EA_FINANCE_COST_SETTLEMENT = 1971
    TIK_TOK_EA_FINANCE_REVENUE_MANAGEMENT = 1972
    TIK_TOK_EA_FINANCE_PAYMENT_REQUEST = 1973
    TIK_TOK_EA_INFRINGEMENT_CLUE = 1974
    TIK_TOK_EA_INFRINGEMENT_REPORTER = 1975
    TIK_TOK_EA_INFRINGEMENT_COMPLAINT_DETAIL = 1976
    TIK_TOK_EA_RISK_SANCTION_COMPLIANCE = 1977
    TIK_TOK_EA_RISK_RISK_CONTROL_MANAGEMENT = 1978
    TIK_TOK_EA_BI_COST_SETTLEMENT = 1979
    TIK_TOK_EA_BI_PUBLIC_EXPENDITURE = 1980
    TIK_TOK_QUALITY_ASSURANCE_TECHNICAL_RISK_ENGINEERING_D_Q = 1981
    TIK_TOK_QUALITY_ASSURANCE_TECHNICAL_RISK_ENGINEERING_S_DLC = 1982


class TimeOpType(betterproto.Enum):
    UN_KNOW = 0
    ADD = 1
    DEDUCT = 2


class IndicatorOp(betterproto.Enum):
    UNKNOWN = 0
    ADD = 1
    REMOVE = 2
    UPDATE = 3
    P_IN = 4
    UNPIN = 5


class GoalStatus(betterproto.Enum):
    UNKNOWN = 0
    NOT_START = 1
    ONGOING = 2
    FINISHED = 3
    DELETED = 4
    ACHIEVED = 5
    EXPIRED = 6


class GoalType(betterproto.Enum):
    UNKNOWN = 0
    STREAM = 1
    SUBSCRIPTION = 2


class SubGoalType(betterproto.Enum):
    UNKNOWN = 0
    GIFT = 1
    SUBSCRIPTION = 2


class CycleType(betterproto.Enum):
    UNKNOWN = 0
    FIXED_TIME = 1
    PERMANENT = 2


class GetSource(betterproto.Enum):
    UNKNOWN = 0
    GO_LIVE_PAGE = 1
    CLIENT_ENTER_ROOM = 2
    CLIENT_BUILD_INDICATOR = 3
    GIFT_GALLERY_PAGE = 4
    LIVE_GOAL_DETAIL_PAGE = 5
    LIVE_GOAL_CHALLENGE_PAGE = 6


class EnumGoalDescCommitStatus(betterproto.Enum):
    UN_KNOW = 0
    COMMITTED = 1
    UNCOMMITTED_WAIT_AUDIT = 2
    UNCOMMITTED_INTERNAL_ERROR = 3
    UNCOMMITTED_SAME_DESCRIPTION = 4


class DescriptionType(betterproto.Enum):
    DEFAULT = 0
    PRESET = 1
    HIDE = 2


class GoalMode(betterproto.Enum):
    SINGLE_SUB_GOAL = 0
    MULTI_SUB_GOAL = 1


class PrivilegeSwitchCategory(betterproto.Enum):
    UNKNOWN = 0
    USER_EMOTE = 1


class PrivilegeSwitchStatus(betterproto.Enum):
    DISABLE = 0
    ENABLE = 1


class BadgeType(betterproto.Enum):
    NORMAL = 0
    E_MOJI = 1
    PLATFORM_ICON = 2
    MULTI_E_MOJI = 3


class BenefitType(betterproto.Enum):
    UNKNOWN = 0
    EMOTE = 1
    BADGE = 2
    CHAT = 3
    GIFT = 4


class BenefitViewType(betterproto.Enum):
    UNKNOWN = 0
    EMOTE = 1
    BADGE = 2
    CHAT = 3
    GIFT = 4
    CUSTOMIZED_PERKS = 5
    LIMITED_CONTENT = 6
    DISCORD = 7
    SUB_ONLY_VIDEO = 8


class NoteContentType(betterproto.Enum):
    UNKNOWN = 0
    TEXT = 1
    IMAGE = 2
    IMAGE_COMBINED = 3


class GoalSchemaScene(betterproto.Enum):
    GOAL_SCHEMA_UNKNOWN = 0
    GOAL_SCHEMA_SHOWED_IT = 1
    GOAL_SCHEMA_SHOW_DETAIL = 2
    GOAL_SCHEMA_SHOW_MANAGE = 3
    GOAL_SCHEMA_SHOW_IN_IT = 4


class CommunityContentType(betterproto.Enum):
    UNKNOWN = 0
    TEXT = 1
    IMAGE = 2


class SubUserTask(betterproto.Enum):
    UNKNOWN = 0
    S_END_EMOTES = 1
    LIVE_APPOINTMENT = 2
    S_END_SUB_GIFT = 3
    INTERACTION_COMMENTS = 4
    RENEW_SUBSCRIPTION = 5
    SUB_IN_GRACE_PERIOD = 6
    JOIN_DISCORD = 7
    PRICE_CHANGE = 8
    PLAN_CHANGE = 9


class SubCustomizedBenefitType(betterproto.Enum):
    UNKNOWN = 0
    TEXT = 1
    DISCORD = 2
    DEFAULT_TEMPLATE = 3
    GAMING_TEMPLATE = 4
    SUB_ONLY_VIDEO = 5
    FANS_GROUP = 6
    SUB_ONLY_SPACE = 7


class SubBenefitConfigStatus(betterproto.Enum):
    UNKNOWN = 0
    NO_NEED = 1
    NEED = 2
    DONE = 3


class SubBenefitUserConfigStatus(betterproto.Enum):
    UNKNOWN = 0
    NO_NEED = 1
    NEED = 2
    DONE = 3


class SubBenefitEnableStatus(betterproto.Enum):
    UNKNOWN = 0
    ENABLE = 1
    PENDING = 2
    DISABLE = 3
    UNDEFINED_4 = 4
    UNDEFINED_5 = 5
    UNDEFINED_6 = 6
    UNDEFINED_7 = 7
    UNDEFINED_8 = 8
    UNDEFINED_9 = 9
    LACK_PERMISSION = 10


class SubBenefitBlockStatus(betterproto.Enum):
    UNBLOCK = 0
    BY_SHARK = 1


class PerkTagCategory(betterproto.Enum):
    UNKNOWN = 0
    RARE = 1


class CoolingDownType(betterproto.Enum):
    UNKNOWN = 0
    EDIT = 1
    DISABLE = 2


class SovMaskInfoType(betterproto.Enum):
    NONE = 0
    SENSITIVE = 1
    VIOLATION = 2
    MUSIC_COPYRIGHT = 3
    UNAVAILABLE = 4


class SovLockInfoType(betterproto.Enum):
    NONE = 0
    LOCK = 1
    PREVIEW = 2


class SovStatus(betterproto.Enum):
    UNKNOWN = 0
    ON = 1
    OFF = 2


class SpotlightReviewStatus(betterproto.Enum):
    UNKNOWN = 0
    APPROVED = 1
    UNDER_REVIEW = 2
    REJECTED = 3


class PriceGroup(betterproto.Enum):
    UNKNOWN = 0
    BASIC = 1
    STANDARD = 2
    DELUXE = 3


class SubscriptionFontStyle(betterproto.Enum):
    NORMAL = 0
    BOLD = 1


class EducationContentType(betterproto.Enum):
    EDUCATION_CONTENT_LIVE = 0
    EDUCATION_CONTENT_LEADS_GEN = 1


class IndustryPermission(betterproto.Enum):
    DISABLED_TOOL_PERMISSION = 0
    ENABLED_TOOL_PERMISSION = 1


class IndustryRiskLevel(betterproto.Enum):
    GREEN = 0
    GREY = 1
    RED = 2


class CustomPromotionType(betterproto.Enum):
    NONE = 0
    PERCENTAGE_DISCOUNT = 1
    FREE_TRIAL = 2


class FreeTrialDurationUnits(betterproto.Enum):
    UNKNOWN = 0
    DAYS = 1


class MultiGuestPunishCenterActionType(betterproto.Enum):
    UNKNOWN = 0
    FINISH_LINK_MIC = 1


class CompetitionSettleEndCompetitionEndReason(betterproto.Enum):
    COMPETITION_END_REASON_UNKNOWN = 0
    COMPETITION_END_REASON_NORMAL = 1
    COMPETITION_END_REASON_CUT_SHORT = 2


class CompetitionSettleEndTakeTheStageBizTakeTheStageStatus(betterproto.Enum):
    TAKE_THE_STAGE_STATUS_UNKNOWN = 0
    TAKE_THE_STAGE_STATUS_NOT_STARTED = 1
    TAKE_THE_STAGE_STATUS_CANCELLED = 2
    TAKE_THE_STAGE_STATUS_STARTED = 3
    TAKE_THE_STAGE_STATUS_FINAL_CALL = 4
    TAKE_THE_STAGE_STATUS_VICTORY_LAP = 5
    TAKE_THE_STAGE_STATUS_FINISHED = 6


class PollEndContentPollEndType(betterproto.Enum):
    POLL_END_TYPE_POLL_END_BY_TIME = 0
    POLL_END_TYPE_POLL_END_BY_OWNER = 1
    POLL_END_TYPE_POLL_END_BY_OTHER = 2
    POLL_END_TYPE_POLL_END_BY_ADMIN = 3


class StarCommentConfigGrantGroup(betterproto.Enum):
    GRANT_GROUP_UNKNOWN = 0
    GRANT_GROUP_ALL_USER = 1
    GRANT_GROUP_USER_LEVEL = 2
    GRANT_GROUP_FANS_LEVEL = 3


class PunishEventInfoPunishTypeId(betterproto.Enum):
    PUNISH_TYPE_IDUN_KNOWN = 0
    PUNISH_TYPE_ID_BAN_LINK_MIC = 9
    PUNISH_TYPE_ID_BAN_GAME_PARTNERSHIP = 25
    PUNISH_TYPE_ID_REMOVE_GAME_PARTNERSHIP = 26
    PUNISH_TYPE_ID_BANCO_HOST_LINK_MIC = 55
    PUNISH_TYPE_ID_AUTHORITY_LIMIT_MATCH = 57
    PUNISH_TYPE_ID_BAN_VOICE_CHAT = 59
    PUNISH_TYPE_ID_BAN_LIVE_GOAL = 64
    PUNISH_TYPE_ID_VIEWER_LIMIT = 70


class WebcastGoalUpdateMessageGoalMessageSource(betterproto.Enum):
    GOAL_MESSAGE_SOURCE_UNKNOWN = 0
    GOAL_MESSAGE_SOURCE_COMMIT = 1
    GOAL_MESSAGE_SOURCE_PROGRESS_UPDATE = 2
    GOAL_MESSAGE_SOURCE_PIN = 3
    GOAL_MESSAGE_SOURCE_UNPIN = 4
    GOAL_MESSAGE_SOURCE_REVIEW_CALLBACK = 5
    GOAL_MESSAGE_SOURCE_SUSPEND = 6
    GOAL_MESSAGE_SOURCE_CHALLENGE_PROMPT = 7


class WebcastMemberMessageDisplayStyle(betterproto.Enum):
    DISPLAY_STYLE_NORMAL = 0
    DISPLAY_STYLE_STAY = 1
    DISPLAY_STYLE_CHAT = 2


class WebcastMemberMessageHitAbStatus(betterproto.Enum):
    HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT = 0
    HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT = 1
    HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT = 2


class WebcastBottomMessageShowType(betterproto.Enum):
    SHOW_TYPE_HOVER = 0
    SHOW_TYPE_PLUG = 1


class WebcastBottomMessageTextType(betterproto.Enum):
    TEXT_TYPE_DISPLAY_TEXT = 0
    TEXT_TYPE_CONTENT = 1


class WebcastBottomMessageBizType(betterproto.Enum):
    BIZ_TYPE_DEFAULT = 0
    BIZ_TYPE_RETHINK_CHAT = 1
    BIZ_TYPE_RETHINK_QA = 2
    BIZ_TYPE_WARNING_TAG_CURRENT_ROOM = 3
    BIZ_TYPE_WARNING_TAG_COHOST_ROOM = 4
    BIZ_TYPE_A_GS_AT_RISK_OF_UNABLE_TO_COMMENT = 5
    BIZ_TYPE_PERCEPTION_CENTER = 6


class WebcastBottomMessagePerceptionDialogIconType(betterproto.Enum):
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE = 0
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING = 1
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC = 2
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC = 3
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE = 4
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX = 5
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE = 6
    PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED = 7
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT = 11
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS = 12
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH = 13
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL = 14
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION = 15
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT = 16
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING = 17
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON = 18


class WebcastLinkMicBattleGiftPermissionType(betterproto.Enum):
    GIFT_PERMISSION_TYPE_UNKNOWN_TYPE = 0
    GIFT_PERMISSION_TYPE_NO_GIFT_PERMISSION = 1
    GIFT_PERMISSION_TYPE_ANCHOR_CLOSE = 2
    GIFT_PERMISSION_TYPE_HAS_GIFT_PERMISSION = 3
    GIFT_PERMISSION_TYPE_ANCHOR_BANNED = 4


class WebcastLinkMicBattleBattleAction(betterproto.Enum):
    BATTLE_ACTION_UNKNOWN = 0
    BATTLE_ACTION_INVITE = 1
    BATTLE_ACTION_REJECT = 2
    BATTLE_ACTION_CANCEL = 3
    BATTLE_ACTION_OPEN = 4
    BATTLE_ACTION_FINISH = 5
    BATTLE_ACTION_CUT_SHORT = 6
    BATTLE_ACTION_ACCEPT = 7
    BATTLE_ACTION_QUIT_APPLY = 8
    BATTLE_ACTION_DECLINE_QUIT = 9
    BATTLE_ACTION_DECLINE_OFF_QUIT = 10
    BATTLE_ACTION_LEAVE_LINK_MIC = 11


class ResourceAttrResourceLocation(betterproto.Enum):
    RESOURCE_LOCATION_UNKNOWN = 0
    RESOURCE_LOCATION_GECKO = 1


class WebcastLinkScreenChangeMessageLinkScreenChangeMessageType(betterproto.Enum):
    LINK_SCREEN_CHANGE_MESSAGE_TYPE_BIZ_T_PYE_LINKER_UNKNOWN = 0
    LINK_SCREEN_CHANGE_MESSAGE_TYPE_BIZ_TYPE_LINKER_CANCEL_ENLARGE = 1
    LINK_SCREEN_CHANGE_MESSAGE_TYPE_BIZ_TYPE_ENLARGE_STATUS_SYN = 2
    LINK_SCREEN_CHANGE_MESSAGE_TYPE_BIZ_TYPE_ENLARGE_POSITION_STATUS_SYN = 3


class ProfileCardPanelBadgeTextPosition(betterproto.Enum):
    BADGE_TEXT_POSITION_UNKNOWN = 0
    BADGE_TEXT_POSITION_RIGHT = 1
    BADGE_TEXT_POSITION_BELOW = 2


class OptPairInfoOptPairStatus(betterproto.Enum):
    OPT_PAIR_STATUS_UNKNOWN = 0
    OPT_PAIR_STATUS_OFFLINE = 1
    OPT_PAIR_STATUS_FINISHED = 2


class WebcastLinkLayerMessageLinkLayerMessageType(betterproto.Enum):
    LINK_LAYER_MESSAGE_TYPE_LINKER_UNKNOWN = 0
    LINK_LAYER_MESSAGE_TYPE_LINKER_CREATE = 1
    LINK_LAYER_MESSAGE_TYPE_LINKER_INVITE = 2
    LINK_LAYER_MESSAGE_TYPE_LINKER_APPLY = 3
    LINK_LAYER_MESSAGE_TYPE_LINKER_PERMIT = 4
    LINK_LAYER_MESSAGE_TYPE_LINKER_REPLY = 5
    LINK_LAYER_MESSAGE_TYPE_LINKER_KICK_OUT = 6
    LINK_LAYER_MESSAGE_TYPE_LINKER_CANCEL_APPLY = 7
    LINK_LAYER_MESSAGE_TYPE_LINKER_CANCEL_INVITE = 8
    LINK_LAYER_MESSAGE_TYPE_LINKER_LEAVE = 9
    LINK_LAYER_MESSAGE_TYPE_LINKER_FINISH = 10
    LINK_LAYER_MESSAGE_TYPE_LINKER_LIST_CHANGE = 11
    LINK_LAYER_MESSAGE_TYPE_LINKER_JOIN_DIRECT = 12
    LINK_LAYER_MESSAGE_TYPE_LINKER_JOIN_GROUP = 13
    LINK_LAYER_MESSAGE_TYPE_LINKER_PERMIT_GROUP = 14
    LINK_LAYER_MESSAGE_TYPE_LINKER_CANCEL_GROUP = 15
    LINK_LAYER_MESSAGE_TYPE_LINKER_LEAVE_GROUP = 16
    LINK_LAYER_MESSAGE_TYPE_LINKER_P_2_P_GROUP_CHANGE = 17
    LINK_LAYER_MESSAGE_TYPE_LINKER_GROUP_CHANGE = 18


class WebcastLinkLayerMessageScene(betterproto.Enum):
    SCENE_UNKNOWN = 0
    SCENE_UNDEFINED_1 = 1
    SCENE_CO_HOST = 2
    SCENE_UNDEFINED_3 = 3
    SCENE_MULTI_LIVE = 4


class TagV2TagClassification(betterproto.Enum):
    TAG_CLASSIFICATION_UNKNOWN = 0
    TAG_CLASSIFICATION_COHOST_HISTORY = 1
    TAG_CLASSIFICATION_FIRST_DEGREE_RELATION = 2
    TAG_CLASSIFICATION_SECOND_DEGREE_RELATION = 3
    TAG_CLASSIFICATION_RANK = 4
    TAG_CLASSIFICATION_SIMILAR_INTERESTS = 5


class PriceChangeInfoBillingType(betterproto.Enum):
    BILLING_TYPE_UNKNOWN = 0
    BILLING_TYPE_GP = 1
    BILLING_TYPE_WEB = 2
    BILLING_TYPE_APP_B = 3
    BILLING_TYPE_GP_COMMON_S_KU = 4


class WebcastChatMessageCommentTag(betterproto.Enum):
    COMMENT_TAG_NORMAL = 0
    COMMENT_TAG_CANDIDATE = 1
    COMMENT_TAG_OVERAGE = 2


class WebcastSubNotifyMessageExhibitionType(betterproto.Enum):
    EXHIBITION_TYPE_DEFAULT = 0
    EXHIBITION_TYPE_FOLD = 1
    EXHIBITION_TYPE_PUBLIC_SCREEN = 2


class WebcastSubNotifyMessageSubscribeType(betterproto.Enum):
    SUBSCRIBE_TYPE_ONCE = 0
    SUBSCRIBE_TYPE_AUTO = 1
    SUBSCRIBE_TYPE_DEFAULT = 100


class WebcastSubNotifyMessageOldSubscribeStatus(betterproto.Enum):
    OLD_SUBSCRIBE_STATUS_FIRST = 0
    OLD_SUBSCRIBE_STATUS_RE_SUB = 1
    OLD_SUBSCRIBE_STATUS_SUB_IN_GRACE_PERIOD = 2
    OLD_SUBSCRIBE_STATUS_SUB_NOT_IN_GRACE_PERIOD = 3
    OLD_SUBSCRIBE_STATUS_DEFAULT = 100


class WebcastSubNotifyMessageMessageType(betterproto.Enum):
    MESSAGE_TYPE_SUB_SUCCESS = 0
    MESSAGE_TYPE_ANCHOR_REMINDER = 1
    MESSAGE_TYPE_ENTER_ROOM_EXPIRE_SOON = 2
    MESSAGE_TYPE_SUB_GOAL_CREATE_TO_ANCHOR = 3
    MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_AUDIENCE = 4
    MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_ANCHOR = 5
    MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_USER_NOTICE = 6
    MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_ANCHOR_NOTICE = 7
    MESSAGE_TYPE_SUB_GIFT_T_RECEIVES_END_NOTICE = 8
    MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ROOM_MESSAGE = 9
    MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ANCHOR_NOTICE = 10
    MESSAGE_TYPE_SUB_GIFT_LOW_VERSION_UPGRADE_NOTICE = 11
    MESSAGE_TYPE_SUB_GIFT_USER_BUY_AU_TH_NOTICE = 12
    MESSAGE_TYPE_SUB_COMMON_TEXT_NOTICE = 13
    MESSAGE_TYPE_SUB_MODERATOR_PIN_PERK = 14


class WebcastSubNotifyMessageSubscribingStatus(betterproto.Enum):
    SUBSCRIBING_STATUS_UNKNOWN = 0
    SUBSCRIBING_STATUS_ONCE = 1
    SUBSCRIBING_STATUS_CIRCLE = 2
    SUBSCRIBING_STATUS_CIRCLE_CANCEL = 3
    SUBSCRIBING_STATUS_REFUND = 4
    SUBSCRIBING_STATUS_IN_GRACE_PERIOD = 5
    SUBSCRIBING_STATUS_NOT_IN_GRACE_PERIOD = 6


class WebcastSubNotifyMessageGiftSource(betterproto.Enum):
    GIFT_SOURCE_UNKNOWN = 0
    GIFT_SOURCE_PLATFORM = 1
    GIFT_SOURCE_USER_BUY_RANDOM = 2
    GIFT_SOURCE_USER_BUY_SPECIFIC = 3


class WebcastSubNotifyMessageMessageDisplayStyle(betterproto.Enum):
    MESSAGE_DISPLAY_STYLE_DEFAULT = 0
    MESSAGE_DISPLAY_STYLE_POPUP = 1


class CompetitionScoreChangeTriggerReason(betterproto.Enum):
    TRIGGER_REASON_UNKNOWN = 0
    TRIGGER_REASON_SCORE_UPDATE = 1
    TRIGGER_REASON_OPT_OUT_UPDATE = 2


class CompetitionScoreChangeTakeTheStageBizTakeTheStageStatus(betterproto.Enum):
    TAKE_THE_STAGE_STATUS_UNKNOWN = 0
    TAKE_THE_STAGE_STATUS_NOT_STARTED = 1
    TAKE_THE_STAGE_STATUS_CANCELLED = 2
    TAKE_THE_STAGE_STATUS_STARTED = 3
    TAKE_THE_STAGE_STATUS_FINAL_CALL = 4
    TAKE_THE_STAGE_STATUS_VICTORY_LAP = 5
    TAKE_THE_STAGE_STATUS_FINISHED = 6


class FansEventDataFansTaskType(betterproto.Enum):
    FANS_TASK_TYPE_UNKNOWN = 0
    FANS_TASK_TYPE_FANS_GIFT = 1
    FANS_TASK_TYPE_WATCH_LIVE = 2
    FANS_TASK_TYPE_SENDING_GIFT = 3
    FANS_TASK_TYPE_COMMENT = 4
    FANS_TASK_TYPE_MONTH_GIFT = 11
    FANS_TASK_TYPE_MONTH_COMMENT = 12
    FANS_TASK_TYPE_LONG_ACTIVE = 21
    FANS_TASK_TYPE_LIVE_NOTIFY = 22
    FANS_TASK_TYPE_LONG_HEART_ME = 23
    FANS_TASK_TYPE_LONG_WATCH = 24
    FANS_TASK_TYPE_LONG_COMMENT = 25
    FANS_TASK_TYPE_WEEKLY_TREASURE_BOX = 31


class FansEventDataEntranceGuidanceDataEntranceGuidanceType(betterproto.Enum):
    ENTRANCE_GUIDANCE_TYPE_UNKNOWN = 0
    ENTRANCE_GUIDANCE_TYPE_ABOUT_TO_UPGRADE = 1


class FansEventDataTaskCompleteDataFansTaskType(betterproto.Enum):
    FANS_TASK_TYPE_UNKNOWN = 0
    FANS_TASK_TYPE_FANS_GIFT = 1
    FANS_TASK_TYPE_WATCH_LIVE = 2
    FANS_TASK_TYPE_SENDING_GIFT = 3
    FANS_TASK_TYPE_COMMENT = 4
    FANS_TASK_TYPE_MONTH_GIFT = 11
    FANS_TASK_TYPE_MONTH_COMMENT = 12
    FANS_TASK_TYPE_LONG_ACTIVE = 21
    FANS_TASK_TYPE_LIVE_NOTIFY = 22
    FANS_TASK_TYPE_LONG_HEART_ME = 23
    FANS_TASK_TYPE_LONG_WATCH = 24
    FANS_TASK_TYPE_LONG_COMMENT = 25
    FANS_TASK_TYPE_WEEKLY_TREASURE_BOX = 31


class SubTimerStickerTimerOpType(betterproto.Enum):
    TIMER_OP_TYPE_START = 0
    TIMER_OP_TYPE_PAUSE = 1
    TIMER_OP_TYPE_RESUME = 2
    TIMER_OP_TYPE_CANCEL = 3


class SubTimerStickerTimerStatus(betterproto.Enum):
    TIMER_STATUS_NOT_STARTED = 0
    TIMER_STATUS_RUNNING = 1
    TIMER_STATUS_PAUSED = 2
    TIMER_STATUS_CANCELLED = 3
    TIMER_STATUS_FINISHED = 4


class SubTimerStickerSubTimerStickerChangeType(betterproto.Enum):
    SUB_TIMER_STICKER_CHANGE_TYPE_TITLE_CHANGE = 0
    SUB_TIMER_STICKER_CHANGE_TYPE_STATUS_CHANGE = 1
    SUB_TIMER_STICKER_CHANGE_TYPE_POSITION_CHANGE = 2
    SUB_TIMER_STICKER_CHANGE_TYPE_SUB_INCREASE = 3
    SUB_TIMER_STICKER_CHANGE_TYPE_ALIGN = 4


class CommonMessageDataImDispatchStrategy(betterproto.Enum):
    I_M_DISPATCH_STRATEGY_IM_DISPATCH_STRATEGY_DEFAULT = 0
    I_M_DISPATCH_STRATEGY_IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE = 1


class JoinGroupMessageExtraRivalExtraCohostNudgeInfo(betterproto.Enum):
    COHOST_NUDGE_INFO_NONE = 0
    COHOST_NUDGE_INFO_YOUR_NUDGE = 1
    COHOST_NUDGE_INFO_NUDGED_YOU = 2


class SubPinCardPinCardType(betterproto.Enum):
    PIN_CARD_TYPE_UNKNOWN_PIN_CARD_TYPE = 0
    PIN_CARD_TYPE_CUSTOMIZED_BENEFIT_E_NUM = 1
    PIN_CARD_TYPE_SUB_GOAL_E_NUM = 2
    PIN_CARD_TYPE_UP_SELL_DM = 3
    PIN_CARD_TYPE_UP_SELL_LEAD_SGEN = 4


class SubPinCardTextTextType(betterproto.Enum):
    TEXT_TYPE_UNKNOWN_TEXT_TYPE = 0
    TEXT_TYPE_ORIGINAL_TEXT = 1
    TEXT_TYPE_STARLING_KEY = 2


class CompetitionInitiateInfoCompetitionInitiateType(betterproto.Enum):
    COMPETITION_INITIATE_TYPE_NORMAL = 0
    COMPETITION_INITIATE_TYPE_REMATCH = 1


class LinkerMediaChangeOperatorLinkMicUserAdminType(betterproto.Enum):
    LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE = 0
    LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE = 1
    LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE = 2


class AuditInfoAuditTaskType(betterproto.Enum):
    AUDIT_TASK_TYPE_DEFAULT = 0
    AUDIT_TASK_TYPE_APPEAL = 1


class PreviewGameMomentDataGameMomentMessageType(betterproto.Enum):
    GAME_MOMENT_MESSAGE_TYPE_UNKNOWN = 0
    GAME_MOMENT_MESSAGE_TYPE_VICTORY = 1
    GAME_MOMENT_MESSAGE_TYPE_HIGHLIGHT = 2
    GAME_MOMENT_MESSAGE_TYPE_DEFEAT = 3
    GAME_MOMENT_MESSAGE_TYPE_KILL_NUM = 4
    GAME_MOMENT_MESSAGE_TYPE_REMAIN_NUM = 5


class PreviewGameMomentDataPreviewGameInfoType(betterproto.Enum):
    PREVIEW_GAME_INFO_TYPE_UNKNOWN = 0
    PREVIEW_GAME_INFO_TYPE_REALTIME = 1
    PREVIEW_GAME_INFO_TYPE_MOMENT_ACCUMULATE_INFO = 2


class PollVoteLimitPollVoteLimitType(betterproto.Enum):
    POLL_VOTE_LIMIT_TYPE_SINGLE = 0
    POLL_VOTE_LIMIT_TYPE_MULTIPLE = 1


class ImageBadgeBadgeDisplayType(betterproto.Enum):
    BADGE_DISPLAY_TYPE_UNKNOWN = 0
    BADGE_DISPLAY_TYPE_IMAGE = 1
    BADGE_DISPLAY_TYPE_TEXT = 2
    BADGE_DISPLAY_TYPE_STRING = 3
    BADGE_DISPLAY_TYPE_COMBINE = 4


class BattleResultResult(betterproto.Enum):
    RESULT_WIN = 0
    RESULT_LOSE = 1
    RESULT_DRAW = 2


class StarCommentMessageStarCommentOption(betterproto.Enum):
    STAR_COMMENT_OPTION_UNKNOWN = 0
    STAR_COMMENT_OPTION_V_1_BASIC = 10
    STAR_COMMENT_OPTION_V_1_ELEVATED = 20


class ListUserLinkType(betterproto.Enum):
    LINK_TYPE_TYPE_UNKNOWN = 0
    LINK_TYPE_TYPE_VIDEO = 1
    LINK_TYPE_TYPE_AUDIO = 2
    LINK_TYPE_TYPE_VIRTUAL = 3


class ListUserLinkListStatus(betterproto.Enum):
    LINK_LIST_STATUS_STATUS_UN_KOWN = 0
    LINK_LIST_STATUS_STATUS_WAITING = 1
    LINK_LIST_STATUS_STATUS_LINKED = 2
    LINK_LIST_STATUS_STATUS_FINISHED = 3
    LINK_LIST_STATUS_STATUS_WAITING_OR_LINKED = 4


class ListUserLinkSilenceStatus(betterproto.Enum):
    LINK_SILENCE_STATUS_STATUS_UN_SILENCE = 0
    LINK_SILENCE_STATUS_STATUS_SILENCE_BY_SELF = 1
    LINK_SILENCE_STATUS_STATUS_SILENCE_BY_OWNER = 2


class ListUserLinkRoleType(betterproto.Enum):
    LINK_ROLE_TYPE_TYPE_ROLE_TYPE_UN_KOWN = 0
    LINK_ROLE_TYPE_TYPE_LEADER = 1
    LINK_ROLE_TYPE_TYPE_PLAYER = 2
    LINK_ROLE_TYPE_TYPE_INVITEE = 3
    LINK_ROLE_TYPE_TYPE_APP_LIER = 4


class ListUserLinkmicAudienceType(betterproto.Enum):
    LINKMIC_AUDIENCE_TYPE_AUDIENCE_TYPE_UNKNOWN = 0
    LINKMIC_AUDIENCE_TYPE_VIDEO = 1
    LINKMIC_AUDIENCE_TYPE_AUDIO = 2


class ListUserLinkmicRoleType(betterproto.Enum):
    LINKMIC_ROLE_TYPE_ROLE_TYPE_UN_KOWN = 0
    LINKMIC_ROLE_TYPE_LEADER = 1
    LINKMIC_ROLE_TYPE_PLAYER = 2
    LINKMIC_ROLE_TYPE_INVITEE = 3


class ListUserLinkUserType(betterproto.Enum):
    LINK_USER_TYPE_DEFAULT = 0
    LINK_USER_TYPE_KARAOKE = 1


class LinkerMediaChangeContentGuestMicCameraManageOp(betterproto.Enum):
    GUEST_MIC_CAMERA_MANAGE_OP_OPEN_MIC = 0
    GUEST_MIC_CAMERA_MANAGE_OP_OPEN_CAMERA = 1
    GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC = 2
    GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_CAMERA = 3
    GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC_PUNISH = 4


class LinkerMediaChangeContentGuestMicCameraChangeScene(betterproto.Enum):
    GUEST_MIC_CAMERA_CHANGE_SCENE_CHANGE_SCENE_UNKNOWN = 0
    GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_ANCHOR_AUTO = 1
    GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SERVER_NORMAL = 2
    GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SHOW_END = 3


class GiftPanelBeaconBubbleGiftPanelBeaconBubbleType(betterproto.Enum):
    GIFT_PANEL_BEACON_BUBBLE_TYPE_UNKNOWN = 0
    GIFT_PANEL_BEACON_BUBBLE_TYPE_DEFAULT = 1
    GIFT_PANEL_BEACON_BUBBLE_TYPE_LYNX_DEFAULT = 2
    GIFT_PANEL_BEACON_BUBBLE_TYPE_LIVE_GOAL = 3
    GIFT_PANEL_BEACON_BUBBLE_TYPE_GIFT_GALLERY = 4
    GIFT_PANEL_BEACON_BUBBLE_TYPE_UG_HIGH_PRIORITY = 5
    GIFT_PANEL_BEACON_BUBBLE_TYPE_UG_LOW_PRIORITY = 6
    GIFT_PANEL_BEACON_BUBBLE_TYPE_VIEWER_PICKS = 7


class WebcastGiftGalleryMessageGiftGalleryMsgType(betterproto.Enum):
    GIFT_GALLERY_MSG_TYPE_UNUSED = 0
    GIFT_GALLERY_MSG_TYPE_LIGHT_UP = 1
    GIFT_GALLERY_MSG_TYPE_ALL_SPONSORED = 2
    GIFT_GALLERY_MSG_TYPE_SPONSOR_CHANGE = 3
    GIFT_GALLERY_MSG_TYPE_LONG_TERM_RECALL = 4


class WebcastPartnershipDropsUpdateMessageChangeMode(betterproto.Enum):
    CHANGE_MODE_SHOW = 0
    CHANGE_MODE_UPDATE = 1
    CHANGE_MODE_CLOSE = 2


class PermitBizContentLinkMicUserAdminType(betterproto.Enum):
    LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE = 0
    LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE = 1
    LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE = 2


class PermitBizContentLinkUserType(betterproto.Enum):
    LINK_USER_TYPE_DEFAULT = 0
    LINK_USER_TYPE_KARAOKE = 1


class WebcastLiveInfoAuditNoticeMessageLiveInfoAuditContentType(betterproto.Enum):
    LIVE_INFO_AUDIT_CONTENT_TYPE_TITLE = 0
    LIVE_INFO_AUDIT_CONTENT_TYPE_COVER = 1
    LIVE_INFO_AUDIT_CONTENT_TYPE_ABOUT_ME = 2


class WebcastLiveInfoAuditNoticeMessageLiveInfoAuditStatus(betterproto.Enum):
    LIVE_INFO_AUDIT_STATUS_ONGOING = 0
    LIVE_INFO_AUDIT_STATUS_PASS = 1
    LIVE_INFO_AUDIT_STATUS_UNKNOWN = 2
    LIVE_INFO_AUDIT_STATUS_REJECT = 3


class LinkerEnlargeStatusSynContentEnlargeScreenScene(betterproto.Enum):
    ENLARGE_SCREEN_SCENE_ENLARGE_UNKNOWN = 0
    ENLARGE_SCREEN_SCENE_ENLARGE_HOST_SCREEN = 1
    ENLARGE_SCREEN_SCENE_INVITE_ENLARGE_GUEST_SCREEN = 2
    ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_HOST = 3
    ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_GUEST = 4
    ENLARGE_SCREEN_SCENE_HOST_RECEIVE_CANCEL_ENLARGE = 5
    ENLARGE_SCREEN_SCENE_GET_ENLARGE_STATUS = 6
    ENLARGE_SCREEN_SCENE_ENLARGE_POSITION = 7
    ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_POSITION = 8
    ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_ALL = 9
    ENLARGE_SCREEN_SCENE_CHANGE_ENLARGE_RECORD = 10


class PaidEventPaidType(betterproto.Enum):
    PAID_TYPE_FREE = 0
    PAID_TYPE_PAID = 1


class CohostAbTestCohostAbTestType(betterproto.Enum):
    COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_UNKNOWN = 0
    COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_LINK_TIME_OUT_STRATEGY = 1
    COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_RESERVATION = 2
    COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_QUICK_PAIR_NEW_ARCH_SWITCH = 3
    COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_INVITATION_TEXT = 4


class PlayTogetherMemberPlayTogetherRelationTag(betterproto.Enum):
    PLAY_TOGETHER_RELATION_TAG_UNKNOWN = 0
    PLAY_TOGETHER_RELATION_TAG_FRIEND = 1
    PLAY_TOGETHER_RELATION_TAG_SUBSCRIBER = 2
    PLAY_TOGETHER_RELATION_TAG_TEAM_MEMBER = 3


class LinkUserStateOnlineUserState(betterproto.Enum):
    ONLINE_USER_STATE_STATE_UNDEFINED = 0
    ONLINE_USER_STATE_STATE_NORMAL = 1
    ONLINE_USER_STATE_STATE_PAUSED = 2


class LinkUserStateRtcConnectionState(betterproto.Enum):
    RTC_CONNECTION_STATE_STATE_RT_C_UNDEFINED = 0
    RTC_CONNECTION_STATE_STATE_RT_C_NORMAL = 1
    RTC_CONNECTION_STATE_STATE_RT_C_DISCONNECT = 2


class LinkUserStateMediaState(betterproto.Enum):
    MEDIA_STATE_MEDIA_UNDEFINED = 0
    MEDIA_STATE_MEDIA_NORMAL = 1
    MEDIA_STATE_MEDIA_MUTED = 2
    MEDIA_STATE_MEDIA_UN_MUTE_OCCUPIED = 3
    MEDIA_STATE_MEDIA_MUTED_OCCUPIED = 4


class LinkUserStateNetworkState(betterproto.Enum):
    NETWORK_STATE_STATE_NETWORK_UNDEFINED = 0
    NETWORK_STATE_STATE_NETWORK_EXCELLENT = 1
    NETWORK_STATE_STATE_NETWORK_GOOD = 2
    NETWORK_STATE_STATE_NETWORK_POOR = 3
    NETWORK_STATE_STATE_NETWORK_BAD = 4
    NETWORK_STATE_STATE_NETWORK_V_BAD = 5
    NETWORK_STATE_STATE_NETWORK_DOWN = 6


class KickOutContentKickoutReason(betterproto.Enum):
    KICKOUT_REASON_KICK_OUT_REASON_UNKNOWN = 0
    KICKOUT_REASON_KICK_OUT_REASON_FIRST_FRAME_TIME_OUT = 1
    KICKOUT_REASON_KICK_OUT_REASON_BY_HOST = 2
    KICKOUT_REASON_KICK_OUT_REASON_RT_C_LOST_CONNECTION = 3
    KICKOUT_REASON_KICK_OUT_REASON_BY_PUNISH = 4
    KICKOUT_REASON_KICK_OUT_REASON_BY_ADMIN = 5
    KICKOUT_REASON_KICK_OUT_REASON_HOST_REMOVE_ALL_GUESTS = 6


class WebcastPollMessagePollKind(betterproto.Enum):
    POLL_KIND_NORMAL = 0
    POLL_KIND_GIFT = 1
    POLL_KIND_CUSTOMIZABLE = 2
    POLL_KIND_CUSTOMIZABLE_GIFT = 3
    POLL_KIND_QUICK_GIFT = 4
    POLL_KIND_EMOTE = 5


class GuessRoundGuessStatus(betterproto.Enum):
    GUESS_STATUS_BETTING = 0
    GUESS_STATUS_STOP_BETTING = 1
    GUESS_STATUS_SETTLING = 2
    GUESS_STATUS_SETTLED = 3
    GUESS_STATUS_INVALID = 20


class LinkerKickOutContentKickoutReason(betterproto.Enum):
    KICKOUT_REASON_KICK_OUT_REASON_UNKNOWN = 0
    KICKOUT_REASON_KICK_OUT_REASON_FIRST_FRAME_TIME_OUT = 1
    KICKOUT_REASON_KICK_OUT_REASON_BY_HOST = 2
    KICKOUT_REASON_KICK_OUT_REASON_RT_C_LOST_CONNECTION = 3
    KICKOUT_REASON_KICK_OUT_REASON_BY_PUNISH = 4
    KICKOUT_REASON_KICK_OUT_REASON_BY_ADMIN = 5
    KICKOUT_REASON_KICK_OUT_REASON_HOST_REMOVE_ALL_GUESTS = 6


class UserPlayInfoPlayScene(betterproto.Enum):
    PLAY_SCENE_UNKNOWN = 0
    PLAY_SCENE_COUNTDOWN_FOR_ALL = 1
    PLAY_SCENE_COUNTDOWN_FOR_SINGLE = 2
    PLAY_SCENE_LIVE_SHOW = 3
    PLAY_SCENE_AIG_C = 4
    PLAY_SCENE_KARAOKE = 5
    PLAY_SCENE_DRAW_GUESS = 6
    PLAY_SCENE_ENLARGE_GRID = 7
    PLAY_SCENE_GIFT_PRIORITY_LINK = 8
    PLAY_SCENE_GIFT_THRESHOLD_LINK = 9
    PLAY_SCENE_NOTICE_BOARD = 10
    PLAY_SCENE_PLAY_BOOK = 11
    PLAY_SCENE_GUEST_SHOWDOWN = 12


class UserPlayInfoPlayUserTag(betterproto.Enum):
    PLAY_USER_TAG_UNKNOWN = 0
    PLAY_USER_TAG_GUEST_SHOWDOWN_NORMAL = 1
    PLAY_USER_TAG_GUEST_SHOWDOWN_WINNER = 2
    PLAY_USER_TAG_GUEST_SHOWDOWN_LOSER = 3


class LinkerReplyContentLinkmicMultiLiveEnum(betterproto.Enum):
    LINKMIC_MULTI_LIVE_ENUM_DEFAULT = 0
    LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT = 1


class SubOperationSubOperationType(betterproto.Enum):
    SUB_OPERATION_TYPE_OPERATION_TYPE_UNKNOWN = 0
    SUB_OPERATION_TYPE_OPERATION_TYPE_NEW_SUBSCRIPTION = 1
    SUB_OPERATION_TYPE_OPERATION_TYPE_SINGLE_RENEWAL = 2
    SUB_OPERATION_TYPE_OPERATION_TYPE_AUTO_RENEWAL = 3
    SUB_OPERATION_TYPE_OPERATION_TYPE_UPGRADE = 4
    SUB_OPERATION_TYPE_OPERATION_TYPE_CANCELLATION = 5


class BarrageTypeSubscribeGiftParamGiftSource(betterproto.Enum):
    GIFT_SOURCE_UNKNOWN = 0
    GIFT_SOURCE_PLATFORM = 1
    GIFT_SOURCE_USER_BUY_RANDOM = 2
    GIFT_SOURCE_USER_BUY_SPECIFIC = 3


class CompetitionFinishCompetitionEndReason(betterproto.Enum):
    COMPETITION_END_REASON_UNKNOWN = 0
    COMPETITION_END_REASON_NORMAL = 1
    COMPETITION_END_REASON_CUT_SHORT = 2


class TimerDetailAntidirtStatus(betterproto.Enum):
    ANTIDIRT_STATUS_PASS = 0
    ANTIDIRT_STATUS_FAILED = 1


class TimerDetailAuditStatus(betterproto.Enum):
    AUDIT_STATUS_UNKNOWN = 0
    AUDIT_STATUS_PASS = 1
    AUDIT_STATUS_FAILED = 2
    AUDIT_STATUS_REVIEWING = 3
    AUDIT_STATUS_FORBIDDEN = 4


class TimerDetailTimerStatus(betterproto.Enum):
    TIMER_STATUS_NOT_STARTED = 0
    TIMER_STATUS_RUNNING = 1
    TIMER_STATUS_PAUSED = 2
    TIMER_STATUS_CANCELLED = 3
    TIMER_STATUS_FINISHED = 4


class TimerDetailAuditInfoAuditTaskType(betterproto.Enum):
    AUDIT_TASK_TYPE_DEFAULT = 0
    AUDIT_TASK_TYPE_APPEAL = 1


class SubscriptionInfoAuditStatus(betterproto.Enum):
    AUDIT_STATUS_UNKNOWN = 0
    AUDIT_STATUS_PASS = 1
    AUDIT_STATUS_FAILED = 2
    AUDIT_STATUS_REVIEWING = 3
    AUDIT_STATUS_FORBIDDEN = 4


class WebcastLinkMicArmiesTriggerReason(betterproto.Enum):
    TRIGGER_REASON_UNKNOWN = 0
    TRIGGER_REASON_SCORE_UPDATE = 1
    TRIGGER_REASON_BATTLE_END = 2
    TRIGGER_REASON_OPT_OUT_UPDATE = 3
    TRIGGER_REASON_KEEP_ALIVE = 4


class EnlargePositionStatusSynContentEnlargeScreenScene(betterproto.Enum):
    ENLARGE_SCREEN_SCENE_ENLARGE_UNKNOWN = 0
    ENLARGE_SCREEN_SCENE_ENLARGE_HOST_SCREEN = 1
    ENLARGE_SCREEN_SCENE_INVITE_ENLARGE_GUEST_SCREEN = 2
    ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_HOST = 3
    ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_GUEST = 4
    ENLARGE_SCREEN_SCENE_HOST_RECEIVE_CANCEL_ENLARGE = 5
    ENLARGE_SCREEN_SCENE_GET_ENLARGE_STATUS = 6
    ENLARGE_SCREEN_SCENE_ENLARGE_POSITION = 7
    ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_POSITION = 8
    ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_ALL = 9
    ENLARGE_SCREEN_SCENE_CHANGE_ENLARGE_RECORD = 10


class WebcastFansEventMessageFansEventType(betterproto.Enum):
    FANS_EVENT_TYPE_UNKNOWN = 0
    FANS_EVENT_TYPE_NEW_FANS = 1
    FANS_EVENT_TYPE_EXP_CHANGE = 2
    FANS_EVENT_TYPE_TASK_COMPLETE = 3
    FANS_EVENT_TYPE_LEVEL_UPGRADE = 4
    FANS_EVENT_TYPE_GET_UNCLAIMED_POINTS = 5
    FANS_EVENT_TYPE_TEAM_RANK_UPDATE = 6
    FANS_EVENT_TYPE_ENTRANCE_GUIDANCE = 7
    FANS_EVENT_TYPE_FANS_LEVEL_UPGRADE = 8
    FANS_EVENT_TYPE_REFRESH_TASK_PAGE = 1001


class ContentPositionContentPositionType(betterproto.Enum):
    CONTENT_POSITION_TYPE_UNKNOWN = 0
    CONTENT_POSITION_TYPE_STREAM = 1
    CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT = 2
    CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE = 3


class TextBadgeBadgeDisplayType(betterproto.Enum):
    BADGE_DISPLAY_TYPE_UNKNOWN = 0
    BADGE_DISPLAY_TYPE_IMAGE = 1
    BADGE_DISPLAY_TYPE_TEXT = 2
    BADGE_DISPLAY_TYPE_STRING = 3
    BADGE_DISPLAY_TYPE_COMBINE = 4


class FanTicketRoomNoticeContentPlayScene(betterproto.Enum):
    PLAY_SCENE_UNKNOWN = 0
    PLAY_SCENE_COUNTDOWN_FOR_ALL = 1
    PLAY_SCENE_COUNTDOWN_FOR_SINGLE = 2
    PLAY_SCENE_LIVE_SHOW = 3
    PLAY_SCENE_AIG_C = 4
    PLAY_SCENE_KARAOKE = 5
    PLAY_SCENE_DRAW_GUESS = 6
    PLAY_SCENE_ENLARGE_GRID = 7
    PLAY_SCENE_GIFT_PRIORITY_LINK = 8
    PLAY_SCENE_GIFT_THRESHOLD_LINK = 9
    PLAY_SCENE_NOTICE_BOARD = 10
    PLAY_SCENE_PLAY_BOOK = 11
    PLAY_SCENE_GUEST_SHOWDOWN = 12


class PerceptionSheetInfoPerceptionDialogIconType(betterproto.Enum):
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE = 0
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING = 1
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC = 2
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC = 3
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE = 4
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX = 5
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE = 6
    PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED = 7
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT = 11
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS = 12
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH = 13
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL = 14
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION = 15
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT = 16
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING = 17
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON = 18


class PermitJoinGroupBizContentReplyStatus(betterproto.Enum):
    REPLY_STATUS_UNKNOWN = 0
    REPLY_STATUS_AGREE = 1
    REPLY_STATUS_REFUSE_PERSONALLY = 2
    REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT = 3
    REPLY_STATUS_REFUSE_PROCESSING_INVITATION = 4
    REPLY_STATUS_REFUSE_BY_TIME_OUT = 5
    REPLY_STATUS_REFUSE_EXCEPTION = 6
    REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED = 7
    REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE = 8
    REPLY_STATUS_REFUSE_IN_MIC_ROOM = 9
    REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN = 10
    REPLY_STATUS_REFUSE_IN_MULTI_GUEST = 11
    REPLY_STATUS_REFUSE_PAUSE_LIVE = 12
    REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING = 13
    REPLY_STATUS_REFUSE_DRAW_GUESSING = 14
    REPLY_STATUS_REFUSE_RANDOM_MATCHING = 15
    REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING = 16
    REPLY_STATUS_REFUSE_IN_MIC_ROOM_FOR_MULTI_COHOST = 17
    REPLY_STATUS_REFUSE_COHOST_FINISHED = 18
    REPLY_STATUS_REFUSE_NOT_CONNECTED = 19
    REPLY_STATUS_REFUSE_LINK_MIC_FULL = 20
    REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE = 21
    REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE = 22
    REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY = 23
    REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST = 24
    REPLY_STATUS_REFUSE_TOPIC_PAIRING = 25
    REPLY_STATUS_REFUSE_POSITION_CONFLICT = 26
    REPLY_STATUS_REFUSE_CONFLICT_QUICK_COHOST = 27
    REPLY_STATUS_REFUSE_IN_TAKE_STAGE_PROCESSING = 28


class PermitJoinGroupBizContentSourceType(betterproto.Enum):
    SOURCE_TYPE_UNKNOWN = 0
    SOURCE_TYPE_FRIEND_LIST = 1
    SOURCE_TYPE_RECOMMEND_LIST = 2
    SOURCE_TYPE_RECENT = 3
    SOURCE_TYPE_OTHER_FOLLOW = 4
    SOURCE_TYPE_QUICK_PAIR = 5
    SOURCE_TYPE_ACTIVITY = 6
    SOURCE_TYPE_QUICK_RECOMMEND = 7
    SOURCE_TYPE_OFFICIAL_CHANNEL = 8
    SOURCE_TYPE_BEST_TEAMMATE = 9
    SOURCE_TYPE_RESERVATION = 10
    SOURCE_TYPE_PAIRING = 11
    SOURCE_TYPE_PAIRING_ON_RESERVATION = 12
    SOURCE_TYPE_TOPIC_QUICK_PAIR = 13
    SOURCE_TYPE_TOPIC_QUICK_RECOMMEND = 14
    SOURCE_TYPE_ONLINE_FRIEND_CAPSULE = 15
    SOURCE_TYPE_UNDEFINED_16 = 16
    SOURCE_TYPE_UNDEFINED_17 = 17
    SOURCE_TYPE_UNDEFINED_18 = 18
    SOURCE_TYPE_UNDEFINED_19 = 19
    SOURCE_TYPE_WEEKLY_RANK = 20
    SOURCE_TYPE_HOURLY_RANK = 21
    SOURCE_TYPE_UNDEFINED_22 = 22
    SOURCE_TYPE_WEEKLY_RISING = 23
    SOURCE_TYPE_WEEKLY_ROOKIE = 24
    SOURCE_TYPE_CONNECTION_LIST = 25
    SOURCE_TYPE_DAILY_RANK = 26
    SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME = 27
    SOURCE_TYPE_RESERVATION_BUBBLE = 28
    SOURCE_TYPE_PAIRING_BUBBLE = 29
    SOURCE_TYPE_LEAGUE_PHASE_ONE = 30
    SOURCE_TYPE_LEAGUE_PHASE_TWO = 31
    SOURCE_TYPE_LEAGUE_PHASE_THREE = 32
    SOURCE_TYPE_DAILY_ROOKIE = 33
    SOURCE_TYPE_MAY_KNOW_LIST = 34
    SOURCE_TYPE_BANNER = 35
    SOURCE_TYPE_FANS_TEAM_RANK = 36
    SOURCE_TYPE_SEARCH = 37
    SOURCE_TYPE_E_OY_RANK_LIST = 38
    SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK = 39
    SOURCE_TYPE_CREATOR_CLASS_RANK = 40
    SOURCE_TYPE_HISTORY = 41
    SOURCE_TYPE_UNDEFINED_42 = 42
    SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST = 43


class WebcastLinkStateMessageScene(betterproto.Enum):
    SCENE_UNKNOWN = 0
    SCENE_UNDEFINED_1 = 1
    SCENE_CO_HOST = 2
    SCENE_UNDEFINED_3 = 3
    SCENE_MULTI_LIVE = 4


class WebcastLinkStateMessageStateType(betterproto.Enum):
    STATE_TYPE_STATE_INVALID = 0
    STATE_TYPE_STATE_LAYOUT = 1
    STATE_TYPE_STATE_ONLINE_USER_STATE = 2
    STATE_TYPE_STATE_AUDIO_MUTE = 3
    STATE_TYPE_STATE_VIDEO_MUTE = 4
    STATE_TYPE_STATE_RT_C_CONNECTION = 5
    STATE_TYPE_STATE_NETWORK = 6
    STATE_TYPE_STATE_BACKGROUND_IMAGE = 7
    STATE_TYPE_STATE_SCREEN_ORIENTATION = 8
    STATE_TYPE_STATE_AVATAR_ID = 9


class WebcastPerceptionMessagePerceptionDialogIconType(betterproto.Enum):
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE = 0
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING = 1
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC = 2
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC = 3
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE = 4
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX = 5
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE = 6
    PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED = 7
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT = 11
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS = 12
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH = 13
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL = 14
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION = 15
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT = 16
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING = 17
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON = 18


class LinkerInviteContentLinkmicMultiLiveEnum(betterproto.Enum):
    LINKMIC_MULTI_LIVE_ENUM_DEFAULT = 0
    LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT = 1


class PinCardViewGuessPinType(betterproto.Enum):
    GUESS_PIN_TYPE_PIN = 0
    GUESS_PIN_TYPE_UNPIN = 1
    GUESS_PIN_TYPE_FROZEN = 2


class GoodyBagBaseInfoGoodyBagBiz(betterproto.Enum):
    GOODY_BAG_BIZ_UNKNOWN = 0
    GOODY_BAG_BIZ_NORMAL_COIN = 1
    GOODY_BAG_BIZ_FANS_CLUB = 2
    GOODY_BAG_BIZ_PLATFORM_NORMAL = 100
    GOODY_BAG_BIZ_PLATFORM_FANS_CLUB = 101
    GOODY_BAG_BIZ_LEVEL_UP_PARTY_REWARD_NORMAL = 110
    GOODY_BAG_BIZ_LEVEL_UP_PARTY_REWARD_FANS_CLUB = 111


class EcommerceEntranceEntranceType(betterproto.Enum):
    ENTRANCE_TYPE_PROFILE = 0
    ENTRANCE_TYPE_SHOWCASE = 1
    ENTRANCE_TYPE_SHOP = 2


class EcommerceEntranceCreatorType(betterproto.Enum):
    CREATOR_TYPE_UNDEFINED = 0
    CREATOR_TYPE_OFFICIAL = 1
    CREATOR_TYPE_MARKET = 2
    CREATOR_TYPE_NORMAL = 3


class EcommerceEntranceViewVersion(betterproto.Enum):
    VIEW_VERSION_UNKNOWN = 0
    VIEW_VERSION_STAR_SHOP = 1


class EcommerceEntranceSellingPointLiveSellingPointType(betterproto.Enum):
    LIVE_SELLING_POINT_TYPE_UNDEFINED = 0
    LIVE_SELLING_POINT_TYPE_QUALITY = 1
    LIVE_SELLING_POINT_TYPE_SOLD = 2
    LIVE_SELLING_POINT_TYPE_TRUST_BETTER_THAN_OTHER_SHOP = 3
    LIVE_SELLING_POINT_TYPE_TRUST_REPLY_IN_TIME = 4
    LIVE_SELLING_POINT_TYPE_TRUST_CREATE_SHIP_IN_TIME = 5
    LIVE_SELLING_POINT_TYPE_TRUST_POSITIVE_REVIEW_RATE = 6


class EcommerceEntranceStoreOfficialLabelStoreBrandLabelType(betterproto.Enum):
    STORE_BRAND_LABEL_TYPE_NONE = 0
    STORE_BRAND_LABEL_TYPE_OFFICIAL = 1
    STORE_BRAND_LABEL_TYPE_AUTHORIZED = 2
    STORE_BRAND_LABEL_TYPE_BLUE_V = 3
    STORE_BRAND_LABEL_TYPE_TOP_CHOICE = 4
    STORE_BRAND_LABEL_TYPE_MALL = 5


class ParticipateThresholdSelectedParticipateThresholdType(betterproto.Enum):
    PARTICIPATE_THRESHOLD_TYPE_PARTICIPATE_THRESHOLD_UNKNOWN = 0
    PARTICIPATE_THRESHOLD_TYPE_PARTICIPATE_THRESHOLD_ALL_VIEWER = 1
    PARTICIPATE_THRESHOLD_TYPE_PARTICIPATE_THRESHOLD_FANS_CLUB = 2


class PlayTogetherPermitNoticeContentPlayTogetherPermitType(betterproto.Enum):
    PLAY_TOGETHER_PERMIT_TYPE_UNKNOWN = 0
    PLAY_TOGETHER_PERMIT_TYPE_ACCEPT = 1
    PLAY_TOGETHER_PERMIT_TYPE_REJECT = 2


class TakeTheStageOrderInfoSwitchTurnReason(betterproto.Enum):
    SWITCH_TURN_REASON_UNKNOWN = 0
    SWITCH_TURN_REASON_USER_CLICK = 1
    SWITCH_TURN_REASON_USER_LEFT = 2


class WebcastLinkMicBattlePunishFinishReason(betterproto.Enum):
    REASON_TIME_UP = 0
    REASON_CUT_SHORT = 1


class WebcastRankUpdateMessageEntranceGroupType(betterproto.Enum):
    ENTRANCE_GROUP_TYPE_DEFAULT = 0
    ENTRANCE_GROUP_TYPE_GIFT = 1
    ENTRANCE_GROUP_TYPE_E_COMMERCE = 2
    ENTRANCE_GROUP_TYPE_GAME = 3


class WebcastRankUpdateMessageOpType(betterproto.Enum):
    OP_TYPE_DEFAULT = 0
    OP_TYPE_ADD = 1
    OP_TYPE_REMOVE = 2
    OP_TYPE_RELOAD = 3
    OP_TYPE_BASIC_EFFECT = 4


class EoyBannerStreakInfoStreakType(betterproto.Enum):
    STREAK_TYPE_UNKNOWN = 0
    STREAK_TYPE_COMBO = 1
    STREAK_TYPE_WIN = 2


class RankTabInfoProfitRankType(betterproto.Enum):
    PROFIT_RANK_TYPE_TYPE_HOURLY_RANK = 0
    PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK = 1
    PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK = 2
    PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY = 3
    PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK = 4
    PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE = 5
    PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY = 6
    PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY = 7
    PROFIT_RANK_TYPE_TYPE_DAILY_RANK = 8
    PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK = 9
    PROFIT_RANK_TYPE_TYPE_GAME_RANK = 10
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME = 11
    PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK = 12
    PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE = 13
    PROFIT_RANK_TYPE_DAILY_ROOKIE = 14
    PROFIT_RANK_TYPE_TYPE_TEAM_RANK = 15
    PROFIT_RANK_TYPE_TYPE_CLASS_RANK = 16
    PROFIT_RANK_TYPE_UNDEFINED_17 = 17
    PROFIT_RANK_TYPE_UNDEFINED_18 = 18
    PROFIT_RANK_TYPE_UNDEFINED_19 = 19
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G = 20
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B = 21
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE = 22
    PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE = 23
    PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO = 24
    PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE = 25


class BattleTaskSettleResult(betterproto.Enum):
    RESULT_SUCCEED = 0
    RESULT_FAILED = 1
    RESULT_BOTH_SUCCEED = 2


class WebcastBarrageMessageBarrageType(betterproto.Enum):
    BARRAGE_TYPE_UNKNOWN = 0
    BARRAGE_TYPE_E_COM_ORDERING = 1
    BARRAGE_TYPE_E_COM_BUYING = 2
    BARRAGE_TYPE_NORMAL = 3
    BARRAGE_TYPE_SUBSCRIBE = 4
    BARRAGE_TYPE_EVENT_VIEW = 5
    BARRAGE_TYPE_EVENT_REGISTERED = 6
    BARRAGE_TYPE_SUBSCRIBE_GIFT = 7
    BARRAGE_TYPE_USER_UPGRADE = 8
    BARRAGE_TYPE_GRADE_USER_ENTRANCE_NOTIFICATION = 9
    BARRAGE_TYPE_FANS_LEVEL_UPGRADE = 10
    BARRAGE_TYPE_FANS_LEVEL_ENTRANCE = 11
    BARRAGE_TYPE_GAME_PARTNERSHIP = 12
    BARRAGE_TYPE_GIFT_GALLERY = 13
    BARRAGE_TYPE_E_COM_BOUGHT = 14
    BARRAGE_TYPE_COMMON_BARRAGE = 100


class WebcastBarrageMessageShowType(betterproto.Enum):
    SHOW_TYPE_NORMAL = 0
    SHOW_TYPE_FADE_IN_OUT = 1


class WebcastBarrageMessageRenderType(betterproto.Enum):
    RENDER_TYPE_NATIVE = 0
    RENDER_TYPE_HYBRID = 1
    RENDER_TYPE_ALPHA = 2


class WebcastBarrageMessageIconDisplayType(betterproto.Enum):
    ICON_DISPLAY_TYPE_IMAGE = 0
    ICON_DISPLAY_TYPE_BADGE = 1


class TakeTheStageInfoTakeTheStageStatus(betterproto.Enum):
    TAKE_THE_STAGE_STATUS_UNKNOWN = 0
    TAKE_THE_STAGE_STATUS_NOT_STARTED = 1
    TAKE_THE_STAGE_STATUS_CANCELLED = 2
    TAKE_THE_STAGE_STATUS_STARTED = 3
    TAKE_THE_STAGE_STATUS_FINAL_CALL = 4
    TAKE_THE_STAGE_STATUS_VICTORY_LAP = 5
    TAKE_THE_STAGE_STATUS_FINISHED = 6


class GameTagCategoryGameTagType(betterproto.Enum):
    GAME_TAG_TYPE_UNKNOWN = 0
    GAME_TAG_TYPE_PC_GAME = 1
    GAME_TAG_TYPE_MOBILE_GAME = 2
    GAME_TAG_TYPE_CONSOLE_GAME = 3


class PaddingInfoHorizontalPaddingRule(betterproto.Enum):
    HORIZONTAL_PADDING_RULE_USE_MIDDLE_AND_WIDTH = 0
    HORIZONTAL_PADDING_RULE_USE_LEFT_AND_MIDDLE_AND_RIGHT = 1


class PaddingInfoVerticalPaddingRule(betterproto.Enum):
    VERTICAL_PADDING_RULE_USE_DEFAULT = 0
    VERTICAL_PADDING_RULE_USE_TOP_AND_BOTTOM = 1


class PublicAreaMessageCommonTagItemTagType(betterproto.Enum):
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_UNKNOWN = 0
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_USER_GRADE = 1
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_LEVEL = 2
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_WATCH_ME_DAYS_AGO = 3
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_CUSTOM = 4
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_TITLE_GIFT = 5
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_JOINED_TEAM = 6
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_PAY_ACCOMPANY_DAYS = 7
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_SPONSOR_GIFT_LAST_ROOM = 8
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MATCH_MVP_LAST_ROOM = 9
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_LARGE_AMOUNT_GIFT_LAST_ROOM = 10
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_COMMENT_LAST_ROOM = 11
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_TITLED_GIFT = 12
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MEET_ANNIVERSARY = 13
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_SLEEP = 14
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_SEND_HEART_ME = 15
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_JOIN_TEAM = 16
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_WATCH_LIVE = 17
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_COMMENT = 18
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT_TIMES = 19
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_WATCH_LIVE_DURATION = 20
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT = 21
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_LIVE_CONTRIBUTION_TOP = 22
    TAG_TYPE_UNDEFINED_23 = 23
    TAG_TYPE_UNDEFINED_24 = 24
    TAG_TYPE_UNDEFINED_25 = 25
    TAG_TYPE_UNDEFINED_26 = 26
    TAG_TYPE_UNDEFINED_27 = 27
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_JUST_UPGRADE = 28
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_WATCH_DURATION = 29
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_COMMENT_NUM = 30
    TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_GIFT_SENT_NUM = 31


class PublicAreaMessageCommonTopicTopicActionType(betterproto.Enum):
    TOPIC_ACTION_TYPE_UNKNOWN = 0
    TOPIC_ACTION_TYPE_FOLLOW = 1


class PublicAreaMessageCommonUserMetricsUserMetricsType(betterproto.Enum):
    USER_METRICS_TYPE_UNKNOWN = 0
    USER_METRICS_TYPE_GRADE = 1
    USER_METRICS_TYPE_SUBSCRIBE = 2
    USER_METRICS_TYPE_FOLLOW = 3
    USER_METRICS_TYPE_FANS_CLUB = 4
    USER_METRICS_TYPE_TOP_VIEWER = 5
    USER_METRICS_TYPE_GIFT = 6


class CohostListUserLinkmicPlayType(betterproto.Enum):
    LINKMIC_PLAY_TYPE_PLAY_TYPE_INVITE = 0
    LINKMIC_PLAY_TYPE_PLAY_TYPE_APPLY = 1
    LINKMIC_PLAY_TYPE_PLAY_TYPE_RESERVE = 2


class CohostListUserCoHostPermissoinType(betterproto.Enum):
    CO_HOST_PERMISSOIN_TYPE_NO_PERM = 0
    CO_HOST_PERMISSOIN_TYPE_COHOST_PERM = 1
    CO_HOST_PERMISSOIN_TYPE_MULTI_HOST_PERM = 2


class CohostListUserLinkmicUserStatus(betterproto.Enum):
    LINKMIC_USER_STATUS_USER_STATUS_NONE = 0
    LINKMIC_USER_STATUS_USER_STATUS_LINKED = 1
    LINKMIC_USER_STATUS_USER_STATUS_APPLYING = 2
    LINKMIC_USER_STATUS_USER_STATUS_INVITING = 3


class GoodyBagCommonDetailParticipateMethod(betterproto.Enum):
    PARTICIPATE_METHOD_UNKNOWN = 0
    PARTICIPATE_METHOD_COMMENT = 1
    PARTICIPATE_METHOD_SHARE = 2
    PARTICIPATE_METHOD_NO_THRESHOLD = 3


class BattleRewardSettleRewardStatus(betterproto.Enum):
    REWARD_STATUS_SUCCEED = 0
    REWARD_STATUS_FAILED = 1


class JoinGroupContentJoinType(betterproto.Enum):
    JOIN_TYPE_UNKNOWN = 0
    JOIN_TYPE_CHANNEL_APPLY = 1
    JOIN_TYPE_CHANNEL_INVITE = 2
    JOIN_TYPE_GROUP_APPLY = 100
    JOIN_TYPE_GROUP_APPLY_FOLLOW = 101
    JOIN_TYPE_GROUP_INVITE = 102
    JOIN_TYPE_GROUP_INVITE_FOLLOW = 103
    JOIN_TYPE_GROUP_OWNER_JOIN = 104


class WebcastGameRankNotifyMessageMsgType(betterproto.Enum):
    MSG_TYPE_RANK_IN_OUT = 0
    MSG_TYPE_RANK_CHANGE = 1
    MSG_TYPE_ANCHOR_ENCOURAGE = 2
    MSG_TYPE_UN_KNOW = 255


class TemplateContentPollKind(betterproto.Enum):
    POLL_KIND_NORMAL = 0
    POLL_KIND_GIFT = 1
    POLL_KIND_CUSTOMIZABLE = 2
    POLL_KIND_CUSTOMIZABLE_GIFT = 3
    POLL_KIND_QUICK_GIFT = 4
    POLL_KIND_EMOTE = 5


class TemplateContentPollTemplateStatus(betterproto.Enum):
    POLL_TEMPLATE_STATUS_TO_BE_REVIEWED = 0
    POLL_TEMPLATE_STATUS_UNDER_REVIEW = 1
    POLL_TEMPLATE_STATUS_REVIEWED = 2
    POLL_TEMPLATE_STATUS_REFUSED = 3


class TemplateContentPollAppealStatus(betterproto.Enum):
    POLL_APPEAL_STATUS_UNKNOWN = 0
    POLL_APPEAL_STATUS_PASS = 1
    POLL_APPEAL_STATUS_FAIL = 2


class PerceptionDialogInfoPerceptionDialogIconType(betterproto.Enum):
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE = 0
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING = 1
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC = 2
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC = 3
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE = 4
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX = 5
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE = 6
    PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED = 7
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM = 8
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM = 9
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN = 10
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT = 11
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS = 12
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH = 13
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL = 14
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION = 15
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT = 16
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING = 17
    PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON = 18


class RankUpdateProfitRankType(betterproto.Enum):
    PROFIT_RANK_TYPE_TYPE_HOURLY_RANK = 0
    PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK = 1
    PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK = 2
    PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY = 3
    PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK = 4
    PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE = 5
    PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY = 6
    PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY = 7
    PROFIT_RANK_TYPE_TYPE_DAILY_RANK = 8
    PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK = 9
    PROFIT_RANK_TYPE_TYPE_GAME_RANK = 10
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME = 11
    PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK = 12
    PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE = 13
    PROFIT_RANK_TYPE_DAILY_ROOKIE = 14
    PROFIT_RANK_TYPE_TYPE_TEAM_RANK = 15
    PROFIT_RANK_TYPE_TYPE_CLASS_RANK = 16
    PROFIT_RANK_TYPE_UNDEFINED_17 = 17
    PROFIT_RANK_TYPE_UNDEFINED_18 = 18
    PROFIT_RANK_TYPE_UNDEFINED_19 = 19
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G = 20
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B = 21
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE = 22
    PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE = 23
    PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO = 24
    PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE = 25


class WebcastLinkMicMethodLinkmicReplyType(betterproto.Enum):
    LINKMIC_REPLY_TYPE_RT_UNKNOWN = 0
    LINKMIC_REPLY_TYPE_RT_AGREE = 1
    LINKMIC_REPLY_TYPE_RT_REJECT = 2


class UserLinkmicStatus(betterproto.Enum):
    LINKMIC_STATUS_DISABLE = 0
    LINKMIC_STATUS_ENABLE = 1
    LINKMIC_STATUS_JUST_FOLLOWING = 2
    LINKMIC_STATUS_MULTI_LINKING = 3
    LINKMIC_STATUS_MULTI_LINKING_ONLY_FOLLOWING = 4


class StringBadgeBadgeDisplayType(betterproto.Enum):
    BADGE_DISPLAY_TYPE_UNKNOWN = 0
    BADGE_DISPLAY_TYPE_IMAGE = 1
    BADGE_DISPLAY_TYPE_TEXT = 2
    BADGE_DISPLAY_TYPE_STRING = 3
    BADGE_DISPLAY_TYPE_COMBINE = 4


class WebcastRankTextMessageRankTestMessageScene(betterproto.Enum):
    RANK_TEST_MESSAGE_SCENE_UNKNOWN = 0
    RANK_TEST_MESSAGE_SCENE_ONLINE_AUDIENCE_TOP_N_UPDATE_PUBLIC_SCREEN = 1


class EmoteModelEmoteScene(betterproto.Enum):
    EMOTE_SCENE_SUBSCRIPTION = 0
    EMOTE_SCENE_GAME = 1


class EmoteModelEmoteType(betterproto.Enum):
    EMOTE_TYPE_NORMAL = 0
    EMOTE_TYPE_WITH_STICKER = 1


class EmoteModelContentSource(betterproto.Enum):
    CONTENT_SOURCE_UNKNOWN = 0
    CONTENT_SOURCE_NORMAL = 1
    CONTENT_SOURCE_CAMERA = 2


class EmoteModelRewardCondition(betterproto.Enum):
    REWARD_CONDITION_SUBSCRIPTION = 0
    REWARD_CONDITION_SUB_WAVE_CUSTOM = 1


class EmoteModelEmotePrivateType(betterproto.Enum):
    EMOTE_PRIVATE_TYPE_NORMAL = 0
    EMOTE_PRIVATE_TYPE_SUB_WAVE = 1
    EMOTE_PRIVATE_TYPE_GUESSING = 101


class EmoteModelAuditStatus(betterproto.Enum):
    AUDIT_STATUS_UNKNOWN = 0
    AUDIT_STATUS_PASS = 1
    AUDIT_STATUS_FAILED = 2
    AUDIT_STATUS_REVIEWING = 3
    AUDIT_STATUS_FORBIDDEN = 4


class SubWaveStrikeInfoWaveStatus(betterproto.Enum):
    WAVE_STATUS_RUNNING = 0
    WAVE_STATUS_FINISHED = 1
    WAVE_STATUS_FAILED = 2
    WAVE_STATUS_STRIKE = 3


class HashtagHashtagNamespace(betterproto.Enum):
    HASHTAG_NAMESPACE_GLOBAL = 0
    HASHTAG_NAMESPACE_GAMING = 1


class WebcastPartnershipGameOfflineMessageOfflineGameInfoOfflineType(betterproto.Enum):
    OFFLINE_TYPE_TASK_OFFLINE = 0
    OFFLINE_TYPE_EVENT_OFFLINE = 1
    OFFLINE_TYPE_DROPS_OFFLINE = 2


class LinkerEnterContentLinkmicMultiLiveEnum(betterproto.Enum):
    LINKMIC_MULTI_LIVE_ENUM_DEFAULT = 0
    LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT = 1


class InviteBizContentLinkmicShareRevenueSetting(betterproto.Enum):
    LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_NOT_SET = 0
    LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_OPEN = 1
    LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_CLOSE = 2


class InviteBizContentContentInviteSource(betterproto.Enum):
    CONTENT_INVITE_SOURCE_INVITE_SOURCE_UNKNOWN = 0
    CONTENT_INVITE_SOURCE_INVITE_SOURCE_PANEL_GO_LIVE = 1
    CONTENT_INVITE_SOURCE_INVITE_SOURCE_MUTUAL_NOTICE = 2
    CONTENT_INVITE_SOURCE_INVITE_SOURCE_USER_PROFILE = 3
    CONTENT_INVITE_SOURCE_INVITE_SOURCE_RESERVE = 4


class InviteBizContentLinkMicUserAdminType(betterproto.Enum):
    LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE = 0
    LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE = 1
    LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE = 2


class MatchInfoMultiplierType(betterproto.Enum):
    MULTIPLIER_TYPE_UNSPECIFIED = 0
    MULTIPLIER_TYPE_CRITICAL_STRIKE = 1
    MULTIPLIER_TYPE_TOP_2 = 2
    MULTIPLIER_TYPE_TOP_3 = 3


class GiftChallengeProgressGiftChallengeStatus(betterproto.Enum):
    GIFT_CHALLENGE_STATUS_UNKNOWN = 0
    GIFT_CHALLENGE_STATUS_NOT_JOINED = 1
    GIFT_CHALLENGE_STATUS_JOINED = 2
    GIFT_CHALLENGE_STATUS_COMPLETED = 3


class JoinDirectBizContentMultiGuestOutsideRoomInviteSource(betterproto.Enum):
    MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_UNKNOWN = 0
    MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_PANEL = 1
    MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_CAPSULE = 2
    MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_EMPTY_POSITION = 3


class GroupChannelUserJoinType(betterproto.Enum):
    JOIN_TYPE_UNKNOWN = 0
    JOIN_TYPE_CHANNEL_APPLY = 1
    JOIN_TYPE_CHANNEL_INVITE = 2
    JOIN_TYPE_GROUP_APPLY = 100
    JOIN_TYPE_GROUP_APPLY_FOLLOW = 101
    JOIN_TYPE_GROUP_INVITE = 102
    JOIN_TYPE_GROUP_INVITE_FOLLOW = 103
    JOIN_TYPE_GROUP_OWNER_JOIN = 104


class GroupChannelUserGroupStatus(betterproto.Enum):
    GROUP_STATUS_UNKNOWN = 0
    GROUP_STATUS_WAITING = 1
    GROUP_STATUS_UNDEFINED_2 = 2
    GROUP_STATUS_LINKED = 3


class PermitApplyContentAgreeStatus(betterproto.Enum):
    AGREE_STATUS_AGREE_UNKNOWN = 0
    AGREE_STATUS_AGREE = 1
    AGREE_STATUS_REJECT = 2


class WebcastGiftMessageLinkmicGiftExpressionStrategy(betterproto.Enum):
    LINKMIC_GIFT_EXPRESSION_STRATEGY_CONTROL_V_1 = 0
    LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_1 = 1
    LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_2 = 2


class WebcastGiftMessageGiftMessageVersion(betterproto.Enum):
    GIFT_MESSAGE_VERSION_0 = 0
    GIFT_MESSAGE_VERSION_1 = 1


class WebcastGiftMessageInteractiveGiftInfoGiftMessageIgnoreConfig(betterproto.Enum):
    GIFT_MESSAGE_IGNORE_CONFIG_NOT_IGNORE = 0
    GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY = 1
    GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_PS_M = 2
    GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY_AND_PS_M = 3


class PollDataPollStatus(betterproto.Enum):
    POLL_STATUS_PS_UNKNOWN = 0
    POLL_STATUS_ENABLE = 1
    POLL_STATUS_DISABLE = 2


class PollDataPollEndType(betterproto.Enum):
    POLL_END_TYPE_POLL_END_BY_TIME = 0
    POLL_END_TYPE_POLL_END_BY_OWNER = 1
    POLL_END_TYPE_POLL_END_BY_OTHER = 2
    POLL_END_TYPE_POLL_END_BY_ADMIN = 3


class PollDataPollKind(betterproto.Enum):
    POLL_KIND_NORMAL = 0
    POLL_KIND_GIFT = 1
    POLL_KIND_CUSTOMIZABLE = 2
    POLL_KIND_CUSTOMIZABLE_GIFT = 3
    POLL_KIND_QUICK_GIFT = 4
    POLL_KIND_EMOTE = 5


class BattleAbTestBattleAbTestType(betterproto.Enum):
    BATTLE_A_B_TEST_TYPE_UNKNOWN_AB_TEST_TYPE = 0
    BATTLE_A_B_TEST_TYPE_MEANWHILE_INVITE = 1
    BATTLE_A_B_TEST_TYPE_SPECIFIED_GIFT = 2
    BATTLE_A_B_TEST_TYPE_RT_C_MESSAGE_CHANNEL = 3
    BATTLE_A_B_TEST_TYPE_CONNECTION_TIME_OUT = 4
    BATTLE_A_B_TEST_TYPE_REMATCH_SKIP_TEAMMATE = 5
    BATTLE_A_B_TEST_TYPE_OPT_INVITEE_4048 = 6
    BATTLE_A_B_TEST_TYPE_BATTLE_AB_TEST_TYPE_TIME_CALIBRATE = 7


class EmoteUploadInfoUserEmoteUploadSource(betterproto.Enum):
    USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR = 0
    USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER = 1
    USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR = 2


class CompetitionInfoGroupShowInfoGroupShowStatus(betterproto.Enum):
    GROUP_SHOW_STATUS_UNKNOWN = 0
    GROUP_SHOW_STATUS_STARTED = 1
    GROUP_SHOW_STATUS_UNDEFINED_2 = 2
    GROUP_SHOW_STATUS_UNDEFINED_3 = 3
    GROUP_SHOW_STATUS_UNDEFINED_4 = 4
    GROUP_SHOW_STATUS_UNDEFINED_5 = 5
    GROUP_SHOW_STATUS_UNDEFINED_6 = 6
    GROUP_SHOW_STATUS_UNDEFINED_7 = 7
    GROUP_SHOW_STATUS_UNDEFINED_8 = 8
    GROUP_SHOW_STATUS_UNDEFINED_9 = 9
    GROUP_SHOW_STATUS_FINISHED = 10


class WebcastGameMomentMessageGameMomentMessageType(betterproto.Enum):
    GAME_MOMENT_MESSAGE_TYPE_UNKNOWN = 0
    GAME_MOMENT_MESSAGE_TYPE_VICTORY = 1
    GAME_MOMENT_MESSAGE_TYPE_HIGHLIGHT = 2
    GAME_MOMENT_MESSAGE_TYPE_DEFEAT = 3
    GAME_MOMENT_MESSAGE_TYPE_KILL_NUM = 4
    GAME_MOMENT_MESSAGE_TYPE_REMAIN_NUM = 5


class WebcastGameMomentMessageGameMomentEffectType(betterproto.Enum):
    GAME_MOMENT_EFFECT_TYPE_UNKNOWN = 0
    GAME_MOMENT_EFFECT_TYPE_GIFT_GUIDANCE = 1
    GAME_MOMENT_EFFECT_TYPE_QUICK_COMMENT = 2


class WebcastLinkMicBattleItemCardBattleCardMsgType(betterproto.Enum):
    BATTLE_CARD_MSG_TYPE_UNKNOWN_CARD_ACTION = 0
    BATTLE_CARD_MSG_TYPE_CARD_OBTAIN_GUIDE = 1
    BATTLE_CARD_MSG_TYPE_USE_CRITICAL_STRIKE_CARD = 2
    BATTLE_CARD_MSG_TYPE_USE_SMOKE_CARD = 3
    BATTLE_CARD_MSG_TYPE_AWARD_CARD_NOTICE = 4
    BATTLE_CARD_MSG_TYPE_USE_EXTRA_TIME_CARD = 5
    BATTLE_CARD_MSG_TYPE_USE_SPECIAL_EFFECT_CARD = 6
    BATTLE_CARD_MSG_TYPE_USE_POTION_CARD = 7
    BATTLE_CARD_MSG_TYPE_USE_WAVE_CARD = 8
    BATTLE_CARD_MSG_TYPE_SPECIAL_EFFECT_NOTICE = 9
    BATTLE_CARD_MSG_TYPE_USE_TOP_2_CARD = 10
    BATTLE_CARD_MSG_TYPE_USE_TOP_3_CARD = 11


class LinkerGuestCancelEnlargeContentEnlargeScreenScene(betterproto.Enum):
    ENLARGE_SCREEN_SCENE_ENLARGE_UNKNOWN = 0
    ENLARGE_SCREEN_SCENE_ENLARGE_HOST_SCREEN = 1
    ENLARGE_SCREEN_SCENE_INVITE_ENLARGE_GUEST_SCREEN = 2
    ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_HOST = 3
    ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_GUEST = 4
    ENLARGE_SCREEN_SCENE_HOST_RECEIVE_CANCEL_ENLARGE = 5
    ENLARGE_SCREEN_SCENE_GET_ENLARGE_STATUS = 6
    ENLARGE_SCREEN_SCENE_ENLARGE_POSITION = 7
    ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_POSITION = 8
    ENLARGE_SCREEN_SCENE_CANCEL_ENLARGE_FOR_ALL = 9
    ENLARGE_SCREEN_SCENE_CHANGE_ENLARGE_RECORD = 10


class WebcastAudienceReserveUserStateMessageAudienceReserveType(betterproto.Enum):
    AUDIENCE_RESERVE_TYPE_UNKNOWN_FIELD = 0
    AUDIENCE_RESERVE_TYPE_RESERVE = 1
    AUDIENCE_RESERVE_TYPE_CANCEL = 2
    AUDIENCE_RESERVE_TYPE_WAIT = 3
    AUDIENCE_RESERVE_TYPE_DONE = 4
    AUDIENCE_RESERVE_TYPE_REJECT = 5


class ContentPositionMessageContentPositionType(betterproto.Enum):
    CONTENT_POSITION_TYPE_UNKNOWN = 0
    CONTENT_POSITION_TYPE_STREAM = 1
    CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT = 2
    CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE = 3


class RivalExtraInfoTextType(betterproto.Enum):
    TEXT_TYPE_UNKNOWN = 0
    TEXT_TYPE_CURRO_OMF_AN_TICKET = 1
    TEXT_TYPE_TOTAL_DIAMOND_COUNT = 2
    TEXT_TYPE_DISTANCE = 3
    TEXT_TYPE_DISTANCE_CITY = 4


class RivalExtraInfoAnchorLayer(betterproto.Enum):
    ANCHOR_LAYER_UNKNOWN = 0
    ANCHOR_LAYER_TOP = 1
    ANCHOR_LAYER_SMALL = 2


class RivalExtraInfoInviteBlockReason(betterproto.Enum):
    INVITE_BLOCK_REASON_NONE = 0
    INVITE_BLOCK_REASON_IS_LINKING = 1
    INVITE_BLOCK_REASON_INVITATION_DENIED = 2
    INVITE_BLOCK_REASON_PERMISSION_DENIED = 3
    INVITE_BLOCK_REASON_LOW_CLIENT_VERSION = 4
    INVITE_BLOCK_REASON_ROOM_PAUSED = 5
    INVITE_BLOCK_REASON_LINK_MIC_FULL = 6
    INVITE_BLOCK_REASON_MATURE_THEME_NOT_MATCH = 7
    INVITE_BLOCK_REASON_RESERVE_FULL = 8
    INVITE_BLOCK_REASON_REGIONAL_BLOCK = 9


class RivalExtraInfoLinkmicPlayType(betterproto.Enum):
    LINKMIC_PLAY_TYPE_PLAY_TYPE_INVITE = 0
    LINKMIC_PLAY_TYPE_PLAY_TYPE_APPLY = 1
    LINKMIC_PLAY_TYPE_PLAY_TYPE_RESERVE = 2


class RivalExtraInfoDetailBlockReason(betterproto.Enum):
    DETAIL_BLOCK_REASON_BLOCK_REASON_NONE = 0
    DETAIL_BLOCK_REASON_IN_LINK_MIC = 100
    DETAIL_BLOCK_REASON_MULTI_HOST_FULL = 101
    DETAIL_BLOCK_REASON_IN_COHOST_LINK_MIC = 102
    DETAIL_BLOCK_REASON_DEAL_OTHER_INVITE = 103
    DETAIL_BLOCK_REASON_DEAL_OTHER_APPLY = 104
    DETAIL_BLOCK_REASON_IN_PK_STATUS = 105
    DETAIL_BLOCK_REASON_SELF_IN_PK_STATUS = 106
    DETAIL_BLOCK_REASON_IN_COHOST_INVITE_APPLY = 107
    DETAIL_BLOCK_REASON_IN_AUDIENCE_LINK_MIC = 108
    DETAIL_BLOCK_REASON_WAITING_AUTO_MATCH = 109
    DETAIL_BLOCK_REASON_INVITE_NEED_TO_JOIN = 110
    DETAIL_BLOCK_REASON_JOIN_NEED_TO_INVITE = 111
    DETAIL_BLOCK_REASON_IN_TAKE_THE_STAGE_STATUS = 112
    DETAIL_BLOCK_REASON_SELF_IN_TAKE_THE_STAGE_STATUS = 113
    DETAIL_BLOCK_REASON_NOLINK_MIC_PERMISSION = 200
    DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_SETTING_CLOSED = 202
    DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_NOT_FOLLOWER = 203
    DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_BLOCK_INVITATION_OF_LIVE = 204
    DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_FRIEND_INVITE = 205
    DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_FRIEND_APPLY = 206
    DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_NOT_FRIEND_INVITE = 207
    DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_REFUSE_NOT_FRIEND_APPLY = 208
    DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_BLOCK_INVITATION_OF_MULTI_HOST = 209
    DETAIL_BLOCK_REASON_ANCHOR_LINK_MIC_BLOCK_APPLY_OF_MULTI_HOST = 210
    DETAIL_BLOCK_REASON_ROOM_PAUSED = 300
    DETAIL_BLOCK_REASON_LIVE_TYPE_AUDIO = 301
    DETAIL_BLOCK_REASON_ROOM_INTERACTION_CONFLICT = 302
    DETAIL_BLOCK_REASON_RIVAL_VERSION_NOT_SUPPORT = 303
    DETAIL_BLOCK_REASON_SELF_VERSION_NOT_SUPPORT = 304
    DETAIL_BLOCK_REASON_MATURE_THEME_MISMATCH = 305
    DETAIL_BLOCK_REASON_SELF_IN_OFFICIAL_CHANNEL = 306
    DETAIL_BLOCK_REASON_RIVAL_IN_OFFICIAL_CHANNEL = 307
    DETAIL_BLOCK_REASON_IN_OFFICIAL_BACKUP_CHANNEL = 308
    DETAIL_BLOCK_REASON_RIVAL_RESERVE_FULL = 309
    DETAIL_BLOCK_REASON_ANCHOR_NOT_LIVING = 310
    DETAIL_BLOCK_REASON_ANCHOR_IS_SELF = 311
    DETAIL_BLOCK_REASON_PRIVATE_ROOM = 312
    DETAIL_BLOCK_REASON_BLOCKED_BY_RIVAL = 313
    DETAIL_BLOCK_REASON_SELF_BLOCKED_RIVAL = 314
    DETAIL_BLOCK_REASON_VIEWER_REGION_NOT_SUPPORT = 315
    DETAIL_BLOCK_REASON_SUBSCRIBER_ROOM = 316
    DETAIL_BLOCK_REASON_REGIONAL_BLOCK = 317
    DETAIL_BLOCK_REASON_PENALTY_BANNED = 318
    DETAIL_BLOCK_REASON_BLOCK_PROGRAM_LIVE_TAB_ROOM = 319
    DETAIL_BLOCK_REASON_NETWORK_ERROR = 400
    DETAIL_BLOCK_REASON_ROOM_FILTER_ERROR = 401


class RivalExtraInfoCohostLayoutMode(betterproto.Enum):
    COHOST_LAYOUT_MODE_NORMAL = 0
    COHOST_LAYOUT_MODE_SCREEN_SHARE = 1


class RivalExtraInfoBattleInfoBattleInfoType(betterproto.Enum):
    BATTLE_INFO_TYPE_NONE = 0
    BATTLE_INFO_TYPE_AVERAGE_SCORE = 1
    BATTLE_INFO_TYPE_MAX_SCORE = 2
    BATTLE_INFO_TYPE_LAST_SCORE = 3
    BATTLE_INFO_TYPE_WIN_STREAK = 4


class RivalExtraInfoReserveInfoReserveReplyStatus(betterproto.Enum):
    RESERVE_REPLY_STATUS_UNKNOWN = 0
    RESERVE_REPLY_STATUS_WAIT_FORME = 1


class BadgeStructBadgeDisplayType(betterproto.Enum):
    BADGE_DISPLAY_TYPE_UNKNOWN = 0
    BADGE_DISPLAY_TYPE_IMAGE = 1
    BADGE_DISPLAY_TYPE_TEXT = 2
    BADGE_DISPLAY_TYPE_STRING = 3
    BADGE_DISPLAY_TYPE_COMBINE = 4


class BadgeStructBadgePriorityType(betterproto.Enum):
    BADGE_PRIORITY_TYPE_UNKNOWN = 0
    BADGE_PRIORITY_TYPE_STRONG_RELATION = 10
    BADGE_PRIORITY_TYPE_PLATFORM = 20
    BADGE_PRIORITY_TYPE_RELATION = 30
    BADGE_PRIORITY_TYPE_ACTIVITY = 40
    BADGE_PRIORITY_TYPE_RANK_LIST = 50


class BadgeStructBadgeSceneType(betterproto.Enum):
    BADGE_SCENE_TYPE_UNKNOWN = 0
    BADGE_SCENE_TYPE_ADMIN = 1
    BADGE_SCENE_TYPE_FIRST_RECHARGE = 2
    BADGE_SCENE_TYPE_FRIENDS = 3
    BADGE_SCENE_TYPE_SUBSCRIBER = 4
    BADGE_SCENE_TYPE_ACTIVITY = 5
    BADGE_SCENE_TYPE_RANK_LIST = 6
    BADGE_SCENE_TYPE_NEW_SUBSCRIBER = 7
    BADGE_SCENE_TYPE_USER_GRADE = 8
    BADGE_SCENE_TYPE_STATE_CONTROLLED_MEDIA = 9
    BADGE_SCENE_TYPE_FANS = 10
    BADGE_SCENE_TYPE_LIVE_PRO = 11
    BADGE_SCENE_TYPE_ANCHOR = 12


class BadgeStructBadgeExhibitionType(betterproto.Enum):
    BADGE_EXHIBITION_TYPE_BADGE = 0
    BADGE_EXHIBITION_TYPE_IDENTITY_LABEL = 1


class BadgeStructDisplayStatus(betterproto.Enum):
    DISPLAY_STATUS_NORMAL = 0
    DISPLAY_STATUS_SHADOW = 1


class BadgeStructPosition(betterproto.Enum):
    POSITION_UNKNOWN = 0
    POSITION_LEFT = 1
    POSITION_RIGHT = 2


class WebcastSubPinEventMessageActionType(betterproto.Enum):
    ACTION_TYPE_UNKNOWN = 0
    ACTION_TYPE_PIN = 1
    ACTION_TYPE_UNPIN = 2


class WebcastLinkmicBattleTaskMessageBattleTaskMessageType(betterproto.Enum):
    BATTLE_TASK_MESSAGE_TYPE_START = 0
    BATTLE_TASK_MESSAGE_TYPE_TASK_UPDATE = 1
    BATTLE_TASK_MESSAGE_TYPE_TASK_SETTLE = 2
    BATTLE_TASK_MESSAGE_TYPE_REWARD_SETTLE = 3


class TextPieceGiftGiftShowType(betterproto.Enum):
    GIFT_SHOW_TYPE_GIFT_SHOW_DEFAULT = 0
    GIFT_SHOW_TYPE_GIFT_SHOW_NAME = 1


class KickOutBizContentLinkMicUserAdminType(betterproto.Enum):
    LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE = 0
    LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE = 1
    LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE = 2


class CancelJoinGroupContentJoinType(betterproto.Enum):
    JOIN_TYPE_UNKNOWN = 0
    JOIN_TYPE_CHANNEL_APPLY = 1
    JOIN_TYPE_CHANNEL_INVITE = 2
    JOIN_TYPE_GROUP_APPLY = 100
    JOIN_TYPE_GROUP_APPLY_FOLLOW = 101
    JOIN_TYPE_GROUP_INVITE = 102
    JOIN_TYPE_GROUP_INVITE_FOLLOW = 103
    JOIN_TYPE_GROUP_OWNER_JOIN = 104


class JoinGroupBizContentCohostLayoutMode(betterproto.Enum):
    COHOST_LAYOUT_MODE_NORMAL = 0
    COHOST_LAYOUT_MODE_SCREEN_SHARE = 1


class ReplyInviteContentAgreeStatus(betterproto.Enum):
    AGREE_STATUS_AGREE_UNKNOWN = 0
    AGREE_STATUS_AGREE = 1
    AGREE_STATUS_REJECT = 2


class SubWaveInfoCommonWaveStatus(betterproto.Enum):
    WAVE_STATUS_RUNNING = 0
    WAVE_STATUS_FINISHED = 1
    WAVE_STATUS_FAILED = 2
    WAVE_STATUS_STRIKE = 3


class WebcastPlayTogetherMessagePlayTogetherMessageType(betterproto.Enum):
    PLAY_TOGETHER_MESSAGE_TYPE_START = 0
    PLAY_TOGETHER_MESSAGE_TYPE_END = 1
    PLAY_TOGETHER_MESSAGE_TYPE_REVIEW_NOTICE = 2
    PLAY_TOGETHER_MESSAGE_TYPE_LIST_CHANGE = 3
    PLAY_TOGETHER_MESSAGE_TYPE_PERMIT_NOTICE = 4
    PLAY_TOGETHER_MESSAGE_TYPE_IN_PROGRESS = 5


class LinkerMicIdxUpdateInfoMicIdxOperation(betterproto.Enum):
    MIC_IDX_OPERATION_MIC_I_DX_OP_ON = 0
    MIC_IDX_OPERATION_MIC_I_DX_OP_OFF = 1


class SubWaveImMsgSubWaveImMsgType(betterproto.Enum):
    SUB_WAVE_IM_MSG_TYPE_WAVE_START = 0
    SUB_WAVE_IM_MSG_TYPE_NEW_COME_SUBSCRIBER = 1
    SUB_WAVE_IM_MSG_TYPE_WAVE_FINISH = 2
    SUB_WAVE_IM_MSG_TYPE_RECEIVE_REWARD = 3
    SUB_WAVE_IM_MSG_TYPE_WAVE_FINISH_STRIKE_START = 4
    SUB_WAVE_IM_MSG_TYPE_STRIKE_FINISH = 5
    SUB_WAVE_IM_MSG_TYPE_STRIKE_FINISH_NEXT_STRIKE_START = 6
    SUB_WAVE_IM_MSG_TYPE_REWARD_SENT = 7


class GiftConfigInfoGiftConfigType(betterproto.Enum):
    GIFT_CONFIG_TYPE_UNKNOWN = 0
    GIFT_CONFIG_TYPE_AUDIO = 1


class CompetitionResultsTeamInfoResult(betterproto.Enum):
    RESULT_UNKNOWN = 0
    RESULT_WIN = 1
    RESULT_LOSE = 2
    RESULT_DRAW = 3


class WebcastLiveShowMessageLiveShowMessageType(betterproto.Enum):
    LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_UNKNOWN = 0
    LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_CREATE_SHOW = 1
    LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_NEXT_GUEST = 2
    LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_FINISH_GUEST = 3
    LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_SHOW_AGAIN_GUEST = 4
    LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_END_SHOW = 5
    LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_CONTENT_CHANGED = 6
    LIVE_SHOW_MESSAGE_TYPE_LIVE_SHOW_HOST_TRANSITION_START = 7


class WebcastLiveShowMessageShowUserFinishReason(betterproto.Enum):
    SHOW_USER_FINISH_REASON_UNKNOWN = 0
    SHOW_USER_FINISH_REASON_TIME_ROVER_NORMALLY = 1
    SHOW_USER_FINISH_REASON_HOST_FINISH_SHOWING_GUEST = 2
    SHOW_USER_FINISH_REASON_SELF_FINISH_SHOWING_GUEST = 3
    SHOW_USER_FINISH_REASON_LEAVE = 4
    SHOW_USER_FINISH_REASON_KICK_OUT = 5
    SHOW_USER_FINISH_REASON_RT_C_CALLBACK_LEAVE = 6
    SHOW_USER_FINISH_REASON_HOST_END_SHOW = 7
    SHOW_USER_FINISH_REASON_MULTI_GUEST_CLOSED = 8
    SHOW_USER_FINISH_REASON_MULTI_GUEST_RESUMED = 9
    SHOW_USER_FINISH_REASON_KICK_OUT_ALL_GUESTS = 10
    SHOW_USER_FINISH_REASON_MODERATOR_FINISH_SHOWING_GUEST = 11
    SHOW_USER_FINISH_REASON_MODERATOR_END_SHOW = 12


class LiveEventInfoEventPayMethod(betterproto.Enum):
    EVENT_PAY_METHOD_INVALID = 0
    EVENT_PAY_METHOD_COINS = 1
    EVENT_PAY_METHOD_CASH = 2


class SubPinCardTextTextType(betterproto.Enum):
    TEXT_TYPE_UNKNOWN = 0
    TEXT_TYPE_ORIGINAL = 1
    TEXT_TYPE_STARLING_KEY = 2


class WebcastCompetitionMessageCompetitionMessageType(betterproto.Enum):
    COMPETITION_MESSAGE_TYPE_UNKNOWN = 0
    COMPETITION_MESSAGE_TYPE_INITIATE = 1
    COMPETITION_MESSAGE_TYPE_REPLY = 2
    COMPETITION_MESSAGE_TYPE_START = 3
    COMPETITION_MESSAGE_TYPE_SETTLE_START = 4
    COMPETITION_MESSAGE_TYPE_SETTLE_END = 5
    COMPETITION_MESSAGE_TYPE_SCORE_CHANGE = 6
    COMPETITION_MESSAGE_TYPE_FINISH = 7
    COMPETITION_MESSAGE_TYPE_SWITCH_TURN = 8


class CompetitionCommonBattleType(betterproto.Enum):
    BATTLE_TYPE_UNKNOWN_BATTLE_TYPE = 0
    BATTLE_TYPE_NORMAL_BATTLE = 1
    BATTLE_TYPE_TEAM_BATTLE = 2
    BATTLE_TYPE_INDIVIDUAL_BATTLE = 3
    BATTLE_TYPE_1_V_N = 4
    BATTLE_TYPE_TAKE_THE_STAGE = 51
    BATTLE_TYPE_GROUP_SHOW = 52


class PermitJoinGroupContentAgreeStatus(betterproto.Enum):
    AGREE_STATUS_AGREE_UNKNOWN = 0
    AGREE_STATUS_AGREE = 1
    AGREE_STATUS_REJECT = 2


class PermitJoinGroupContentJoinType(betterproto.Enum):
    JOIN_TYPE_UNKNOWN = 0
    JOIN_TYPE_CHANNEL_APPLY = 1
    JOIN_TYPE_CHANNEL_INVITE = 2
    JOIN_TYPE_GROUP_APPLY = 100
    JOIN_TYPE_GROUP_APPLY_FOLLOW = 101
    JOIN_TYPE_GROUP_INVITE = 102
    JOIN_TYPE_GROUP_INVITE_FOLLOW = 103
    JOIN_TYPE_GROUP_OWNER_JOIN = 104


class WebcastEnvelopeMessageEnvelopeDisplay(betterproto.Enum):
    ENVELOPE_DISPLAY_UNKNOWN = 0
    ENVELOPE_DISPLAY_NEW = 1
    ENVELOPE_DISPLAY_HIDE = 2


class CohostUserInfoSourceType(betterproto.Enum):
    SOURCE_TYPE_UNKNOWN = 0
    SOURCE_TYPE_FRIEND_LIST = 1
    SOURCE_TYPE_RECOMMEND_LIST = 2
    SOURCE_TYPE_RECENT = 3
    SOURCE_TYPE_OTHER_FOLLOW = 4
    SOURCE_TYPE_QUICK_PAIR = 5
    SOURCE_TYPE_ACTIVITY = 6
    SOURCE_TYPE_QUICK_RECOMMEND = 7
    SOURCE_TYPE_OFFICIAL_CHANNEL = 8
    SOURCE_TYPE_BEST_TEAMMATE = 9
    SOURCE_TYPE_RESERVATION = 10
    SOURCE_TYPE_PAIRING = 11
    SOURCE_TYPE_PAIRING_ON_RESERVATION = 12
    SOURCE_TYPE_TOPIC_QUICK_PAIR = 13
    SOURCE_TYPE_TOPIC_QUICK_RECOMMEND = 14
    SOURCE_TYPE_ONLINE_FRIEND_CAPSULE = 15
    SOURCE_TYPE_UNDEFINED_16 = 16
    SOURCE_TYPE_UNDEFINED_17 = 17
    SOURCE_TYPE_UNDEFINED_18 = 18
    SOURCE_TYPE_UNDEFINED_19 = 19
    SOURCE_TYPE_WEEKLY_RANK = 20
    SOURCE_TYPE_HOURLY_RANK = 21
    SOURCE_TYPE_UNDEFINED_22 = 22
    SOURCE_TYPE_WEEKLY_RISING = 23
    SOURCE_TYPE_WEEKLY_ROOKIE = 24
    SOURCE_TYPE_CONNECTION_LIST = 25
    SOURCE_TYPE_DAILY_RANK = 26
    SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME = 27
    SOURCE_TYPE_RESERVATION_BUBBLE = 28
    SOURCE_TYPE_PAIRING_BUBBLE = 29
    SOURCE_TYPE_LEAGUE_PHASE_ONE = 30
    SOURCE_TYPE_LEAGUE_PHASE_TWO = 31
    SOURCE_TYPE_LEAGUE_PHASE_THREE = 32
    SOURCE_TYPE_DAILY_ROOKIE = 33
    SOURCE_TYPE_MAY_KNOW_LIST = 34
    SOURCE_TYPE_BANNER = 35
    SOURCE_TYPE_FANS_TEAM_RANK = 36
    SOURCE_TYPE_SEARCH = 37
    SOURCE_TYPE_E_OY_RANK_LIST = 38
    SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK = 39
    SOURCE_TYPE_CREATOR_CLASS_RANK = 40
    SOURCE_TYPE_HISTORY = 41
    SOURCE_TYPE_UNDEFINED_42 = 42
    SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST = 43


class PlayTogetherBasicInfoApplyLimitType(betterproto.Enum):
    APPLY_LIMIT_TYPE_ALL_USER = 0
    APPLY_LIMIT_TYPE_FOLLOWER_ONLY = 1
    APPLY_LIMIT_TYPE_CREATOR_TEAM_ONLY = 2
    APPLY_LIMIT_TYPE_SUBSCRIBER_ONLY = 3


class PlayTogetherBasicInfoPlayTogetherStatus(betterproto.Enum):
    PLAY_TOGETHER_STATUS_UNKNOWN = 0
    PLAY_TOGETHER_STATUS_REVIEWING = 1
    PLAY_TOGETHER_STATUS_REVIEW_PASS = 2
    PLAY_TOGETHER_STATUS_DESC_NOT_PASS = 3
    PLAY_TOGETHER_STATUS_APPLY_NOTE_NOT_PASS = 4
    PLAY_TOGETHER_STATUS_ALL_NOT_REVIEW_PASS = 5
    PLAY_TOGETHER_STATUS_START = 6
    PLAY_TOGETHER_STATUS_END = 7


class CompetitionUserBaseCompetitionRoleType(betterproto.Enum):
    COMPETITION_ROLE_TYPE_UNKNOWN = 0
    COMPETITION_ROLE_TYPE_ANCHOR = 1
    COMPETITION_ROLE_TYPE_AUDIENCE = 2


class LinkerMuteContentMuteStatus(betterproto.Enum):
    MUTE_STATUS_MUTE = 0
    MUTE_STATUS_UN_MUTE = 1


class WebcastStarCommentNotificationMessageStarCommentAction(betterproto.Enum):
    STAR_COMMENT_ACTION_UNKNOWN = 0
    STAR_COMMENT_ACTION_DELETED = 1
    STAR_COMMENT_ACTION_POLLING = 2


class GameActionGameActionType(betterproto.Enum):
    GAME_ACTION_TYPE_SHOW = 0
    GAME_ACTION_TYPE_JUMP = 1
    GAME_ACTION_TYPE_FOLLOW = 2
    GAME_ACTION_TYPE_COMMENT = 3


class GameActionJumpPage(betterproto.Enum):
    JUMP_PAGE_GIFT_GOAL_SOURCE = 0
    JUMP_PAGE_GIFT_ALERT_SOURCE = 1
    JUMP_PAGE_COHOST_SETTING = 2
    JUMP_PAGE_GIFT_ER_RANK_LIST = 3
    JUMP_PAGE_WEEKLY_GAME_RANK_LIST = 4
    JUMP_PAGE_FANS_CLUB = 5
    JUMP_PAGE_GOODY_BAG_SETTING = 6
    JUMP_PAGE_GAME_GUESS_SETTING = 7
    JUMP_PAGE_ADMIN_SETTING = 8
    JUMP_PAGE_GIFT_ALERT_TT_S = 9
    JUMP_PAGE_LIVE_GOAL = 10
    JUMP_PAGE_TREASURE_BOX = 11
    JUMP_PAGE_GAME_REWARDS = 12
    JUMP_PAGE_POLL = 13
    JUMP_PAGE_SUBSCRIPTION = 14
    JUMP_PAGE_MONET_IZ_ATION_TIPS_SETTING = 15
    JUMP_PAGE_EXTENDING_COUNTDOWN = 16
    JUMP_PAGE_PLAY_TOGETHER = 17
    JUMP_PAGE_MULTI_GUEST = 18
    JUMP_PAGE_PARTNERSHIP = 19
    JUMP_PAGE_GIFT_NOTIFICATION = 20
    JUMP_PAGE_GIFT_GALLERY = 21


class PosIdentityPosIdentityType(betterproto.Enum):
    POS_IDENTITY_TYPE_IDENTITY_EMPTY_SLOT = 0
    POS_IDENTITY_TYPE_IDENTITY_RT_C_USER_ID = 1
    POS_IDENTITY_TYPE_IDENTITY_RT_C_STREAM_ID = 2
    POS_IDENTITY_TYPE_IDENTITY_LIVE_USER_ID = 3


class UnionAnimationInfoProfitRankType(betterproto.Enum):
    PROFIT_RANK_TYPE_TYPE_HOURLY_RANK = 0
    PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK = 1
    PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK = 2
    PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY = 3
    PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK = 4
    PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE = 5
    PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY = 6
    PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY = 7
    PROFIT_RANK_TYPE_TYPE_DAILY_RANK = 8
    PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK = 9
    PROFIT_RANK_TYPE_TYPE_GAME_RANK = 10
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME = 11
    PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK = 12
    PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE = 13
    PROFIT_RANK_TYPE_DAILY_ROOKIE = 14
    PROFIT_RANK_TYPE_TYPE_TEAM_RANK = 15
    PROFIT_RANK_TYPE_TYPE_CLASS_RANK = 16
    PROFIT_RANK_TYPE_UNDEFINED_17 = 17
    PROFIT_RANK_TYPE_UNDEFINED_18 = 18
    PROFIT_RANK_TYPE_UNDEFINED_19 = 19
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G = 20
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B = 21
    PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE = 22
    PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE = 23
    PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO = 24
    PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE = 25


class UnionAnimationInfoUnionAnimationInfoType(betterproto.Enum):
    UNION_ANIMATION_INFO_TYPE_NO_UNION_ANIMATION = 0
    UNION_ANIMATION_INFO_TYPE_LOOP = 1
    UNION_ANIMATION_INFO_TYPE_LOCK = 2


class SubInfoPayStatus(betterproto.Enum):
    PAY_STATUS_SUB_STATUS_UNKNOWN = 0
    PAY_STATUS_SUB_STATUS_ONE_TIME = 1
    PAY_STATUS_SUB_STATUS_AUTO_DEDUCTION = 2
    PAY_STATUS_SUB_STATUS_AUTO_DEDUCTION_CANCELED = 3
    PAY_STATUS_SUB_STATUS_REVOKE = 4


class SubInfoPayChannel(betterproto.Enum):
    PAY_CHANNEL_PAY_CHAN_UNKNOWN = 0
    PAY_CHANNEL_PAY_CHAN_COINS = 1
    PAY_CHANNEL_PAY_CHAN_I_AP_CASH = 2
    PAY_CHANNEL_PAY_CHAN_WEB_APP = 3
    PAY_CHANNEL_PAY_CHAN_GIFT_SUB = 4


class DisplayControlHorizontalOnclickTriggerType(betterproto.Enum):
    HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_UNKNOWN = 0
    HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_LEFT = 1
    HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_MIDDLE = 2
    HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_RIGHT = 3
    HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_ALL_AREA = 4


class SubscribeInfoPayStatus(betterproto.Enum):
    PAY_STATUS_SUB_STATUS_UNKNOWN = 0
    PAY_STATUS_SUB_STATUS_ONE_TIME = 1
    PAY_STATUS_SUB_STATUS_AUTO_DEDUCTION = 2
    PAY_STATUS_SUB_STATUS_AUTO_DEDUCTION_CANCELED = 3
    PAY_STATUS_SUB_STATUS_REVOKE = 4


class WebcastLinkmicBattleNoticeMessageBattleNoticeType(betterproto.Enum):
    BATTLE_NOTICE_TYPE_ANCHOR_GUIDE = 0
    BATTLE_NOTICE_TYPE_TOAST = 1
    BATTLE_NOTICE_TYPE_BUBBLE_GUIDE = 2
    BATTLE_NOTICE_TYPE_ANCHOR_GIFT_GUIDE = 3
    BATTLE_NOTICE_TYPE_RULE_GUIDE = 4
    BATTLE_NOTICE_TYPE_ANCHOR_MULTI_MATCH_GUIDE = 5
    BATTLE_NOTICE_TYPE_COMMON_GUIDE = 6
    BATTLE_NOTICE_TYPE_EXTREME_HIGH_SCORE = 7


class CompetitionReplyCompetitionReplyType(betterproto.Enum):
    COMPETITION_REPLY_TYPE_UNKNOWN = 0
    COMPETITION_REPLY_TYPE_ACCEPT = 1
    COMPETITION_REPLY_TYPE_REJECT = 2
    COMPETITION_REPLY_TYPE_WITHDRAW = 3


class CompetitionReplyTakeTheStageBizTakeTheStageStatus(betterproto.Enum):
    TAKE_THE_STAGE_STATUS_UNKNOWN = 0
    TAKE_THE_STAGE_STATUS_NOT_STARTED = 1
    TAKE_THE_STAGE_STATUS_CANCELLED = 2
    TAKE_THE_STAGE_STATUS_STARTED = 3
    TAKE_THE_STAGE_STATUS_FINAL_CALL = 4
    TAKE_THE_STAGE_STATUS_VICTORY_LAP = 5
    TAKE_THE_STAGE_STATUS_FINISHED = 6


class WebcastGoodyBagMessageGoodyBagMessageType(betterproto.Enum):
    GOODY_BAG_MESSAGE_TYPE_UNKNOWN = 0
    GOODY_BAG_MESSAGE_TYPES_END = 1
    GOODY_BAG_MESSAGE_TYPE_JOIN = 2
    GOODY_BAG_MESSAGE_TYPE_WINNERS_INFO = 3


@dataclass(eq=False, repr=False)
class AuthenticationInfo(betterproto.Message):
    custom_verify: str = betterproto.string_field(1)
    enterprise_verify_reason: str = betterproto.string_field(2)
    authentication_badge: "ImageModel" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GalleryData(betterproto.Message):
    progress: Dict[int, "GalleryDataTitleData"] = betterproto.map_field(
        1, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    period: int = betterproto.int64_field(2)
    end_time_in_ms: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class GalleryDataTitleData(betterproto.Message):
    goal_count: int = betterproto.int64_field(1)
    current_sponsor_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class RoomStatsModel(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    alive: bool = betterproto.bool_field(2)
    filter_info: "FilterInfoData" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class AnchorSubWaveTriggerSettings(betterproto.Message):
    id: int = betterproto.int64_field(1)
    name: str = betterproto.string_field(2)
    need_sub_counts: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class TextPieceUser(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    with_colon: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class TextFormat(betterproto.Message):
    color: str = betterproto.string_field(1)
    bold: bool = betterproto.bool_field(2)
    italic: bool = betterproto.bool_field(3)
    weight: int = betterproto.int32_field(4)
    italic_angle: int = betterproto.int32_field(5)
    font_size: int = betterproto.int32_field(6)
    use_heigh_light_color: bool = betterproto.bool_field(7)
    use_remote_color: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class CompetitionSettleEnd(betterproto.Message):
    planned_finish_time: int = betterproto.int64_field(1)
    team_infos: List["CompetitionResultsTeamInfo"] = betterproto.message_field(2)
    leave_user: "CompetitionUserBase" = betterproto.message_field(3)
    reason: Optional["CompetitionSettleEndCompetitionEndReason"] = (
        betterproto.enum_field(4, optional=True)
    )
    take_the_stage_biz: "CompetitionSettleEndTakeTheStageBiz" = (
        betterproto.message_field(100)
    )


@dataclass(eq=False, repr=False)
class CompetitionSettleEndTakeTheStageBiz(betterproto.Message):
    take_the_stage_status: Optional[
        "CompetitionSettleEndTakeTheStageBizTakeTheStageStatus"
    ] = betterproto.enum_field(1, optional=True)


@dataclass(eq=False, repr=False)
class MockResponse(betterproto.Message):
    data: "MockResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MockResponseGuideVideoUrl(betterproto.Message):
    match_url: str = betterproto.string_field(1)
    interact_url: str = betterproto.string_field(2)
    cohost_url: str = betterproto.string_field(3)
    gift_url: str = betterproto.string_field(4)
    multiguest_url: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class MockResponseData(betterproto.Message):
    room: "Room" = betterproto.message_field(1)
    mock_room_id: int = betterproto.int64_field(2)
    guide_videos: "MockResponseGuideVideoUrl" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WebcastKaraokeQueueListMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    type: int = betterproto.int32_field(2)
    total_queue_count: int = betterproto.int64_field(3)
    song_list: List["KaraokeSong"] = betterproto.message_field(4)
    latest_update_time: int = betterproto.int64_field(5)
    operator: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class IconConfig(betterproto.Message):
    icon: "ImageModel" = betterproto.message_field(1)
    background: "CombineBadgeBackground" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PanelRefreshData(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    timestamp: int = betterproto.int64_field(2)
    gallery_data: List["PanelRefreshDataGalleryData"] = betterproto.message_field(100)
    user_level: "PanelRefreshDataUserLevel" = betterproto.message_field(101)
    vault_data: "PanelRefreshDataEligibleVaultGifts" = betterproto.message_field(102)


@dataclass(eq=False, repr=False)
class PanelRefreshDataGalleryData(betterproto.Message):
    sponsor_id: int = betterproto.int64_field(1)
    gift_id: int = betterproto.int64_field(2)
    own_progress: int = betterproto.int64_field(3)
    left_count_to_sponsor: int = betterproto.int64_field(4)
    can_sponsor: bool = betterproto.bool_field(5)
    is_gallery_available: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class PanelRefreshDataUserLevel(betterproto.Message):
    current_score: int = betterproto.int64_field(1)
    current_level: int = betterproto.int64_field(2)
    next_level_score: int = betterproto.int64_field(3)
    did_user_opt_out: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class PanelRefreshDataEligibleVaultGifts(betterproto.Message):
    gift_ids: List[int] = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class AudienceReserveUserInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    reserve_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class WebcastGroupLiveMemberNotifyMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    host_user_id: int = betterproto.int64_field(2)
    member_info: List["MemberInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TraceInfo(betterproto.Message):
    operate_time: int = betterproto.int64_field(1)
    arrival_time: int = betterproto.int64_field(2)
    send_time: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class BizJoinDirectResponse(betterproto.Message):
    response_data: "BizJoinDirectResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MigrateGroupResp(betterproto.Message):
    common_resp: "LinkMicCommonResp" = betterproto.message_field(1)
    group_rtc_info: List["RtcExtraInfo"] = betterproto.message_field(2)
    group_user: "GroupChannelAllUser" = betterproto.message_field(3)
    cohost_resp_extra: "BizMigrateGroupResponse" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class CompetitionTeamMemberInfo(betterproto.Message):
    user: "CompetitionUserBase" = betterproto.message_field(1)
    score: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class CountdownForAllGetContentResponse(betterproto.Message):
    data: "CountdownForAllGetContentResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CountdownForAllGetContentResponseResponseData(betterproto.Message):
    play_content: "CountdownForAllContent" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BattleTruthOrDareOptOutNotice(betterproto.Message):
    close_content_key: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SubGoalData(betterproto.Message):
    indicator: "LiveStreamGoalIndicator" = betterproto.message_field(1)
    goal: "LiveStreamGoal" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PollEndContent(betterproto.Message):
    end_type: Optional["PollEndContentPollEndType"] = betterproto.enum_field(
        1, optional=True
    )
    option_list: List["PollOptionInfo"] = betterproto.message_field(2)
    operator: "User" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PrivilegePlaceholder(betterproto.Message):
    text: str = betterproto.string_field(1)
    redirect_link: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WallpaperImageState(betterproto.Message):
    image_url: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DestroyRequestResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PermitResponse(betterproto.Message):
    rtc_info: "RtcExtraInfo" = betterproto.message_field(2)
    link_mic_id: str = betterproto.string_field(3)
    position: "MicPositionData" = betterproto.message_field(4)
    applier: "Player" = betterproto.message_field(5)
    applier_link_mic_id: str = betterproto.string_field(6)
    linked_user_ui_positions: List[str] = betterproto.string_field(7)
    ui_pos: List["PosIdentity"] = betterproto.message_field(8)
    multi_guest_resp_extra: "BizPermitResponse" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class StarCommentConfig(betterproto.Message):
    star_comment_switch: bool = betterproto.bool_field(1)
    grant_group: Optional["StarCommentConfigGrantGroup"] = betterproto.enum_field(
        2, optional=True
    )
    grant_level: int = betterproto.int32_field(3)
    star_comment_qualification: bool = betterproto.bool_field(4)
    display_lock: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class PunishEventInfo(betterproto.Message):
    punish_type: str = betterproto.string_field(1)
    punish_reason: str = betterproto.string_field(2)
    punish_id: str = betterproto.string_field(3)
    violation_uid: int = betterproto.int64_field(4)
    punish_type_id: Optional["PunishEventInfoPunishTypeId"] = betterproto.enum_field(
        5, optional=True
    )
    duration: int = betterproto.int64_field(6)
    punish_perception_code: str = betterproto.string_field(7)
    violation_uid_str: str = betterproto.string_field(9)
    show_reason: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class PopSeries(betterproto.Message):
    collection_id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class FaceRecognitionMeta(betterproto.Message):
    version: str = betterproto.string_field(1)
    requirements: List[str] = betterproto.string_field(2)
    model_names: str = betterproto.string_field(3)
    sdk_extra: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class WaitUser(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    link_mic_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WebcastGoalUpdateMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    indicator: "LiveStreamGoalIndicator" = betterproto.message_field(2)
    goal: "LiveStreamGoal" = betterproto.message_field(3)
    contributor_id: int = betterproto.int64_field(4)
    contributor_avatar: "ImageModel" = betterproto.message_field(5)
    contributor_display_id: str = betterproto.string_field(6)
    contribute_subgoal: "LiveStreamSubGoal" = betterproto.message_field(7)
    contribute_count: int = betterproto.int64_field(9)
    contribute_score: int = betterproto.int64_field(10)
    gift_repeat_count: int = betterproto.int64_field(11)
    contributor_id_str: str = betterproto.string_field(12)
    pin: bool = betterproto.bool_field(13)
    unpin: bool = betterproto.bool_field(14)
    pin_info: "GoalPinInfo" = betterproto.message_field(15)
    update_source: Optional["WebcastGoalUpdateMessageGoalMessageSource"] = (
        betterproto.enum_field(16, optional=True)
    )
    goal_extra: str = betterproto.string_field(17)


@dataclass(eq=False, repr=False)
class GiftSuspension(betterproto.Message):
    status: int = betterproto.int32_field(1)
    toast: str = betterproto.string_field(2)
    end_time: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class OecLiveShoppingMessageV2(betterproto.Message):
    actions: Dict[int, "EcomLiveElementActions"] = betterproto.map_field(
        1, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    commerce_info: "CommerceInfo" = betterproto.message_field(2)
    msg_meta: "MsgMeta" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class WebcastSubscriptionGuideMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    description: "Text" = betterproto.message_field(2)
    button_name: "Text" = betterproto.message_field(3)
    button_url: str = betterproto.string_field(4)
    capsule_scene: str = betterproto.string_field(5)
    from_user_id: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class GiftGroupCount(betterproto.Message):
    group_count: int = betterproto.int32_field(1)
    group_text: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GiftImPriority(betterproto.Message):
    queue_sizes: List[int] = betterproto.int64_field(1)
    self_queue_priority: int = betterproto.int64_field(2)
    priority: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class WallpaperAiCreateResponse(betterproto.Message):
    data: "WallpaperAiCreateResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WallpaperAiCreateResponseResponseData(betterproto.Message):
    keywords_review_result: int = betterproto.int64_field(1)
    review_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SpriteImageItem(betterproto.Message):
    url: str = betterproto.string_field(1)
    sprite_num: int = betterproto.int64_field(2)
    image_x_num: int = betterproto.int64_field(3)
    image_y_num: int = betterproto.int64_field(4)
    image_height: int = betterproto.int64_field(5)
    image_width: int = betterproto.int64_field(6)
    fps: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class WebcastNoticeboardReviewMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    media_node_id: str = betterproto.string_field(3)
    post_review_status: int = betterproto.int32_field(4)
    pre_review_status: int = betterproto.int32_field(5)
    template_id: int = betterproto.int64_field(6)
    official_material_type: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class SearchRivalsResponse(betterproto.Message):
    data: "SearchRivalsResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SearchRivalsResponseCell(betterproto.Message):
    cell_type: int = betterproto.int32_field(1)
    room: "Room" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SearchRivalsResponseResponseData(betterproto.Message):
    cell_list: List["SearchRivalsResponseCell"] = betterproto.message_field(1)
    rival_extra_infos: Dict[int, "RivalExtraInfo"] = betterproto.map_field(
        2, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    next_offset: int = betterproto.int32_field(9)
    has_more: bool = betterproto.bool_field(10)
    search_id: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class LinkerSysKickOutContent(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    linkmic_id_str: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class FlexImageModel(betterproto.Message):
    url_list: List[str] = betterproto.string_field(1)
    uri: str = betterproto.string_field(2)
    flex_setting: List[int] = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class StarCommentDeleteResponse(betterproto.Message):
    data: "StarCommentDeleteResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class StarCommentDeleteResponseData(betterproto.Message):
    queue: "StarCommentQueue" = betterproto.message_field(1)
    server_cur_msg_start_time_ms: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class WebcastMemberMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    user: "User" = betterproto.message_field(2)
    count: int = betterproto.int32_field(3)
    operator: "User" = betterproto.message_field(4)
    set_to_admin: bool = betterproto.bool_field(5)
    is_top_user: bool = betterproto.bool_field(6)
    rank_score: int = betterproto.int32_field(7)
    top_user_no: int = betterproto.int32_field(8)
    enter_type: int = betterproto.int32_field(9)
    action: int = betterproto.int32_field(10)
    action_description: str = betterproto.string_field(11)
    user_id: int = betterproto.int64_field(12)
    pop_str: str = betterproto.string_field(14)
    effect_config: "WebcastMemberMessageEffectConfigBean" = betterproto.message_field(
        15
    )
    background: "ImageModel" = betterproto.message_field(17)
    anchor_display_text: "Text" = betterproto.message_field(18)
    client_enter_source: str = betterproto.string_field(19)
    client_enter_type: str = betterproto.string_field(20)
    client_live_reason: str = betterproto.string_field(21)
    action_duration: int = betterproto.int64_field(22)
    user_share_type: str = betterproto.string_field(23)
    display_style: Optional["WebcastMemberMessageDisplayStyle"] = (
        betterproto.enum_field(24, optional=True)
    )
    admin_permissions: Dict[str, int] = betterproto.map_field(
        25, betterproto.TYPE_STRING, betterproto.TYPE_INT32
    )
    kick_source: int = betterproto.int32_field(26)
    allow_preview_time: int = betterproto.int64_field(27)
    last_subscription_action: int = betterproto.int64_field(28)
    public_area_message_common: "PublicAreaMessageCommon" = betterproto.message_field(
        29
    )
    live_sub_only_tier: int = betterproto.int64_field(30)
    live_sub_only_month: int = betterproto.int64_field(31)
    ec_streamer_key: str = betterproto.string_field(32)
    show_wave: int = betterproto.int64_field(33)
    wave_algorithm_data: "WaveAlgorithmData" = betterproto.message_field(34)
    hit_ab_status: Optional["WebcastMemberMessageHitAbStatus"] = betterproto.enum_field(
        35, optional=True
    )


@dataclass(eq=False, repr=False)
class WebcastMemberMessageEffectConfigBean(betterproto.Message):
    type: int = betterproto.int32_field(1)
    icon: "ImageModel" = betterproto.message_field(2)
    text_key: "Text" = betterproto.message_field(4)
    badge: "ImageModel" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class FlareBoostedUsers(betterproto.Message):
    cnt: int = betterproto.int64_field(1)
    end_time: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class CalmDownInfo(betterproto.Message):
    m_remain_time: int = betterproto.int32_field(1)
    m_total_time: int = betterproto.int32_field(2)
    m_threshold_value: int = betterproto.int64_field(3)
    m_show_popup: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class WebcastBottomMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    content: str = betterproto.string_field(2)
    show_type: Optional["WebcastBottomMessageShowType"] = betterproto.enum_field(
        3, optional=True
    )
    text_type: "WebcastBottomMessageTextType" = betterproto.enum_field(4)
    duration: int = betterproto.int64_field(5)
    biz_type: Optional["WebcastBottomMessageBizType"] = betterproto.enum_field(
        6, optional=True
    )
    violation_user_id: int = betterproto.int64_field(7)
    punish_info: "PunishEventInfo" = betterproto.message_field(8)
    style: int = betterproto.int32_field(9)
    detail_url: str = betterproto.string_field(10)
    float_style: int = betterproto.int32_field(11)
    float_icon_type: Optional["WebcastBottomMessagePerceptionDialogIconType"] = (
        betterproto.enum_field(12, optional=True)
    )


@dataclass(eq=False, repr=False)
class RevenueTipsSetting(betterproto.Message):
    enable: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class ExchangeGiftResultData(betterproto.Message):
    source_type: int = betterproto.int32_field(1)
    balance: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GuessWidgetsData(betterproto.Message):
    guess_widgets: "GuessWidgets" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WebcastCapsuleMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    icon: "ImageModel" = betterproto.message_field(2)
    desc: "Text" = betterproto.message_field(3)
    button_text: "Text" = betterproto.message_field(4)
    schema: str = betterproto.string_field(5)
    capsule_type: int = betterproto.int32_field(6)
    scene: "Scene" = betterproto.enum_field(7)
    biz_params: "CapsuleBizParams" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class WebcastLinkMicBattle(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    battle_id: int = betterproto.int64_field(2)
    battle_setting: "BattleSetting" = betterproto.message_field(3)
    action: Optional["WebcastLinkMicBattleBattleAction"] = betterproto.enum_field(
        4, optional=True
    )
    battle_result: Dict[int, "BattleResult"] = betterproto.map_field(
        5, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    m_battle_display_config: "BattleDisplayConfig" = betterproto.message_field(6)
    invitee_gift_permission_type: Optional["WebcastLinkMicBattleGiftPermissionType"] = (
        betterproto.enum_field(8, optional=True)
    )
    armies: List["UserArmiesWrapper"] = betterproto.message_field(9)
    anchor_info: List["BattleUserInfoWrapper"] = betterproto.message_field(10)
    bubble_text: str = betterproto.string_field(11)
    supported_actions: List["SupportedActionsWrapper"] = betterproto.message_field(12)
    battle_combos: Dict[int, "BattleComboInfo"] = betterproto.map_field(
        13, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    team_users: List["TeamUsersInfo"] = betterproto.message_field(14)
    invitee_gift_permission_types: List["BattleInviteeGiftPermission"] = (
        betterproto.message_field(15)
    )
    action_by_user_id: int = betterproto.int64_field(16)
    team_battle_result: List["BattleTeamResult"] = betterproto.message_field(17)
    team_armies: List["BattleTeamUserArmies"] = betterproto.message_field(18)
    abtest_settings: List["BattleAbTestSetting"] = betterproto.message_field(19)
    team_match_campaign: "TeamMatchCampaign" = betterproto.message_field(20)
    fuzzy_display_config_v2: "HighScoreControlCfg" = betterproto.message_field(21)


@dataclass(eq=False, repr=False)
class GameTagDetail(betterproto.Message):
    game_tag_id: int = betterproto.int64_field(1)
    game_tag_name: str = betterproto.string_field(2)
    preview_game_moment_enable: bool = betterproto.bool_field(3)
    starling_key: str = betterproto.string_field(4)
    display_name: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class UsePotionCard(betterproto.Message):
    card_info: "PotionCardInfo" = betterproto.message_field(1)
    anchor_id: int = betterproto.int64_field(2)
    display_content: "Text" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GiftKeywords(betterproto.Message):
    gift_id: int = betterproto.int64_field(1)
    keywords: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WebcastQuestionSelectedMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    question: "Question" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CountdownConfig(betterproto.Message):
    duration: int = betterproto.int64_field(1)
    auto_expand: bool = betterproto.bool_field(2)
    target_score: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class RtcVideoParam(betterproto.Message):
    width: int = betterproto.int32_field(1)
    height: int = betterproto.int32_field(2)
    fps: int = betterproto.int32_field(3)
    bit_rate: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class SubUpsellInfo(betterproto.Message):
    upsell_method: int = betterproto.int32_field(1)
    schema: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SmokeCardInfo(betterproto.Message):
    card_name_key: str = betterproto.string_field(1)
    card_image: "ImageModel" = betterproto.message_field(2)
    send_time_sec: int = betterproto.int64_field(3)
    send_user: "BattleUserInfo" = betterproto.message_field(4)
    effect_last_duration: int = betterproto.int64_field(5)
    rule_url: str = betterproto.string_field(6)
    effect_time_sec: int = betterproto.int64_field(7)
    to_anchor_id: int = betterproto.int64_field(12)
    to_anchor_id_str: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class EventStruct(betterproto.Message):
    id: str = betterproto.string_field(1)
    start_time: int = betterproto.int64_field(2)
    duration: int = betterproto.int64_field(3)
    title: str = betterproto.string_field(4)
    desc: str = betterproto.string_field(5)
    status: int = betterproto.int32_field(6)
    owner: "User" = betterproto.message_field(7)
    subscriber_count: int = betterproto.int64_field(8)
    type: int = betterproto.int32_field(9)
    enable_update: bool = betterproto.bool_field(10)
    has_subscribed: bool = betterproto.bool_field(11)
    style: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class ShowAgainGuestResponse(betterproto.Message):
    data: "ShowAgainGuestResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ShowAgainGuestResponseResponseData(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    show_content: "ShowContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastTrayMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    user: "User" = betterproto.message_field(2)
    title: "Text" = betterproto.message_field(3)
    describe: "Text" = betterproto.message_field(4)
    combo_count: int = betterproto.int32_field(5)
    group_count: int = betterproto.int32_field(6)
    image: "ImageModel" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class CppAgeVerificationInfo(betterproto.Message):
    cpp_age_verification_ab: int = betterproto.int32_field(1)
    age_verify_status: int = betterproto.int32_field(2)
    age_verify_process_status: int = betterproto.int32_field(3)
    age_verify_times: int = betterproto.int64_field(4)
    age_appeal_method_time: int = betterproto.int64_field(5)
    age_appeal_method_time_unit: int = betterproto.int32_field(6)
    age_appeal_method: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class GiftReceiveRecordsResponse(betterproto.Message):
    data: "GiftReceiveRecordsResponseData" = betterproto.message_field(1)
    extra: "GiftReceiveRecordsResponseExtra" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GiftReceiveRecordsResponseData(betterproto.Message):
    gift_records: List["GiftRecord"] = betterproto.message_field(1)
    has_next: bool = betterproto.bool_field(2)
    ref_timestamp: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class GiftReceiveRecordsResponseExtra(betterproto.Message):
    log_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class BattleBonusConfig(betterproto.Message):
    preview_start_time: int = betterproto.int64_field(1)
    preview_period_config: List["PreviewPeriod"] = betterproto.message_field(2)
    task_period_config: "TaskPeriodConfig" = betterproto.message_field(3)
    reward_period_config: "RewardPeriodConfig" = betterproto.message_field(4)
    task_gift_guide: Dict[int, "BattleTaskGiftAmountGuide"] = betterproto.map_field(
        5, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    preview_start_timestamp: int = betterproto.int64_field(6)
    preview_click_action_schema_url: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class LevelBadge(betterproto.Message):
    origin_img: "ImageModel" = betterproto.message_field(3)
    preview_img: "ImageModel" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class KickOutAllGuestsResp(betterproto.Message):
    common_resp: "LinkMicCommonResp" = betterproto.message_field(1)
    removed_user_ids: List[int] = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GuessText(betterproto.Message):
    key: str = betterproto.string_field(1)
    desc: str = betterproto.string_field(2)
    type: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class BorderInfo(betterproto.Message):
    icon: "ImageModel" = betterproto.message_field(1)
    level: int = betterproto.int64_field(2)
    source: str = betterproto.string_field(3)
    profile_decoration_ribbon: "ImageModel" = betterproto.message_field(4)
    border_log_extra: "PrivilegeLogExtra" = betterproto.message_field(5)
    ribbon_log_extra: "PrivilegeLogExtra" = betterproto.message_field(6)
    avatar_background_color: str = betterproto.string_field(7)
    avatar_background_border_color: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class RewardPeriodConfig(betterproto.Message):
    reward_start_time: int = betterproto.int64_field(1)
    duration: int = betterproto.int64_field(2)
    reward_multiple: int = betterproto.int32_field(3)
    reward_start_timestamp: int = betterproto.int64_field(4)
    reward_prapare_prompt: "BattlePrompt" = betterproto.message_field(11)
    rewarding_prompt: "BattlePrompt" = betterproto.message_field(12)
    click_prompt: "BattlePrompt" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class AvatarImageCase(betterproto.Message):
    example_images: "ImageModel" = betterproto.message_field(1)
    is_bad: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class QuickCohostContentInfo(betterproto.Message):
    quick_cohost_content: List["QuickCohostContent"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RoomStickerAuditInfo(betterproto.Message):
    violation_id: int = betterproto.int64_field(1)
    task_type: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class BizCreateChannelResponse(betterproto.Message):
    response_data: "BizCreateChannelResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BizLeaveJoinGroupResponse(betterproto.Message):
    feedback_show_reason: int = betterproto.int64_field(1)
    feedback_content_type: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GuessOptionStats(betterproto.Message):
    member_num: int = betterproto.int64_field(1)
    points_num: int = betterproto.int64_field(2)
    bonus_odds: float = betterproto.float_field(3)


@dataclass(eq=False, repr=False)
class WebcastAssetMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    asset_id: int = betterproto.int64_field(2)
    panel_display_text: "Text" = betterproto.message_field(3)
    show_message: bool = betterproto.bool_field(4)
    show_panel: bool = betterproto.bool_field(5)
    from_user: "User" = betterproto.message_field(6)
    to_user: "User" = betterproto.message_field(7)
    priority: "GiftImPriority" = betterproto.message_field(8)
    log_id: str = betterproto.string_field(9)
    assets: "AssetsModel" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class QuizNextQuiz(betterproto.Message):
    time: int = betterproto.int64_field(1)
    reward_amount: str = betterproto.string_field(2)
    quiz_id: str = betterproto.string_field(3)
    live_event_id: str = betterproto.string_field(4)
    end_time: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class GrowthJourneyBannerInfo(betterproto.Message):
    grow_level_first_banner: "GrowthJourneyBannerItem" = betterproto.message_field(1)
    grow_level_special_level_arrived_banner: "GrowthJourneyBannerItem" = (
        betterproto.message_field(2)
    )
    growth_instance_banner: "GrowthJourneyBannerItem" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class NoticeboardTemplateCreateResponse(betterproto.Message):
    data: "NoticeboardTemplateCreateResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NoticeboardTemplateCreateResponseResponseData(betterproto.Message):
    is_success: bool = betterproto.bool_field(1)
    template: "NoticeboardTemplate" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResourceAttr(betterproto.Message):
    resource_location: Optional["ResourceAttrResourceLocation"] = (
        betterproto.enum_field(1, optional=True)
    )
    gecko_attr: "GeckoAttr" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastWalletLiveRewardsRatioMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    im_msg: "WalletLiveRewardsRatioImMsg" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WallpaperPicReplyResponse(betterproto.Message):
    data: "WallpaperPicReplyResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WallpaperPicReplyResponseResponseData(betterproto.Message):
    result: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class WebcastLinkScreenChangeMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    guest_cancel_enlarge: "LinkerGuestCancelEnlargeContent" = betterproto.message_field(
        3
    )
    enlarge_status_syn: "LinkerEnlargeStatusSynContent" = betterproto.message_field(4)
    enlarge_pos_status_syn: "EnlargePositionStatusSynContent" = (
        betterproto.message_field(5)
    )


@dataclass(eq=False, repr=False)
class GroupChatGuestDetailsResponse(betterproto.Message):
    data: "GroupChatGuestDetailsResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GroupChatGuestDetailsResponseResponseData(betterproto.Message):
    guest_details: List["GroupChatGuestDetail"] = betterproto.message_field(1)
    room_create_group_id: int = betterproto.int64_field(2)
    room_create_group_current_user_num: int = betterproto.int64_field(3)
    room_create_group_current_user_num_limit: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class WallpaperUserLeaveResponse(betterproto.Message):
    data: "WallpaperUserLeaveResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WallpaperUserLeaveResponseResponseData(betterproto.Message):
    result: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class PlaybookTagInfo(betterproto.Message):
    tag_type: int = betterproto.int32_field(1)
    tag_translated_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WebcastPartnershipPunishMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    punish_info: "PunishEventInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastGiftPanelUpdateMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    room_id: int = betterproto.int64_field(2)
    timestamp: int = betterproto.int64_field(3)
    gallery_data: "GalleryData" = betterproto.message_field(10)
    goal_data: "GoalData" = betterproto.message_field(11)
    room_based_gift_data: "RoomBasedGiftData" = betterproto.message_field(12)
    strategy_context: str = betterproto.string_field(100)


@dataclass(eq=False, repr=False)
class ProfileCardPanel(betterproto.Message):
    use_new_profile_card_style: bool = betterproto.bool_field(1)
    badge_text_position: Optional["ProfileCardPanelBadgeTextPosition"] = (
        betterproto.enum_field(2, optional=True)
    )
    projection_config: "ProjectionConfig" = betterproto.message_field(3)
    profile_content: "ProfileContent" = betterproto.message_field(4)
    separator_config: "SeparatorConfig" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class BattleUserArmies(betterproto.Message):
    user_armies: List["BattleUserArmy"] = betterproto.message_field(1)
    host_score: int = betterproto.int64_field(2)
    anchor_id_str: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GuestShowdownCloseParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    play_id: int = betterproto.int64_field(3)
    close_scene: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class MultiGuestLinkmicInfo(betterproto.Message):
    linked_users: List["MultiGuestLinkmicInfoListUser"] = betterproto.message_field(1)
    request_user_status: int = betterproto.int32_field(8)
    fan_ticket_icon_url: str = betterproto.string_field(9)
    host_display_info: "MultiGuestLinkmicInfoHostDisplayInfo" = (
        betterproto.message_field(14)
    )


@dataclass(eq=False, repr=False)
class MultiGuestLinkmicInfoHostDisplayInfo(betterproto.Message):
    host_icon_background_url: str = betterproto.string_field(1)
    host_icon_url: str = betterproto.string_field(2)
    host_color: str = betterproto.string_field(3)
    icon_link_url: str = betterproto.string_field(4)
    host_type: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class MultiGuestLinkmicInfoListUser(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    modify_time: int = betterproto.int64_field(2)
    role_type: int = betterproto.int32_field(4)
    linkmic_id_str: str = betterproto.string_field(5)
    fan_ticket: int = betterproto.int64_field(7)
    fan_ticket_icon_type: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class TryMode(betterproto.Message):
    has_created_room: int = betterproto.int32_field(1)
    enable_live_video: bool = betterproto.bool_field(2)
    live_video_group: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class PlaybookContent(betterproto.Message):
    playbook_content_id: int = betterproto.int64_field(1)
    original_playbook_content_id: int = betterproto.int64_field(2)
    text_type: "TextType" = betterproto.enum_field(3)
    title: str = betterproto.string_field(4)
    cover_url: str = betterproto.string_field(5)
    description: str = betterproto.string_field(6)
    content_status: int = betterproto.int32_field(7)
    min_symphony_engine_app_version: int = betterproto.int64_field(8)
    editor_info: "PlaybookEditorInfo" = betterproto.message_field(9)
    flow_str: str = betterproto.string_field(10)
    cover_uri: str = betterproto.string_field(11)
    tag_types: List[int] = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class Creator(betterproto.Message):
    room_continue: int = betterproto.int32_field(1)
    is_anchor_continue_keep_msg: bool = betterproto.bool_field(2)
    cross_device_continue_scene: int = betterproto.int32_field(3)
    continue_scene: int = betterproto.int32_field(4)
    link_mic_user_num: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class LinkerWaitingListChangeContent(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WebcastAnchorTaskReminderMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    task_record_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class NoticeboardUpdateResponse(betterproto.Message):
    data: "NoticeboardUpdateResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NoticeboardUpdateResponseResponseData(betterproto.Message):
    noticeboard_content: "NoticeboardContent" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WaveAlgorithmData(betterproto.Message):
    algorithm_version: str = betterproto.string_field(1)
    is_alg_hit: bool = betterproto.bool_field(2)
    predict_score: str = betterproto.string_field(3)
    is_rewatch: bool = betterproto.bool_field(4)
    is_follow: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class WebcastLinkBusinessMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    popup_state_change_content: "PopupStateChangeContent" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class NoticeboardTemplateFetchListResponse(betterproto.Message):
    data: "NoticeboardTemplateFetchListResponseResponseData" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class NoticeboardTemplateFetchListResponseResponseData(betterproto.Message):
    my_templates: List["NoticeboardTemplate"] = betterproto.message_field(1)
    recommended_templates: List["NoticeboardTemplate"] = betterproto.message_field(2)
    create_num_limit: int = betterproto.int64_field(3)
    is_official_user: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class GameEmoteConfig(betterproto.Message):
    emotes_can_not_be_used_hint: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class AddToCartButton(betterproto.Message):
    status: int = betterproto.int32_field(1)
    click_hint_starling: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CapsuleBizParamsCohost(betterproto.Message):
    available_friend_number: int = betterproto.int64_field(1)
    is_followed_by_rival: bool = betterproto.bool_field(2)
    rival_user: "User" = betterproto.message_field(3)
    type: str = betterproto.string_field(4)
    invitee_model_prediction_data: "UserModelPredictionData" = (
        betterproto.message_field(5)
    )
    invitee_room_id: int = betterproto.int64_field(6)
    invitee_inner_channel_id: int = betterproto.int64_field(7)
    invitee_user_info: "User" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class CountdownContent(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    countdown_id: int = betterproto.int64_field(3)
    status: int = betterproto.int32_field(4)
    start_time: int = betterproto.int64_field(5)
    end_time: int = betterproto.int64_field(6)
    countdown_config: "CountdownConfig" = betterproto.message_field(7)
    countdown_user: "CountdownUser" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class ViolationStatusResponse(betterproto.Message):
    data: "ViolationStatusResponseResponseData" = betterproto.message_field(1)
    extra: "ViolationStatusResponseResponseExtra" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ViolationStatusResponseResponseData(betterproto.Message):
    status: int = betterproto.int32_field(1)
    perception_dialog: "PerceptionDialogInfo" = betterproto.message_field(2)
    punish_event: "PunishEventInfo" = betterproto.message_field(3)
    perception_toast: "Text" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ViolationStatusResponseResponseExtra(betterproto.Message):
    now: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class OptPairInfo(betterproto.Message):
    mapping_id: int = betterproto.int64_field(1)
    display_user_list: List["OptPairInfoOptPairUser"] = betterproto.message_field(2)
    button_notice_type: Optional["OptPairInfoOptPairStatus"] = betterproto.enum_field(
        3, optional=True
    )
    expected_time_sec: int = betterproto.int64_field(4)
    opt_pair_type: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class OptPairInfoOptPairUser(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    room_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class BizReplyResponse(betterproto.Message):
    response_data: "BizReplyResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DonationSticker(betterproto.Message):
    id: int = betterproto.int64_field(1)
    image: "ImageModel" = betterproto.message_field(2)
    type: int = betterproto.int32_field(3)
    input_rect: List[int] = betterproto.int64_field(4)
    text_size: int = betterproto.int32_field(5)
    text_color: str = betterproto.string_field(6)
    content: "OrganizationModel" = betterproto.message_field(7)
    max_length: int = betterproto.int64_field(8)
    status: int = betterproto.int64_field(9)
    screen_height: int = betterproto.int32_field(10)
    x: int = betterproto.int32_field(11)
    screen_width: int = betterproto.int32_field(12)
    y: int = betterproto.int32_field(13)
    kind: int = betterproto.int64_field(14)
    sub_type: int = betterproto.int64_field(15)


@dataclass(eq=False, repr=False)
class GuestShowdownGetContentParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    play_id: int = betterproto.int64_field(3)
    get_type: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class WebcastLinkLayerMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    channel_id: int = betterproto.int64_field(3)
    scene: "WebcastLinkLayerMessageScene" = betterproto.enum_field(4)
    source: str = betterproto.string_field(5)
    centerized_idc: str = betterproto.string_field(6)
    rtc_room_id: int = betterproto.int64_field(7)
    create_channel_content: "CreateChannelContent" = betterproto.message_field(100)
    list_content: "LinkListChangeContent" = betterproto.message_field(102)
    invite_content: "InviteContent" = betterproto.message_field(103)
    apply_content: "ApplyContent" = betterproto.message_field(104)
    permit_apply_content: "PermitApplyContent" = betterproto.message_field(105)
    reply_invite_content: "ReplyInviteContent" = betterproto.message_field(106)
    kick_out_content: "KickOutContent" = betterproto.message_field(107)
    cancel_apply_content: "CancelApplyContent" = betterproto.message_field(108)
    cancel_invite_content: "CancelInviteContent" = betterproto.message_field(109)
    leave_content: "LeaveContent" = betterproto.message_field(110)
    finish_content: "FinishChannelContent" = betterproto.message_field(111)
    join_direct_content: "JoinDirectContent" = betterproto.message_field(112)
    join_group_content: "JoinGroupContent" = betterproto.message_field(113)
    permit_group_content: "PermitJoinGroupContent" = betterproto.message_field(114)
    cancel_group_content: "CancelJoinGroupContent" = betterproto.message_field(115)
    leave_group_content: "LeaveJoinGroupContent" = betterproto.message_field(116)
    p2_p_group_change_content: "P2PGroupChangeContent" = betterproto.message_field(117)
    group_change_content: "GroupChangeContent" = betterproto.message_field(118)
    biz_content: "BusinessContent" = betterproto.message_field(200)


@dataclass(eq=False, repr=False)
class ChangeStateResp(betterproto.Message):
    result: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class MessageRedEnvelopInfo(betterproto.Message):
    envelope_id: str = betterproto.string_field(1)
    business_type: int = betterproto.int32_field(2)
    envelope_idc: str = betterproto.string_field(3)
    send_user_name: str = betterproto.string_field(4)
    diamond_count: int = betterproto.int32_field(5)
    people_count: int = betterproto.int32_field(6)
    unpack_at: int = betterproto.int32_field(7)
    send_user_id: str = betterproto.string_field(8)
    send_user_avatar: "ImageModel" = betterproto.message_field(9)
    create_time: str = betterproto.string_field(10)
    follow_status_show: int = betterproto.int32_field(12)
    skin_id: int = betterproto.int32_field(13)


@dataclass(eq=False, repr=False)
class CustomTabs(betterproto.Message):
    id: int = betterproto.int64_field(1)
    begin_time: int = betterproto.int64_field(2)
    end_time: int = betterproto.int64_field(3)
    anchor_id: int = betterproto.int64_field(4)
    room_id: int = betterproto.int64_field(5)
    default_tab_index: int = betterproto.int64_field(6)
    custom_tab_list: List["CustomTab"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class AnchorSettingsUpdateResponse(betterproto.Message):
    extra: "AnchorSettingsUpdateResponseExtra" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AnchorSettingsUpdateResponseExtra(betterproto.Message):
    now: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class TagV2(betterproto.Message):
    tag_classification: Optional["TagV2TagClassification"] = betterproto.enum_field(
        1, optional=True
    )
    tag_type: int = betterproto.int32_field(2)
    tag_value: str = betterproto.string_field(3)
    starling_key: str = betterproto.string_field(4)
    second_degree_relation_content: "TagV2SecondDegreeRelationContent" = (
        betterproto.message_field(10)
    )
    cohost_history_day: int = betterproto.int64_field(11)
    similar_interest_content: "TagV2SimilarInterestContent" = betterproto.message_field(
        12
    )


@dataclass(eq=False, repr=False)
class TagV2UserInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    nick_name: str = betterproto.string_field(2)
    avatar_thumb: "ImageModel" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class TagV2SecondDegreeRelationContent(betterproto.Message):
    related_users: List["TagV2UserInfo"] = betterproto.message_field(1)
    total_related_user_cnt: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class TagV2SimilarInterestContent(betterproto.Message):
    content_id: int = betterproto.int64_field(1)
    display_text: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class EcTaskRefreshCouponListEntity(betterproto.Message):
    toast_msg: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class AbInfos(betterproto.Message):
    cdid: str = betterproto.string_field(1)
    params: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class LiveCoreSdkData(betterproto.Message):
    pull_data: "LiveCoreSdkDataPullData" = betterproto.message_field(1)
    push_data: "LiveCoreSdkDataPushData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LiveCoreSdkDataQuality(betterproto.Message):
    name: str = betterproto.string_field(1)
    sdk_key: str = betterproto.string_field(2)
    icon_type: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class LiveCoreSdkDataOptions(betterproto.Message):
    default_quality: "LiveCoreSdkDataQuality" = betterproto.message_field(1)
    quality_list: List["LiveCoreSdkDataQuality"] = betterproto.message_field(2)
    default_preview_quality: "LiveCoreSdkDataQuality" = betterproto.message_field(3)
    show_quality_button: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class LiveCoreSdkDataPullData(betterproto.Message):
    stream_data: str = betterproto.string_field(1)
    options: "LiveCoreSdkDataOptions" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LiveCoreSdkDataResolutionParams(betterproto.Message):
    width: int = betterproto.int64_field(1)
    height: int = betterproto.int64_field(2)
    default_bitrate: int = betterproto.int64_field(3)
    min_bitrate: int = betterproto.int64_field(4)
    max_bitrate: int = betterproto.int64_field(5)
    fps: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class LiveCoreSdkDataPushData(betterproto.Message):
    resolution_params: Dict[str, "LiveCoreSdkDataResolutionParams"] = (
        betterproto.map_field(1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE)
    )
    push_stream_level: int = betterproto.int32_field(2)
    stream_data: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GuideTarget(betterproto.Message):
    target_id: int = betterproto.int64_field(1)
    target_type: str = betterproto.string_field(2)
    period_id: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class BattleNoticeToast(betterproto.Message):
    content: "BattleNoticeText" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ChannelMessage(betterproto.Message):
    channel_id: int = betterproto.int64_field(1)
    report_type: int = betterproto.int32_field(2)
    layout_id: str = betterproto.string_field(3)
    layout_version: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class LinkCommon(betterproto.Message):
    scene: "Scene" = betterproto.enum_field(1)
    source: str = betterproto.string_field(200)
    app_id: int = betterproto.int64_field(201)
    live_id: int = betterproto.int64_field(202)
    extra_map: Dict[str, str] = betterproto.map_field(
        203, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    centerized_idc: str = betterproto.string_field(300)


@dataclass(eq=False, repr=False)
class CapsuleBizParams(betterproto.Message):
    cohost: "CapsuleBizParamsCohost" = betterproto.message_field(1)
    random_gift: "CapsuleBizParamsRandomGift" = betterproto.message_field(3)
    effect_params: "CapsuleBizParamsNewAnchorEffect" = betterproto.message_field(4)
    comment_flagged_prompt: "CapsuleBizParamsCommentFlaggedPrompt" = (
        betterproto.message_field(5)
    )
    multi_guest_invite_guide: "CapsuleBizParamsMultiGuestInviteGuide" = (
        betterproto.message_field(6)
    )
    anchor_pin_perk: "CapsuleBizParamsAnchorPinPerk" = betterproto.message_field(7)
    gaming_moderators_comment_guide: "CapsuleBizParamsGamingModeratorsCommentGuide" = (
        betterproto.message_field(8)
    )
    comment_mute_rule_prompt: "CapsuleBizParamsCommentMuteRulePrompt" = (
        betterproto.message_field(9)
    )
    comment_flagged_prompt_for_new_user: (
        "CapsuleBizParamsCommentFlaggedPromptForNewUser"
    ) = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class EndShowParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    show_id: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class WebcastControlMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    action: int = betterproto.int32_field(2)
    tips: str = betterproto.string_field(3)
    extra_info: "WebcastControlMessageExtra" = betterproto.message_field(4)
    perception_dialog_info: "PerceptionDialogInfo" = betterproto.message_field(5)
    perception_audience_text: "Text" = betterproto.message_field(6)
    punish_info: "PunishEventInfo" = betterproto.message_field(7)
    float_text: "Text" = betterproto.message_field(8)
    float_style: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class WebcastControlMessageExtra(betterproto.Message):
    ban_info_url: str = betterproto.string_field(1)
    reason_no: int = betterproto.int64_field(2)
    title: "Text" = betterproto.message_field(3)
    violation_reason: "Text" = betterproto.message_field(4)
    source: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class WebcastMarqueeAnnouncementMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_scene: str = betterproto.string_field(2)
    message_entity: List["WebcastMarqueeAnnouncementMessageMessageEntity"] = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class WebcastMarqueeAnnouncementMessageMessageEntity(betterproto.Message):
    notify_message: "WebcastRoomNotifyMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GradeIcon(betterproto.Message):
    icon: "ImageModel" = betterproto.message_field(1)
    icon_diamond: int = betterproto.int32_field(2)
    level: int = betterproto.int32_field(3)
    level_str: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class LeaveJoinGroupContent(betterproto.Message):
    operator: "GroupPlayer" = betterproto.message_field(1)
    group_channel_id: int = betterproto.int64_field(2)
    leave_source: str = betterproto.string_field(3)
    linked_user_ui_positions: List[str] = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GiftListExtra(betterproto.Message):
    log_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ReportCommitData(betterproto.Message):
    status: int = betterproto.int64_field(1)
    desc: str = betterproto.string_field(2)
    report_id: int = betterproto.int64_field(3)
    record_id: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class PriceChangeInfo(betterproto.Message):
    is_price_changed: bool = betterproto.bool_field(1)
    new_price: str = betterproto.string_field(2)
    old_price: str = betterproto.string_field(3)
    next_billing_date: int = betterproto.int64_field(4)
    days_left_to_agree_change: int = betterproto.int64_field(6)
    is_first_entrance: bool = betterproto.bool_field(7)
    is_consent_required: bool = betterproto.bool_field(8)
    contract_id: str = betterproto.string_field(9)
    order_id: str = betterproto.string_field(10)
    no_confirm_cancel_contract_date: int = betterproto.int64_field(11)
    billing_type: Optional["PriceChangeInfoBillingType"] = betterproto.enum_field(
        12, optional=True
    )
    changed_price: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class PreScheduleStream(betterproto.Message):
    sdk_params: str = betterproto.string_field(1)
    speed_probe_url: str = betterproto.string_field(2)
    stream_resolution_list: List["StreamResolution"] = betterproto.message_field(3)
    recommend_stream_resolution: int = betterproto.int32_field(4)
    net_mode: int = betterproto.int64_field(5)
    degradation_enabled: bool = betterproto.bool_field(6)
    degradation_type: int = betterproto.int32_field(7)
    push_stream_info: Dict[int, "PreScheduleStreamPushStreamInfo"] = (
        betterproto.map_field(8, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE)
    )
    stream_resolution_list_all: List["StreamResolution"] = betterproto.message_field(9)
    can_golive1080_p: int = betterproto.int64_field(10)
    stream_id: str = betterproto.string_field(11)
    stream_push_urls: List[str] = betterproto.string_field(12)
    stream_rtmp_push_url: str = betterproto.string_field(13)
    pre_stream_group: int = betterproto.int64_field(14)
    rtc_room_id: int = betterproto.int64_field(15)
    rtc_app_id: str = betterproto.string_field(16)
    stream_data: str = betterproto.string_field(17)


@dataclass(eq=False, repr=False)
class PreScheduleStreamQuality(betterproto.Message):
    name: str = betterproto.string_field(1)
    sdk_key: str = betterproto.string_field(2)
    desc: str = betterproto.string_field(3)
    width: int = betterproto.int64_field(4)
    height: int = betterproto.int64_field(5)
    max_bitrate: int = betterproto.int64_field(6)
    min_bitrate: int = betterproto.int64_field(7)
    default_bitrate: int = betterproto.int64_field(8)
    fps: int = betterproto.int64_field(9)


@dataclass(eq=False, repr=False)
class PreScheduleStreamPushStreamInfo(betterproto.Message):
    default_quality: "PreScheduleStreamQuality" = betterproto.message_field(1)
    qualities: List["PreScheduleStreamQuality"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CountdownEndParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    countdown_id: int = betterproto.int64_field(3)
    end_reason: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class WebcastChatMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    user_info: "User" = betterproto.message_field(2)
    content: str = betterproto.string_field(3)
    visible_to_sender: bool = betterproto.bool_field(4)
    background: "ImageModel" = betterproto.message_field(5)
    full_screen_text_color: str = betterproto.string_field(6)
    background_image_v2: "ImageModel" = betterproto.message_field(7)
    public_area_common: "PublicAreaCommon" = betterproto.message_field(9)
    gift_image: "ImageModel" = betterproto.message_field(10)
    input_type: int = betterproto.int32_field(11)
    at_user: "User" = betterproto.message_field(12)
    f315_emotes: List["EmoteWithIndex"] = betterproto.message_field(13)
    content_language: str = betterproto.string_field(14)
    msg_filter: "MsgFilter" = betterproto.message_field(15)
    quick_chat_scene: int = betterproto.int32_field(16)
    communityflagged_status: int = betterproto.int32_field(17)
    user_identity: "UserIdentity" = betterproto.message_field(18)
    comment_quality_scores: List["CommentQualityScore"] = betterproto.message_field(19)
    comment_tag: List["WebcastChatMessageCommentTag"] = betterproto.enum_field(20)
    public_area_message_common: "PublicAreaMessageCommon" = betterproto.message_field(
        21
    )
    screen_time: int = betterproto.int64_field(22)
    signature: str = betterproto.string_field(23)
    signature_version: str = betterproto.string_field(24)
    ec_streamer_key: str = betterproto.string_field(25)


@dataclass(eq=False, repr=False)
class LiveMessageId(betterproto.Message):
    primary_i_d: str = betterproto.string_field(1)
    message_scene: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GiftPanelCardletByCreator(betterproto.Message):
    display_text: "Text" = betterproto.message_field(1)
    schema_url: str = betterproto.string_field(2)
    cardlet_priority: int = betterproto.int32_field(3)
    cardlet_type: int = betterproto.int32_field(4)
    cardlet_button: "GiftPanelCardletByCreatorCardletButton" = (
        betterproto.message_field(5)
    )
    cardlet_icon: "ImageModel" = betterproto.message_field(6)
    copywriting_type: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class GiftPanelCardletByCreatorCardletButton(betterproto.Message):
    left_icon: "ImageModel" = betterproto.message_field(1)
    text: str = betterproto.string_field(2)
    schema: str = betterproto.string_field(3)
    button_type: int = betterproto.int32_field(4)
    button_priority: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class GuestShowdownGetContentResponse(betterproto.Message):
    data: "GuestShowdownGetContentResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GuestShowdownGetContentResponseResponseData(betterproto.Message):
    play_content: "GuestShowdownContent" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WebcastGiftDynamicRestrictionMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    dynamic_restriction: "DynamicRestriction" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GoalData(betterproto.Message):
    status: int = betterproto.int32_field(1)
    goal_progress: Dict[int, "GoalDataProgress"] = betterproto.map_field(
        2, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class GoalDataProgress(betterproto.Message):
    current_progress: int = betterproto.int64_field(1)
    target: int = betterproto.int64_field(2)
    expired_timestamp_in_ms: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class RoomCreateInfo(betterproto.Message):
    m_cover: "ImageModel" = betterproto.message_field(1)
    m_cover_audit_status: int = betterproto.int64_field(2)
    m_title: str = betterproto.string_field(3)
    m_prompt: str = betterproto.string_field(4)
    m_anchor_prompt_type: int = betterproto.int32_field(5)
    m_is_first_broadcast_flag: int = betterproto.int32_field(7)
    m_additional_prompt: str = betterproto.string_field(11)
    donation_sticker: int = betterproto.int32_field(17)
    m_last_room_id: int = betterproto.int64_field(19)
    block_status: "BlockStatus" = betterproto.message_field(22)
    m_live_event_info: "LiveEventInfo" = betterproto.message_field(23)
    live_house_status: int = betterproto.int64_field(24)
    hashtag: "Hashtag" = betterproto.message_field(25)
    use_avatar_as_cover: bool = betterproto.bool_field(26)
    push_stream_info_map: Dict[int, "PushStreamInfo"] = betterproto.map_field(
        27, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    show_game_tags: bool = betterproto.bool_field(28)
    guide_status: int = betterproto.int32_field(29)
    is_new_anchor: bool = betterproto.bool_field(30)
    can_show_fragment: bool = betterproto.bool_field(31)
    has_fragment: bool = betterproto.bool_field(32)
    last_fragment: "GameLiveFragment" = betterproto.message_field(33)
    screen_shot_cover_status: int = betterproto.int32_field(34)
    block_detail_url: str = betterproto.string_field(36)
    perception_message: "CreateInfoPerceptionMessage" = betterproto.message_field(37)
    age_restricted_config: "AgeRestrictedConfig" = betterproto.message_field(38)
    game_live_info: "GameLiveInfo" = betterproto.message_field(43)
    device_level: int = betterproto.int32_field(44)
    punishment_message: "CreateInfoPunishmentMessage" = betterproto.message_field(45)
    game_live_convert_info: "GameLiveConvertInfo" = betterproto.message_field(46)
    room_auth_customizable_poll: int = betterproto.int32_field(47)
    enable_pin_message: bool = betterproto.bool_field(48)
    room_gift_count: int = betterproto.int64_field(49)
    admin_ec_show_permission: Dict[int, int] = betterproto.map_field(
        50, betterproto.TYPE_INT64, betterproto.TYPE_INT64
    )
    permission_level_info: "PermissionLevelInfo" = betterproto.message_field(51)
    perception_messages: List["CreateInfoPerceptionMessage"] = (
        betterproto.message_field(52)
    )
    cover_source: str = betterproto.string_field(53)
    live_pro_info: "LiveProInfo" = betterproto.message_field(54)
    anchor_can_open_caption: bool = betterproto.bool_field(55)
    voice_title: str = betterproto.string_field(56)
    voice_cover: "ImageModel" = betterproto.message_field(57)
    voice_cover_audit_status: int = betterproto.int32_field(58)
    use_avatar_as_voice_cover: bool = betterproto.bool_field(59)
    voice_cover_source: str = betterproto.string_field(60)
    anchor_star_comment_permission: bool = betterproto.bool_field(61)
    poll_optimize_group: int = betterproto.int64_field(63)
    cpp_banner_info: "CppBannerInfo" = betterproto.message_field(65)
    cpp_age_verification_info: "CppAgeVerificationInfo" = betterproto.message_field(66)
    webcast_l_s_access_status: "WebcastLsAccessStatus" = betterproto.message_field(67)
    fold_bottom_area: bool = betterproto.bool_field(69)
    effect_active_level: int = betterproto.int32_field(70)
    has_growth_center: bool = betterproto.bool_field(71)
    growth_center_first_display_text: str = betterproto.string_field(73)
    growth_center_not_first_display_text: str = betterproto.string_field(74)
    has_recent_stream: bool = betterproto.bool_field(75)
    has_game_guess_permission: bool = betterproto.bool_field(76)
    default_comment_tray_switch: bool = betterproto.bool_field(77)
    show_campaign_center_open_page: bool = betterproto.bool_field(78)
    show_campaign_center_more_page: bool = betterproto.bool_field(79)
    have_campaign: bool = betterproto.bool_field(80)
    pop_info_list: List["PopMsgContainer"] = betterproto.message_field(81)
    notify_quota_config: Dict[int, "MsgNotifyQuota"] = betterproto.map_field(
        82, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    star_comment_permission_switch: bool = betterproto.bool_field(83)
    star_comment_permission_switch_off_reason: str = betterproto.string_field(84)
    campaign_banner_data: "CampaignBannerData" = betterproto.message_field(85)
    poll_template_optimize_group: int = betterproto.int64_field(87)
    go_live_ec_icon_info: "GoLiveEcIconInfo" = betterproto.message_field(88)
    activities_icon_info: "ActivitiesIconInfo" = betterproto.message_field(89)
    tts_probation_mode: int = betterproto.int32_field(90)
    reminder_word_status: List["AnchorReminderWordStatus"] = betterproto.message_field(
        91
    )
    avoid_config: "MsgNotifyComAvoidConfig" = betterproto.message_field(92)
    ongoing_goal: "LiveStreamGoal" = betterproto.message_field(94)
    multi_guest_play_info: "MultiGuestPlayInfo" = betterproto.message_field(95)
    new_anchor_incentive_banner_data: "NewAnchorIncentiveBannerData" = (
        betterproto.message_field(96)
    )
    wallet_rewards_container_info: "WalletRewardsContainerInfo" = (
        betterproto.message_field(97)
    )
    unified_banner_data: "UnifiedBannerData" = betterproto.message_field(98)
    show_shopping_manage: bool = betterproto.bool_field(100)
    guessing_game_info: "GuessingGameInfo" = betterproto.message_field(102)
    live_journey_banner: "UnifiedBannerData" = betterproto.message_field(120)


@dataclass(eq=False, repr=False)
class WebcastSubNotifyMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    user: "User" = betterproto.message_field(2)
    exhibition_type: Optional["WebcastSubNotifyMessageExhibitionType"] = (
        betterproto.enum_field(3, optional=True)
    )
    sub_month: int = betterproto.int64_field(4)
    subscribe_type: "WebcastSubNotifyMessageSubscribeType" = betterproto.enum_field(5)
    old_subscribe_status: "WebcastSubNotifyMessageOldSubscribeStatus" = (
        betterproto.enum_field(6)
    )
    subscribe_message_type: Optional["WebcastSubNotifyMessageMessageType"] = (
        betterproto.enum_field(7, optional=True)
    )
    subscribing_status: "WebcastSubNotifyMessageSubscribingStatus" = (
        betterproto.enum_field(8)
    )
    is_send: bool = betterproto.bool_field(9)
    is_custom: bool = betterproto.bool_field(10)
    gift_source: Optional["WebcastSubNotifyMessageGiftSource"] = betterproto.enum_field(
        11, optional=True
    )
    message_display_style: Optional["WebcastSubNotifyMessageMessageDisplayStyle"] = (
        betterproto.enum_field(12, optional=True)
    )
    public_area_message_common: "PublicAreaMessageCommon" = betterproto.message_field(
        13
    )
    package_id: str = betterproto.string_field(14)
    event_tracking: "EventTracking" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class KaraokeSong(betterproto.Message):
    id: int = betterproto.int64_field(1)
    title: str = betterproto.string_field(2)
    display_artist: str = betterproto.string_field(3)
    album: str = betterproto.string_field(4)
    duration: int = betterproto.int32_field(5)
    prelude: int = betterproto.int32_field(6)
    postlude: int = betterproto.int32_field(7)
    cover_vid: str = betterproto.string_field(8)
    cover_urls: List[str] = betterproto.string_field(9)
    audio_info: "AudioStruct" = betterproto.message_field(10)
    accompaniment_info: "AccompanimentStruct" = betterproto.message_field(11)
    lyric_info: "LyricStruct" = betterproto.message_field(12)
    song_status: int = betterproto.int32_field(13)
    label_ids: List[int] = betterproto.int64_field(14)
    is_favorite: bool = betterproto.bool_field(15)
    is_added: bool = betterproto.bool_field(16)
    is_request: bool = betterproto.bool_field(17)
    is_you_sing_request: bool = betterproto.bool_field(18)
    singer: "User" = betterproto.message_field(19)


@dataclass(eq=False, repr=False)
class CompetitionScoreChange(betterproto.Message):
    team_infos: List["CompetitionResultsTeamInfo"] = betterproto.message_field(1)
    trigger_reason: Optional["CompetitionScoreChangeTriggerReason"] = (
        betterproto.enum_field(2, optional=True)
    )
    take_the_stage_biz: "CompetitionScoreChangeTakeTheStageBiz" = (
        betterproto.message_field(100)
    )


@dataclass(eq=False, repr=False)
class CompetitionScoreChangeTakeTheStageBiz(betterproto.Message):
    status: Optional["CompetitionScoreChangeTakeTheStageBizTakeTheStageStatus"] = (
        betterproto.enum_field(1, optional=True)
    )
    performance_start_time: int = betterproto.int64_field(2)
    order_info: "TakeTheStageOrderInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WebcastCommonPopupMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    schema_url: str = betterproto.string_field(2)
    anchor_popup: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class PlayTogetherWidgetsData(betterproto.Message):
    message_type: "MessageType" = betterproto.enum_field(1)
    basic_info: "PlayTogetherBasicInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FansEventData(betterproto.Message):
    new_fans_data: "FansEventDataNewFansData" = betterproto.message_field(1)
    task_complete_data: "FansEventDataTaskCompleteData" = betterproto.message_field(2)
    get_unclaimed_points: "FansEventDataGetUnclaimedPoints" = betterproto.message_field(
        3
    )
    team_rank_update: "FansEventDataTeamRankUpdate" = betterproto.message_field(4)
    exp_change_data: "FansEventDataExpChangeData" = betterproto.message_field(5)
    entrance_guidance_data: "FansEventDataEntranceGuidanceData" = (
        betterproto.message_field(6)
    )
    trigger_task_types: List["FansEventDataFansTaskType"] = betterproto.enum_field(101)


@dataclass(eq=False, repr=False)
class FansEventDataEntranceGuidanceData(betterproto.Message):
    text: "Text" = betterproto.message_field(1)
    icon: "ImageModel" = betterproto.message_field(2)
    guidance_type: Optional["FansEventDataEntranceGuidanceDataEntranceGuidanceType"] = (
        betterproto.enum_field(5, optional=True)
    )
    freq_control_key: str = betterproto.string_field(6)
    freq_control_duration: int = betterproto.int64_field(7)
    freq_control_value: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class FansEventDataExpChangeData(betterproto.Message):
    claimed_all_points: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class FansEventDataGetUnclaimedPoints(betterproto.Message):
    unclaimed_points: int = betterproto.int64_field(1)
    expire_timestamp: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class FansEventDataNewFansData(betterproto.Message):
    fans_count: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class FansEventDataTaskCompleteData(betterproto.Message):
    task_type: Optional["FansEventDataTaskCompleteDataFansTaskType"] = (
        betterproto.enum_field(1, optional=True)
    )
    is_clear_today: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class FansEventDataTeamRankUpdate(betterproto.Message):
    updated_rank: int = betterproto.int64_field(1)
    updated_score: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GuestShowdownUser(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    linkmic_id: str = betterproto.string_field(2)
    score: int = betterproto.int64_field(3)
    rank: int = betterproto.int32_field(4)
    nickname: str = betterproto.string_field(5)
    display_id: str = betterproto.string_field(6)
    avatar_thumb: "ImageModel" = betterproto.message_field(7)
    user_tag: int = betterproto.int32_field(8)
    icon_name: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class TriggerResumeNoticeResponse(betterproto.Message):
    data: "TriggerResumeNoticeResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TriggerResumeNoticeResponseResponseData(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class EffectCategory(betterproto.Message):
    id: str = betterproto.string_field(1)
    key: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    icon: "UrlDataStruct" = betterproto.message_field(4)
    icon_selected: "UrlDataStruct" = betterproto.message_field(5)
    effects: List[str] = betterproto.string_field(6)
    tags: List[str] = betterproto.string_field(7)
    tags_updated_at: str = betterproto.string_field(8)
    is_default: bool = betterproto.bool_field(9)
    extra: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class WebcastEcBarrageMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    icon: "ImageModel" = betterproto.message_field(2)
    content: "Text" = betterproto.message_field(3)
    duration: int = betterproto.int64_field(4)
    background_color: str = betterproto.string_field(5)
    background_opacity: float = betterproto.double_field(6)


@dataclass(eq=False, repr=False)
class WebcastPromoteAdStatusMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    ad_id: int = betterproto.int64_field(2)
    status: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class PollUpdateVotesContent(betterproto.Message):
    option_list: List["PollOptionInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetShowContentResponse(betterproto.Message):
    data: "GetShowContentResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetShowContentResponseResponseData(betterproto.Message):
    show_content: "ShowContent" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GuessingGameInfo(betterproto.Message):
    show_guessing_game_entrance: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class BizJoinGroupParams(betterproto.Message):
    source_type: int = betterproto.int32_field(1)
    check_perception_center: bool = betterproto.bool_field(2)
    tag_type: int = betterproto.int32_field(3)
    tag_value: str = betterproto.string_field(4)
    need_withdraw: bool = betterproto.bool_field(5)
    algo_request_id: str = betterproto.string_field(6)
    stream_config: "CohostStreamConfig" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class ApplyAnimationContent(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    is_display: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class BattleInfoResponse(betterproto.Message):
    channel_id: int = betterproto.int64_field(1)
    battle_id: int = betterproto.int64_field(2)
    setting: "BattleSetting" = betterproto.message_field(3)
    armies: Dict[int, "BattleUserArmies"] = betterproto.map_field(
        4, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    result_map: Dict[int, "BattleResult"] = betterproto.map_field(
        5, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    user_info_map: Dict[int, "BattleUserInfo"] = betterproto.map_field(
        6, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    bubble_text: str = betterproto.string_field(7)
    supported_actions: Dict[int, bool] = betterproto.map_field(
        8, betterproto.TYPE_INT64, betterproto.TYPE_BOOL
    )
    m_battle_display_config: "BattleDisplayConfig" = betterproto.message_field(9)
    battle_combos: Dict[int, "BattleComboInfo"] = betterproto.map_field(
        11, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    battle_task: "BattleTask" = betterproto.message_field(12)
    team_armies: Dict[int, "BattleTeamUserArmies"] = betterproto.map_field(
        13, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    team_battle_result: Dict[int, "BattleTeamResult"] = betterproto.map_field(
        14, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    battle_truth_or_dare: "BattleTruthOrDare" = betterproto.message_field(15)
    team_match_campaign: "TeamMatchCampaign" = betterproto.message_field(16)
    battle_item_cards: Dict[int, "EffectingCard"] = betterproto.map_field(
        17, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    team_battle_item_cards: Dict[int, "EffectingCard"] = betterproto.map_field(
        18, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    channel_id_str: str = betterproto.string_field(19)
    battle_id_str: str = betterproto.string_field(20)
    fuzzy_display_config_v2: "HighScoreControlCfg" = betterproto.message_field(21)


@dataclass(eq=False, repr=False)
class ShowListUser(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    status: int = betterproto.int32_field(2)
    order: int = betterproto.int32_field(3)
    show_start_time: int = betterproto.int64_field(4)
    nickname: str = betterproto.string_field(5)
    avatar_thumb: "ImageModel" = betterproto.message_field(6)
    score: int = betterproto.int64_field(7)
    linkmic_id_str: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class CoHost(betterproto.Message):
    multi_co_host_permission: bool = betterproto.bool_field(1)
    linked_users: List["LinkmicUser"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SubTimerSticker(betterproto.Message):
    type: Optional["SubTimerStickerSubTimerStickerChangeType"] = betterproto.enum_field(
        1, optional=True
    )
    timer_id: int = betterproto.int64_field(2)
    op_type: Optional["SubTimerStickerTimerOpType"] = betterproto.enum_field(
        3, optional=True
    )
    timer_status: Optional["SubTimerStickerTimerStatus"] = betterproto.enum_field(
        4, optional=True
    )
    anchor_side_title: str = betterproto.string_field(5)
    user_side_title: str = betterproto.string_field(6)
    sub_increase_count: int = betterproto.int32_field(7)
    time_increase_per_sub: int = betterproto.int64_field(8)
    time_increase: int = betterproto.int64_field(9)
    total_time: int = betterproto.int64_field(10)
    remaining_time: int = betterproto.int64_field(11)
    timestamp: int = betterproto.int64_field(12)
    sticker_x: int = betterproto.int64_field(13)
    sticker_y: int = betterproto.int64_field(14)
    screen_w: int = betterproto.int64_field(15)
    screen_h: int = betterproto.int64_field(16)


@dataclass(eq=False, repr=False)
class LivePermissionInfo(betterproto.Message):
    end_time: int = betterproto.int64_field(1)
    reason: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ByteRtcExtInfo(betterproto.Message):
    default_signaling: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class WebcastInteractionHubGoalMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    interaction_goal: "Text" = betterproto.message_field(2)
    interaction_tips: "Text" = betterproto.message_field(3)
    interaction_goal_type: int = betterproto.int32_field(4)
    interaction_goal_source: int = betterproto.int32_field(5)
    new_gift_info: "Gift" = betterproto.message_field(6)
    has_new_gift: bool = betterproto.bool_field(7)
    task_progress: "AnchorActivityTaskProgress" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class ReportLinkMessageResp(betterproto.Message):
    common_resp: "LinkMicCommonResp" = betterproto.message_field(1)
    interval: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class NotifyHighlightContent(betterproto.Message):
    content: str = betterproto.string_field(1)
    need_highlight: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PrivilegeLogExtra(betterproto.Message):
    data_version: str = betterproto.string_field(1)
    privilege_id: str = betterproto.string_field(2)
    privilege_version: str = betterproto.string_field(3)
    privilege_order_id: str = betterproto.string_field(4)
    level: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class PatternRef(betterproto.Message):
    key: str = betterproto.string_field(1)
    default_pattern: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AboutMeTemplate(betterproto.Message):
    id: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    icon_image: "ImageModel" = betterproto.message_field(3)
    icon_image_dark: "ImageModel" = betterproto.message_field(4)
    input_box_list: List["AboutMeInputBox"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class CapsuleBizParamsCommentMuteRulePrompt(betterproto.Message):
    content: str = betterproto.string_field(1)
    user_cnt: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class EpiphronDecision(betterproto.Message):
    ts: int = betterproto.int64_field(1)
    data: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    data_v2: Dict[str, str] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    server_features: Dict[str, str] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class Gift(betterproto.Message):
    image: "ImageModel" = betterproto.message_field(1)
    describe: str = betterproto.string_field(2)
    duration: int = betterproto.int32_field(4)
    id: int = betterproto.int64_field(5)
    for_link_mic: bool = betterproto.bool_field(7)
    combo: bool = betterproto.bool_field(10)
    type: int = betterproto.int32_field(11)
    diamond_count: int = betterproto.int32_field(12)
    is_displayed_on_panel: bool = betterproto.bool_field(13)
    primary_effect_id: int = betterproto.int64_field(14)
    left_logo: "ImageModel" = betterproto.message_field(15)
    name: str = betterproto.string_field(16)
    icon: "ImageModel" = betterproto.message_field(21)
    live_user_png_info: str = betterproto.string_field(24)
    preview_image: "ImageModel" = betterproto.message_field(47)
    gift_panel_banner: "GiftPanelBanner" = betterproto.message_field(48)
    is_broadcast_gift: bool = betterproto.bool_field(49)
    is_effect_b_e_f_view: bool = betterproto.bool_field(50)
    is_random_gift: bool = betterproto.bool_field(51)
    is_box_gift: bool = betterproto.bool_field(52)
    can_put_in_gift_box: bool = betterproto.bool_field(53)
    gift_box_info: "GiftBoxInfo" = betterproto.message_field(54)
    tracker_params: Dict[str, str] = betterproto.map_field(
        100, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    gift_sub_info: "GiftLockInfo" = betterproto.message_field(101)
    color_infos: List["GiftColorInfo"] = betterproto.message_field(102)
    recommend_info: str = betterproto.string_field(103)
    random_effect_info: "GiftRandomEffectInfo" = betterproto.message_field(104)
    gift_sub_type: int = betterproto.int32_field(105)
    gift_vertical_scenarios: List[int] = betterproto.int32_field(106)
    group_in_tab: int = betterproto.int32_field(107)
    is_gallery_gift: bool = betterproto.bool_field(108)
    gift_sponsor_info: "GiftGiftSponsorInfo" = betterproto.message_field(109)
    gift_skins: List["GiftGiftSkin"] = betterproto.message_field(110)
    gift_label_type: int = betterproto.int32_field(111)
    gift_texts: List["GiftGiftText"] = betterproto.message_field(112)
    gift_skin_to_gift_texts_infos: List["GiftGiftSkinToGiftTextsInfo"] = (
        betterproto.message_field(113)
    )
    expiration_timestamp: int = betterproto.int64_field(114)
    batch_gift_info: "GiftBatchGiftInfo" = betterproto.message_field(115)
    is_global_gift: bool = betterproto.bool_field(116)
    disable_gallery_banner: bool = betterproto.bool_field(117)
    ug_gift_info: "GiftUgGiftStructInfo" = betterproto.message_field(118)
    cross_screen_effect_info: "GiftCrossScreenEffectInfo" = betterproto.message_field(
        119
    )
    beacon_bubble: "GiftPanelBeaconBubble" = betterproto.message_field(120)


@dataclass(eq=False, repr=False)
class GiftBatchGiftInfo(betterproto.Message):
    can_batch_send: bool = betterproto.bool_field(1)
    available_counts: List[int] = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GiftCrossScreenEffectInfo(betterproto.Message):
    single_action_effect_ids: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_INT64, betterproto.TYPE_INT32
    )
    action_effect_ids: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_INT64, betterproto.TYPE_INT32
    )
    reaction_effect_ids: Dict[int, int] = betterproto.map_field(
        3, betterproto.TYPE_INT64, betterproto.TYPE_INT32
    )


@dataclass(eq=False, repr=False)
class GiftGiftSponsorInfo(betterproto.Message):
    sponsor_id: int = betterproto.int64_field(1)
    sponsor_count: int = betterproto.int64_field(2)
    current_count: int = betterproto.int64_field(3)
    left_count_to_sponsor: int = betterproto.int64_field(4)
    can_sponsor: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class GiftUgGiftStructInfo(betterproto.Message):
    is_ug_gift: bool = betterproto.bool_field(1)
    ug_points_cost: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GiftGiftSkin(betterproto.Message):
    gift_skin_id: int = betterproto.int64_field(1)
    gift_skin_name: str = betterproto.string_field(2)
    static_image: "ImageModel" = betterproto.message_field(3)
    animated_image: "ImageModel" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GiftGiftText(betterproto.Message):
    gift_text_id: int = betterproto.int64_field(1)
    gift_text_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GiftGiftSkinToGiftTextsInfo(betterproto.Message):
    gift_skin_id: int = betterproto.int64_field(1)
    gift_text_ids: List[int] = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GroupLiveSession(betterproto.Message):
    is_group_live_session: bool = betterproto.bool_field(1)
    last_visit_time: int = betterproto.int64_field(2)
    group_live_members: List["GroupLiveMember"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AnchorActivityTaskProgress(betterproto.Message):
    task_icon_url: str = betterproto.string_field(1)
    task_progress: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WebcastEpiMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    decisions: "EpiDecision" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CommonMessageData(betterproto.Message):
    method: str = betterproto.string_field(1)
    message_id: int = betterproto.int64_field(2)
    room_id: int = betterproto.int64_field(3)
    create_time: int = betterproto.int64_field(4)
    monitor: int = betterproto.int32_field(5)
    show_msg: bool = betterproto.bool_field(6)
    describe: str = betterproto.string_field(7)
    display_text: "Text" = betterproto.message_field(8)
    fold_type: int = betterproto.int64_field(9)
    anchor_fold_type: int = betterproto.int64_field(10)
    priority_score: int = betterproto.int64_field(11)
    log_id: str = betterproto.string_field(12)
    msg_process_filter_k: str = betterproto.string_field(13)
    msg_process_filter_v: str = betterproto.string_field(14)
    from_idc: str = betterproto.string_field(15)
    to_idc: str = betterproto.string_field(16)
    filter_tags: List[str] = betterproto.string_field(17)
    message_s_e_i: "LiveMessageSei" = betterproto.message_field(18)
    depend_root_i_d: "LiveMessageId" = betterproto.message_field(19)
    depend_i_d: "LiveMessageId" = betterproto.message_field(20)
    anchor_priority_score: int = betterproto.int64_field(21)
    room_message_heat_level: int = betterproto.int64_field(22)
    fold_type_for_web: int = betterproto.int64_field(23)
    anchor_fold_type_for_web: int = betterproto.int64_field(24)
    client_send_time: int = betterproto.int64_field(25)
    dispatch_strategy: Optional["CommonMessageDataImDispatchStrategy"] = (
        betterproto.enum_field(26, optional=True)
    )


@dataclass(eq=False, repr=False)
class WebcastLinkmicAnimationMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    apply_animation_content: "ApplyAnimationContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CreateChannelResponse(betterproto.Message):
    channel_id: int = betterproto.int64_field(2)
    rtc_info: "RtcExtraInfo" = betterproto.message_field(3)
    self_link_mic_id: str = betterproto.string_field(4)
    is_resume: int = betterproto.int32_field(5)
    multi_guest_resp_extra: "BizCreateChannelResponse" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class LivePermissionApply(betterproto.Message):
    enable_third_party: bool = betterproto.bool_field(1)
    enable_screenshot: bool = betterproto.bool_field(2)
    enable_live_video: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class AgeRestricted(betterproto.Message):
    restricted: bool = betterproto.bool_field(1)
    age_interval: int = betterproto.int32_field(2)
    source: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class GiftSendFansClubInfo(betterproto.Message):
    fans_gift_toast: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GameTag(betterproto.Message):
    id: int = betterproto.int64_field(1)
    show_name: str = betterproto.string_field(2)
    short_name: str = betterproto.string_field(3)
    full_name: str = betterproto.string_field(4)
    hashtag_list: List["Hashtag"] = betterproto.message_field(6)
    game_category: List["GameTagCategory"] = betterproto.message_field(7)
    landscape: int = betterproto.int32_field(8)
    package_name: str = betterproto.string_field(9)
    bundle_id: str = betterproto.string_field(10)
    is_new_game: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class EmoteListResult(betterproto.Message):
    emote_list: List["EmoteModel"] = betterproto.message_field(1)
    exist: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class CountdownForAllStartResponse(betterproto.Message):
    data: "CountdownForAllStartResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CountdownForAllStartResponseResponseData(betterproto.Message):
    is_exists: bool = betterproto.bool_field(1)
    play_content: "CountdownForAllContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LeaveJoinGroupReq(betterproto.Message):
    common: "LinkCommon" = betterproto.message_field(1)
    myself: "GroupPlayer" = betterproto.message_field(2)
    leaver: "GroupPlayer" = betterproto.message_field(3)
    group_channel_id: int = betterproto.int64_field(4)
    cur_group_channel_id: int = betterproto.int64_field(5)
    cohost_req_extra: "BizLeaveJoinGroupParams" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class BizCancelApplyParams(betterproto.Message):
    anchor_id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class TruthOrDareTip(betterproto.Message):
    tip_type: str = betterproto.string_field(1)
    tip_content: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WebcastKaraokeYouSingReqMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    song_list: List["ReqSong"] = betterproto.message_field(2)
    total_req_count: int = betterproto.int64_field(3)
    req_timestamp_seconds: int = betterproto.int64_field(4)
    type: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class WebcastRealTimePerformancePageMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    type: int = betterproto.int32_field(2)
    guide_text_starling: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class WebcastStreamStatusMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    streams: List["StreamStatusChangeInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AudienceRejectContent(betterproto.Message):
    from_user_id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class WebcastGiftCollectionUpdateMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    gift_collection: "GiftCollection" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastCommercialCustomMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    custom_message_id: int = betterproto.int64_field(2)
    brand_logo: "ImageModel" = betterproto.message_field(3)
    brand_name: "Text" = betterproto.message_field(4)
    border_color: str = betterproto.string_field(7)
    right_label: "WebcastCommercialCustomMessageRightLabel" = betterproto.message_field(
        8
    )
    duration: int = betterproto.int64_field(9)


@dataclass(eq=False, repr=False)
class WebcastCommercialCustomMessageRightLabel(betterproto.Message):
    background_color: str = betterproto.string_field(1)
    content: "Text" = betterproto.message_field(2)
    height: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class WebcastGuideMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    guide_type: int = betterproto.int64_field(2)
    gift_id: int = betterproto.int64_field(3)
    description: str = betterproto.string_field(4)
    duration: int = betterproto.int64_field(5)
    display_style: int = betterproto.int64_field(6)
    scene: "Scene" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class PartnershipBriefDrops(betterproto.Message):
    id_str: str = betterproto.string_field(1)
    name: str = betterproto.string_field(2)
    icon: str = betterproto.string_field(3)
    game_name: str = betterproto.string_field(4)
    start_time: int = betterproto.int64_field(5)
    end_time: int = betterproto.int64_field(6)
    joined: bool = betterproto.bool_field(7)
    game_id_str: str = betterproto.string_field(8)
    incentivetype: int = betterproto.int32_field(9)
    game_tag_id: int = betterproto.int64_field(10)


@dataclass(eq=False, repr=False)
class MultiMatchPrepareResponse(betterproto.Message):
    anchors_permission: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_INT64, betterproto.TYPE_INT32
    )
    recommend_team_mate: int = betterproto.int64_field(2)
    ab_test_settings: Dict[int, "BattleAbTestList"] = betterproto.map_field(
        3, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    gift_mode: List["GiftMode"] = betterproto.message_field(4)
    rule_guide_url: str = betterproto.string_field(5)
    best_teammate_id: int = betterproto.int64_field(6)
    gift_event_desc: "Text" = betterproto.message_field(7)
    punished_anchor: int = betterproto.int64_field(8)
    punish_end_timestamp: int = betterproto.int64_field(9)


@dataclass(eq=False, repr=False)
class RepostInfo(betterproto.Message):
    show_tag: bool = betterproto.bool_field(1)
    reposters_token: str = betterproto.string_field(2)
    reposters_cnt: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class RechargeCustomError(betterproto.Message):
    prompt_type: int = betterproto.int32_field(1)
    toast_content: str = betterproto.string_field(2)
    pop_up_title: str = betterproto.string_field(3)
    pop_up_content: str = betterproto.string_field(4)
    content_replace: Dict[str, "RechargePopUpContentReplace"] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    pop_up_dismiss: str = betterproto.string_field(6)
    pop_up_dismiss_action: int = betterproto.int32_field(7)
    pop_up_primary_cta: str = betterproto.string_field(8)
    pop_up_primary_cta_schema: str = betterproto.string_field(9)
    extra: str = betterproto.string_field(10)
    pop_up_style: int = betterproto.int32_field(11)
    link_to_jump: str = betterproto.string_field(12)
    pop_up_primary_action: int = betterproto.int32_field(13)
    penalty_warning_skip: str = betterproto.string_field(14)
    err_code: int = betterproto.int32_field(15)
    pop_up_dismiss_cta_schema: str = betterproto.string_field(16)
    question_mark_cta_schema: str = betterproto.string_field(17)


@dataclass(eq=False, repr=False)
class BlockStatus(betterproto.Message):
    is_block: bool = betterproto.bool_field(1)
    ent_time: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class WebcastDonationMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    total: int = betterproto.int64_field(2)
    currency: str = betterproto.string_field(3)
    sponsor: List["User"] = betterproto.message_field(4)
    user: List["User"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class CohostListResponse(betterproto.Message):
    data: "CohostListResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CohostListResponseResponseData(betterproto.Message):
    total_position_count: int = betterproto.int64_field(1)
    group_channel_id: int = betterproto.int64_field(2)
    users: List["CohostListUser"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AckStateResp(betterproto.Message):
    result: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ReplyContent(betterproto.Message):
    replier: "User" = betterproto.message_field(1)
    replier_room_id: int = betterproto.int64_field(2)
    reply_status: "ReplyStatus" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class JoinGroupMessageExtra(betterproto.Message):
    source_type: int = betterproto.int64_field(1)
    extra: "JoinGroupMessageExtraRivalExtra" = betterproto.message_field(2)
    other_users: List["JoinGroupMessageExtraRivalExtra"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class JoinGroupMessageExtraAuthenticationInfo(betterproto.Message):
    custom_verify: str = betterproto.string_field(1)
    enterprise_verify_reason: str = betterproto.string_field(2)
    authentication_badge: "ImageModel" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class JoinGroupMessageExtraRivalExtra(betterproto.Message):
    user_count: int = betterproto.int64_field(4)
    avatar_thumb: "ImageModel" = betterproto.message_field(5)
    display_id: str = betterproto.string_field(6)
    authentication_info: "JoinGroupMessageExtraAuthenticationInfo" = (
        betterproto.message_field(7)
    )
    nickname: str = betterproto.string_field(8)
    follow_status: int = betterproto.int64_field(9)
    hashtag: "Hashtag" = betterproto.message_field(10)
    top_host_info: "TopHostInfo" = betterproto.message_field(11)
    user_id: int = betterproto.int64_field(12)
    is_best_teammate: bool = betterproto.bool_field(13)
    opt_pair_info: "OptPairInfo" = betterproto.message_field(14)
    eoy_level: int = betterproto.int64_field(15)
    nudge_info: Optional["JoinGroupMessageExtraRivalExtraCohostNudgeInfo"] = (
        betterproto.enum_field(16, optional=True)
    )
    reservation_id: int = betterproto.int64_field(17)
    follower_count: int = betterproto.int64_field(18)
    game_tag: "RivalsGameTag" = betterproto.message_field(19)


@dataclass(eq=False, repr=False)
class BizMigrateGroupResponse(betterproto.Message):
    data: "BizMigrateGroupResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BizMigrateGroupResponseResponseData(betterproto.Message):
    user_infos: Dict[int, "CohostUserInfo"] = betterproto.map_field(
        1, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class WebcastLiveGameIntroMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    content: "Text" = betterproto.message_field(2)
    has_rank_info: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class LivePodcastResponse(betterproto.Message):
    data: "LivePodcastResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class LivePodcastResponseResponseData(betterproto.Message):
    can_be_live_podcast: bool = betterproto.bool_field(1)
    can_be_social_live: bool = betterproto.bool_field(2)
    live_scenario: "LiveScenario" = betterproto.message_field(3)
    live_permission_apply: "LivePermissionApply" = betterproto.message_field(4)
    show_live_studio: bool = betterproto.bool_field(5)
    anchor_level_permission: "AnchorLevelPermission" = betterproto.message_field(6)
    can_be_pico_live_podcast: bool = betterproto.bool_field(7)
    try_mode: "TryMode" = betterproto.message_field(8)
    live_studio_permission_status: "LiveStudioPermissionStatus" = (
        betterproto.message_field(9)
    )
    stream: "Stream" = betterproto.message_field(10)
    can_cache: int = betterproto.int64_field(11)
    show_mock_live_tab: bool = betterproto.bool_field(12)
    conditions_popup: "EntranceConditionsPopup" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class SubPinCard(betterproto.Message):
    time_to_live: int = betterproto.int64_field(1)
    title: "SubPinCardText" = betterproto.message_field(2)
    desc: "SubPinCardText" = betterproto.message_field(3)
    image: "ImageModel" = betterproto.message_field(4)
    id: int = betterproto.int64_field(6)
    template_id: int = betterproto.int64_field(7)
    goal_pin_card: "SubGoalPinCard" = betterproto.message_field(8)
    action_schema: str = betterproto.string_field(9)
    last_pin_timestamp: int = betterproto.int64_field(10)


@dataclass(eq=False, repr=False)
class SubPinCardText(betterproto.Message):
    type: Optional["SubPinCardTextTextType"] = betterproto.enum_field(1, optional=True)
    content: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CompetitionInitiateInfo(betterproto.Message):
    initiator: "CompetitionUserBase" = betterproto.message_field(1)
    initiate_type: Optional["CompetitionInitiateInfoCompetitionInitiateType"] = (
        betterproto.enum_field(2, optional=True)
    )
    teams: List["CompetitionTeamBase"] = betterproto.message_field(3)
    ab_infos: Dict[int, "CompetitionAbInfo"] = betterproto.map_field(
        4, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    take_the_stage_biz: "CompetitionInitiateInfoTakeTheStageBiz" = (
        betterproto.message_field(100)
    )


@dataclass(eq=False, repr=False)
class CompetitionInitiateInfoAnchorInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class CompetitionInitiateInfoTakeTheStageBiz(betterproto.Message):
    anchors: List["CompetitionInitiateInfoAnchorInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReplyBizContent(betterproto.Message):
    link_type: int = betterproto.int32_field(1)
    is_turn_off_invitation: int = betterproto.int32_field(2)
    reply_user_info: "User" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class RealtimeLiveCenterTips(betterproto.Message):
    show_tips: bool = betterproto.bool_field(1)
    tip_text: str = betterproto.string_field(2)
    tip_type: int = betterproto.int64_field(3)
    random_tip_key: str = betterproto.string_field(4)
    tips_schema: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class LiveLimitedTimeDiscountGiftInfo(betterproto.Message):
    gift_id: int = betterproto.int64_field(1)
    original_price: int = betterproto.int64_field(2)
    expire_time: int = betterproto.int64_field(3)
    remain_times: int = betterproto.int32_field(4)
    discount_percentage: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class GetShowRankParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    show_id: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class BackGroundImageState(betterproto.Message):
    sticker_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ResumeResponse(betterproto.Message):
    data: "ResumeResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ResumeResponseResponseData(betterproto.Message):
    rtc_ext_info: str = betterproto.string_field(1)
    is_resume: bool = betterproto.bool_field(2)
    users: List["CohostListUser"] = betterproto.message_field(3)
    total_position_count: int = betterproto.int64_field(4)
    channel_id: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class CountdownForAllContent(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    play_id: int = betterproto.int64_field(3)
    play_status: int = betterproto.int32_field(4)
    version: int = betterproto.int64_field(5)
    start_time: int = betterproto.int64_field(6)
    end_time: int = betterproto.int64_field(7)
    play_config: "CountdownForAllConfig" = betterproto.message_field(8)
    play_users: List["CountdownForAllUser"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class BenefitsInfo(betterproto.Message):
    customized_benefits: List[str] = betterproto.string_field(1)
    is_subscribe: bool = betterproto.bool_field(2)
    is_default_benefits: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class GroupChatGuestDetail(betterproto.Message):
    user_info: "User" = betterproto.message_field(1)
    linked_seconds: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class ForceInsertMetricsItem(betterproto.Message):
    force_insert_type: int = betterproto.int32_field(1)
    force_index_config: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class LinkerMediaChangeOperator(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    operator_type: Optional["LinkerMediaChangeOperatorLinkMicUserAdminType"] = (
        betterproto.enum_field(2, optional=True)
    )
    nick_name: str = betterproto.string_field(3)
    display_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GoalStats(betterproto.Message):
    total_coins: int = betterproto.int64_field(1)
    total_contributor: int = betterproto.int64_field(2)
    comparison: "GoalComparison" = betterproto.message_field(3)
    total_new_fans: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class TextEffect(betterproto.Message):
    portrait_detail: "TextEffectDetail" = betterproto.message_field(1)
    landscape_detail: "TextEffectDetail" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TextEffectDetail(betterproto.Message):
    text: "Text" = betterproto.message_field(1)
    text_font_size: int = betterproto.int32_field(2)
    background: "ImageModel" = betterproto.message_field(3)
    start: int = betterproto.int64_field(4)
    duration: int = betterproto.int64_field(5)
    x: int = betterproto.int32_field(6)
    y: int = betterproto.int32_field(7)
    width: int = betterproto.int32_field(8)
    height: int = betterproto.int32_field(9)
    shadow_dx: int = betterproto.int32_field(10)
    shadow_dy: int = betterproto.int32_field(11)
    shadow_radius: int = betterproto.int32_field(12)
    shadow_color: str = betterproto.string_field(13)
    stroke_color: str = betterproto.string_field(14)
    stroke_width: int = betterproto.int32_field(15)


@dataclass(eq=False, repr=False)
class EcShortItemRefreshMessage(betterproto.Message):
    entity: "ShortItemRefreshEntity" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EcommerceRoomTag(betterproto.Message):
    tag_name: str = betterproto.string_field(1)
    tag_type: int = betterproto.int32_field(2)
    tag_show_time: int = betterproto.int64_field(3)
    da_info: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CompetitionReplyResponse(betterproto.Message):
    data: "CompetitionReplyResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CompetitionReplyResponseResponseData(betterproto.Message):
    biz_common: "CompetitionCommon" = betterproto.message_field(1)
    ab_infos: Dict[int, "CompetitionAbInfo"] = betterproto.map_field(
        2, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class AuditInfo(betterproto.Message):
    violation_id: int = betterproto.int64_field(1)
    task_type: Optional["AuditInfoAuditTaskType"] = betterproto.enum_field(
        2, optional=True
    )


@dataclass(eq=False, repr=False)
class UserArmiesWrapper(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    user_armies: "BattleUserArmies" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastPartnershipDropsCardChangeMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    change_mode: int = betterproto.int32_field(2)
    drops_id: str = betterproto.string_field(3)
    card_show_duration: int = betterproto.int64_field(4)
    game_id: str = betterproto.string_field(5)
    game_name: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class WebcastGameGuessWidgetsMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    guess_widgets: "GuessWidgets" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PreviewGameMomentData(betterproto.Message):
    preview_game_info_type: Optional["PreviewGameMomentDataPreviewGameInfoType"] = (
        betterproto.enum_field(1, optional=True)
    )
    game_moment_message_type: Optional["PreviewGameMomentDataGameMomentMessageType"] = (
        betterproto.enum_field(2, optional=True)
    )
    event_time: int = betterproto.int64_field(3)
    max_time: int = betterproto.int64_field(4)
    moment_unique_id: str = betterproto.string_field(5)
    content: "Text" = betterproto.message_field(6)
    game_tag_name: "Text" = betterproto.message_field(7)
    game_tag_id: int = betterproto.int64_field(8)


@dataclass(eq=False, repr=False)
class StarlingTranslateInfo(betterproto.Message):
    starling_key: str = betterproto.string_field(1)
    lang_translate: List["LangTranslate"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GameServerFeatureSetting(betterproto.Message):
    gbl_server_features_enable: bool = betterproto.bool_field(1)
    gbl_server_features_list: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GoodyBagUserInfo(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    nickname: str = betterproto.string_field(2)
    display_id: str = betterproto.string_field(3)
    avatar: "ImageModel" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WebcastMiddleTouchMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    action_data: "UnifyBaseActionData" = betterproto.message_field(2)
    extra: "MiddleTouchExtra" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PollVoteLimit(betterproto.Message):
    limit_type: Optional["PollVoteLimitPollVoteLimitType"] = betterproto.enum_field(
        1, optional=True
    )
    vote_count_limit: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class BattleTaskStart(betterproto.Message):
    battle_bonus_config: "BattleBonusConfig" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CheckUpdateResponse(betterproto.Message):
    data: "CheckUpdateResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CheckUpdateResponseData(betterproto.Message):
    updated: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class LokiExtraContent(betterproto.Message):
    gift_type: str = betterproto.string_field(1)
    gift_duration: int = betterproto.int64_field(2)
    need_screen_shot: bool = betterproto.bool_field(3)
    ismulti_frame: bool = betterproto.bool_field(4)
    view_overlay: str = betterproto.string_field(5)
    bef_view_render_size: "BefViewRenderSize" = betterproto.message_field(6)
    bef_view_render_f_p_s: int = betterproto.int32_field(7)
    bef_view_fit_mode: int = betterproto.int32_field(8)
    model_names: str = betterproto.string_field(9)
    requirements: List[str] = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class ImageBadge(betterproto.Message):
    badge_display_type: Optional["ImageBadgeBadgeDisplayType"] = betterproto.enum_field(
        1, optional=True
    )
    image_model: "ImageModel" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BattleTeamResult(betterproto.Message):
    team_id: int = betterproto.int64_field(1)
    team_users: List["BattleTeamUser"] = betterproto.message_field(2)
    result: int = betterproto.int32_field(3)
    total_score: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class PictionaryInfo(betterproto.Message):
    id: int = betterproto.int64_field(1)
    word: str = betterproto.string_field(2)
    status: int = betterproto.int32_field(3)
    start_time: int = betterproto.int64_field(4)
    end_time: int = betterproto.int64_field(5)
    session_id: int = betterproto.int64_field(6)
    draw_url: "ImageModel" = betterproto.message_field(7)
    pictionary_type: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class GuessWidgets(betterproto.Message):
    user_rank: List["GuessRankUserInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GoalComparison(betterproto.Message):
    coins_incr: int = betterproto.int64_field(1)
    contributor_incr: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class WebcastUserStatsMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    m_content: str = betterproto.string_field(2)
    m_user_id: int = betterproto.int64_field(3)
    m_action_type: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class ReplyResponse(betterproto.Message):
    rtc_info: "RtcExtraInfo" = betterproto.message_field(2)
    invitee_link_mic_id: str = betterproto.string_field(3)
    position: "MicPositionData" = betterproto.message_field(4)
    linked_user_ui_positions: List[str] = betterproto.string_field(5)
    ui_pos: List["PosIdentity"] = betterproto.message_field(6)
    multi_guest_resp_extra: "BizReplyResponse" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class BattleResult(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    result: Optional["BattleResultResult"] = betterproto.enum_field(2, optional=True)
    score: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class PerceptionFeedbackOption(betterproto.Message):
    id: int = betterproto.int64_field(1)
    content_key: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WebcastWallpaperReviewMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    ai_pic_url: str = betterproto.string_field(2)
    review_result: int = betterproto.int64_field(3)
    context_keywords: str = betterproto.string_field(4)
    keywords: str = betterproto.string_field(5)
    room_id: int = betterproto.int64_field(6)
    channel_id: int = betterproto.int64_field(7)
    wallpaper_id: int = betterproto.int64_field(8)


@dataclass(eq=False, repr=False)
class BattleRecentContribResponse(betterproto.Message):
    data: "BattleRecentContribResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BattleRecentContribResponseResponseData(betterproto.Message):
    gift_log_ids: List[str] = betterproto.string_field(1)
    supported_actions: Dict[int, bool] = betterproto.map_field(
        2, betterproto.TYPE_INT64, betterproto.TYPE_BOOL
    )
    battle_score: Dict[int, "BattleResult"] = betterproto.map_field(
        3, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    team_battle_score: Dict[int, "BattleTeamResult"] = betterproto.map_field(
        4, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class VideoMetaInfo(betterproto.Message):
    url: str = betterproto.string_field(1)
    height: int = betterproto.int64_field(2)
    width: int = betterproto.int64_field(3)
    size: int = betterproto.int64_field(4)
    duration: float = betterproto.float_field(5)


@dataclass(eq=False, repr=False)
class WebcastLinkMicAdMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    link_ad_contents: List["LinkMicAdContent"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CompetitionInitiateResponse(betterproto.Message):
    data: "CompetitionInitiateResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CompetitionInitiateResponseResponseData(betterproto.Message):
    biz_common: "CompetitionCommon" = betterproto.message_field(1)
    inviter_gift_permission_type: int = betterproto.int32_field(2)
    teams: List["CompetitionTeamBase"] = betterproto.message_field(3)
    end_timestamp_sec: int = betterproto.int64_field(4)
    actual_end_timestamp_sec: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class BattleUserInfoWrapper(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    user_info: "BattleUserInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastLsAccessStatus(betterproto.Message):
    user_access_status: bool = betterproto.bool_field(1)
    is_upgrade_restricted: bool = betterproto.bool_field(2)
    punish_detail_url: str = betterproto.string_field(3)
    upgrade_restriction_end_day: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class StarCommentGetQueueResponse(betterproto.Message):
    data: "StarCommentGetQueueResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class StarCommentGetQueueResponseData(betterproto.Message):
    queue: "StarCommentQueue" = betterproto.message_field(1)
    server_cur_msg_start_time_ms: int = betterproto.int64_field(2)
    client_reserve: str = betterproto.string_field(3)
    polling_interval_ms: int = betterproto.int64_field(4)
    normal_interval_between_msg_ms: int = betterproto.int64_field(5)
    advanced_interval_between_msg_ms: int = betterproto.int64_field(6)
    lagging_interval_between_msg_ms: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class AgeRestrictionSettings(betterproto.Message):
    age_restricted: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class WebcastSubTimerStickerMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    sticker: "SubTimerSticker" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AnchorInfo(betterproto.Message):
    level: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class StreamUrlExtra(betterproto.Message):
    height: int = betterproto.int32_field(1)
    width: int = betterproto.int32_field(2)
    fps: int = betterproto.int32_field(3)
    max_bitrate: int = betterproto.int32_field(4)
    min_bitrate: int = betterproto.int32_field(5)
    default_bitrate: int = betterproto.int32_field(6)
    bitrate_adapt_strategy: int = betterproto.int32_field(7)
    anchor_interact_profile: int = betterproto.int32_field(8)
    audience_interact_profile: int = betterproto.int32_field(9)
    hardware_encode: bool = betterproto.bool_field(10)
    profile: int = betterproto.int32_field(12)
    sr_config: "StreamUrlExtraSrConfig" = betterproto.message_field(14)
    gop_sec: float = betterproto.float_field(16)
    enable_b_frame: bool = betterproto.bool_field(17)
    is_roi: bool = betterproto.bool_field(18)
    is_sw_roi: bool = betterproto.bool_field(19)
    enable_byte_v_c1: bool = betterproto.bool_field(20)


@dataclass(eq=False, repr=False)
class StreamUrlExtraSrConfig(betterproto.Message):
    enabled: bool = betterproto.bool_field(1)
    strength: int = betterproto.int32_field(2)
    anti_alias: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ReportLinkMessageReq(betterproto.Message):
    common: "LinkCommon" = betterproto.message_field(1)
    my_self: "Player" = betterproto.message_field(2)
    channel_message: "ChannelMessage" = betterproto.message_field(3)
    anchor_client_list: "AnchorClientList" = betterproto.message_field(4)
    guest_client_list: "GuestClientList" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GetFirstRechargeInfoV2Resp(betterproto.Message):
    data: "GetFirstRechargeInfoV2RespData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetFirstRechargeInfoV2RespRewardProcess(betterproto.Message):
    reward_id: int = betterproto.int64_field(1)
    reward_order: int = betterproto.int32_field(2)
    reward_scene: int = betterproto.int32_field(3)
    reward_amount: int = betterproto.int64_field(4)
    reward_expire: int = betterproto.int64_field(5)
    reward_icon: "ImageModel" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class GetFirstRechargeInfoV2RespCampaignProcess(betterproto.Message):
    task_id: int = betterproto.int64_field(1)
    task_order: int = betterproto.int32_field(2)
    task_scene: int = betterproto.int32_field(3)
    task_status: int = betterproto.int32_field(4)
    task_target_amount: int = betterproto.int64_field(5)
    task_finished_amount: int = betterproto.int64_field(6)
    task_expire_time: int = betterproto.int64_field(7)
    rewards: List["GetFirstRechargeInfoV2RespRewardProcess"] = (
        betterproto.message_field(8)
    )


@dataclass(eq=False, repr=False)
class GetFirstRechargeInfoV2RespCommonCampaignInfo(betterproto.Message):
    campaign_name: str = betterproto.string_field(1)
    expire_time: int = betterproto.int64_field(3)
    campaign_status: int = betterproto.int32_field(4)
    campaign_process: List["GetFirstRechargeInfoV2RespCampaignProcess"] = (
        betterproto.message_field(5)
    )


@dataclass(eq=False, repr=False)
class GetFirstRechargeInfoV2RespFirstChargeGuideEffectRule(betterproto.Message):
    enable_first_recharge_guide_effect: bool = betterproto.bool_field(1)
    enter_room_show_time: List[int] = betterproto.int32_field(2)
    watch_pk_show_time: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class GetFirstRechargeInfoV2RespFirstRechargeCampaignV1(betterproto.Message):
    is_first_charge: bool = betterproto.bool_field(1)
    guide_effect_rule: "GetFirstRechargeInfoV2RespFirstChargeGuideEffectRule" = (
        betterproto.message_field(2)
    )
    default_diamond: "Diamond" = betterproto.message_field(3)
    first_charge_gift_style: int = betterproto.int32_field(4)
    package_entrance_image: "ImageModel" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GetFirstRechargeInfoV2RespFirstRechargeCampaignV2(betterproto.Message):
    is_cash_first_charge: bool = betterproto.bool_field(1)
    gift_id: int = betterproto.int64_field(2)
    is_show_countdown: bool = betterproto.bool_field(3)
    expire_time: int = betterproto.int64_field(4)
    total_frozen_coins: int = betterproto.int32_field(5)
    remaining_frozen_coins: int = betterproto.int32_field(6)
    minimum_number_of_coins_to_unlock_frozen_coins: int = betterproto.int32_field(7)
    frozen_coins_for_large_packages: int = betterproto.int32_field(8)
    frozen_coins_for_small_packages: int = betterproto.int32_field(9)
    recharge_coins_for_large_packages: int = betterproto.int32_field(10)
    recharge_coins_for_small_packages: int = betterproto.int32_field(11)
    is_first_active_consumption: bool = betterproto.bool_field(12)
    first_cash_recharge_ts: int = betterproto.int64_field(13)


@dataclass(eq=False, repr=False)
class GetFirstRechargeInfoV2RespData(betterproto.Message):
    campaign_type: int = betterproto.int32_field(1)
    first_recharge_campaign_v1: "GetFirstRechargeInfoV2RespFirstRechargeCampaignV1" = (
        betterproto.message_field(2)
    )
    first_recharge_campaign_v2: "GetFirstRechargeInfoV2RespFirstRechargeCampaignV2" = (
        betterproto.message_field(3)
    )
    campaign_schema_url: str = betterproto.string_field(4)
    common_campaign_info: "GetFirstRechargeInfoV2RespCommonCampaignInfo" = (
        betterproto.message_field(5)
    )
    server_unix_time: int = betterproto.int64_field(6)
    campaign_faq_url: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class FanTicketRanklistParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    guest_user_id: int = betterproto.int64_field(2)
    anchor_id: int = betterproto.int64_field(3)
    channel_id: int = betterproto.int64_field(4)
    linkmic_id: str = betterproto.string_field(5)
    show_id: int = betterproto.int64_field(6)
    play_id: int = betterproto.int64_field(7)
    play_scene: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class NoticeboardTemplateUpdateResponse(betterproto.Message):
    data: "NoticeboardTemplateUpdateResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NoticeboardTemplateUpdateResponseResponseData(betterproto.Message):
    is_success: bool = betterproto.bool_field(1)
    template: "NoticeboardTemplate" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class StarCommentMessage(betterproto.Message):
    star_comment_id: str = betterproto.string_field(1)
    user: "User" = betterproto.message_field(2)
    content: str = betterproto.string_field(3)
    duration: int = betterproto.int64_field(4)
    start_time_ms: int = betterproto.int64_field(5)
    comment_option: Optional["StarCommentMessageStarCommentOption"] = (
        betterproto.enum_field(6, optional=True)
    )
    content_language: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class ListUser(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    linkmic_id: int = betterproto.int64_field(2)
    linkmic_id_str: str = betterproto.string_field(3)
    link_status: Optional["ListUserLinkListStatus"] = betterproto.enum_field(
        4, optional=True
    )
    link_type: Optional["ListUserLinkType"] = betterproto.enum_field(5, optional=True)
    user_position: int = betterproto.int32_field(6)
    silence_status: Optional["ListUserLinkSilenceStatus"] = betterproto.enum_field(
        7, optional=True
    )
    modify_time: int = betterproto.int64_field(8)
    channel_id: int = betterproto.int64_field(9)
    role_type: Optional["ListUserLinkRoleType"] = betterproto.enum_field(
        10, optional=True
    )


@dataclass(eq=False, repr=False)
class NoticeboardCreateResponse(betterproto.Message):
    data: "NoticeboardCreateResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NoticeboardCreateResponseResponseData(betterproto.Message):
    is_exists: bool = betterproto.bool_field(1)
    noticeboard_content: "NoticeboardContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LinkerMediaChangeContent(betterproto.Message):
    op: Optional["LinkerMediaChangeContentGuestMicCameraManageOp"] = (
        betterproto.enum_field(1, optional=True)
    )
    to_user_id: int = betterproto.int64_field(2)
    anchor_id: int = betterproto.int64_field(3)
    room_id: int = betterproto.int64_field(4)
    change_scene: Optional["LinkerMediaChangeContentGuestMicCameraChangeScene"] = (
        betterproto.enum_field(5, optional=True)
    )
    operator_info: "LinkerMediaChangeOperator" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class LinkerSetting(betterproto.Message):
    max_member_limit: int = betterproto.int64_field(1)
    link_type: int = betterproto.int64_field(2)
    scene: "Scene" = betterproto.enum_field(3)
    owner_uid: int = betterproto.int64_field(4)
    owner_room_id: int = betterproto.int64_field(5)
    vendor: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class PublicAreaCommon(betterproto.Message):
    user_label: "ImageModel" = betterproto.message_field(1)
    user_consume_in_room: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GiftPanelBeaconBubble(betterproto.Message):
    lynx_url: str = betterproto.string_field(1)
    lynx_extra: str = betterproto.string_field(2)
    type: Optional["GiftPanelBeaconBubbleGiftPanelBeaconBubbleType"] = (
        betterproto.enum_field(3, optional=True)
    )


@dataclass(eq=False, repr=False)
class QuizStatistics(betterproto.Message):
    option_count: List["QuizStatisticsOptionCountItem"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QuizStatisticsOptionCountItem(betterproto.Message):
    option_id: str = betterproto.string_field(1)
    count: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class GameTaskInfo(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    status: int = betterproto.int32_field(2)
    current_value: int = betterproto.int32_field(3)
    target_value: int = betterproto.int32_field(4)
    reward_info: "GameTaskRewardInfo" = betterproto.message_field(5)
    task_type: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class RtcExtraInfo(betterproto.Message):
    config: "RtcEngineConfig" = betterproto.message_field(1)
    rtc_video_param: List["RtcLiveVideoParam"] = betterproto.message_field(2)
    rtc_bit_rate_map: "RtcBitRateMap" = betterproto.message_field(3)
    rtc_fps: int = betterproto.int32_field(4)
    rtc_mix_base: "RtcMixBase" = betterproto.message_field(5)
    byte_rtc_ext_info: "ByteRtcExtInfo" = betterproto.message_field(6)
    rtc_info_extra: "RtcInfoExtra" = betterproto.message_field(7)
    rtc_business_id: str = betterproto.string_field(8)
    rtc_other: "RtcOther" = betterproto.message_field(9)
    interact_client_type: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class WebcastGiftGalleryMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    gift_info: "WebcastGiftGalleryMessageGiftInfo" = betterproto.message_field(2)
    user: "User" = betterproto.message_field(3)
    to_user: "User" = betterproto.message_field(4)
    msg_type: Optional["WebcastGiftGalleryMessageGiftGalleryMsgType"] = (
        betterproto.enum_field(5, optional=True)
    )
    all_sponsored: bool = betterproto.bool_field(21)
    priority: "GiftImPriority" = betterproto.message_field(51)
    log_id: str = betterproto.string_field(52)


@dataclass(eq=False, repr=False)
class WebcastGiftGalleryMessageGiftInfo(betterproto.Message):
    lighted_up_gift_id: int = betterproto.int64_field(1)
    high_value: bool = betterproto.bool_field(2)
    gift: "Gift" = betterproto.message_field(3)
    unlighted_gift_icon: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MultiLangContent(betterproto.Message):
    language: str = betterproto.string_field(1)
    content: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GuestClientList(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    link_mic_id: str = betterproto.string_field(2)
    status: int = betterproto.int32_field(3)
    source: int = betterproto.int32_field(4)
    rtc_status: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class WebcastGiftUpdateMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    update_type: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class LinkListChangeContent(betterproto.Message):
    list_change_type: int = betterproto.int32_field(1)
    user_list: "AllListUser" = betterproto.message_field(2)
    linked_user_ui_positions: List[str] = betterproto.string_field(3)
    content_pos: List["ContentPosition"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MigrateGroupReq(betterproto.Message):
    common: "LinkCommon" = betterproto.message_field(1)
    myself: "GroupPlayer" = betterproto.message_field(2)
    source_group_channel_id: int = betterproto.int64_field(3)
    target_group_channel_id: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class WebcastNoticeboardMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    noticeboard_content: "NoticeboardContent" = betterproto.message_field(3)
    operator_user_info: "LinkerMediaChangeOperator" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class LeaveContent(betterproto.Message):
    left_user: "Player" = betterproto.message_field(1)
    leave_reason: int = betterproto.int64_field(2)
    linked_user_ui_positions: List[str] = betterproto.string_field(3)
    ui_pos: List["PosIdentity"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WebcastRoomEventMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    event_id: int = betterproto.int64_field(2)
    title: str = betterproto.string_field(3)
    start_time: int = betterproto.int64_field(4)
    pos_x: str = betterproto.string_field(5)
    pos_y: str = betterproto.string_field(6)
    subscribed_count: int = betterproto.int64_field(7)
    config_opt: int = betterproto.int32_field(8)
    event_user_info: List["EventUserInfo"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class GiveawayInfo(betterproto.Message):
    winner: "User" = betterproto.message_field(1)
    product: "Product" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastUpgradeMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    text: "Text" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WalletLiveRewardsRatioImMsg(betterproto.Message):
    msg_type: int = betterproto.int32_field(1)
    notification_data: "WalletLiveRewardsRatioImMsgNotification" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class WebcastBackpackMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    change_type: int = betterproto.int32_field(2)
    action: int = betterproto.int32_field(3)
    item_type: int = betterproto.int32_field(4)
    item_id: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class BarrageTypeFansLevelParam(betterproto.Message):
    current_grade: int = betterproto.int32_field(1)
    display_config: int = betterproto.int32_field(2)
    user: "User" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WebcastAvatarStyleResultMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    status: int = betterproto.int32_field(2)
    status_message: str = betterproto.string_field(3)
    image: "ImageModel" = betterproto.message_field(4)
    style_id: int = betterproto.int64_field(5)
    origin_image_uri: str = betterproto.string_field(6)
    task_id: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class UpdateRoomLayoutSettings(betterproto.Message):
    rtc_ext_info: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GameGuessRecommendCreateSwitch(betterproto.Message):
    enable: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class KickOutAllGuestsParam(betterproto.Message):
    common: "LinkCommon" = betterproto.message_field(1)
    myself: "Player" = betterproto.message_field(2)
    channel_id: int = betterproto.int64_field(3)
    reason: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class GiftConfigs(betterproto.Message):
    config_infos: List["GiftConfigInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WebcastGameSettingChangeMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    current_user_setting: Dict[int, "UserSetting"] = betterproto.map_field(
        2, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class WebcastPartnershipDropsUpdateMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    change_mode: Optional["WebcastPartnershipDropsUpdateMessageChangeMode"] = (
        betterproto.enum_field(2, optional=True)
    )
    drops_id: str = betterproto.string_field(3)
    task_id: str = betterproto.string_field(4)
    event_id: str = betterproto.string_field(5)
    anchor_uid: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class BattleNoticeAnchorGuide(betterproto.Message):
    content: "BattleNoticeText" = betterproto.message_field(1)
    button_content: "BattleNoticeText" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RtcEngineConfig(betterproto.Message):
    rtc_app_id: str = betterproto.string_field(1)
    rtc_user_id: str = betterproto.string_field(2)
    rtc_token: str = betterproto.string_field(3)
    rtc_channel_id: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class PermitBizContent(betterproto.Message):
    multi_live_anchor_panel_settings: "MultiLiveAnchorPanelSettings" = (
        betterproto.message_field(1)
    )
    expire_time: int = betterproto.int64_field(2)
    operator_user_info: "User" = betterproto.message_field(3)
    operator_link_admin_type: Optional["PermitBizContentLinkMicUserAdminType"] = (
        betterproto.enum_field(4, optional=True)
    )
    link_user_type: Optional["PermitBizContentLinkUserType"] = betterproto.enum_field(
        5, optional=True
    )


@dataclass(eq=False, repr=False)
class AnchorGrowLevelTriggerInfo(betterproto.Message):
    is_grow_level_anchor: bool = betterproto.bool_field(1)
    growth_journey_banner_info: "GrowthJourneyBannerInfo" = betterproto.message_field(2)
    growth_stage: int = betterproto.int64_field(3)
    growth_instance_strategy: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GetStateResp(betterproto.Message):
    version: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    layout: "LayoutState" = betterproto.message_field(3)
    states: List["LinkUserState"] = betterproto.message_field(4)
    back_ground_image: "BackGroundImageState" = betterproto.message_field(5)
    wallpaper_image: "WallpaperImageState" = betterproto.message_field(6)
    ui_pos: List["PosIdentity"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class PreviewCommentItem(betterproto.Message):
    id: int = betterproto.int64_field(1)
    content: str = betterproto.string_field(2)
    item_type: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class CompetitionInfoResponse(betterproto.Message):
    data: "CompetitionInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SubGoalContribution(betterproto.Message):
    id: str = betterproto.string_field(1)
    contribution_count: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class WebcastQuestionSwitchMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    on: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class BattleNoticeRuleGuide(betterproto.Message):
    content: "BattleNoticeText" = betterproto.message_field(1)
    button_content: "BattleNoticeText" = betterproto.message_field(2)
    rule_url: str = betterproto.string_field(3)
    except_anchor: bool = betterproto.bool_field(4)
    content_text: "Text" = betterproto.message_field(5)
    button_content_text: "Text" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class WebcastLiveInfoAuditNoticeMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    audit_content_type: Optional[
        "WebcastLiveInfoAuditNoticeMessageLiveInfoAuditContentType"
    ] = betterproto.enum_field(2, optional=True)
    audit_status: "AuditStatus" = betterproto.enum_field(3)
    text_starling_key: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class BcToggleInfo(betterproto.Message):
    status: int = betterproto.int32_field(1)
    toggle_text: str = betterproto.string_field(2)
    show_interval: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class GiftTrayInfo(betterproto.Message):
    m_dynamic_img: "ImageModel" = betterproto.message_field(1)
    can_mirror: bool = betterproto.bool_field(2)
    tray_normal_bg_img: "ImageModel" = betterproto.message_field(3)
    tray_normal_bg_color: List[str] = betterproto.string_field(4)
    tray_small_bg_img: "ImageModel" = betterproto.message_field(5)
    tray_small_bg_color: List[str] = betterproto.string_field(6)
    right_tag_text: "Text" = betterproto.message_field(7)
    right_tag_bg_img: "ImageModel" = betterproto.message_field(8)
    right_tag_bg_color: List[str] = betterproto.string_field(9)
    tray_name_text_color: str = betterproto.string_field(10)
    tray_desc_text_color: str = betterproto.string_field(11)
    right_tag_jump_schema: str = betterproto.string_field(12)


@dataclass(eq=False, repr=False)
class LinkmicUserToastContent(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    room_id: int = betterproto.int64_field(2)
    display_text: "Text" = betterproto.message_field(3)
    leaved_user_id: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class FollowInfo(betterproto.Message):
    following_count: int = betterproto.int64_field(1)
    follower_count: int = betterproto.int64_field(2)
    follow_status: int = betterproto.int64_field(3)
    push_status: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class ToolBarManagement(betterproto.Message):
    mergingmorepriority: List[int] = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class BattleNoticeBubbleGuide(betterproto.Message):
    content: "BattleNoticeText" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class JoinDirectResp(betterproto.Message):
    rtc_info: "RtcExtraInfo" = betterproto.message_field(2)
    self_link_mic_id: str = betterproto.string_field(3)
    position: "MicPositionData" = betterproto.message_field(4)
    all_users: "AllListUser" = betterproto.message_field(5)
    multi_guest_resp_extra: "BizJoinDirectResponse" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class GetUserPlaySettingsResponse(betterproto.Message):
    data: "GetUserPlaySettingsResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetUserPlaySettingsResponseResponseData(betterproto.Message):
    settings_map: Dict[str, int] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_INT64
    )


@dataclass(eq=False, repr=False)
class LinkerEnlargeStatusSynContent(betterproto.Message):
    is_enlarge: int = betterproto.int32_field(1)
    enlarge_linkmic_id: str = betterproto.string_field(2)
    scene: "Scene" = betterproto.enum_field(3)
    target_linkmic_id: str = betterproto.string_field(4)
    operator_info: "LinkerMediaChangeOperator" = betterproto.message_field(5)
    layout_id: str = betterproto.string_field(6)
    linked_user_ui_positions: List[str] = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class WebcastLinkMicBattleVictoryLap(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    play_type: int = betterproto.int32_field(2)
    battle_truth_or_dare_trigger_guide: "BattleTruthOrDareTriggerGuide" = (
        betterproto.message_field(3)
    )
    play_tips: "BattleTruthOrDareTips" = betterproto.message_field(4)
    truth_or_dare_close_notice: "BattleTruthOrDareOptOutNotice" = (
        betterproto.message_field(5)
    )
    trigger_guide_v2: "BattleTruthOrDareTriggerGuideV2" = betterproto.message_field(6)
    anchor_region: str = betterproto.string_field(10)
    battle_id: int = betterproto.int64_field(11)


@dataclass(eq=False, repr=False)
class JoinChannelResp(betterproto.Message):
    link_layer_list_user: "LinkLayerListUser" = betterproto.message_field(2)
    multi_guest_resp_extra: "BizJoinChannelResponse" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class RoomAuthMessage(betterproto.Message):
    golden_envelope: "RoomAuthMessageGoldenEnvelope" = betterproto.message_field(1)
    promote_other_message: "PromoteOtherMessage" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RoomBasedGiftData(betterproto.Message):
    room_based_gifts: Dict[int, "RoomBasedGiftDataRoomBasedGifts"] = (
        betterproto.map_field(2, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE)
    )


@dataclass(eq=False, repr=False)
class RoomBasedGiftDataGiftInfo(betterproto.Message):
    id: int = betterproto.int64_field(1)
    price: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class RoomBasedGiftDataRoomBasedGifts(betterproto.Message):
    gift_info: List["RoomBasedGiftDataGiftInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class LinkerCreateContent(betterproto.Message):
    owner_id: int = betterproto.int64_field(1)
    owner_room_id: int = betterproto.int64_field(2)
    link_type: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class PaidEvent(betterproto.Message):
    event_id: int = betterproto.int64_field(1)
    paid_type: Optional["PaidEventPaidType"] = betterproto.enum_field(2, optional=True)


@dataclass(eq=False, repr=False)
class BattleDisplayConfig(betterproto.Message):
    threshold: int = betterproto.int32_field(1)
    text: str = betterproto.string_field(2)
    diff_threshold: int = betterproto.int32_field(3)
    diff_text: str = betterproto.string_field(4)
    exempt_strategy: "ExemptStrategy" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class QuizQuestionInfo(betterproto.Message):
    message_type: "MessageType" = betterproto.enum_field(1)
    quiz_id: str = betterproto.string_field(2)
    quiz_type: int = betterproto.int32_field(3)
    extra: str = betterproto.string_field(4)
    participants_count: int = betterproto.int32_field(5)
    question_id: str = betterproto.string_field(6)
    question_no: int = betterproto.int32_field(7)
    question_count: int = betterproto.int32_field(8)
    question_type: int = betterproto.int32_field(9)
    title: str = betterproto.string_field(10)
    image: List["QuizImage"] = betterproto.message_field(11)
    options: List["QuizQuestionOption"] = betterproto.message_field(12)
    reward_amount: str = betterproto.string_field(15)
    question_duration_ms: int = betterproto.int32_field(16)
    next_quiz: List["QuizNextQuiz"] = betterproto.message_field(17)
    sponsor_code: str = betterproto.string_field(18)
    display_duration_ms: int = betterproto.int32_field(19)
    extra1: str = betterproto.string_field(51)
    extra2: str = betterproto.string_field(52)
    extra3: str = betterproto.string_field(53)
    extra4: str = betterproto.string_field(54)
    extra5: str = betterproto.string_field(55)


@dataclass(eq=False, repr=False)
class QuizCallUpWebview(betterproto.Message):
    message_type: "MessageType" = betterproto.enum_field(1)
    quiz_id: str = betterproto.string_field(2)
    quiz_type: int = betterproto.int32_field(3)
    extra: str = betterproto.string_field(4)
    user_data_version: int = betterproto.int32_field(5)
    sponsor_code: str = betterproto.string_field(6)
    display_duration_ms: int = betterproto.int32_field(7)
    extra1: str = betterproto.string_field(51)
    extra2: str = betterproto.string_field(52)
    extra3: str = betterproto.string_field(53)
    extra4: str = betterproto.string_field(54)
    extra5: str = betterproto.string_field(55)


@dataclass(eq=False, repr=False)
class GiftActivityCreator(betterproto.Message):
    area_schema: str = betterproto.string_field(1)
    start_time: int = betterproto.int64_field(2)
    end_time: int = betterproto.int64_field(3)
    title: str = betterproto.string_field(4)
    sub_title: str = betterproto.string_field(5)
    background_color: str = betterproto.string_field(6)
    background: "ImageModel" = betterproto.message_field(7)
    gift_ids: List[int] = betterproto.int64_field(8)
    target_schema: str = betterproto.string_field(9)
    event_id: int = betterproto.int64_field(10)
    event_name: str = betterproto.string_field(11)
    entrance_name: str = betterproto.string_field(12)
    height: int = betterproto.int64_field(13)
    background_rtl: "ImageModel" = betterproto.message_field(14)
    override_gift_cardlets: Dict[int, "GiftPanelCardletByCreator"] = (
        betterproto.map_field(16, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE)
    )
    banner_type: int = betterproto.int32_field(17)
    extra: str = betterproto.string_field(18)


@dataclass(eq=False, repr=False)
class AgeRestrictedConfig(betterproto.Message):
    show: bool = betterproto.bool_field(1)
    disabled: bool = betterproto.bool_field(2)
    disabled_reason: str = betterproto.string_field(3)
    open: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class MemberInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    is_staged: bool = betterproto.bool_field(2)
    nickname: str = betterproto.string_field(3)
    avatar: "ImageModel" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class HighlightFragmentInfo(betterproto.Message):
    fragment_list: List["LiveFragmentDetail"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GiftInfoInBox(betterproto.Message):
    gift_id: int = betterproto.int64_field(1)
    effect_id: int = betterproto.int64_field(2)
    color_id: int = betterproto.int64_field(3)
    remain_times: int = betterproto.int32_field(4)
    asset: "AssetsModel" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class PollConf(betterproto.Message):
    gift_poll_limit: "PollCountLimit" = betterproto.message_field(1)
    use_new_gift_poll: bool = betterproto.bool_field(2)
    poll_template_optimize_group: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class RtcLiveVideoParam(betterproto.Message):
    strategy_id: int = betterproto.int32_field(1)
    server_define_param: "RtcVideoParam" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HeatUpdateContent(betterproto.Message):
    channel_id: int = betterproto.int64_field(1)
    from_user_id: int = betterproto.int64_field(2)
    updated_heat: int = betterproto.int64_field(3)
    update_source: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class MGetAbInfosReq(betterproto.Message):
    cdid_list: List[str] = betterproto.string_field(1)
    linkmic_scene: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class CohostAbTest(betterproto.Message):
    ab_test_type: Optional["CohostAbTestCohostAbTestType"] = betterproto.enum_field(
        1, optional=True
    )
    group: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class RealtimeLiveCenterShopData(betterproto.Message):
    show_shop_data: bool = betterproto.bool_field(1)
    revenue_amount: str = betterproto.string_field(2)
    unit_sales: int = betterproto.int64_field(3)
    buyers: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class CountdownStartResponse(betterproto.Message):
    data: "CountdownStartResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CountdownStartResponseResponseData(betterproto.Message):
    countdown_exists: bool = betterproto.bool_field(1)
    countdown_content: "CountdownContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class IntroConflictInfo(betterproto.Message):
    content: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class WebcastCommonToastMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    discardable: bool = betterproto.bool_field(2)
    immediate: bool = betterproto.bool_field(3)
    duration: int = betterproto.int32_field(4)
    text_color: str = betterproto.string_field(5)
    background_color_start: str = betterproto.string_field(6)
    background_color_end: str = betterproto.string_field(7)
    position: int = betterproto.int32_field(8)
    top_image: "ImageModel" = betterproto.message_field(9)
    image_width: int = betterproto.int32_field(10)
    image_height: int = betterproto.int32_field(11)
    show_mongolia_layer: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class GiftMonitorInfo(betterproto.Message):
    anchor_id: int = betterproto.int64_field(1)
    profit_api_message_dur: int = betterproto.int64_field(2)
    send_gift_profit_api_start_ms: int = betterproto.int64_field(3)
    send_gift_profit_core_start_ms: int = betterproto.int64_field(4)
    send_gift_req_start_ms: int = betterproto.int64_field(5)
    send_gift_send_message_success_ms: int = betterproto.int64_field(6)
    send_profit_api_dur: int = betterproto.int64_field(7)
    to_user_id: int = betterproto.int64_field(8)
    send_gift_start_client_local_ms: int = betterproto.int64_field(9)
    from_platform: str = betterproto.string_field(10)
    from_version: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class PlayTogetherMember(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    avatar: str = betterproto.string_field(2)
    nick_name: str = betterproto.string_field(3)
    apply_message: str = betterproto.string_field(4)
    apply_time: int = betterproto.int64_field(5)
    accept_time: int = betterproto.int64_field(6)
    relation_tag: str = betterproto.string_field(7)
    relation_tag_enum: Optional["PlayTogetherMemberPlayTogetherRelationTag"] = (
        betterproto.enum_field(8, optional=True)
    )


@dataclass(eq=False, repr=False)
class LinkUserState(betterproto.Message):
    user: "Player" = betterproto.message_field(1)
    linkmic_id: str = betterproto.string_field(2)
    pos: "MicPositionData" = betterproto.message_field(3)
    linked_time_nano: int = betterproto.int64_field(4)
    online_user_state: Optional["LinkUserStateOnlineUserState"] = (
        betterproto.enum_field(5, optional=True)
    )
    audio_muted: Optional["LinkUserStateMediaState"] = betterproto.enum_field(
        6, optional=True
    )
    video_muted: Optional["LinkUserStateMediaState"] = betterproto.enum_field(
        7, optional=True
    )
    rtc_connection: Optional["LinkUserStateRtcConnectionState"] = (
        betterproto.enum_field(8, optional=True)
    )
    network_state: Optional["LinkUserStateNetworkState"] = betterproto.enum_field(
        9, optional=True
    )
    avatar: "AvatarState" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class PermitJoinGroupResp(betterproto.Message):
    common_resp: "LinkMicCommonResp" = betterproto.message_field(1)
    group_rtc_info: List["RtcExtraInfo"] = betterproto.message_field(2)
    group_user: "GroupChannelAllUser" = betterproto.message_field(3)
    linked_user_ui_positions: List[str] = betterproto.string_field(4)
    cohost_resp_extra: "BizPermitJoinGroupResponse" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class ApplyBizContent(betterproto.Message):
    user: "User" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class InviteContent(betterproto.Message):
    inviter: "Player" = betterproto.message_field(1)
    invitee_r_t_c_info: "RtcExtraInfo" = betterproto.message_field(2)
    inviter_link_mic_id: str = betterproto.string_field(3)
    invitee_link_mic_id: str = betterproto.string_field(4)
    is_owner: bool = betterproto.bool_field(5)
    position_data: "MicPositionData" = betterproto.message_field(6)
    dsl: "DslConfig" = betterproto.message_field(7)
    invitee: "Player" = betterproto.message_field(8)
    operator: "Player" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class GoLiveEcIconInfo(betterproto.Message):
    has_ec_live_permission: bool = betterproto.bool_field(1)
    is_old_red_dot_logic: bool = betterproto.bool_field(2)
    display_ec_icon: bool = betterproto.bool_field(3)
    display_red_dot: bool = betterproto.bool_field(4)
    independent_display_ec_icon: bool = betterproto.bool_field(5)
    bubble_text: str = betterproto.string_field(6)
    bubble_metadata: "BubbleMetadata" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class GeckoAttr(betterproto.Message):
    gecko_channel: str = betterproto.string_field(1)
    file_name: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WebcastToastMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    display_duration: int = betterproto.int64_field(2)
    delay_duration: int = betterproto.int64_field(3)
    scene: "Scene" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class PopupStateChangeContent(betterproto.Message):
    other_users: List["JoinGroupMessageExtraRivalExtra"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastDonationStickerModifyMethod(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    decoration_list: List["DonationSticker"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LinkerCancelContent(betterproto.Message):
    inviter_uid: int = betterproto.int64_field(1)
    invitee_uid: int = betterproto.int64_field(2)
    cancel_type: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class GameLiveConvertInfo(betterproto.Message):
    convert_type: int = betterproto.int32_field(1)
    acu_type: int = betterproto.int32_field(2)
    title: str = betterproto.string_field(3)
    text: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class WebcastRoomMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    content: str = betterproto.string_field(2)
    supprot_landscape: bool = betterproto.bool_field(3)
    source: int = betterproto.int32_field(4)
    icon: "ImageModel" = betterproto.message_field(5)
    scene: "Scene" = betterproto.enum_field(6)
    is_welcome: bool = betterproto.bool_field(7)
    public_area_common: "PublicAreaMessageCommon" = betterproto.message_field(8)
    show_duration_ms: int = betterproto.int64_field(9)
    sub_scene: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class PrivilegePrompt(betterproto.Message):
    text: str = betterproto.string_field(1)
    placeholder_map: Dict[str, "PrivilegePlaceholder"] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class KickOutContent(betterproto.Message):
    left_user: "Player" = betterproto.message_field(1)
    kick_out_reason: Optional["KickOutContentKickoutReason"] = betterproto.enum_field(
        2, optional=True
    )
    linked_user_ui_positions: List[str] = betterproto.string_field(3)
    ui_pos: List["PosIdentity"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WebcastPollMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    poll_id: int = betterproto.int64_field(3)
    start_content: "PollStartContent" = betterproto.message_field(4)
    end_content: "PollEndContent" = betterproto.message_field(5)
    update_content: "PollUpdateVotesContent" = betterproto.message_field(6)
    poll_kind: Optional["WebcastPollMessagePollKind"] = betterproto.enum_field(
        7, optional=True
    )
    poll_basic_info: "PollBasicInfo" = betterproto.message_field(8)
    template_content: "TemplateContent" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class WebcastHighlightFragementReady(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    game_live_fragment: "GameLiveFragment" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GuestShowdownFinishToPunishmentParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    play_id: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class GetShowContentParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    show_id: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class GuessRound(betterproto.Message):
    title: "GuessText" = betterproto.message_field(1)
    round_id_str: str = betterproto.string_field(2)
    guess_options: List["GuessOptions"] = betterproto.message_field(3)
    win_option: str = betterproto.string_field(4)
    start_time: int = betterproto.int64_field(5)
    end_time: int = betterproto.int64_field(6)
    guess_status: Optional["GuessRoundGuessStatus"] = betterproto.enum_field(
        7, optional=True
    )
    room_id_str: str = betterproto.string_field(8)
    live_id: int = betterproto.int64_field(9)
    guess_round_stats: "GuessRoundStats" = betterproto.message_field(10)
    corrected_option: str = betterproto.string_field(11)
    anchor_id: str = betterproto.string_field(12)
    creator_id: str = betterproto.string_field(13)
    operator_id: str = betterproto.string_field(14)
    operator_name: str = betterproto.string_field(15)
    settle_finish_time: int = betterproto.int64_field(16)
    is_auto_pin: bool = betterproto.bool_field(17)
    server_time: int = betterproto.int64_field(100)


@dataclass(eq=False, repr=False)
class CountdownGetContentParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    countdown_ids: List[int] = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class FollowGuideResponse(betterproto.Message):
    data: "FollowGuideResponseResponseData" = betterproto.message_field(1)
    extra: "FollowGuideResponseExtra" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FollowGuideResponseResponseData(betterproto.Message):
    is_display: bool = betterproto.bool_field(1)
    display_list: List[int] = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class FollowGuideResponseExtra(betterproto.Message):
    now: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class AnchorSettingsResponse(betterproto.Message):
    data: "AnchorSettingsResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AnchorSettingsResponseResponseData(betterproto.Message):
    settings: "RoomBasicSettings" = betterproto.message_field(1)
    user_stats: "UserStats" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class BadgeText(betterproto.Message):
    key: str = betterproto.string_field(1)
    default_pattern: str = betterproto.string_field(2)
    pieces: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CommercialContentToggle(betterproto.Message):
    open_commercial_content_toggle: bool = betterproto.bool_field(1)
    promote_myself: bool = betterproto.bool_field(2)
    promote_third_party: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class RegionalRestricted(betterproto.Message):
    block_list: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueueInfo(betterproto.Message):
    queue_id: str = betterproto.string_field(1)
    status: int = betterproto.int32_field(2)
    queue_title: str = betterproto.string_field(3)
    member_count: int = betterproto.int64_field(4)
    current_user_id: str = betterproto.string_field(5)
    join_status: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class GuestShowdownCloseResponse(betterproto.Message):
    data: "GuestShowdownCloseResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GuestShowdownCloseResponseResponseData(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    play_content: "GuestShowdownContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastGiftPromptMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    title: str = betterproto.string_field(2)
    body: str = betterproto.string_field(3)
    block_num_days: int = betterproto.int32_field(4)
    order_id: str = betterproto.string_field(5)
    order_timestamp: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class TopicSetContent(betterproto.Message):
    action: int = betterproto.int32_field(1)
    channel_id: int = betterproto.int64_field(2)
    set_user_id: int = betterproto.int64_field(3)
    set_succ_time: int = betterproto.int64_field(4)
    enter_scene: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class ApplyRequestResponse(betterproto.Message):
    rtc_info: "RtcExtraInfo" = betterproto.message_field(2)
    applicant_link_mic_id: str = betterproto.string_field(3)
    multi_guest_resp_extra: "BizApplyResponse" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class AssetsModel(betterproto.Message):
    name: str = betterproto.string_field(1)
    resource_uri: str = betterproto.string_field(2)
    resource_model: "ResourceModel" = betterproto.message_field(4)
    describe: str = betterproto.string_field(5)
    id: int = betterproto.int64_field(6)
    resource_type: int = betterproto.int32_field(7)
    md5: str = betterproto.string_field(8)
    size: int = betterproto.int64_field(9)
    loki_extra_content: "LokiExtraContent" = betterproto.message_field(10)
    download_type: int = betterproto.int32_field(26)
    resource_byte_v_c1_model: "ResourceModel" = betterproto.message_field(28)
    bytevc1_md5: str = betterproto.string_field(29)
    video_resource_list: List["VideoResource"] = betterproto.message_field(30)
    face_recognition_archive_meta: "FaceRecognitionMeta" = betterproto.message_field(31)
    lynx_url_settings_key: str = betterproto.string_field(32)
    downgrade_resource_type: int = betterproto.int32_field(33)
    asset_extra: "AssetExtra" = betterproto.message_field(34)
    sticker_asset_variant: int = betterproto.int32_field(35)
    immediate_download: bool = betterproto.bool_field(36)
    sticker_asset_variant_reason: int = betterproto.int32_field(37)


@dataclass(eq=False, repr=False)
class LinkerKickOutContent(betterproto.Message):
    from_uid: int = betterproto.int64_field(1)
    kick_out_reason: Optional["LinkerKickOutContentKickoutReason"] = (
        betterproto.enum_field(2, optional=True)
    )


@dataclass(eq=False, repr=False)
class UserPlayInfo(betterproto.Message):
    play_id: int = betterproto.int64_field(1)
    play_scene: Optional["UserPlayInfoPlayScene"] = betterproto.enum_field(
        2, optional=True
    )
    score: int = betterproto.int64_field(3)
    rank: int = betterproto.int32_field(4)
    target_score: int = betterproto.int64_field(5)
    user_tag: Optional["UserPlayInfoPlayUserTag"] = betterproto.enum_field(
        6, optional=True
    )


@dataclass(eq=False, repr=False)
class ToplivePageItem(betterproto.Message):
    item_id: str = betterproto.string_field(1)
    item_name: str = betterproto.string_field(2)
    sub_items: List["ToplivePageItem"] = betterproto.message_field(3)
    room: "Room" = betterproto.message_field(10)
    enter_method: str = betterproto.string_field(11)
    related_live_number: int = betterproto.int32_field(12)
    default_bg_url: str = betterproto.string_field(13)
    light_bg_url: str = betterproto.string_field(14)
    dark_bg_url: str = betterproto.string_field(15)
    default_bg_color: str = betterproto.string_field(16)
    card_title: str = betterproto.string_field(17)
    card_type: str = betterproto.string_field(18)
    match_degree: int = betterproto.int32_field(19)
    light_bg_color: str = betterproto.string_field(20)
    dark_bg_color: str = betterproto.string_field(21)


@dataclass(eq=False, repr=False)
class GraceInfo(betterproto.Message):
    is_in_grace_period: bool = betterproto.bool_field(1)
    grace_end_time: int = betterproto.int64_field(2)
    is_package_deleted: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class PopProduct(betterproto.Message):
    title: str = betterproto.string_field(1)
    price: str = betterproto.string_field(2)
    image_url: str = betterproto.string_field(3)
    open_url: str = betterproto.string_field(4)
    product_type: str = betterproto.string_field(5)
    product_id: int = betterproto.int64_field(6)
    source: str = betterproto.string_field(7)
    source_from: int = betterproto.int32_field(8)
    schema: str = betterproto.string_field(9)
    platform: int = betterproto.int32_field(10)
    product_status: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class GetShowSettingsResponse(betterproto.Message):
    data: "GetShowSettingsResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetShowSettingsResponseResponseData(betterproto.Message):
    show_settings: "ShowConfig" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CompetitionContributorListResponse(betterproto.Message):
    data: "CompetitionContributorListResponseResponseData" = betterproto.message_field(
        1
    )


@dataclass(eq=False, repr=False)
class CompetitionContributorListResponseAnchorInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    score: int = betterproto.int64_field(2)
    formatted_score: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CompetitionContributorListResponseUserInfo(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    score: int = betterproto.int64_field(2)
    formatted_score: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CompetitionContributorListResponseResponseData(betterproto.Message):
    users: List["CompetitionContributorListResponseUserInfo"] = (
        betterproto.message_field(1)
    )
    anchor_info: "CompetitionContributorListResponseAnchorInfo" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class TaxonomyTagInfo(betterproto.Message):
    level1_tag: List[str] = betterproto.string_field(1)
    level2_tag: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class VoteUser(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    nick_name: str = betterproto.string_field(2)
    avatar_thumb: "ImageModel" = betterproto.message_field(3)
    vote_count: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class BarrageTypeUserGradeParam(betterproto.Message):
    current_grade: int = betterproto.int32_field(1)
    display_config: int = betterproto.int32_field(2)
    user_id: str = betterproto.string_field(3)
    user: "User" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class UnifyBaseActionData(betterproto.Message):
    unify_base_id: int = betterproto.int32_field(1)
    name: str = betterproto.string_field(2)
    business_id: str = betterproto.string_field(3)
    action: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class LiveGiftBoostCardRoomStatus(betterproto.Message):
    m_is_boosting: bool = betterproto.bool_field(1)
    m_expired_time: int = betterproto.int64_field(2)
    m_card_id: int = betterproto.int64_field(3)
    m_card_id_str: str = betterproto.string_field(4)
    m_task_id: str = betterproto.string_field(5)
    m_task_source: int = betterproto.int64_field(6)
    m_image_path: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class AnchorPair(betterproto.Message):
    source_anchor_id: int = betterproto.int64_field(1)
    target_anchor_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class BattleOptPair(betterproto.Message):
    opt_pair_info: "OptPairInfo" = betterproto.message_field(1)
    self_team_room_list: List["Room"] = betterproto.message_field(2)
    rival_team_room_list: List["Room"] = betterproto.message_field(3)
    play_type: int = betterproto.int32_field(4)
    invite_block_reason: int = betterproto.int32_field(5)
    is_in_linkmic: Dict[int, bool] = betterproto.map_field(
        6, betterproto.TYPE_INT64, betterproto.TYPE_BOOL
    )
    request_room_list: List[int] = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class LinkmicAudienceInviteGroupChatMemberGuide(betterproto.Message):
    group_member_user_ids: List[int] = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class TeamUser(betterproto.Message):
    team_id: int = betterproto.int64_field(1)
    user_ids: List[int] = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class MultiLiveContent(betterproto.Message):
    apply_i_m_content: "ApplyBizContent" = betterproto.message_field(1)
    invite_i_m_content: "InviteBizContent" = betterproto.message_field(2)
    reply_i_m_content: "ReplyBizContent" = betterproto.message_field(3)
    permit_i_m_content: "PermitBizContent" = betterproto.message_field(4)
    join_direct_i_m_content: "JoinDirectBizContent" = betterproto.message_field(5)
    kick_out_biz_content: "KickOutBizContent" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class ContentDisclosureSettings(betterproto.Message):
    open_commercial_content_toggle: int = betterproto.int32_field(1)
    promote_myself: int = betterproto.int32_field(2)
    promote_third_party: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class WebcastForceFetchRecommendationsMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    reasons: List[int] = betterproto.int64_field(10)
    fetch_within_ms: int = betterproto.int64_field(11)
    strategy_context: str = betterproto.string_field(100)


@dataclass(eq=False, repr=False)
class AboutMe(betterproto.Message):
    id: str = betterproto.string_field(1)
    audit_status: "AuditStatus" = betterproto.enum_field(2)
    switch_status: bool = betterproto.bool_field(3)
    user: "User" = betterproto.message_field(4)
    image: "ImageModel" = betterproto.message_field(5)
    template_list: List["AboutMeTemplate"] = betterproto.message_field(6)
    current_template_id: str = betterproto.string_field(7)
    audit_info: "AboutMeAuditInfo" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class AboutMeAuditInfo(betterproto.Message):
    violation_id: int = betterproto.int64_field(1)
    task_type: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class FeedItem(betterproto.Message):
    type: int = betterproto.int32_field(1)
    res_id: str = betterproto.string_field(2)
    banner_container: "FeedBannerContainer" = betterproto.message_field(6)
    is_recommend_card: bool = betterproto.bool_field(9)
    live_reason: str = betterproto.string_field(13)
    debug_info: str = betterproto.string_field(16)
    flare_info: "FlareInfo" = betterproto.message_field(17)
    anchor_relation_type: int = betterproto.int32_field(18)
    is_fresh: bool = betterproto.bool_field(19)
    drawer_game_tag: str = betterproto.string_field(20)
    live_event: "EventStruct" = betterproto.message_field(21)
    unfollow_watch_type_name: str = betterproto.string_field(22)
    sort_stats_tags: "SortStatsTags" = betterproto.message_field(23)
    room_event_tracking: str = betterproto.string_field(24)
    enter_method: str = betterproto.string_field(25)


@dataclass(eq=False, repr=False)
class WebcastGameGuessPinCardMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    view: "PinCardView" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DynamicRestriction(betterproto.Message):
    scenes: "SceneRestriction" = betterproto.message_field(1)
    receivers: List["ReceiverRestriction"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PlaybookEditorInfo(betterproto.Message):
    editor_type: str = betterproto.string_field(1)
    version: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class BizApplyResponseData(betterproto.Message):
    link_type_permission: int = betterproto.int64_field(1)
    perception_info: "WebcastPerceptionMessage" = betterproto.message_field(2)
    host_perception_info: "WebcastPerceptionMessage" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class BattleTriggerGuideResponse(betterproto.Message):
    data: "BattleTriggerGuideResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BattleTriggerGuideResponseResponseData(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WebcastLinkLayoutMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    room_id: int = betterproto.int64_field(3)
    channel_id: int = betterproto.int64_field(4)
    layout_id: str = betterproto.string_field(5)
    max_position: int = betterproto.int32_field(6)
    operator_user_info: "LinkerMediaChangeOperator" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class LinkerAcceptNoticeContent(betterproto.Message):
    from_user_id: int = betterproto.int64_field(1)
    from_room_id: int = betterproto.int64_field(2)
    to_user_id: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class WebcastGameOcrPingMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    ping_value: int = betterproto.int64_field(2)
    is_game: bool = betterproto.bool_field(3)
    game_fusion_label: str = betterproto.string_field(4)
    ping_timestamp: int = betterproto.int64_field(5)
    confidence: float = betterproto.double_field(6)


@dataclass(eq=False, repr=False)
class SpecialEffectCardInfo(betterproto.Message):
    card_name_key: str = betterproto.string_field(1)
    card_image: "ImageModel" = betterproto.message_field(2)
    send_time_sec: int = betterproto.int64_field(3)
    send_user: "BattleUserInfo" = betterproto.message_field(4)
    effect_last_duration: int = betterproto.int64_field(5)
    rule_url: str = betterproto.string_field(6)
    effect_time_sec: int = betterproto.int64_field(7)
    to_anchor_id: int = betterproto.int64_field(8)
    to_anchor_id_str: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class MsgNotifyComponentAvoidRuleV2(betterproto.Message):
    component_type: int = betterproto.int32_field(1)
    sub_component_type: int = betterproto.int32_field(2)
    can_be_interrupt: bool = betterproto.bool_field(3)
    first_recover_info: "MsgNotifyComponentRecoverInfo" = betterproto.message_field(4)
    interrupt_recover_info: "MsgNotifyComponentRecoverInfo" = betterproto.message_field(
        5
    )
    max_active_count: int = betterproto.int32_field(6)
    priority: int = betterproto.int64_field(7)
    avoid_scene: List[str] = betterproto.string_field(8)
    recover_threshold_ms: int = betterproto.int64_field(9)
    max_recover_remain_ms: int = betterproto.int64_field(10)


@dataclass(eq=False, repr=False)
class WallpaperContent(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    wallpaper_id: int = betterproto.int64_field(3)
    status: int = betterproto.int32_field(4)
    send_timestamp: int = betterproto.int64_field(5)
    play_user_id: int = betterproto.int64_field(6)
    wallpaper_url: str = betterproto.string_field(7)
    finished_user_list: List["WallpaperContext"] = betterproto.message_field(8)
    play_user_list: List["WallpaperContext"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class WebcastAnchorGrowLevelMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    anchor_grow_level_im_msg: "AnchorGrowLevelImMsg" = betterproto.message_field(2)
    anchor_grow_level_im_msg_v2: "AnchorGrowLevelImMsgV2" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class RefreshLiveBagInfo(betterproto.Message):
    refresh_live_bag_types: List[int] = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class FirstChargeGuideEffectRule(betterproto.Message):
    guide_effect_rule: bool = betterproto.bool_field(1)
    enter_room_show_time: List[int] = betterproto.int32_field(2)
    pk_room_show_time: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class RoomBasicSettings(betterproto.Message):
    comment_switch_settings: "CommentSwitchSettings" = betterproto.message_field(1)
    content_disclosure_settings: "ContentDisclosureSettings" = (
        betterproto.message_field(2)
    )
    age_restriction_settings: "AgeRestrictionSettings" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class BattleBaseUserInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    nick_name: str = betterproto.string_field(2)
    avatar_thumb: "ImageModel" = betterproto.message_field(3)
    display_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class LinkerReplyContent(betterproto.Message):
    inviter_uid: int = betterproto.int64_field(1)
    inviter_room_id: int = betterproto.int64_field(2)
    inviter_linkmic_info: "LinkmicInfo" = betterproto.message_field(3)
    invitee_uid: int = betterproto.int64_field(4)
    invitee_linkmic_info: "LinkmicInfo" = betterproto.message_field(5)
    link_type: int = betterproto.int64_field(6)
    reply_status: "ReplyStatus" = betterproto.enum_field(7)
    linker_setting: "LinkerSetting" = betterproto.message_field(8)
    inviter_user: "User" = betterproto.message_field(9)
    invitee_user: "User" = betterproto.message_field(10)
    rtc_ext_info_map: Dict[int, str] = betterproto.map_field(
        11, betterproto.TYPE_INT64, betterproto.TYPE_STRING
    )
    invitee_mic_idx_update_info: "LinkerMicIdxUpdateInfo" = betterproto.message_field(
        12
    )
    applier_mic_idx_info_map: Dict[int, int] = betterproto.map_field(
        13, betterproto.TYPE_INT64, betterproto.TYPE_INT64
    )
    multi_live_layout_enable: Optional["LinkerReplyContentLinkmicMultiLiveEnum"] = (
        betterproto.enum_field(14, optional=True)
    )
    multi_live_setting: "MultiLiveAnchorPanelSettings" = betterproto.message_field(15)
    action_id: int = betterproto.int64_field(16)
    linked_users: List["LinkmicUserInfo"] = betterproto.message_field(17)
    source_type: int = betterproto.int64_field(18)


@dataclass(eq=False, repr=False)
class CountdownForAllUser(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    linkmic_id: str = betterproto.string_field(2)
    score: int = betterproto.int64_field(3)
    rank: int = betterproto.int32_field(4)
    user: "User" = betterproto.message_field(5)
    nickname: str = betterproto.string_field(6)
    display_id: str = betterproto.string_field(7)
    avatar_thumb: "ImageModel" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class SubOperation(betterproto.Message):
    operation_type: Optional["SubOperationSubOperationType"] = betterproto.enum_field(
        1, optional=True
    )
    operation_time: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class BarrageTypeSubscribeGiftParam(betterproto.Message):
    gift_sub_count: int = betterproto.int64_field(1)
    show_gift_sub_count: bool = betterproto.bool_field(2)
    gift_source: Optional["BarrageTypeSubscribeGiftParamGiftSource"] = (
        betterproto.enum_field(3, optional=True)
    )


@dataclass(eq=False, repr=False)
class CountdownForAllConfig(betterproto.Message):
    duration: int = betterproto.int64_field(1)
    target_score: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class CompetitionFinish(betterproto.Message):
    competition_finish_time: int = betterproto.int64_field(1)
    reason: Optional["CompetitionFinishCompetitionEndReason"] = betterproto.enum_field(
        2, optional=True
    )
    leave_user: "CompetitionUserBase" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AnchorInfoResponse(betterproto.Message):
    data: "AnchorInfoResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AnchorInfoResponseCameraPartnershipInfo(betterproto.Message):
    permission: bool = betterproto.bool_field(1)
    task_permission: bool = betterproto.bool_field(2)
    publish_permission: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class AnchorInfoResponseDropsBrief(betterproto.Message):
    drops_id: str = betterproto.string_field(1)
    icon: str = betterproto.string_field(2)
    begin_timestamp: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class AnchorInfoResponseDropsEntrance(betterproto.Message):
    permission: bool = betterproto.bool_field(1)
    has_sign: bool = betterproto.bool_field(2)
    rewarded: bool = betterproto.bool_field(3)
    icon: str = betterproto.string_field(4)
    drops_count: int = betterproto.int64_field(5)
    recent_drops_briefs: List["AnchorInfoResponseDropsBrief"] = (
        betterproto.message_field(6)
    )


@dataclass(eq=False, repr=False)
class AnchorInfoResponseLabelFilterInfo(betterproto.Message):
    gpppa_account: bool = betterproto.bool_field(1)
    gpppa_ban_text: str = betterproto.string_field(2)
    gpppa_ban_toast: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class AnchorInfoResponsePartnershipInfo(betterproto.Message):
    permission: bool = betterproto.bool_field(1)
    has_sign: bool = betterproto.bool_field(2)
    task_permission: bool = betterproto.bool_field(3)
    publish_permission: bool = betterproto.bool_field(4)
    partnership_info_update_timestamp: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class AnchorInfoResponseTaskPriceUpdate(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    price_update_timestamp: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class AnchorInfoResponsePunishInfo(betterproto.Message):
    punish_text: str = betterproto.string_field(1)
    punish_event_info: "PunishEventInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AnchorInfoResponseToggleInfo(betterproto.Message):
    game_tag_id: int = betterproto.int64_field(1)
    toggle_status: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class AnchorInfoResponseResponseData(betterproto.Message):
    punish_info: List["AnchorInfoResponsePunishInfo"] = betterproto.message_field(1)
    price_update_list: List["AnchorInfoResponseTaskPriceUpdate"] = (
        betterproto.message_field(2)
    )
    label_filter_info: "AnchorInfoResponseLabelFilterInfo" = betterproto.message_field(
        3
    )
    taxpayoutconfirm: bool = betterproto.bool_field(4)
    enable_event_list: List["PartnershipGameEvent"] = betterproto.message_field(5)
    enable_drops_list: List["PartnershipBriefDrops"] = betterproto.message_field(6)
    toggle_status: int = betterproto.int32_field(7)
    shoot_permission: bool = betterproto.bool_field(8)
    business_partnership: bool = betterproto.bool_field(9)
    drops_entrance: "AnchorInfoResponseDropsEntrance" = betterproto.message_field(10)
    partnership_info: "AnchorInfoResponsePartnershipInfo" = betterproto.message_field(
        11
    )
    toggle_info: "AnchorInfoResponseToggleInfo" = betterproto.message_field(12)
    live_take_decouple: bool = betterproto.bool_field(13)
    camera_partnership_info: "AnchorInfoResponseCameraPartnershipInfo" = (
        betterproto.message_field(14)
    )


@dataclass(eq=False, repr=False)
class TimerDetail(betterproto.Message):
    timer_id: int = betterproto.int64_field(1)
    anchor_id: int = betterproto.int64_field(2)
    start_timestamp_s: int = betterproto.int64_field(3)
    start_countdown_time_s: int = betterproto.int64_field(4)
    anchor_side_title: str = betterproto.string_field(5)
    user_side_title: str = betterproto.string_field(6)
    time_increase_per_sub_s: int = betterproto.int64_field(7)
    time_increase_cap_s: int = betterproto.int64_field(8)
    sub_count: int = betterproto.int32_field(9)
    time_increase_reach_cap: bool = betterproto.bool_field(10)
    total_pause_time_s: int = betterproto.int64_field(11)
    last_pause_timestamp_s: int = betterproto.int64_field(12)
    total_time_s: int = betterproto.int64_field(13)
    remaining_time_s: int = betterproto.int64_field(14)
    timestamp_s: int = betterproto.int64_field(15)
    sticker_x: int = betterproto.int64_field(16)
    sticker_y: int = betterproto.int64_field(17)
    screen_w: int = betterproto.int64_field(18)
    screen_h: int = betterproto.int64_field(19)
    timer_status: Optional["TimerDetailTimerStatus"] = betterproto.enum_field(
        20, optional=True
    )
    antidirt_status: Optional["TimerDetailAntidirtStatus"] = betterproto.enum_field(
        21, optional=True
    )
    audit_status: "TimerDetailAuditStatus" = betterproto.enum_field(22)
    audit_info: "TimerDetailAuditInfo" = betterproto.message_field(23)


@dataclass(eq=False, repr=False)
class TimerDetailAuditInfo(betterproto.Message):
    violation_id: int = betterproto.int64_field(1)
    task_type: Optional["TimerDetailAuditInfoAuditTaskType"] = betterproto.enum_field(
        2, optional=True
    )


@dataclass(eq=False, repr=False)
class SpecifiedDisplayText(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    display_text: "Text" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CompetitionSettlementStartResponse(betterproto.Message):
    data: "CompetitionSettlementStartResponseResponseData" = betterproto.message_field(
        1
    )


@dataclass(eq=False, repr=False)
class CompetitionSettlementStartResponseResponseData(betterproto.Message):
    biz_common: "CompetitionCommon" = betterproto.message_field(1)
    settle_start: "CompetitionSettleStart" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CommonCardInfo(betterproto.Message):
    card_name_key: str = betterproto.string_field(1)
    card_image: "ImageModel" = betterproto.message_field(2)
    send_time_sec: int = betterproto.int64_field(3)
    send_user: "BattleUserInfo" = betterproto.message_field(4)
    effect_last_duration: int = betterproto.int64_field(5)
    rule_url: str = betterproto.string_field(6)
    effect_time_sec: int = betterproto.int64_field(7)
    to_anchor_id: int = betterproto.int64_field(8)
    to_anchor_id_str: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class GameGiftGuideKeywordsConfig(betterproto.Message):
    game_gift_guide_keyword_config: List["GameGiftGuideKeyword"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class CountdownGetUserHistoryParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    user_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class ExemptStrategy(betterproto.Message):
    exempt_both_host: bool = betterproto.bool_field(1)
    exempt_audience_top: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class AggregationData(betterproto.Message):
    audience: "User" = betterproto.message_field(1)
    successlist: List[int] = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class Panel(betterproto.Message):
    text: str = betterproto.string_field(1)
    icon: "UrlDataStruct" = betterproto.message_field(2)
    tags: List[str] = betterproto.string_field(3)
    tags_updated_at: str = betterproto.string_field(4)
    extra: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class CurrencyPriceItem(betterproto.Message):
    currency: str = betterproto.string_field(1)
    price_show_form: str = betterproto.string_field(2)
    price: int = betterproto.int64_field(3)
    original_price: int = betterproto.int32_field(4)
    price_dot: int = betterproto.int32_field(5)
    keep_dot: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class QuizFinalResult(betterproto.Message):
    message_type: "MessageType" = betterproto.enum_field(1)
    quiz_id: str = betterproto.string_field(2)
    quiz_type: int = betterproto.int32_field(3)
    extra: str = betterproto.string_field(4)
    settled_reward: List["QuizRewardRule"] = betterproto.message_field(5)
    next_quiz: List["QuizNextQuiz"] = betterproto.message_field(6)
    reward_amount: str = betterproto.string_field(7)
    question_count: int = betterproto.int32_field(8)
    anchor_list: List["QuizAnchorInfo"] = betterproto.message_field(9)
    sponsor_code: str = betterproto.string_field(10)
    display_duration_ms: int = betterproto.int32_field(11)
    extra1: str = betterproto.string_field(51)
    extra2: str = betterproto.string_field(52)
    extra3: str = betterproto.string_field(53)
    extra4: str = betterproto.string_field(54)
    extra5: str = betterproto.string_field(55)


@dataclass(eq=False, repr=False)
class ChangeStateReq(betterproto.Message):
    common: "StateReqCommon" = betterproto.message_field(1)
    state_type: int = betterproto.int32_field(2)
    client_time: int = betterproto.int64_field(3)
    layout_state: "LayoutState" = betterproto.message_field(4)
    online_user_state: int = betterproto.int32_field(5)
    audio_muted: int = betterproto.int32_field(6)
    video_muted: int = betterproto.int32_field(7)
    network_state: int = betterproto.int32_field(8)
    background_sticker_id: str = betterproto.string_field(9)
    avatar_id: int = betterproto.int64_field(10)


@dataclass(eq=False, repr=False)
class WebcastCaptionMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    timestamp_ms: int = betterproto.int64_field(2)
    duration_ms: int = betterproto.int64_field(3)
    content: List["CaptionContent"] = betterproto.message_field(4)
    sentence_id: int = betterproto.int64_field(5)
    sequence_id: int = betterproto.int64_field(6)
    definite: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class AssetExtra(betterproto.Message):
    effect_starling_key: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CampaignBannerDisplay(betterproto.Message):
    image_url: str = betterproto.string_field(1)
    campaign_banner_is_display: bool = betterproto.bool_field(2)
    source_from: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class GetMultiGuestRecommendRoomsResponse(betterproto.Message):
    data: "GetMultiGuestRecommendRoomsResponseResponseData" = betterproto.message_field(
        1
    )
    extra: "GetMultiGuestRecommendRoomsResponseExtra" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetMultiGuestRecommendRoomsResponseResponseData(betterproto.Message):
    reco_rooms: List["MultiGuestRecommendRoomInfo"] = betterproto.message_field(1)
    is_rate_limited: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GetMultiGuestRecommendRoomsResponseExtra(betterproto.Message):
    now: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class GiftPollOption(betterproto.Message):
    gift_id: int = betterproto.int64_field(1)
    result_image: "ImageModel" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LinkInviteResult(betterproto.Message):
    channel_id: int = betterproto.int64_field(1)
    vendor: int = betterproto.int32_field(2)
    channel_id_str: str = betterproto.string_field(3)
    scene: "Scene" = betterproto.enum_field(4)
    rtc_join_channel: bool = betterproto.bool_field(5)
    rtc_ext_info: str = betterproto.string_field(6)
    link_mic_id_str: str = betterproto.string_field(7)
    rtc_push_stream: bool = betterproto.bool_field(8)
    action_id: int = betterproto.int64_field(9)
    rivals_link_mic_id_str: str = betterproto.string_field(10)
    perception_status: int = betterproto.int32_field(11)
    perception_message: "WebcastPerceptionMessage" = betterproto.message_field(12)
    extra: "InviteExtra" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class LyricStruct(betterproto.Message):
    id: int = betterproto.int64_field(1)
    lyric_type: int = betterproto.int32_field(2)
    vid: str = betterproto.string_field(3)
    klyric_urls: List[str] = betterproto.string_field(4)
    lyric_status: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class WebcastLinkMicSignalingMethod(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    signal: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PanelRefresh(betterproto.Message):
    price: int = betterproto.int64_field(2)
    to_user_id: int = betterproto.int64_field(3)
    room_id: int = betterproto.int64_field(4)
    timestamp: int = betterproto.int64_field(5)
    gallery_data: "PanelRefreshGallery" = betterproto.message_field(100)
    user_level: "PanelRefreshUserLevel" = betterproto.message_field(101)
    fan_club: "PanelRefreshFanClub" = betterproto.message_field(102)
    all_gallery_data: List["PanelRefreshGallery"] = betterproto.message_field(103)


@dataclass(eq=False, repr=False)
class PanelRefreshFanClub(betterproto.Message):
    time_to_sleep: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class PanelRefreshGallery(betterproto.Message):
    sponsor_id: int = betterproto.int64_field(1)
    light_gift_up: bool = betterproto.bool_field(2)
    left_count_to_sponsor: int = betterproto.int64_field(3)
    can_sponsor: bool = betterproto.bool_field(4)
    goal_count: int = betterproto.int64_field(5)
    is_gallery_available: bool = betterproto.bool_field(6)
    gift_id: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class PanelRefreshUserLevel(betterproto.Message):
    current_score: int = betterproto.int64_field(1)
    current_level: int = betterproto.int64_field(2)
    score_left_to_level: int = betterproto.int64_field(3)
    is_upgrade: bool = betterproto.bool_field(4)
    did_user_opt_out: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class BizCreateChannelResponseData(betterproto.Message):
    multi_live_anchor_panel_settings: "MultiLiveAnchorPanelSettings" = (
        betterproto.message_field(1)
    )
    last_layout_settings: List["LastLayoutSetting"] = betterproto.message_field(5)
    background_sticker_id: str = betterproto.string_field(6)
    share_revenue_setting: int = betterproto.int32_field(7)
    display_empty_seat: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class LinkedUserInfo(betterproto.Message):
    layout_id: str = betterproto.string_field(1)
    user_id: int = betterproto.int64_field(2)
    channel_id: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class SkinHostAccount(betterproto.Message):
    bg_image: "ImageModel" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastEnvelopePortalMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    portal_info: "WebcastEnvelopePortalMessagePortalInfo" = betterproto.message_field(2)
    portal_trans_target: "WebcastEnvelopePortalMessagePortalTransTarget" = (
        betterproto.message_field(3)
    )
    portal_view: int = betterproto.int32_field(4)
    portal_display: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class WebcastEnvelopePortalMessagePortalInfo(betterproto.Message):
    id: str = betterproto.string_field(1)
    idc: str = betterproto.string_field(2)
    send_at_second: int = betterproto.int32_field(3)
    ddl_second: int = betterproto.int32_field(4)
    envelope_diamonds: int = betterproto.int32_field(5)
    portal_diamonds: int = betterproto.int32_field(6)
    sender_display_id: str = betterproto.string_field(7)
    sender_id: str = betterproto.string_field(8)
    sender_avatar: "ImageModel" = betterproto.message_field(9)
    trans_count: int = betterproto.int32_field(10)
    touch_count: int = betterproto.int32_field(11)


@dataclass(eq=False, repr=False)
class WebcastEnvelopePortalMessagePortalTransTarget(betterproto.Message):
    room_id: str = betterproto.string_field(1)
    send_room_cover: "ImageModel" = betterproto.message_field(2)
    anchor_display_id: str = betterproto.string_field(3)
    anchor_id: str = betterproto.string_field(4)
    anchor_avatar: "ImageModel" = betterproto.message_field(5)
    envelope_diamonds: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class WebcastCohostReserveMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    reserve_type: int = betterproto.int32_field(2)
    reservation_id: int = betterproto.int64_field(3)
    reserve_content: "ReserveContent" = betterproto.message_field(4)
    reply_content: "ReplyContent" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class MsgMeta(betterproto.Message):
    source_operate_ms: int = betterproto.int64_field(1)
    server_send_ms: int = betterproto.int64_field(2)
    reasons: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class SubscriptionInfo(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    total_subscribers: int = betterproto.int32_field(2)
    sub_months: int = betterproto.int32_field(3)
    subscription_type: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class CommerceStruct(betterproto.Message):
    commerce_permission: int = betterproto.int32_field(1)
    oec_init_data_string: str = betterproto.string_field(2)
    async_load: bool = betterproto.bool_field(3)
    product_num: int = betterproto.int64_field(4)
    use_new_promotion: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class WebcastBaLeadGenMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    op: int = betterproto.int32_field(2)
    page_id: int = betterproto.int64_field(3)
    op_time: int = betterproto.int64_field(4)
    cta_text: str = betterproto.string_field(5)
    schema: str = betterproto.string_field(6)
    pin_period: int = betterproto.int32_field(7)
    card_intro: str = betterproto.string_field(8)
    card_button_text: str = betterproto.string_field(9)
    card_title: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class AnchorLiveReplayFrameResponse(betterproto.Message):
    data: "AnchorLiveReplayFrameResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AnchorLiveReplayFrameResponseResponseData(betterproto.Message):
    req_id: str = betterproto.string_field(1)
    frame_list: List["FrameInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BattlePrompt(betterproto.Message):
    prompt_key: str = betterproto.string_field(1)
    prompt_elements: List["BattlePromptElem"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GroupPlayer(betterproto.Message):
    channel_id: int = betterproto.int64_field(1)
    user: "Player" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastLinkMicArmies(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    battle_id: int = betterproto.int64_field(2)
    armies: Dict[int, "BattleUserArmies"] = betterproto.map_field(
        3, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    channel_id: int = betterproto.int64_field(4)
    gift_sent_time: int = betterproto.int64_field(5)
    score_update_time: int = betterproto.int64_field(6)
    trigger_reason: Optional["WebcastLinkMicArmiesTriggerReason"] = (
        betterproto.enum_field(7, optional=True)
    )
    from_user_id: int = betterproto.int64_field(8)
    gift_id: int = betterproto.int64_field(9)
    gift_count: int = betterproto.int32_field(10)
    gif_icon_image: "ImageModel" = betterproto.message_field(11)
    total_diamond_count: int = betterproto.int32_field(12)
    repeat_count: int = betterproto.int32_field(13)
    team_armies: List["BattleTeamUserArmies"] = betterproto.message_field(14)
    trigger_critical_strike: bool = betterproto.bool_field(15)
    has_team_match_mvp_sfx: bool = betterproto.bool_field(16)
    log_id: str = betterproto.string_field(17)
    battle_settings: "BattleSetting" = betterproto.message_field(18)
    fuzzy_display_config_v2: "HighScoreControlCfg" = betterproto.message_field(19)


@dataclass(eq=False, repr=False)
class MultiGuestPushResp(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class SimpleUser(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    nickname: str = betterproto.string_field(2)
    display_id: str = betterproto.string_field(3)
    avatar_thumb: "ImageModel" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WallpaperReplyResponse(betterproto.Message):
    data: "WallpaperReplyResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WallpaperReplyResponseResponseData(betterproto.Message):
    result: bool = betterproto.bool_field(1)
    wallpaper_content: "WallpaperContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class StreamStatusChangeInfo(betterproto.Message):
    stream_id: int = betterproto.int64_field(1)
    pre_status: int = betterproto.int32_field(2)
    cur_status: int = betterproto.int32_field(3)
    change_timestamp: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class WebcastPictionaryEndMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    round_id: int = betterproto.int64_field(2)
    word: str = betterproto.string_field(3)
    end_type: int = betterproto.int32_field(4)
    pictionary_type: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class BefViewRenderSize(betterproto.Message):
    with_: int = betterproto.int32_field(1)
    height: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class StreamGoalData(betterproto.Message):
    indicator: "LiveStreamGoalIndicator" = betterproto.message_field(1)
    goal: "LiveStreamGoal" = betterproto.message_field(2)
    update_source: int = betterproto.int32_field(3)
    goal_extra: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class EnlargePositionStatusSynContent(betterproto.Message):
    is_enlarge: int = betterproto.int32_field(1)
    target_position: str = betterproto.string_field(2)
    scene: "Scene" = betterproto.enum_field(3)
    operator_info: "LinkerMediaChangeOperator" = betterproto.message_field(4)
    layout_id: str = betterproto.string_field(5)
    linked_user_ui_positions: List[str] = betterproto.string_field(6)
    enlarged_positions: List["PosIdentity"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class WebcastRoomNotifyMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    schema: str = betterproto.string_field(2)
    notify_type: int = betterproto.int64_field(3)
    content: str = betterproto.string_field(4)
    user: "User" = betterproto.message_field(5)
    extra: "RoomNotifyMessageExtra" = betterproto.message_field(6)
    notify_class: int = betterproto.int32_field(7)
    flex_setting: List[int] = betterproto.int64_field(8)
    source: str = betterproto.string_field(9)
    from_user_id: int = betterproto.int64_field(10)
    log_extra: "PrivilegeLogExtra" = betterproto.message_field(11)
    to_anchor_id: int = betterproto.int64_field(12)
    event_tracking: "EventTracking" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class GroupChangeContent(betterproto.Message):
    group_user: "GroupChannelAllUser" = betterproto.message_field(1)
    linked_user_ui_positions: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ShowAgainGuestParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    show_id: int = betterproto.int64_field(3)
    target_user_id: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class GameEmotesTab(betterproto.Message):
    can_use_guessing_emotes: bool = betterproto.bool_field(1)
    game_emote_config: "GameEmoteConfig" = betterproto.message_field(2)
    usable_guessing_emotes: "EmoteListResult" = betterproto.message_field(3)
    unusable_guessing_emotes: "EmoteListResult" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ActivitiesIconInfo(betterproto.Message):
    activity_id: str = betterproto.string_field(1)
    icon_image: "ImageModel" = betterproto.message_field(2)
    ab_group: int = betterproto.int64_field(3)
    curren_phase: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class BusinessContent(betterproto.Message):
    over_length: int = betterproto.int64_field(1)
    multi_live_content: "MultiLiveContent" = betterproto.message_field(100)
    cohost_content: "CohostContent" = betterproto.message_field(200)


@dataclass(eq=False, repr=False)
class RandomGiftPanelBanner(betterproto.Message):
    shading_image: "ImageModel" = betterproto.message_field(2)
    target_num: int = betterproto.int64_field(3)
    collect_num: int = betterproto.int64_field(4)
    display_text: str = betterproto.string_field(5)
    left_icon: "ImageModel" = betterproto.message_field(6)
    schema_url: str = betterproto.string_field(7)
    bg_colors: List[str] = betterproto.string_field(8)
    round: int = betterproto.int64_field(9)
    banner_priority: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class CohostStreamConfig(betterproto.Message):
    screen_share_stream_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class AnchorGrowLevelImMsgNotification(betterproto.Message):
    level: int = betterproto.int64_field(1)
    is_final_level: bool = betterproto.bool_field(2)
    is_complete_level: bool = betterproto.bool_field(3)
    task_id: int = betterproto.int64_field(4)
    content: str = betterproto.string_field(5)
    starling_key: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class CheckPermissionResponse(betterproto.Message):
    multi_host_permission: bool = betterproto.bool_field(4)
    anchor_onboard_permit: bool = betterproto.bool_field(5)
    anchor_punished: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class MultiGuestPlayInfo(betterproto.Message):
    pack_succ_flag: bool = betterproto.bool_field(1)
    play_scene_to_config_map: Dict[str, "MultiGuestPlayInfoMultiGuestPlayConfig"] = (
        betterproto.map_field(2, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE)
    )


@dataclass(eq=False, repr=False)
class MultiGuestPlayInfoMultiGuestPlayConfig(betterproto.Message):
    play_scene: int = betterproto.int32_field(1)
    feature_config_map: Dict[str, int] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_INT32
    )


@dataclass(eq=False, repr=False)
class WebcastFansEventMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    user: "User" = betterproto.message_field(2)
    event_type: Optional["WebcastFansEventMessageFansEventType"] = (
        betterproto.enum_field(11, optional=True)
    )
    fans_level_info: "FansLevelInfo" = betterproto.message_field(12)
    fans_level_upgrade_info: "FansLevelUpgradeInfo" = betterproto.message_field(13)
    data: "FansEventData" = betterproto.message_field(21)


@dataclass(eq=False, repr=False)
class CompetitionContributorInfo(betterproto.Message):
    user: "CompetitionUserBase" = betterproto.message_field(1)
    score: int = betterproto.int64_field(2)
    avatar: "ImageModel" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class LeaveRequestResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WarningTag(betterproto.Message):
    text: "Text" = betterproto.message_field(1)
    duration: int = betterproto.int64_field(2)
    tag_source: int = betterproto.int32_field(3)
    punish_info: "PunishEventInfo" = betterproto.message_field(4)
    style: int = betterproto.int32_field(5)
    detail_url: str = betterproto.string_field(6)
    icon_type: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class BattleNoticeExtremeHighScoreNotice(betterproto.Message):
    battle_id: int = betterproto.int64_field(1)
    display_text_origin_viewers: "Text" = betterproto.message_field(2)
    display_text_unrelated_viewers: "Text" = betterproto.message_field(3)
    extreme_high_score_threshold: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class HotTag(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    hot_count: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class BattleInviteeGiftPermission(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    gift_permission_type: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class PreviewProductCardInfo(betterproto.Message):
    recommend_info: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PlayTogetherListChangeContent(betterproto.Message):
    apply_list_members: List["PlayTogetherMember"] = betterproto.message_field(1)
    history_list_members: List["PlayTogetherMember"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AnchorMessage(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    link_mic_id: str = betterproto.string_field(2)
    rtc_status: int = betterproto.int32_field(3)
    status: int = betterproto.int32_field(4)
    source: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class ContentPosition(betterproto.Message):
    content_i_d: str = betterproto.string_field(1)
    content_type: Optional["ContentPositionContentPositionType"] = (
        betterproto.enum_field(2, optional=True)
    )
    pos: "MicPositionData" = betterproto.message_field(3)
    content_linkmic_i_d: str = betterproto.string_field(4)
    start_time_nano: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class LiveFragmentDetail(betterproto.Message):
    mp4_video_meta_info: "VideoMetaInfo" = betterproto.message_field(34)


@dataclass(eq=False, repr=False)
class FlyingMicResources(betterproto.Message):
    path_image: "ImageModel" = betterproto.message_field(1)
    mic_image: "ImageModel" = betterproto.message_field(2)
    transition_configs: List["TransitionConfig"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AnchorGrowPerLiveTriggerResponse(betterproto.Message):
    data: "AnchorGrowPerLiveTriggerResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AnchorGrowPerLiveTriggerResponseData(betterproto.Message):
    anchor_grow_level_info: "AnchorGrowLevelTriggerInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PushStreamInfo(betterproto.Message):
    default_quality: "PushStreamInfoQuality" = betterproto.message_field(1)
    quality_list: List["PushStreamInfoQuality"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PushStreamInfoQuality(betterproto.Message):
    name: str = betterproto.string_field(1)
    sdk_key: str = betterproto.string_field(2)
    desc: str = betterproto.string_field(3)
    width: int = betterproto.int64_field(4)
    height: int = betterproto.int64_field(5)
    max_bitrate: int = betterproto.int64_field(6)
    min_bitrate: int = betterproto.int64_field(7)
    default_bitrate: int = betterproto.int64_field(8)
    fps: int = betterproto.int64_field(9)


@dataclass(eq=False, repr=False)
class CountdownStartParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    countdown_config: "CountdownConfig" = betterproto.message_field(3)
    user_id: int = betterproto.int64_field(4)
    linkmic_id: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class PollCountLimit(betterproto.Message):
    max_poll_count: int = betterproto.int64_field(1)
    current_poll_count: int = betterproto.int64_field(2)
    unlimited: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class TextBadge(betterproto.Message):
    badge_display_type: Optional["TextBadgeBadgeDisplayType"] = betterproto.enum_field(
        1, optional=True
    )
    key: str = betterproto.string_field(2)
    default_pattern: str = betterproto.string_field(3)
    pieces: List[str] = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ReserveInfo(betterproto.Message):
    reservation_id: int = betterproto.int64_field(1)
    is_reservation_sender: bool = betterproto.bool_field(2)
    accept_appointment_cnts: int = betterproto.int64_field(3)
    reservation_anchor_cnts: int = betterproto.int64_field(4)
    display_user_list: List["ReserveInfoReserveUser"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class ReserveInfoReserveUser(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    room_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class BattleTaskGiftAmountGuide(betterproto.Message):
    guide_prompt: "BattlePrompt" = betterproto.message_field(1)
    prompt_type: int = betterproto.int32_field(2)
    disappear_duration: int = betterproto.int32_field(3)
    icon_image: "ImageModel" = betterproto.message_field(11)
    gift_image: "ImageModel" = betterproto.message_field(12)
    recommend_gift_id: int = betterproto.int64_field(21)
    recommend_gift_count: int = betterproto.int32_field(22)
    guide_content: "Text" = betterproto.message_field(23)


@dataclass(eq=False, repr=False)
class ReqItem(betterproto.Message):
    scene: "Scene" = betterproto.enum_field(1)
    dispersion_param: "DispersionParam" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastKaraokeQueueMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    type: int = betterproto.int32_field(2)
    song: "KaraokeSong" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class BattleTaskUpdate(betterproto.Message):
    task_progress: int = betterproto.int64_field(1)
    from_user_uid: int = betterproto.int64_field(2)
    prompt_key: str = betterproto.string_field(3)
    log_id: str = betterproto.string_field(21)


@dataclass(eq=False, repr=False)
class LikeEffect(betterproto.Message):
    version: int = betterproto.int64_field(1)
    effect_cnt: int = betterproto.int64_field(2)
    effect_interval_ms: int = betterproto.int64_field(3)
    level: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class AnchorToolModification(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    user_id: int = betterproto.int64_field(2)
    effect_id: int = betterproto.int64_field(3)
    name: str = betterproto.string_field(4)
    resource_id: str = betterproto.string_field(5)
    modification_type: int = betterproto.int32_field(6)
    role: int = betterproto.int64_field(7)
    msg_type: int = betterproto.int32_field(8)
    sub_type: int = betterproto.int64_field(9)
    start_time: int = betterproto.int64_field(10)
    end_time: int = betterproto.int64_field(11)
    duration: int = betterproto.int64_field(12)
    tab: str = betterproto.string_field(21)
    mode: int = betterproto.int64_field(22)
    from_: int = betterproto.int64_field(23)
    value: float = betterproto.double_field(24)
    url: str = betterproto.string_field(25)
    scene: "Scene" = betterproto.enum_field(26)
    status: int = betterproto.int64_field(27)
    content: str = betterproto.string_field(28)


@dataclass(eq=False, repr=False)
class RoomAuthStatus(betterproto.Message):
    enable_chat: bool = betterproto.bool_field(1)
    enable_danmaku: bool = betterproto.bool_field(2)
    enable_gift: bool = betterproto.bool_field(3)
    enable_luck_money: bool = betterproto.bool_field(4)
    enable_digg: bool = betterproto.bool_field(5)
    enable_room_contributor: bool = betterproto.bool_field(7)
    enable_props: bool = betterproto.bool_field(8)
    usercard: bool = betterproto.bool_field(9)
    deprecated1: bool = betterproto.bool_field(10)
    deprecated2: int = betterproto.int64_field(11)
    banner_state: int = betterproto.int32_field(12)
    deprecated3: int = betterproto.int64_field(13)
    deprecated4: int = betterproto.int64_field(14)
    landscape: int = betterproto.int32_field(15)
    landscapechat: int = betterproto.int64_field(16)
    message_type: "MessageType" = betterproto.enum_field(17)
    anchor_gift_type: int = betterproto.int32_field(18)
    deprecated5: int = betterproto.int64_field(19)
    donation_sticker: int = betterproto.int32_field(20)
    deprecated6: int = betterproto.int64_field(21)
    deprecated7: int = betterproto.int64_field(22)
    deprecated8: int = betterproto.int64_field(23)
    deprecated9: int = betterproto.int64_field(24)
    enable_question: bool = betterproto.bool_field(25)
    enable_chat_l2: bool = betterproto.bool_field(26)
    enable_viewers: bool = betterproto.bool_field(27)
    enable_share: bool = betterproto.bool_field(28)
    gift_rank_switch_status: int = betterproto.int32_field(29)
    enable_promote: bool = betterproto.bool_field(30)
    user_count_display_state: int = betterproto.int32_field(31)
    rank_state: int = betterproto.int32_field(32)
    broadcastmessage: int = betterproto.int64_field(33)
    chat_sub_only: bool = betterproto.bool_field(34)
    anchor_red_envelope_type: int = betterproto.int32_field(35)
    quick_comment_state: int = betterproto.int32_field(36)
    enable_poll: int = betterproto.int32_field(37)
    enable_gift_poll: int = betterproto.int32_field(38)
    enable_draw_guess: int = betterproto.int64_field(40)
    enable_activity_treasure_box: int = betterproto.int32_field(41)
    customizablepoll: int = betterproto.int64_field(42)
    room_auth_off_reasons: "RoomAuthOffReasons" = betterproto.message_field(100)
    use_user_p_v: bool = betterproto.bool_field(101)
    promote_other: int = betterproto.int32_field(102)
    ec_rank_switch_status: int = betterproto.int32_field(103)
    eventpromotion: int = betterproto.int32_field(105)
    comment_flagged_switch: bool = betterproto.bool_field(106)
    comment_flagged_review_switch: bool = betterproto.bool_field(107)
    explore_enabled: bool = betterproto.bool_field(108)
    pictionarypermission: int = betterproto.int64_field(109)
    pictionarybubble: int = betterproto.int64_field(110)
    anchor_level_permission: "AnchorLevelPermission" = betterproto.message_field(111)
    gamerankingswitch: int = betterproto.int32_field(112)
    toolbarmanagement: "ToolBarManagement" = betterproto.message_field(113)
    multienablereserve: bool = betterproto.bool_field(114)
    enablefanslevel: bool = betterproto.bool_field(115)
    secretroom: int = betterproto.int64_field(116)
    spamcomments: bool = betterproto.bool_field(117)
    custom_error_for_gift_setting: "RechargeCustomError" = betterproto.message_field(
        120
    )
    guess_entrance_for_host: bool = betterproto.bool_field(121)
    credit_entrance_for_audience: bool = betterproto.bool_field(122)
    game_guess_permission: bool = betterproto.bool_field(123)
    customizablegiftpoll: int = betterproto.int64_field(124)
    comment_tray_status: int = betterproto.int64_field(125)
    rankingchangealterswitch: int = betterproto.int32_field(126)
    show_credit_widget: bool = betterproto.bool_field(127)
    star_comment_permission_switch: "RoomAuthStatusStarCommentPermissionSwitch" = (
        betterproto.message_field(128)
    )
    emotepoll: int = betterproto.int64_field(129)
    enableshowuseruv: bool = betterproto.bool_field(130)


@dataclass(eq=False, repr=False)
class RoomAuthStatusStarCommentPermissionSwitch(betterproto.Message):
    status: int = betterproto.int32_field(1)
    offreason: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SpecialEffectNotice(betterproto.Message):
    score: int = betterproto.int64_field(1)
    from_user_id: int = betterproto.int64_field(2)
    to_anchor_id: int = betterproto.int64_field(3)
    affected_anchor_pairs: List["AnchorPair"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class TranscodeInfo(betterproto.Message):
    transcode_status: int = betterproto.int32_field(1)
    estimated_size: int = betterproto.int64_field(2)
    fail_reason: str = betterproto.string_field(3)
    video_meta: "VideoMetaInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MultiGuestReserveResponse(betterproto.Message):
    data: "MultiGuestReserveResponseResponseData" = betterproto.message_field(1)
    extra: "MultiGuestReserveResponseExtra" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MultiGuestReserveResponseResponseData(betterproto.Message):
    perception_info: "WebcastPerceptionMessage" = betterproto.message_field(1)
    reserve_user_info: "AudienceReserveUserInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MultiGuestReserveResponseExtra(betterproto.Message):
    now: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class HistoryCommentResponse(betterproto.Message):
    data: "HistoryCommentResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HistoryCommentResponseResponseData(betterproto.Message):
    messages: List["ProtoMessageFetchResultBaseProtoMessage"] = (
        betterproto.message_field(1)
    )
    has_more: bool = betterproto.bool_field(2)
    cursor: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class BannerInRoom(betterproto.Message):
    id: int = betterproto.int64_field(1)
    title: str = betterproto.string_field(2)
    image: "ImageModel" = betterproto.message_field(3)
    height: int = betterproto.int32_field(4)
    width: int = betterproto.int32_field(5)
    schema_url: str = betterproto.string_field(6)
    action_type: int = betterproto.int32_field(7)
    banner_type: int = betterproto.int64_field(8)
    priority: int = betterproto.int32_field(9)
    text: str = betterproto.string_field(10)
    frame_type: int = betterproto.int64_field(11)
    extra: str = betterproto.string_field(12)
    status: int = betterproto.int64_field(13)
    uid: int = betterproto.int64_field(14)
    roomid: int = betterproto.int64_field(15)
    appointment_start_timestamp: int = betterproto.int64_field(16)
    appointment_end_timestamp: int = betterproto.int64_field(17)
    appointment_id: int = betterproto.int64_field(18)
    business_type: int = betterproto.int64_field(19)
    dynamic_banner: "BannerInRoomBannerContentDynamic" = betterproto.message_field(20)
    banner_location: int = betterproto.int32_field(21)
    open_with_navigation_tag: bool = betterproto.bool_field(22)
    business_source: str = betterproto.string_field(23)
    activity_id: str = betterproto.string_field(24)


@dataclass(eq=False, repr=False)
class BannerInRoomBannerContentDynamic(betterproto.Message):
    json_resource: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ReserveResponse(betterproto.Message):
    data: "ReserveResponseResponseData" = betterproto.message_field(1)
    extra: "ReserveResponseReserveExtra" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReserveResponseResponseData(betterproto.Message):
    reservation_id: int = betterproto.int64_field(1)
    created_timestamp: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class ReserveResponseLogPb(betterproto.Message):
    impr_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ReserveResponseReserveExtra(betterproto.Message):
    log_pb: "ReserveResponseLogPb" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TeamRankProgress(betterproto.Message):
    current_number: int = betterproto.int32_field(1)
    target_number: int = betterproto.int32_field(2)
    gift_ids: List[int] = betterproto.int64_field(3)
    timestamp: int = betterproto.int64_field(4)
    add_score: int = betterproto.int32_field(5)
    contributed_score: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class BattleTeamUserArmies(betterproto.Message):
    team_id: int = betterproto.int64_field(1)
    team_users: List["BattleTeamUser"] = betterproto.message_field(2)
    team_total_score: int = betterproto.int64_field(3)
    user_armies: "BattleUserArmies" = betterproto.message_field(4)
    host_rank: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class LevelUpGiftInfo(betterproto.Message):
    gift_id: int = betterproto.int64_field(1)
    left_count_to_level_up: int = betterproto.int64_field(2)
    level_up_count: int = betterproto.int64_field(3)
    current_count: int = betterproto.int64_field(4)
    num_of_upgrade_gifts_left: int = betterproto.int64_field(5)
    show_id: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class Player(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    uid: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class LinkerLeaveContent(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    linkmic_id_str: str = betterproto.string_field(2)
    send_leave_uid: int = betterproto.int64_field(3)
    leave_reason: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class BagIndex(betterproto.Message):
    value: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class SendGiftResult(betterproto.Message):
    display_text: "Text" = betterproto.message_field(1)
    fan_ticket_count: int = betterproto.int32_field(2)
    describe: str = betterproto.string_field(3)
    m_gift_id: int = betterproto.int64_field(4)
    group_count: int = betterproto.int32_field(5)
    m_left_diamonds: int = betterproto.int64_field(6)
    repeat_count: int = betterproto.int32_field(7)
    combo_count: int = betterproto.int32_field(8)
    prop_id: int = betterproto.int64_field(9)
    prop_type: int = betterproto.int32_field(10)
    props: List["Prop"] = betterproto.message_field(11)
    msg_id: int = betterproto.int64_field(12)
    gifts: List["GiftResultData"] = betterproto.message_field(15)
    room_fan_ticket_count: int = betterproto.int64_field(16)
    group_id: int = betterproto.int64_field(17)
    order_id: str = betterproto.string_field(18)
    m_calm_down_info: "CalmDownInfo" = betterproto.message_field(19)
    balance_result: List["ExchangeGiftResultData"] = betterproto.message_field(20)
    monitor_extra: str = betterproto.string_field(21)
    is_first_send: bool = betterproto.bool_field(22)
    freq_limit_remaintimes: int = betterproto.int32_field(23)
    pay_grade_info: "PayGradeInfo" = betterproto.message_field(24)
    lynx_extra: List["LynxGiftExtra"] = betterproto.message_field(25)
    match_info: "MatchInfo" = betterproto.message_field(26)
    linkmic_gift_expression_strategy: int = betterproto.int32_field(27)
    fans_level_info: "FansLevelInfo" = betterproto.message_field(28)
    anchor_fans_count: int = betterproto.int64_field(29)
    flying_mic_resources: "FlyingMicResources" = betterproto.message_field(30)
    team_rank_progress: "TeamRankProgress" = betterproto.message_field(31)
    version: int = betterproto.int32_field(32)
    sponsorship_info: List["SponsorshipInfo"] = betterproto.message_field(33)
    gift_gallery_combo_sponsor: bool = betterproto.bool_field(34)
    flying_mic_resources_v2: "FlyingMicResources" = betterproto.message_field(35)
    gift_challenge_progress: "GiftChallengeProgress" = betterproto.message_field(36)
    backpack_info: "BackpackInfo" = betterproto.message_field(37)
    fans_club_info: "GiftSendFansClubInfo" = betterproto.message_field(38)
    multi_generate_message: bool = betterproto.bool_field(39)
    to_member_id: int = betterproto.int64_field(40)
    to_member_nickname: str = betterproto.string_field(41)
    level_up_gift_info: "LevelUpGiftInfo" = betterproto.message_field(42)
    panel_refresh_data: "PanelRefresh" = betterproto.message_field(100)


@dataclass(eq=False, repr=False)
class FanTicketRoomNoticeContent(betterproto.Message):
    user_fan_ticket: List["UserFanTicket"] = betterproto.message_field(1)
    total_linkmic_fan_ticket: int = betterproto.int64_field(2)
    match_id: int = betterproto.int64_field(3)
    event_time: int = betterproto.int64_field(4)
    fan_ticket_icon_url: str = betterproto.string_field(5)
    play_id: int = betterproto.int64_field(6)
    play_scene: Optional["FanTicketRoomNoticeContentPlayScene"] = (
        betterproto.enum_field(7, optional=True)
    )


@dataclass(eq=False, repr=False)
class UserHonor(betterproto.Message):
    total_diamond: int = betterproto.int64_field(1)
    diamond_icon: "ImageModel" = betterproto.message_field(2)
    current_honor_name: str = betterproto.string_field(3)
    current_honor_icon: "ImageModel" = betterproto.message_field(4)
    next_honor_name: str = betterproto.string_field(5)
    level: int = betterproto.int32_field(6)
    next_honor_icon: "ImageModel" = betterproto.message_field(7)
    current_diamond: int = betterproto.int64_field(9)
    this_grade_min_diamond: int = betterproto.int64_field(10)
    this_grade_max_diamond: int = betterproto.int64_field(11)
    grade_describe: str = betterproto.string_field(13)
    grade_icon_list: List["GradeIcon"] = betterproto.message_field(14)
    screen_chat_type: int = betterproto.int64_field(15)
    im_icon: "ImageModel" = betterproto.message_field(16)
    im_icon_with_level: "ImageModel" = betterproto.message_field(17)
    live_icon: "ImageModel" = betterproto.message_field(18)
    new_im_icon_with_level: "ImageModel" = betterproto.message_field(19)
    new_live_icon: "ImageModel" = betterproto.message_field(20)
    upgrade_need_consume: int = betterproto.int64_field(21)
    next_privileges: str = betterproto.string_field(22)
    profile_dialog_bg: "ImageModel" = betterproto.message_field(23)
    profile_dialog_back_bg: "ImageModel" = betterproto.message_field(24)
    score: int = betterproto.int64_field(25)
    grade_banner: str = betterproto.string_field(1001)


@dataclass(eq=False, repr=False)
class BackpackInfo(betterproto.Message):
    item_type: int = betterproto.int32_field(1)
    item_id: int = betterproto.int64_field(2)
    count: int = betterproto.int64_field(3)
    min_expire_at: int = betterproto.int64_field(4)
    available: bool = betterproto.bool_field(5)
    pre_update_info: "BagItemPreUpdateInfo" = betterproto.message_field(6)
    battle_id: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class UserVoteInfo(betterproto.Message):
    has_voted: bool = betterproto.bool_field(1)
    vote_option_index: int = betterproto.int32_field(2)
    vote_option_list: List["UserVoteOptionInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class ParallelPullStreamInfo(betterproto.Message):
    enable: bool = betterproto.bool_field(1)
    feature_detail: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class LiveProInfo(betterproto.Message):
    is_live_pro: bool = betterproto.bool_field(1)
    show_banner: bool = betterproto.bool_field(2)
    banner: "ImageModel" = betterproto.message_field(3)
    banner_starling_key: str = betterproto.string_field(4)
    label: "ImageModel" = betterproto.message_field(5)
    live_pro_type: int = betterproto.int32_field(6)
    gamer_label: "ImageModel" = betterproto.message_field(7)
    gamer_banner_starling_key: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class AccompanimentStruct(betterproto.Message):
    vid: str = betterproto.string_field(1)
    accompaniment_urls: List[str] = betterproto.string_field(2)
    id: int = betterproto.int64_field(3)
    volume_loudness_lufs: float = betterproto.double_field(4)
    volume_amplitude_peak: float = betterproto.double_field(5)


@dataclass(eq=False, repr=False)
class WebcastFollowCardMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    follow_card_id: int = betterproto.int64_field(2)
    max_random: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class UserGrade(betterproto.Message):
    nick_name: str = betterproto.string_field(1)
    default_grade_badge: "BadgeStruct" = betterproto.message_field(2)
    opacity_badge: "BadgeStruct" = betterproto.message_field(3)
    current_score: int = betterproto.int64_field(4)
    current_grade: int = betterproto.int32_field(5)
    grade_mode: int = betterproto.int32_field(6)
    time_to_sleep: int = betterproto.int32_field(7)
    grade_score_rule: "GradeScoreRule" = betterproto.message_field(8)
    version: int = betterproto.int64_field(9)


@dataclass(eq=False, repr=False)
class PotionCardInfo(betterproto.Message):
    card_name_key: str = betterproto.string_field(1)
    card_image: "ImageModel" = betterproto.message_field(2)
    send_time_sec: int = betterproto.int64_field(3)
    send_user: "BattleUserInfo" = betterproto.message_field(4)
    effect_last_duration: int = betterproto.int64_field(5)
    rule_url: str = betterproto.string_field(6)
    effect_time_sec: int = betterproto.int64_field(7)
    to_anchor_id: int = betterproto.int64_field(8)


@dataclass(eq=False, repr=False)
class WebcastActivityQuizUserIdentityMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    primary_id: str = betterproto.string_field(2)
    version: int = betterproto.int64_field(3)
    retain_device_id: str = betterproto.string_field(4)
    timestamp: int = betterproto.int64_field(5)
    body: "QuizUserIdentityInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class LastLayoutSetting(betterproto.Message):
    scene: "Scene" = betterproto.enum_field(1)
    layout_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PerceptionSheetInfo(betterproto.Message):
    icon_type: Optional["PerceptionSheetInfoPerceptionDialogIconType"] = (
        betterproto.enum_field(1, optional=True)
    )
    title: "Text" = betterproto.message_field(2)
    sub_title: "Text" = betterproto.message_field(3)
    reason_title: "Text" = betterproto.message_field(4)
    reason_info: "Text" = betterproto.message_field(5)
    not_allowed_title: "Text" = betterproto.message_field(6)
    not_allowed_text: "Text" = betterproto.message_field(7)
    default_action_text: "Text" = betterproto.message_field(8)
    scene: "Scene" = betterproto.enum_field(9)
    target_user_id: int = betterproto.int64_field(10)
    target_room_id: int = betterproto.int64_field(11)
    count_down_time: int = betterproto.int64_field(12)


@dataclass(eq=False, repr=False)
class FollowGuideParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    trigger_type: int = betterproto.int32_field(2)
    follow_guide_info_list: List["FollowGuideParamsFollowGuideInfo"] = (
        betterproto.message_field(3)
    )
    channel_id: int = betterproto.int64_field(4)
    trigger_params_json_str: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class FollowGuideParamsFollowGuideInfo(betterproto.Message):
    guide_user_id: int = betterproto.int64_field(1)
    guide_user_identity: int = betterproto.int32_field(2)
    guide_follow_status: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class MultiInviteResponse(betterproto.Message):
    battle_id: int = betterproto.int64_field(1)
    meanwhile_invite_scene: int = betterproto.int32_field(2)
    battle_team_user: List["TeamUser"] = betterproto.message_field(3)
    gift_mode_meta: "GiftModeMeta" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WebcastLiveJourneyMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    live_journey_im_msg: "LiveJourneyImMessage" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AnimationData(betterproto.Message):
    gecko_channel_name: str = betterproto.string_field(1)
    file_name: str = betterproto.string_field(2)
    height: int = betterproto.int64_field(3)
    width: int = betterproto.int64_field(4)
    right_offset: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class PermitJoinGroupBizContent(betterproto.Message):
    reply_status: "PermitJoinGroupBizContentReplyStatus" = betterproto.enum_field(1)
    source_type: Optional["PermitJoinGroupBizContentSourceType"] = (
        betterproto.enum_field(2, optional=True)
    )


@dataclass(eq=False, repr=False)
class BizRechargeResponse(betterproto.Message):
    data: "BizRechargeResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BizRechargeResponseResponseData(betterproto.Message):
    user_infos: Dict[int, "CohostUserInfo"] = betterproto.map_field(
        1, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    virtual_waiting_users: List["VirtualWaitingUser"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EventUserInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    avatar_uri: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CountdownGetContentResponse(betterproto.Message):
    data: "CountdownGetContentResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CountdownGetContentResponseResponseData(betterproto.Message):
    countdown_contents: List["CountdownContent"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WalletLiveRewardsRatioImMsgNotification(betterproto.Message):
    display_text: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class LinkerInviteMessageExtra(betterproto.Message):
    match_type: int = betterproto.int32_field(1)
    invite_type: int = betterproto.int32_field(2)
    sub_type: int = betterproto.int32_field(3)
    theme: str = betterproto.string_field(4)
    duration: int = betterproto.int32_field(5)
    layout: int = betterproto.int32_field(6)
    tips: str = betterproto.string_field(7)
    inviter_rival_extra: "InviterRivalExtra" = betterproto.message_field(8)
    other_rival_extra: List["InviterRivalExtra"] = betterproto.message_field(9)
    topic_info: "CohostTopic" = betterproto.message_field(10)
    algo_request_id: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class RechargePopUpContentReplace(betterproto.Message):
    replace_value: str = betterproto.string_field(1)
    value_schema: str = betterproto.string_field(2)
    replace_type: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class RankUser(betterproto.Message):
    id: int = betterproto.int64_field(1)
    nickname: str = betterproto.string_field(3)
    avatar_thumb: "ImageModel" = betterproto.message_field(9)
    secret: int = betterproto.int32_field(18)
    follow_info: "RankUserFollowInfo" = betterproto.message_field(22)
    border: "RankUserBorder" = betterproto.message_field(25)
    display_id: str = betterproto.string_field(38)
    badge_list: List["BadgeStruct"] = betterproto.message_field(64)
    id_str: str = betterproto.string_field(1028)


@dataclass(eq=False, repr=False)
class RankUserBorder(betterproto.Message):
    icon: "ImageModel" = betterproto.message_field(1)
    level: int = betterproto.int64_field(2)
    source: str = betterproto.string_field(3)
    profile_decoration_ribbon: "ImageModel" = betterproto.message_field(4)
    border_privilege_log_extra: "PrivilegeLogExtra" = betterproto.message_field(5)
    profile_privilege_log_extra: "PrivilegeLogExtra" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class RankUserFollowInfo(betterproto.Message):
    following_count: int = betterproto.int64_field(1)
    follower_count: int = betterproto.int64_field(2)
    follow_status: int = betterproto.int64_field(3)
    push_status: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class WebcastCommentsMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    user: "User" = betterproto.message_field(2)
    content: str = betterproto.string_field(3)
    color: str = betterproto.string_field(4)
    background: "ImageModel" = betterproto.message_field(5)
    action_type: int = betterproto.int64_field(6)
    action_content: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class CountdownGetUserHistoryResponse(betterproto.Message):
    data: "CountdownGetUserHistoryResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CountdownGetUserHistoryResponseResponseData(betterproto.Message):
    records: List["UserCountdownRecord"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WebcastWeeklyRankRewardMessage(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    border_info: "BorderInfo" = betterproto.message_field(2)
    base_message: "CommonMessageData" = betterproto.message_field(3)
    notify_message: "WebcastRoomNotifyMessage" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GetStarlingTranslationResponse(betterproto.Message):
    data: "GetStarlingTranslationResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetStarlingTranslationResponseResponseData(betterproto.Message):
    brand_name: str = betterproto.string_field(1)
    content: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class LiveFragmentShowInfo(betterproto.Message):
    icon: str = betterproto.string_field(1)
    desc: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class UserAttr(betterproto.Message):
    is_muted: bool = betterproto.bool_field(1)
    is_admin: bool = betterproto.bool_field(2)
    is_super_admin: bool = betterproto.bool_field(3)
    mute_duration: int = betterproto.int64_field(4)
    admin_permissions: Dict[str, int] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_INT32
    )
    has_voting_function: bool = betterproto.bool_field(6)
    is_channel_admin: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class WebcastLinkStateMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    channel_id: int = betterproto.int64_field(2)
    scene: "WebcastLinkStateMessageScene" = betterproto.enum_field(3)
    version: int = betterproto.int64_field(4)
    need_ack: int = betterproto.int32_field(5)
    layout: "LayoutState" = betterproto.message_field(6)
    user_states: List["LinkUserState"] = betterproto.message_field(7)
    client_send_time: int = betterproto.int64_field(8)
    state_type: Optional["WebcastLinkStateMessageStateType"] = betterproto.enum_field(
        9, optional=True
    )
    background: "BackGroundImageState" = betterproto.message_field(10)
    wallpaper_url: str = betterproto.string_field(12)
    ui_pos: List["PosIdentity"] = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class WebcastAccessRecallMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    status: int = betterproto.int32_field(2)
    duration: int = betterproto.int64_field(3)
    end_time: int = betterproto.int64_field(4)
    scene: "Scene" = betterproto.enum_field(5)
    notice: "Text" = betterproto.message_field(6)
    content: "Text" = betterproto.message_field(7)
    punish_info: "PunishEventInfo" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class DoodleTemplate(betterproto.Message):
    id: int = betterproto.int64_field(1)
    image: "ImageModel" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class QuickGift(betterproto.Message):
    id: int = betterproto.int64_field(1)
    name: str = betterproto.string_field(2)
    image: "ImageModel" = betterproto.message_field(3)
    type: int = betterproto.int64_field(4)
    is_box_gift: bool = betterproto.bool_field(5)
    diamond_count: int = betterproto.int64_field(6)
    is_broadcast_gift: bool = betterproto.bool_field(7)
    is_effect_befview: bool = betterproto.bool_field(8)
    primary_effect_id: int = betterproto.int64_field(9)


@dataclass(eq=False, repr=False)
class ColdStartStatData(betterproto.Message):
    viewer_count: int = betterproto.int32_field(1)
    status: int = betterproto.int32_field(2)
    stats: List["ColdStartStat"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class FreqLimitGiftOption(betterproto.Message):
    gift_id: int = betterproto.int64_field(1)
    refresh_time_stamp: int = betterproto.int64_field(2)
    close_gift_panel: bool = betterproto.bool_field(3)
    work_single_anchor: bool = betterproto.bool_field(4)
    frequency_limit: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class WebcastAiSummaryMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    scene: "Scene" = betterproto.enum_field(2)
    show_at_first: bool = betterproto.bool_field(3)
    icon: "ImageModel" = betterproto.message_field(4)
    title: "Text" = betterproto.message_field(5)
    multi_lang_summary_list: List["MultiLangContent"] = betterproto.message_field(6)
    click_title_scheme_link: str = betterproto.string_field(7)
    click_content_scheme_link: str = betterproto.string_field(8)
    long_press_area_scheme_link: str = betterproto.string_field(9)
    public_area_message_common: "PublicAreaMessageCommon" = betterproto.message_field(
        10
    )
    require_stay: bool = betterproto.bool_field(11)
    stay_duration_ms: int = betterproto.int64_field(12)


@dataclass(eq=False, repr=False)
class AnchorClientList(betterproto.Message):
    rtc_users: List["WaitUser"] = betterproto.message_field(1)
    apply_users: List["WaitUser"] = betterproto.message_field(2)
    invite_users: List["WaitUser"] = betterproto.message_field(3)
    ready_users: List["WaitUser"] = betterproto.message_field(4)
    link_users: List["LinkedUser"] = betterproto.message_field(5)
    anchor_message: "AnchorMessage" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class NewAnchorGuideConfig(betterproto.Message):
    anchor_id: int = betterproto.int64_field(1)
    icon: "ImageModel" = betterproto.message_field(2)
    icon_style: int = betterproto.int32_field(3)
    title: "Text" = betterproto.message_field(4)
    button: "Text" = betterproto.message_field(5)
    text: "Text" = betterproto.message_field(6)
    display_duration: int = betterproto.int32_field(7)
    effect_params: "NewAnchorEffectParams" = betterproto.message_field(8)
    display_type: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class LinkedListChangeContent(betterproto.Message):
    list_users: List["ListUser"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MsgNotifyComAvoidConfig(betterproto.Message):
    component_rule_list_v2: List["MsgNotifyComponentAvoidRuleV2"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class NewAnchorGuideMsgInfo(betterproto.Message):
    message_key: str = betterproto.string_field(1)
    guide_config: "NewAnchorGuideConfig" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastPerceptionMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    dialog: "PerceptionDialogInfo" = betterproto.message_field(2)
    public_event_info: "PunishEventInfo" = betterproto.message_field(3)
    end_time: int = betterproto.int32_field(4)
    show_violation: bool = betterproto.bool_field(5)
    toast: "Text" = betterproto.message_field(6)
    float_style: int = betterproto.int32_field(7)
    float_text: "Text" = betterproto.message_field(8)
    sheet: "PerceptionSheetInfo" = betterproto.message_field(9)
    float_icon_type: Optional["WebcastPerceptionMessagePerceptionDialogIconType"] = (
        betterproto.enum_field(10, optional=True)
    )


@dataclass(eq=False, repr=False)
class SubscribeBadge(betterproto.Message):
    origin_image: "ImageModel" = betterproto.message_field(3)
    preview_image: "ImageModel" = betterproto.message_field(4)
    is_customized: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class LinkerInviteContent(betterproto.Message):
    from_user_id: int = betterproto.int64_field(1)
    from_room_id: int = betterproto.int64_field(2)
    to_rtc_ext_info: str = betterproto.string_field(3)
    rtc_join_channel: bool = betterproto.bool_field(4)
    vendor: int = betterproto.int32_field(5)
    sec_from_user_id: str = betterproto.string_field(6)
    to_linkmic_id_str: str = betterproto.string_field(7)
    user: "User" = betterproto.message_field(8)
    required_mic_idx: int = betterproto.int64_field(9)
    rtc_ext_info_map: Dict[int, str] = betterproto.map_field(
        10, betterproto.TYPE_INT64, betterproto.TYPE_STRING
    )
    multi_live_layout_enable: Optional["LinkerInviteContentLinkmicMultiLiveEnum"] = (
        betterproto.enum_field(11, optional=True)
    )
    multi_live_setting: "MultiLiveAnchorPanelSettings" = betterproto.message_field(12)
    from_linkmic_id_str: str = betterproto.string_field(13)
    from_top_host_info: "InviteTopHostInfo" = betterproto.message_field(16)
    action_id: int = betterproto.int64_field(17)
    linked_users: List["LinkmicUserInfo"] = betterproto.message_field(18)
    dialog_info: "PerceptionDialogInfo" = betterproto.message_field(19)
    punish_event_info: "PunishEventInfo" = betterproto.message_field(20)
    from_room_age_restricted: int = betterproto.int32_field(21)
    ab_test_setting: List["CohostAbTestSetting"] = betterproto.message_field(23)
    linker_invite_msg_extra: "LinkerInviteMessageExtra" = betterproto.message_field(101)


@dataclass(eq=False, repr=False)
class UseWaveCard(betterproto.Message):
    card_info: "WaveCardInfo" = betterproto.message_field(1)
    anchor_id: int = betterproto.int64_field(2)
    display_content: "Text" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class UserInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    nick_name: str = betterproto.string_field(2)
    anchor_avatar: "ImageModel" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GiftPollInfo(betterproto.Message):
    gift_poll_options: List["GiftPollOption"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class VideoInfo(betterproto.Message):
    resolution: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PinCardView(betterproto.Message):
    duration: int = betterproto.int64_field(1)
    end_timestamp_str: str = betterproto.string_field(2)
    min_duration_time: int = betterproto.int64_field(3)
    version_code_str: str = betterproto.string_field(4)
    guess_title: "GuessText" = betterproto.message_field(5)
    round_id_str: str = betterproto.string_field(6)
    pin_card_type: Optional["PinCardViewGuessPinType"] = betterproto.enum_field(
        7, optional=True
    )
    is_auto_pin: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class QuizImage(betterproto.Message):
    url: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QuizRewardRule(betterproto.Message):
    settler_code: str = betterproto.string_field(1)
    send_amount: int = betterproto.int32_field(2)
    reward_list: List["QuizRewardRuleRewardItem"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class QuizRewardRuleRewardItem(betterproto.Message):
    reward_name: str = betterproto.string_field(1)
    reward_amount: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WebcastRoomVerifyMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    verify_action: int = betterproto.int32_field(2)
    content: str = betterproto.string_field(3)
    notice_type: int = betterproto.int64_field(4)
    close_room: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class GuestShowdownUpdateResponse(betterproto.Message):
    data: "GuestShowdownUpdateResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GuestShowdownUpdateResponseResponseData(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    play_content: "GuestShowdownContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GoodyBagBaseInfo(betterproto.Message):
    goody_bag_id: str = betterproto.string_field(1)
    biz: Optional["GoodyBagBaseInfoGoodyBagBiz"] = betterproto.enum_field(
        2, optional=True
    )
    room_id: str = betterproto.string_field(3)
    common_detail: "GoodyBagCommonDetail" = betterproto.message_field(4)
    coin_detail: "GoodyBagCoinDetail" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class FreqLimitGiftInfo(betterproto.Message):
    freq_limit_gift_options: List["FreqLimitGiftOption"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CustomTabInfo(betterproto.Message):
    custom_tabs: "CustomTabs" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ManageViewerSingResp(betterproto.Message):
    common_resp: "LinkMicCommonResp" = betterproto.message_field(1)
    permiter_ext_info: "RtcExtraInfo" = betterproto.message_field(2)
    permiter_link_mic_id: str = betterproto.string_field(3)
    applier_pos: "MicPositionData" = betterproto.message_field(4)
    applier: "Player" = betterproto.message_field(5)
    applier_link_mic_id: str = betterproto.string_field(6)
    is_invoke_linkmic: bool = betterproto.bool_field(7)
    linked_user_ui_positions: List[str] = betterproto.string_field(8)
    ui_pos: List["PosIdentity"] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class GameLiveFragment(betterproto.Message):
    fragment_id: int = betterproto.int64_field(1)
    fragment_id_str: str = betterproto.string_field(2)
    room_id: int = betterproto.int64_field(3)
    fragment_type: int = betterproto.int32_field(4)
    vid: str = betterproto.string_field(5)
    download_url: str = betterproto.string_field(6)
    cover_url: str = betterproto.string_field(7)
    owner_user_id: int = betterproto.int64_field(8)
    start_time: int = betterproto.int64_field(9)
    end_time: int = betterproto.int64_field(10)
    extra: str = betterproto.string_field(11)
    create_time: int = betterproto.int64_field(12)
    update_time: int = betterproto.int64_field(13)
    title: str = betterproto.string_field(14)
    status: int = betterproto.int32_field(15)
    mark_time: int = betterproto.int64_field(16)
    op_time: int = betterproto.int64_field(17)
    stream_url: str = betterproto.string_field(18)
    preview_pic_url: str = betterproto.string_field(19)
    room_id_str: str = betterproto.string_field(20)
    owner_user_id_str: str = betterproto.string_field(21)
    replay_create_time: int = betterproto.int64_field(22)
    is_edit: int = betterproto.int32_field(23)
    sprite_list: List["Sprite"] = betterproto.message_field(24)
    mp4_video_meta_info: "VideoMetaInfo" = betterproto.message_field(25)
    encode_status: int = betterproto.int32_field(26)
    is_muted: bool = betterproto.bool_field(27)
    show_info: "LiveFragmentShowInfo" = betterproto.message_field(28)
    replay_relative_time: int = betterproto.int64_field(29)


@dataclass(eq=False, repr=False)
class WebcastGuideTaskMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    biz_name: str = betterproto.string_field(2)
    operation_types: List[int] = betterproto.int32_field(3)
    remind_area_text: "Text" = betterproto.message_field(5)
    remind_type: str = betterproto.string_field(6)
    display_second: int = betterproto.int64_field(7)
    task_type: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class InviterRivalExtra(betterproto.Message):
    text_type: "TextType" = betterproto.enum_field(1)
    text: str = betterproto.string_field(2)
    label: str = betterproto.string_field(3)
    user_count: int = betterproto.int32_field(4)
    avatar_thumb: "ImageModel" = betterproto.message_field(5)
    display_id: str = betterproto.string_field(6)
    authentication_info: "AuthenticationInfo" = betterproto.message_field(7)
    nickname: str = betterproto.string_field(8)
    follow_status: int = betterproto.int64_field(9)
    m_hashtag: "Hashtag" = betterproto.message_field(10)
    user_id: int = betterproto.int64_field(12)
    is_best_teammate: bool = betterproto.bool_field(13)
    opt_pair_info: "OptPairInfo" = betterproto.message_field(14)
    follower_count: int = betterproto.int64_field(15)


@dataclass(eq=False, repr=False)
class EcommerceEntrance(betterproto.Message):
    entrance_type: Optional["EcommerceEntranceEntranceType"] = betterproto.enum_field(
        1, optional=True
    )
    creator_type: Optional["EcommerceEntranceCreatorType"] = betterproto.enum_field(
        2, optional=True
    )
    schema: str = betterproto.string_field(3)
    shop_entrance_info: "EcommerceEntranceShopEntranceInfo" = betterproto.message_field(
        4
    )
    showcase_entrance_info: "EcommerceEntranceShowcaseEntranceInfo" = (
        betterproto.message_field(5)
    )
    view_version: Optional["EcommerceEntranceViewVersion"] = betterproto.enum_field(
        6, optional=True
    )


@dataclass(eq=False, repr=False)
class EcommerceEntranceSellingPoint(betterproto.Message):
    show_text: str = betterproto.string_field(1)
    selling_point_type: Optional[
        "EcommerceEntranceSellingPointLiveSellingPointType"
    ] = betterproto.enum_field(2, optional=True)


@dataclass(eq=False, repr=False)
class EcommerceEntranceShopLabelImage(betterproto.Message):
    height: int = betterproto.int32_field(1)
    width: int = betterproto.int32_field(2)
    minetype: str = betterproto.string_field(3)
    thumb_uri: str = betterproto.string_field(4)
    thumb_uri_list: List[str] = betterproto.string_field(5)
    uri: str = betterproto.string_field(6)
    url_list: List[str] = betterproto.string_field(7)
    color: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class EcommerceEntranceStoreOfficialLabel(betterproto.Message):
    label_image_light: "EcommerceEntranceShopLabelImage" = betterproto.message_field(1)
    label_image_dark: "EcommerceEntranceShopLabelImage" = betterproto.message_field(2)
    label_type: Optional["EcommerceEntranceStoreOfficialLabelStoreBrandLabelType"] = (
        betterproto.enum_field(3, optional=True)
    )
    label_type_str: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class EcommerceEntranceStoreLabel(betterproto.Message):
    official_label: "EcommerceEntranceStoreOfficialLabel" = betterproto.message_field(1)
    is_bytemall: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class EcommerceEntranceShopEntranceInfo(betterproto.Message):
    shop_id: str = betterproto.string_field(1)
    shop_name: str = betterproto.string_field(2)
    shop_rating: str = betterproto.string_field(3)
    store_label: "EcommerceEntranceStoreLabel" = betterproto.message_field(4)
    format_sold_count: str = betterproto.string_field(5)
    sold_count: int = betterproto.int64_field(6)
    exp_rate_percentile: int = betterproto.int32_field(7)
    exp_rate_top_display: str = betterproto.string_field(8)
    rate_display_style: int = betterproto.int32_field(9)
    show_rate_not_applicable: bool = betterproto.bool_field(10)
    selling_point: List["EcommerceEntranceSellingPoint"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class EcommerceEntranceShowcaseEntranceInfo(betterproto.Message):
    format_sold_count: str = betterproto.string_field(1)
    sold_count: int = betterproto.int64_field(2)
    showcase_name: str = betterproto.string_field(3)
    selling_point: List["EcommerceEntranceSellingPoint"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class MultiLiveUpdateUserSettingContent(betterproto.Message):
    multi_live_anchor_panel_settings: "MultiLiveAnchorPanelSettings" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class KeywordsLibrary(betterproto.Message):
    locale: str = betterproto.string_field(1)
    gift_keywords: List["GiftKeywords"] = betterproto.message_field(2)
    has_space: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ParticipateThresholdSelected(betterproto.Message):
    type: Optional["ParticipateThresholdSelectedParticipateThresholdType"] = (
        betterproto.enum_field(1, optional=True)
    )
    value: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class PopCardInfo(betterproto.Message):
    pop_product_id: int = betterproto.int64_field(1)
    pop_card_type: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class CommentQualityScore(betterproto.Message):
    version: str = betterproto.string_field(1)
    score: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class MGetAbInfosResp(betterproto.Message):
    infos: List["AbInfos"] = betterproto.message_field(1)
    common_resp: "LinkMicCommonResp" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastEmoteChatMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    user: "User" = betterproto.message_field(2)
    emote_list: List["EmoteModel"] = betterproto.message_field(3)
    msg_filter: "MsgFilter" = betterproto.message_field(4)
    user_identity: "UserIdentity" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class StarCommentItem(betterproto.Message):
    star_comment: "StarCommentMessage" = betterproto.message_field(1)
    coins: str = betterproto.string_field(2)
    room_user_count: str = betterproto.string_field(3)
    force_insert: bool = betterproto.bool_field(4)
    start_comment_status: int = betterproto.int32_field(5)
    server_to_show_timestamp_ms: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class StarCommentPurchasePageResponse(betterproto.Message):
    data: "StarCommentPurchasePageResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class StarCommentPurchasePageResponseData(betterproto.Message):
    purchase_page_status: int = betterproto.int32_field(1)
    not_allow_reason: str = betterproto.string_field(2)
    queue: "StarCommentQueue" = betterproto.message_field(3)
    word_limit: int = betterproto.int32_field(4)
    error_code: int = betterproto.int64_field(5)
    original_queue: "StarCommentQueue" = betterproto.message_field(6)
    baseline_price: int = betterproto.int64_field(7)
    desc_info: "PrivilegePrompt" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class PlayTogetherPermitNoticeContent(betterproto.Message):
    permit_type: Optional["PlayTogetherPermitNoticeContentPlayTogetherPermitType"] = (
        betterproto.enum_field(1, optional=True)
    )


@dataclass(eq=False, repr=False)
class RoomSticker(betterproto.Message):
    name: str = betterproto.string_field(2)
    image: "ImageModel" = betterproto.message_field(7)
    nine_patch_image: "ImageModel" = betterproto.message_field(8)
    top_left_height: int = betterproto.int32_field(13)
    top_left_width: int = betterproto.int32_field(14)
    bottom_right_height: int = betterproto.int32_field(15)
    bottom_right_width: int = betterproto.int32_field(16)
    review_status: int = betterproto.int32_field(17)
    edited: bool = betterproto.bool_field(18)
    audit_info: "RoomStickerAuditInfo" = betterproto.message_field(19)
    starling_key: str = betterproto.string_field(20)
    extra: str = betterproto.string_field(21)


@dataclass(eq=False, repr=False)
class GroupLiveMember(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    nickname: str = betterproto.string_field(3)
    avatar: "ImageModel" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class AskDemoInfo(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    product: "Product" = betterproto.message_field(2)
    ask_demo_count: int = betterproto.int32_field(3)
    product_index: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class WebcastVideoLiveCouponRcmdMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    rcmd_coupon_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class WebcastVideoLiveGoodsRcmdMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    rcmd_goods_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class EventCard(betterproto.Message):
    event: "LiveEventInfo" = betterproto.message_field(1)
    card_start_time: int = betterproto.int64_field(2)
    card_icon_url: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class TakeTheStageOrderInfo(betterproto.Message):
    anchors: List["TakeTheStageOrderInfoAnchorInfo"] = betterproto.message_field(1)
    initiator: "CompetitionUserBase" = betterproto.message_field(2)
    switch_turn_reason: Optional["TakeTheStageOrderInfoSwitchTurnReason"] = (
        betterproto.enum_field(3, optional=True)
    )


@dataclass(eq=False, repr=False)
class TakeTheStageOrderInfoAnchorInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class WebcastKaraokeSwitchMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    type: int = betterproto.int32_field(2)
    status: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class Question(betterproto.Message):
    question_id: int = betterproto.int64_field(1)
    content: str = betterproto.string_field(2)
    answer_status: int = betterproto.int32_field(3)
    create_time: int = betterproto.int64_field(4)
    user: "User" = betterproto.message_field(5)
    create_from: int = betterproto.int32_field(20)
    answer_from: int = betterproto.int32_field(21)


@dataclass(eq=False, repr=False)
class UnifiedBannerData(betterproto.Message):
    title: str = betterproto.string_field(1)
    sub_title: str = betterproto.string_field(3)
    image: "ImageModel" = betterproto.message_field(4)
    schema: str = betterproto.string_field(5)
    metrics: Dict[str, str] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    frequency_key: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class BattleAbTestSetting(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    ab_test_list: "BattleAbTestList" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CreateInfoPunishmentMessage(betterproto.Message):
    ban_time: int = betterproto.int64_field(1)
    ban_duration: int = betterproto.int64_field(2)
    detail_url: str = betterproto.string_field(3)
    source: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class GiftPanelBanner(betterproto.Message):
    display_text: "Text" = betterproto.message_field(1)
    left_icon: "ImageModel" = betterproto.message_field(2)
    schema_url: str = betterproto.string_field(3)
    bg_colors: List[str] = betterproto.string_field(5)
    banner_lynx_url: str = betterproto.string_field(6)
    banner_priority: int = betterproto.int32_field(7)
    banner_lynx_extra: str = betterproto.string_field(8)
    bg_image: "ImageModel" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class GameBannerContainer(betterproto.Message):
    banner_list: List["GameBanner"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HotRoomData(betterproto.Message):
    business: str = betterproto.string_field(1)
    room_id: int = betterproto.int64_field(2)
    is_hot: bool = betterproto.bool_field(3)
    action: int = betterproto.int32_field(4)
    timestamp: int = betterproto.int64_field(6)
    hot_room_state: List["HotRoomDataHotRoomState"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class HotRoomDataHotRoomState(betterproto.Message):
    reason: int = betterproto.int32_field(1)
    enter_ts: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class ConvertNoticeboardMaterialInfo(betterproto.Message):
    background_image_url: str = betterproto.string_field(1)
    cover_image_url: str = betterproto.string_field(2)
    config_json_url: str = betterproto.string_field(3)
    title: str = betterproto.string_field(4)
    text_char_count: int = betterproto.int64_field(5)
    text_box_count: int = betterproto.int64_field(6)
    starling_map: Dict[str, str] = betterproto.map_field(
        7, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    thumb_cover_image_url: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class BaLeadsGenInfo(betterproto.Message):
    leads_gen_permission: bool = betterproto.bool_field(1)
    leads_gen_model: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class BattlePromptElem(betterproto.Message):
    prompt_field_key: str = betterproto.string_field(1)
    prompt_field_value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class BizPermitParams(betterproto.Message):
    effective_seconds: int = betterproto.int64_field(1)
    notice_confirmed: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class SceneRestriction(betterproto.Message):
    normal_hidden_gids: List[int] = betterproto.int64_field(1)
    match_hidden_gids: List[int] = betterproto.int64_field(2)
    cohost_hidden_gids: List[int] = betterproto.int64_field(3)
    multiguest_hidden_gids: List[int] = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class SponsorshipInfo(betterproto.Message):
    gift_id: int = betterproto.int64_field(1)
    sponsor_id: int = betterproto.int64_field(2)
    become_sponsor: bool = betterproto.bool_field(3)
    light_gift_up: bool = betterproto.bool_field(4)
    unlighted_gift_icon: str = betterproto.string_field(5)
    sponsor_count: int = betterproto.int64_field(6)
    current_count: int = betterproto.int64_field(7)
    left_count_to_sponsor: int = betterproto.int64_field(8)
    can_sponsor: bool = betterproto.bool_field(9)
    gift_gallery_click_sponsor: bool = betterproto.bool_field(10)
    goal_count: int = betterproto.int64_field(11)
    gallery_gifts_collected_count: int = betterproto.int64_field(12)
    first_title_page_scheme_url: str = betterproto.string_field(13)
    gallery_gifts_count: int = betterproto.int64_field(14)
    swapped: bool = betterproto.bool_field(15)
    become_all_sponsored: bool = betterproto.bool_field(21)


@dataclass(eq=False, repr=False)
class UpdateGuestSettingParams(betterproto.Message):
    flow_distribute: int = betterproto.int32_field(1)
    rank_list_show_action: int = betterproto.int32_field(2)
    guest_camera_status: int = betterproto.int32_field(3)
    distribution_status: int = betterproto.int32_field(4)
    guest_camera_mirror_status: int = betterproto.int32_field(5)
    guest_hear_your_voice_status: int = betterproto.int32_field(6)
    channel_id: int = betterproto.int64_field(1001)
    room_id: int = betterproto.int64_field(1002)
    live_id: int = betterproto.int64_field(1003)
    anchor_id: int = betterproto.int64_field(1004)


@dataclass(eq=False, repr=False)
class WallpaperEndResponse(betterproto.Message):
    data: "WallpaperEndResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WallpaperEndResponseResponseData(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    wallpaper_content: "WallpaperContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AutoMatchBanner(betterproto.Message):
    main_guide_text: "Text" = betterproto.message_field(1)
    sub_guide_text: "Text" = betterproto.message_field(2)
    button_text: "Text" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class NoticeboardReviewInfo(betterproto.Message):
    media_node_id: str = betterproto.string_field(1)
    review_status: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class RemuxInfo(betterproto.Message):
    remux_status: int = betterproto.int32_field(1)
    estimated_size: int = betterproto.int64_field(2)
    fail_reason: str = betterproto.string_field(3)
    video_meta: "VideoMetaInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class Stream(betterproto.Message):
    size: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class CohostAbTestSetting(betterproto.Message):
    key: int = betterproto.int64_field(1)
    value: "CohostAbTestList" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SubQueue(betterproto.Message):
    id: str = betterproto.string_field(1)
    type: int = betterproto.int32_field(2)
    status: int = betterproto.int32_field(3)
    audit_status: "AuditStatus" = betterproto.enum_field(4)
    anchor_id: str = betterproto.string_field(5)
    room_id: str = betterproto.string_field(6)
    create_time_sec: int = betterproto.int64_field(7)
    title: str = betterproto.string_field(8)
    waiting_count: int = betterproto.int64_field(9)
    total_count: int = betterproto.int64_field(10)
    violation_info: "AuditInfo" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class FlareInfo(betterproto.Message):
    is_flare: bool = betterproto.bool_field(1)
    task_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AckStateReq(betterproto.Message):
    common: "StateReqCommon" = betterproto.message_field(1)
    msg_id: int = betterproto.int64_field(2)
    msg_type: int = betterproto.int32_field(3)
    client_receive_time: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class WebcastSocialMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    user: "User" = betterproto.message_field(2)
    share_type: int = betterproto.int64_field(3)
    action: int = betterproto.int64_field(4)
    share_target: str = betterproto.string_field(5)
    follow_count: int = betterproto.int64_field(6)
    share_display_style: int = betterproto.int64_field(7)
    share_count: int = betterproto.int32_field(8)
    public_area_message_common: "PublicAreaMessageCommon" = betterproto.message_field(9)
    signature: str = betterproto.string_field(10)
    signature_version: str = betterproto.string_field(11)
    show_duration_ms: int = betterproto.int64_field(12)


@dataclass(eq=False, repr=False)
class WebcastPrivilegeAdvanceMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    notify: "WebcastRoomNotifyMessage" = betterproto.message_field(2)
    scene: "Scene" = betterproto.enum_field(3)
    control: "DisplayControl" = betterproto.message_field(4)
    left_icon: "ImageModel" = betterproto.message_field(5)
    right_icon: "ImageModel" = betterproto.message_field(6)
    background: "ImageModel" = betterproto.message_field(7)
    sub_type: str = betterproto.string_field(8)
    privilege_log_extra: "PrivilegeLogExtra" = betterproto.message_field(100)


@dataclass(eq=False, repr=False)
class RtcInfoExtra(betterproto.Message):
    version: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class InviteLiveEventUserResponse(betterproto.Message):
    data: "InviteLiveEventUserResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class InviteLiveEventUserResponseResponseData(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WebcastLinkMicBattlePunishFinish(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    channel_id: int = betterproto.int64_field(2)
    op_uid: int = betterproto.int64_field(3)
    reason: Optional["WebcastLinkMicBattlePunishFinishReason"] = betterproto.enum_field(
        4, optional=True
    )
    battle_id: int = betterproto.int64_field(5)
    battle_settings: "BattleSetting" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class WebcastBoostedUsersMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    total_cnt: int = betterproto.int64_field(2)
    flare: "FlareBoostedUsers" = betterproto.message_field(3)
    promote_ads: List["PromoteAdBoostedUsers"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class PartnershipGameEvent(betterproto.Message):
    game_tag_id: int = betterproto.int64_field(1)
    anchor_has_joined: bool = betterproto.bool_field(2)
    event_detail_url: str = betterproto.string_field(3)
    game_name: str = betterproto.string_field(4)
    game_id_str: str = betterproto.string_field(5)
    task_id_str: str = betterproto.string_field(6)
    event_id_str: str = betterproto.string_field(7)
    event_type: int = betterproto.int32_field(8)
    incentivetype: int = betterproto.int32_field(9)
    anchor_has_showed: bool = betterproto.bool_field(10)
    game_icon: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class CancelInviteContent(betterproto.Message):
    inviter: "Player" = betterproto.message_field(1)
    inviter_link_mic_id: str = betterproto.string_field(2)
    invitee_link_mic_id: str = betterproto.string_field(3)
    invite_seq_id: int = betterproto.int64_field(4)
    invitee: "Player" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class WebcastRankToastMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    toast: "WebcastRankToastMessageRankToast" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastRankToastMessageRankToast(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    should_toast: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class WebcastUnauthorizedMemberMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    action: int = betterproto.int32_field(2)
    nick_name_prefix: "Text" = betterproto.message_field(3)
    nick_name: str = betterproto.string_field(4)
    enter_text: "Text" = betterproto.message_field(5)
    public_area_common: "PublicAreaMessageCommon" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class KaraokeInfo(betterproto.Message):
    song: "KaraokeSong" = betterproto.message_field(1)
    karaoke_status: bool = betterproto.bool_field(2)
    karaoke_lyric_status: bool = betterproto.bool_field(3)
    display_karaoke: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class FypCommerceStruct(betterproto.Message):
    preview_product_card_info: "PreviewProductCardInfo" = betterproto.message_field(1)
    product_num: int = betterproto.int64_field(2)
    commerce_permission: int = betterproto.int64_field(3)
    pop_product_id: int = betterproto.int64_field(4)
    oec_live_preview_room_data: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class WebcastRankUpdateMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    loop: bool = betterproto.bool_field(7)
    animation_loop_for_off: bool = betterproto.bool_field(8)
    union_animation: List["UnionAnimationInfo"] = betterproto.message_field(9)
    tab_info: List["RankListTabInfo"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class NewAnchorEffectParams(betterproto.Message):
    effect_panel: str = betterproto.string_field(1)
    resource_id: str = betterproto.string_field(2)
    category_id: str = betterproto.string_field(3)
    tab_key: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GameRevenueTipsMessage(betterproto.Message):
    rule_id: int = betterproto.int64_field(1)
    tips_text: "Text" = betterproto.message_field(2)
    fillin_text: List[str] = betterproto.string_field(3)
    action: "GameAction" = betterproto.message_field(4)
    priority: int = betterproto.int64_field(5)
    show_duration_inapp: int = betterproto.int64_field(6)
    show_duration_outapp: int = betterproto.int64_field(7)
    button_text: "Text" = betterproto.message_field(8)
    title_text: "Text" = betterproto.message_field(9)
    common: "CommonMessageData" = betterproto.message_field(100)


@dataclass(eq=False, repr=False)
class UgGiftTaskInfo(betterproto.Message):
    show_banner_entry: bool = betterproto.bool_field(1)
    ug_task_status: int = betterproto.int32_field(2)
    reward_ug_points: int = betterproto.int64_field(3)
    task_start_time: int = betterproto.int64_field(4)
    task_period_days: int = betterproto.int64_field(5)
    ug_task_flow: int = betterproto.int32_field(6)
    pre_reward_ug_points: int = betterproto.int64_field(7)
    task_biz_type: int = betterproto.int32_field(8)
    schema_url: str = betterproto.string_field(9)
    task_end_time: int = betterproto.int64_field(10)


@dataclass(eq=False, repr=False)
class WebcastCommentTrayMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    content: str = betterproto.string_field(2)
    content_type: int = betterproto.int64_field(3)
    count: int = betterproto.int64_field(4)
    chat_time: int = betterproto.int64_field(5)
    tray_id: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class RechargeResp(betterproto.Message):
    my_info: "RtcExtraInfo" = betterproto.message_field(1)
    my_linkmic_id: str = betterproto.string_field(2)
    target_linkmic_id: str = betterproto.string_field(3)
    target_pos: "MicPositionData" = betterproto.message_field(4)
    group_ext_info: List["RtcExtraInfo"] = betterproto.message_field(5)
    group_user: "GroupChannelAllUser" = betterproto.message_field(6)
    common_resp: "LinkMicCommonResp" = betterproto.message_field(7)
    content_pos: List["ContentPosition"] = betterproto.message_field(8)
    cohost_resp_extra: "BizRechargeResponse" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class ECommerceMessage(betterproto.Message):
    action_type: int = betterproto.int32_field(2)
    live_product_number: int = betterproto.int32_field(3)
    pop_product: "PopProduct" = betterproto.message_field(4)
    trace_info: "TraceInfo" = betterproto.message_field(5)
    hot_tags: List["HotTag"] = betterproto.message_field(6)
    atmosphere_tag_info: "AtmosphereTagInfo" = betterproto.message_field(7)
    live_permission_info: "LivePermissionInfo" = betterproto.message_field(8)
    product_snap_shot: "ProductSnapShot" = betterproto.message_field(9)
    pin_card_delay_time: int = betterproto.int64_field(10)
    flash_sale_atmosphere_info: List["FlashSaleAtmosphereInfo"] = (
        betterproto.message_field(11)
    )
    card_type: int = betterproto.int32_field(12)
    billboard_info: "BillboardInfo" = betterproto.message_field(13)
    billboard_display_result: "BillboardDisplayResult" = betterproto.message_field(14)
    dispersion_info: List["DispersionInfo"] = betterproto.message_field(15)
    promotion_info: "PromotionInfo" = betterproto.message_field(16)
    campaign_banner_display_result: "CampaignBannerDisplayResult" = (
        betterproto.message_field(17)
    )
    campaign_banner_display: "CampaignBannerDisplay" = betterproto.message_field(18)
    refresh_live_bag_info: "RefreshLiveBagInfo" = betterproto.message_field(19)
    oec_live_shopping_message_v2: "OecLiveShoppingMessageV2" = (
        betterproto.message_field(100)
    )


@dataclass(eq=False, repr=False)
class NotifyHighlightInfo(betterproto.Message):
    contents: List["NotifyHighlightContent"] = betterproto.message_field(1)
    color: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WebcastLikeMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    count: int = betterproto.int32_field(2)
    total: int = betterproto.int64_field(3)
    color: int = betterproto.int32_field(4)
    user: "User" = betterproto.message_field(5)
    icon: str = betterproto.string_field(6)
    icons: List["ImageModel"] = betterproto.message_field(7)
    specified_display_text: List["SpecifiedDisplayText"] = betterproto.message_field(8)
    effect_cnt: int = betterproto.int64_field(9)
    like_effect: List["LikeEffect"] = betterproto.message_field(10)
    public_area_message_common: "PublicAreaMessageCommon" = betterproto.message_field(
        11
    )
    room_message_heat_level: int = betterproto.int64_field(12)


@dataclass(eq=False, repr=False)
class ShortTouchPreviewSetting(betterproto.Message):
    preview_schema: str = betterproto.string_field(1)
    preview_show_time: int = betterproto.int64_field(2)
    preview_image: "ImageModel" = betterproto.message_field(3)
    amount_text: str = betterproto.string_field(4)
    discount_text: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class CampaignBannerData(betterproto.Message):
    title: str = betterproto.string_field(1)
    image: "ImageModel" = betterproto.message_field(2)
    url: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class BizInviteResponse(betterproto.Message):
    data: "BizInviteResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BizInviteResponseResponseData(betterproto.Message):
    host_perception_info: "WebcastPerceptionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class LiveFilterMsgRule(betterproto.Message):
    name: str = betterproto.string_field(1)
    rule: int = betterproto.int32_field(2)
    random: "FilterMsgRuleParamRandom" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WebcastMsgDetectMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    detect_type: int = betterproto.int32_field(2)
    trigger_condition: "WebcastMsgDetectMessageTriggerCondition" = (
        betterproto.message_field(3)
    )
    time_info: "WebcastMsgDetectMessageTimeInfo" = betterproto.message_field(4)
    trigger_by: int = betterproto.int32_field(5)
    from_region: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class WebcastMsgDetectMessageTimeInfo(betterproto.Message):
    client_start_ms: int = betterproto.int64_field(1)
    api_recv_time_ms: int = betterproto.int64_field(2)
    api_send_to_goim_ms: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class WebcastMsgDetectMessageTriggerCondition(betterproto.Message):
    uplink_detect_h_t_t_p: bool = betterproto.bool_field(1)
    uplink_detect_websocket: bool = betterproto.bool_field(2)
    detect_p2_p_msg: bool = betterproto.bool_field(3)
    detect_room_msg: bool = betterproto.bool_field(4)
    http_optimize: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class BizPermitJoinGroupParams(betterproto.Message):
    reply_status: "ReplyStatus" = betterproto.enum_field(1)
    source_type: int = betterproto.int32_field(2)
    algo_request_id: str = betterproto.string_field(3)
    stream_config: "CohostStreamConfig" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class QuizAnchorInfo(betterproto.Message):
    uid: str = betterproto.string_field(1)
    user_name: str = betterproto.string_field(2)
    room_id: str = betterproto.string_field(3)
    category: str = betterproto.string_field(4)
    description: str = betterproto.string_field(5)
    avatar: str = betterproto.string_field(6)
    background_image: str = betterproto.string_field(7)
    extra: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class EoyBanner(betterproto.Message):
    round: int = betterproto.int64_field(1)
    title: str = betterproto.string_field(2)
    subtitle: str = betterproto.string_field(3)
    streak_info: "EoyBannerStreakInfo" = betterproto.message_field(4)
    start_time: int = betterproto.int64_field(5)
    end_time: int = betterproto.int64_field(6)
    announcement_starling_key: str = betterproto.string_field(7)
    description: str = betterproto.string_field(8)
    schema: str = betterproto.string_field(9)
    grade_info: "EoyBannerGradeInfo" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class EoyBannerGradeInfo(betterproto.Message):
    level: int = betterproto.int64_field(1)
    progress: int = betterproto.int64_field(2)
    target: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class EoyBannerMileStone(betterproto.Message):
    target_value: int = betterproto.int64_field(1)
    bonus_times: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class EoyBannerStreakInfo(betterproto.Message):
    streak_type: Optional["EoyBannerStreakInfoStreakType"] = betterproto.enum_field(
        1, optional=True
    )
    progress: int = betterproto.int64_field(2)
    mile_stones: List["EoyBannerMileStone"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Skin(betterproto.Message):
    account: "SkinHostAccount" = betterproto.message_field(1)
    drawer_entrance: "SkinDrawerEntrance" = betterproto.message_field(2)
    scene: "Scene" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class WebcastAnchorReminderWordMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    reminder_word_info: "AnchorReminderWordInfoMsg" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FansScoreRule(betterproto.Message):
    level: int = betterproto.int32_field(1)
    level_min_score: int = betterproto.int64_field(2)
    level_max_score: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class NoticeboardTemplate(betterproto.Message):
    noticeboard_template_id: int = betterproto.int64_field(1)
    media_node_id: str = betterproto.string_field(2)
    convert_noticeboard_material_info: "ConvertNoticeboardMaterialInfo" = (
        betterproto.message_field(3)
    )
    private_status: int = betterproto.int32_field(4)
    review_status: int = betterproto.int32_field(5)
    author_info: "SimpleUser" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class MultiLiveUserApplyPermission(betterproto.Message):
    multi_live_apply_permission: int = betterproto.int32_field(1)
    applier_sort_setting: int = betterproto.int64_field(2)
    applier_sort_gift_score_threshold: int = betterproto.int64_field(3)
    multi_guest_allow_request_from_friends: int = betterproto.int64_field(4)
    multi_guest_allow_request_from_followers: int = betterproto.int64_field(5)
    multi_guest_allow_request_from_others: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class AtmosphereInfo(betterproto.Message):
    tags: List["AtmosphereInfoTag"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AtmosphereInfoTag(betterproto.Message):
    type: int = betterproto.int32_field(1)
    desc: str = betterproto.string_field(2)
    count: int = betterproto.int64_field(3)
    status: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class AnchorPreFinishData(betterproto.Message):
    confirm_box: "AnchorPreFinishDataConfirmBox" = betterproto.message_field(1)
    finish_type: int = betterproto.int32_field(2)
    metrics_map: Dict[str, str] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class AnchorPreFinishDataConfirmBox(betterproto.Message):
    title: str = betterproto.string_field(1)
    value: int = betterproto.int64_field(2)
    schema_title: str = betterproto.string_field(3)
    unique_id: str = betterproto.string_field(4)
    content: str = betterproto.string_field(5)
    confirm_text: str = betterproto.string_field(6)
    cancel_text: str = betterproto.string_field(7)
    schema_jump_link: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class GuestShowdownContent(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    play_id: int = betterproto.int64_field(3)
    play_status: int = betterproto.int32_field(4)
    version: int = betterproto.int64_field(5)
    party_start_time: int = betterproto.int64_field(6)
    punishment_start_time: int = betterproto.int64_field(7)
    play_config: "GuestShowdownConfig" = betterproto.message_field(8)
    running_play_users: List["GuestShowdownUser"] = betterproto.message_field(9)
    leave_play_users: List["GuestShowdownUser"] = betterproto.message_field(10)
    stream_id: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class RoomLinkInfo(betterproto.Message):
    channel_id: int = betterproto.int64_field(1)
    channel_info: "ChannelInfo" = betterproto.message_field(2)
    rival_anchor_id: int = betterproto.int64_field(5)
    audience_id_list: List[int] = betterproto.int64_field(6)
    show_user_list: List["User"] = betterproto.message_field(7)
    followed_count: int = betterproto.int64_field(8)
    linked_users: List["User"] = betterproto.message_field(9)
    battle_info: "BattleInfoResponse" = betterproto.message_field(10)
    multi_live_type: int = betterproto.int64_field(11)
    topic_info: "CohostTopic" = betterproto.message_field(53)
    topic_status: "TopicSessionStatus" = betterproto.message_field(54)
    competition_info: "CompetitionInfo" = betterproto.message_field(60)


@dataclass(eq=False, repr=False)
class RankTabInfo(betterproto.Message):
    rank_type: Optional["RankTabInfoProfitRankType"] = betterproto.enum_field(
        1, optional=True
    )
    title: "Text" = betterproto.message_field(3)
    list_lynx_type: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class UserPosition(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    position: "MicPositionData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BizPermitJoinGroupResponse(betterproto.Message):
    data: "BizPermitJoinGroupResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BizPermitJoinGroupResponseResponseData(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BattleTaskSettle(betterproto.Message):
    task_result: Optional["BattleTaskSettleResult"] = betterproto.enum_field(
        1, optional=True
    )
    reward_start_time: int = betterproto.int64_field(2)
    reward_start_timestamp: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class RtcMixBase(betterproto.Message):
    bitrate: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class CapsuleBizParamsGamingModeratorsCommentGuide(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    reply_msg_text: "Text" = betterproto.message_field(2)
    recommend_text: "RecommendComment" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GiftListResult(betterproto.Message):
    gifts_info: "GiftsInfo" = betterproto.message_field(1)
    gift_list: List["Gift"] = betterproto.message_field(2)
    gift_pages: List["GiftPage"] = betterproto.message_field(3)
    doodle_templates: List["DoodleTemplate"] = betterproto.message_field(4)
    response_hash: str = betterproto.string_field(5)
    refresh_status: int = betterproto.int32_field(6)
    cold_gift_hash: str = betterproto.string_field(7)
    is_full_gift_data: bool = betterproto.bool_field(8)
    hot_fields: List[str] = betterproto.string_field(9)
    gift_configs: "GiftConfigs" = betterproto.message_field(10)
    tags: List[int] = betterproto.int32_field(11)
    dynamic_restriction: "DynamicRestriction" = betterproto.message_field(12)
    beacon_bubble_priorities: Dict[int, int] = betterproto.map_field(
        13, betterproto.TYPE_INT64, betterproto.TYPE_INT64
    )
    gift_label_priorities: Dict[int, int] = betterproto.map_field(
        14, betterproto.TYPE_INT64, betterproto.TYPE_INT64
    )
    strategy_token: str = betterproto.string_field(100)
    panel_refresh_data: "PanelRefreshData" = betterproto.message_field(101)


@dataclass(eq=False, repr=False)
class LinkerInfo(betterproto.Message):
    linked_users: List["UserInfo"] = betterproto.message_field(1)
    in_quick_pairing: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class WebcastPaidContentLiveShoppingMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    action_type: int = betterproto.int32_field(2)
    live_series_number: int = betterproto.int32_field(3)
    pop_series: "PopSeries" = betterproto.message_field(4)
    time_tag: "TimeTag" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class UseTop2Card(betterproto.Message):
    card_info: "Top2CardInfo" = betterproto.message_field(1)
    anchor_id: int = betterproto.int64_field(2)
    display_content: "Text" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class LetViewerSingResp(betterproto.Message):
    common_resp: "LinkMicCommonResp" = betterproto.message_field(1)
    applier_ext_info: "RtcExtraInfo" = betterproto.message_field(2)
    applier_link_mic_id: str = betterproto.string_field(3)
    is_only_add_song: bool = betterproto.bool_field(4)
    multi_guest_resp_extra: "BizApplyResponse" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class WebcastRoomUserSeqMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    m_contributors: List["Contributor"] = betterproto.message_field(2)
    m_total: int = betterproto.int64_field(3)
    pop_str: str = betterproto.string_field(4)
    seats: List["Contributor"] = betterproto.message_field(5)
    m_popularity: int = betterproto.int64_field(6)
    total_user: int = betterproto.int64_field(7)
    anonymous: int = betterproto.int64_field(8)


@dataclass(eq=False, repr=False)
class UseTop3Card(betterproto.Message):
    card_info: "Top3CardInfo" = betterproto.message_field(1)
    anchor_id: int = betterproto.int64_field(2)
    display_content: "Text" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CompetitionInitiate(betterproto.Message):
    initiate_info: "CompetitionInitiateInfo" = betterproto.message_field(1)
    gift_permissions: Dict[int, int] = betterproto.map_field(
        2, betterproto.TYPE_INT64, betterproto.TYPE_INT32
    )


@dataclass(eq=False, repr=False)
class PreviewRoom(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    live_id: int = betterproto.int64_field(2)
    identity: str = betterproto.string_field(3)
    cursor: str = betterproto.string_field(4)
    account_type: int = betterproto.int64_field(5)
    enter_uniq_id: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class RandomGiftBubble(betterproto.Message):
    bubble_display_text: str = betterproto.string_field(1)
    image: "ImageModel" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastLinkMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    channel_id: int = betterproto.int64_field(3)
    scene: "Scene" = betterproto.enum_field(4)
    invite_content: "LinkerInviteContent" = betterproto.message_field(5)
    reply_content: "LinkerReplyContent" = betterproto.message_field(6)
    create_content: "LinkerCreateContent" = betterproto.message_field(7)
    close_content: "LinkerCloseContent" = betterproto.message_field(8)
    enter_content: "LinkerEnterContent" = betterproto.message_field(9)
    leave_content: "LinkerLeaveContent" = betterproto.message_field(10)
    cancel_content: "LinkerCancelContent" = betterproto.message_field(11)
    kick_out_content: "LinkerKickOutContent" = betterproto.message_field(12)
    linked_list_change_content: "LinkedListChangeContent" = betterproto.message_field(
        13
    )
    update_user_content: "LinkerUpdateUserContent" = betterproto.message_field(14)
    waiting_list_change_content: "LinkerWaitingListChangeContent" = (
        betterproto.message_field(15)
    )
    mute_content: "LinkerMuteContent" = betterproto.message_field(16)
    random_match_content: "LinkerRandomMatchContent" = betterproto.message_field(17)
    multi_live_update_user_setting_content: "MultiLiveUpdateUserSettingContent" = (
        betterproto.message_field(18)
    )
    mic_idx_update_content: "LinkerMicIdxUpdateContent" = betterproto.message_field(19)
    m_list_change_content: "LinkerListChangeContent" = betterproto.message_field(20)
    cohost_list_change_content: "CohostListChangeContent" = betterproto.message_field(
        21
    )
    media_change_content: "LinkerMediaChangeContent" = betterproto.message_field(22)
    accept_notice_content_message: "LinkerAcceptNoticeContent" = (
        betterproto.message_field(23)
    )
    sys_kick_out_content: "LinkerSysKickOutContent" = betterproto.message_field(101)
    user_toast_content: "LinkmicUserToastContent" = betterproto.message_field(102)
    extra_str: str = betterproto.string_field(200)
    expire_timestamp: int = betterproto.int64_field(201)
    transfer_extra: str = betterproto.string_field(202)


@dataclass(eq=False, repr=False)
class MultiBattleFinishResponse(betterproto.Message):
    team_battle_result: Dict[int, "BattleTeamResult"] = betterproto.map_field(
        1, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    team_armies: Dict[int, "BattleTeamUserArmies"] = betterproto.map_field(
        2, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    battle_settings: "BattleSetting" = betterproto.message_field(3)
    has_team_match_mvp_sfx: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class WebcastBarrageMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    event: "WebcastBarrageMessageBarrageEvent" = betterproto.message_field(2)
    msg_type: Optional["WebcastBarrageMessageBarrageType"] = betterproto.enum_field(
        3, optional=True
    )
    icon: "ImageModel" = betterproto.message_field(4)
    content: "Text" = betterproto.message_field(5)
    duration: int = betterproto.int64_field(6)
    back_ground: "ImageModel" = betterproto.message_field(7)
    right_icon: "ImageModel" = betterproto.message_field(8)
    display_config: int = betterproto.int32_field(9)
    gallery_gift_id: int = betterproto.int64_field(10)
    scene: "Scene" = betterproto.enum_field(11)
    control: "DisplayControl" = betterproto.message_field(12)
    right_label: "WebcastBarrageMessageRightLabel" = betterproto.message_field(13)
    use_marquee: bool = betterproto.bool_field(14)
    show_type: Optional["WebcastBarrageMessageShowType"] = betterproto.enum_field(
        15, optional=True
    )
    badge: "BadgeStruct" = betterproto.message_field(16)
    render_type: Optional["WebcastBarrageMessageRenderType"] = betterproto.enum_field(
        17, optional=True
    )
    left_icon_display_type: Optional["WebcastBarrageMessageIconDisplayType"] = (
        betterproto.enum_field(18, optional=True)
    )
    ribbon_animation: "ImageModel" = betterproto.message_field(19)
    animation_data: "AnimationData" = betterproto.message_field(20)
    hybrid_url: str = betterproto.string_field(21)
    schema: str = betterproto.string_field(22)
    sub_type: str = betterproto.string_field(23)
    common_barrage_content: "Text" = betterproto.message_field(24)
    user_grade_param: "BarrageTypeUserGradeParam" = betterproto.message_field(100)
    fans_level_param: "BarrageTypeFansLevelParam" = betterproto.message_field(101)
    subscribe_gift_param: "BarrageTypeSubscribeGiftParam" = betterproto.message_field(
        102
    )
    privilege_log_extra: "PrivilegeLogExtra" = betterproto.message_field(103)
    gift_gallery_params: "BarrageTypeGiftGalleryParam" = betterproto.message_field(104)


@dataclass(eq=False, repr=False)
class WebcastBarrageMessageBarrageEvent(betterproto.Message):
    event_name: str = betterproto.string_field(1)
    params: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class WebcastBarrageMessageRightLabel(betterproto.Message):
    background_color: str = betterproto.string_field(1)
    content: "Text" = betterproto.message_field(2)
    height: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class WebcastGiftNoticeMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    gift_notice: "GiftNotice" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LiveStudioPermissionStatus(betterproto.Message):
    permission_type: int = betterproto.int32_field(1)
    valid_end_time: int = betterproto.int64_field(2)
    valid_start_time: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class WebcastBizStickerMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    biz_sticker: List["RoomSticker"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BizJoinChannelResponse(betterproto.Message):
    response_data: "BizJoinChannelResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QuizQuestionOption(betterproto.Message):
    option_id: str = betterproto.string_field(2)
    content: str = betterproto.string_field(3)
    image: List["QuizImage"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class AvatarImageSelectTips(betterproto.Message):
    title: str = betterproto.string_field(1)
    desc: str = betterproto.string_field(2)
    examples: List["AvatarImageCase"] = betterproto.message_field(3)
    rules: List[str] = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class WebcastNewAnchorGuideMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    guide_msg: "NewAnchorGuideMsgInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LiveScenario(betterproto.Message):
    enable_live_video: bool = betterproto.bool_field(1)
    enable_live_third_party: bool = betterproto.bool_field(2)
    enable_live_screenshot: bool = betterproto.bool_field(3)
    enable_social_live: bool = betterproto.bool_field(4)
    enable_live_studio: bool = betterproto.bool_field(5)
    enable_pico_show: bool = betterproto.bool_field(6)
    enable_pico_game: bool = betterproto.bool_field(7)
    enable_pico_virtual: bool = betterproto.bool_field(8)
    enable_live_voice: bool = betterproto.bool_field(9)
    enable_streamelements: bool = betterproto.bool_field(11)
    enable_restream: bool = betterproto.bool_field(12)
    enable_live_console: bool = betterproto.bool_field(13)


@dataclass(eq=False, repr=False)
class EffectSearchResponse(betterproto.Message):
    data: "EffectSearchResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class EffectSearchResponseResponseData(betterproto.Message):
    effects: List["EffectStruct"] = betterproto.message_field(1)
    next_offset: int = betterproto.int64_field(2)
    has_more: bool = betterproto.bool_field(3)
    collections: List["EffectStruct"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CancelApplyContent(betterproto.Message):
    applicant: "Player" = betterproto.message_field(1)
    applicant_link_mic_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class AnchorGrowLevelImMsgV2(betterproto.Message):
    msg_type: int = betterproto.int32_field(1)
    notification_data: "AnchorGrowLevelImMsgNotification" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class StarCommentQueue(betterproto.Message):
    star_comment_list: List["StarCommentItem"] = betterproto.message_field(1)
    queue_version: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class FilterMsgRuleParamRandom(betterproto.Message):
    percentage: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class TakeTheStageInfo(betterproto.Message):
    take_the_stage_status: Optional["TakeTheStageInfoTakeTheStageStatus"] = (
        betterproto.enum_field(1, optional=True)
    )
    take_the_stage_start_time: int = betterproto.int64_field(2)
    victory_lap_info: "TakeTheStageInfoVictoryLapInfo" = betterproto.message_field(3)
    started_info: "TakeTheStageInfoStartedInfo" = betterproto.message_field(100)
    final_call_info: "TakeTheStageInfoFinalCallInfo" = betterproto.message_field(101)


@dataclass(eq=False, repr=False)
class TakeTheStageInfoFinalCallInfo(betterproto.Message):
    planned_settlement_end_time: int = betterproto.int64_field(1)
    extra_time_interval: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class TakeTheStageInfoStartedInfo(betterproto.Message):
    performance_start_time: int = betterproto.int64_field(1)
    order_info: "TakeTheStageOrderInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TakeTheStageInfoVictoryLapInfo(betterproto.Message):
    planned_finish_time: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class GameTagCategory(betterproto.Message):
    game_type: Optional["GameTagCategoryGameTagType"] = betterproto.enum_field(
        1, optional=True
    )
    title: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class NumberConfig(betterproto.Message):
    number: int = betterproto.int64_field(1)
    font_style: "FontStyle" = betterproto.message_field(2)
    background: "CombineBadgeBackground" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AnchorLevel(betterproto.Message):
    level: int = betterproto.int32_field(1)
    experience: int = betterproto.int64_field(2)
    lowest_experience_this_level: int = betterproto.int64_field(3)
    highest_experience_this_level: int = betterproto.int64_field(4)
    task_start_experience: int = betterproto.int64_field(5)
    task_start_time: int = betterproto.int64_field(6)
    task_decrease_experience: int = betterproto.int64_field(7)
    task_target_experience: int = betterproto.int64_field(8)
    task_end_time: int = betterproto.int64_field(9)
    profile_dialog_bg: "ImageModel" = betterproto.message_field(10)
    profile_dialog_back_bg: "ImageModel" = betterproto.message_field(11)
    stage_level_icon: "ImageModel" = betterproto.message_field(12)
    level_icon: "ImageModel" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class WebcastGuestShowdownMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    play_content: "GuestShowdownContent" = betterproto.message_field(3)
    operator_user_info: "LinkerMediaChangeOperator" = betterproto.message_field(4)
    play_closed_reason: int = betterproto.int32_field(5)
    to_calculating_reason: int = betterproto.int32_field(6)
    guest_showdown_config_change: "GuestShowdownConfigChange" = (
        betterproto.message_field(7)
    )


@dataclass(eq=False, repr=False)
class PaddingInfo(betterproto.Message):
    use_specific: bool = betterproto.bool_field(1)
    middle_padding: int = betterproto.int32_field(2)
    badge_width: int = betterproto.int32_field(3)
    left_padding: int = betterproto.int32_field(4)
    right_padding: int = betterproto.int32_field(5)
    icon_top_padding: int = betterproto.int32_field(6)
    icon_bottom_padding: int = betterproto.int32_field(7)
    horizontal_padding_rule: Optional["PaddingInfoHorizontalPaddingRule"] = (
        betterproto.enum_field(8, optional=True)
    )
    vertical_padding_rule: Optional["PaddingInfoVerticalPaddingRule"] = (
        betterproto.enum_field(9, optional=True)
    )


@dataclass(eq=False, repr=False)
class AwardCardNotice(betterproto.Message):
    display_content: "Text" = betterproto.message_field(1)
    awarded_users: List["BattleUserInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RoomAuthMessageGoldenEnvelope(betterproto.Message):
    revoke_end_time: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class AnchorSettingInfo(betterproto.Message):
    last_layout_settings: List["AnchorSettingInfoAnchorLastLayoutSetting"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class AnchorSettingInfoAnchorLastLayoutSetting(betterproto.Message):
    scene: "Scene" = betterproto.enum_field(1)
    layout_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ShowContent(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    show_id: int = betterproto.int64_field(3)
    show_status: int = betterproto.int32_field(4)
    version: int = betterproto.int64_field(5)
    show_create_time: int = betterproto.int64_field(6)
    show_config: "ShowConfig" = betterproto.message_field(7)
    showing_and_ready_list: List["ShowListUser"] = betterproto.message_field(9)
    finished_list: List["ShowListUser"] = betterproto.message_field(10)
    transition_info: "TransitionInfo" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class RoomReplayReason(betterproto.Message):
    reason: str = betterproto.string_field(1)
    value: int = betterproto.int64_field(2)
    type: str = betterproto.string_field(3)
    promotion_id: str = betterproto.string_field(4)
    type_name: str = betterproto.string_field(5)
    type_icon: "ImageModel" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class WebcastQuestionSlideDownMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    question_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class UseCriticalStrikeCard(betterproto.Message):
    card_info: "CriticalStrikeCardInfo" = betterproto.message_field(1)
    anchor_id: int = betterproto.int64_field(2)
    display_content: "Text" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class BattleTruthOrDareTriggerGuideV2(betterproto.Message):
    anchor_content_key: str = betterproto.string_field(1)
    audience_content_key: str = betterproto.string_field(2)
    tips: List["BattleTruthOrDareTriggerGuideV2TruthOrDareTip"] = (
        betterproto.message_field(3)
    )
    guide_duration_second: int = betterproto.int32_field(4)
    tip_duration_second: int = betterproto.int32_field(5)
    rule_detail_url: str = betterproto.string_field(6)
    lap_guide_key: str = betterproto.string_field(7)
    lap_guide_duration_second: int = betterproto.int32_field(8)
    is_first_time: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class BattleTruthOrDareTriggerGuideV2TruthOrDareTip(betterproto.Message):
    tip_type_key: str = betterproto.string_field(1)
    tip_content_key: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WaveReward(betterproto.Message):
    emote: "EmoteModel" = betterproto.message_field(1)
    f307_emotes: List["EmoteModel"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GuestShowdownFinishToPunishmentResponse(betterproto.Message):
    data: "GuestShowdownFinishToPunishmentResponseResponseData" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class GuestShowdownFinishToPunishmentResponseResponseData(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    play_content: "GuestShowdownContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WaveCardInfo(betterproto.Message):
    card_name_key: str = betterproto.string_field(1)
    card_image: "ImageModel" = betterproto.message_field(2)
    send_time_sec: int = betterproto.int64_field(3)
    send_user: "BattleUserInfo" = betterproto.message_field(4)
    effect_last_duration: int = betterproto.int64_field(5)
    rule_url: str = betterproto.string_field(6)
    effect_time_sec: int = betterproto.int64_field(7)
    to_anchor_id: int = betterproto.int64_field(8)


@dataclass(eq=False, repr=False)
class HostDisplayResponse(betterproto.Message):
    data: "HostDisplayResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class HostDisplayResponseDisplayInfo(betterproto.Message):
    host_icon_background_url: str = betterproto.string_field(1)
    host_icon_url: str = betterproto.string_field(2)
    host_color: str = betterproto.string_field(3)
    icon_link_url: str = betterproto.string_field(4)
    host_type: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class HostDisplayResponseResponseData(betterproto.Message):
    display_info: "HostDisplayResponseDisplayInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GuidePageResource(betterproto.Message):
    texts: List["Text"] = betterproto.message_field(1)
    icons: List["ImageModel"] = betterproto.message_field(2)
    animations: List["ImageModel"] = betterproto.message_field(3)
    badges: List["BadgeStruct"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class InviteExtra(betterproto.Message):
    log_pb: "InviteExtraLogPb" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class InviteExtraLogPb(betterproto.Message):
    client_log_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GameBanner(betterproto.Message):
    livechat_banner: "BannerInRoom" = betterproto.message_field(1)
    banner_image: "ImageModel" = betterproto.message_field(2)
    activity_start_time: int = betterproto.int64_field(3)
    activity_end_time: int = betterproto.int64_field(4)
    activity_id: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class SubjectPositionInfo(betterproto.Message):
    top_offset: float = betterproto.float_field(1)
    center_offset: float = betterproto.float_field(2)
    expire_time: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class MultiLiveUserSettings(betterproto.Message):
    multi_live_user_apply_settings: "MultiLiveUserApplySettings" = (
        betterproto.message_field(1)
    )
    channel_map: Dict[str, int] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_INT64
    )
    co_host: "CoHost" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AudioStruct(betterproto.Message):
    id: int = betterproto.int64_field(1)
    duration: int = betterproto.int32_field(2)
    audio_format: int = betterproto.int32_field(3)
    vid: str = betterproto.string_field(4)
    audio_urls: List[str] = betterproto.string_field(5)
    volume_loudness_lufs: float = betterproto.double_field(6)
    volume_amplitude_peak: float = betterproto.double_field(7)


@dataclass(eq=False, repr=False)
class MultiGuestPermissionInfo(betterproto.Message):
    flag: bool = betterproto.bool_field(1)
    err_code: int = betterproto.int64_field(2)
    no_permission_prompt: str = betterproto.string_field(3)
    link_permission_type: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class StreamUrl(betterproto.Message):
    provider: int = betterproto.int32_field(1)
    id: int = betterproto.int64_field(2)
    id_str: str = betterproto.string_field(3)
    resolution_name: Dict[str, str] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    default_resolution: str = betterproto.string_field(5)
    extra: "StreamUrlExtra" = betterproto.message_field(6)
    rtmp_push_url: str = betterproto.string_field(7)
    rtmp_pull_url: str = betterproto.string_field(8)
    flv_pull_url: Dict[str, str] = betterproto.map_field(
        9, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    candidate_resolution: List[str] = betterproto.string_field(10)
    hls_pull_url: str = betterproto.string_field(11)
    hls_pull_url_params: str = betterproto.string_field(12)
    default_pull_sdk_params: str = betterproto.string_field(13)
    pull_sdk_params: Dict[str, str] = betterproto.map_field(
        14, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    push_sdk_params: str = betterproto.string_field(15)
    push_url_list: List[str] = betterproto.string_field(16)
    live_core_s_d_k_data: "LiveCoreSdkData" = betterproto.message_field(17)
    hls_pull_url_map: Dict[str, str] = betterproto.map_field(
        18, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    complete_push_urls: List[str] = betterproto.string_field(19)
    stream_control_type: int = betterproto.int32_field(20)
    stream_delay_ms: int = betterproto.int64_field(22)
    push_resolution: str = betterproto.string_field(23)
    stream_app_id: int = betterproto.int64_field(24)
    alive_timestamp: int = betterproto.int64_field(25)
    stream_size_width: int = betterproto.int64_field(26)
    stream_size_height: int = betterproto.int64_field(27)
    drm_type: int = betterproto.int32_field(28)


@dataclass(eq=False, repr=False)
class GameTaskRewardInfo(betterproto.Message):
    reward_id: str = betterproto.string_field(1)
    status: int = betterproto.int32_field(2)
    reward_value: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetShowRankResponse(betterproto.Message):
    data: "GetShowRankResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetShowRankResponseShowRankUser(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    order: int = betterproto.int32_field(2)
    score: int = betterproto.int64_field(3)
    nickname: str = betterproto.string_field(4)
    avatar_thumb: "ImageModel" = betterproto.message_field(5)
    follow_status: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class GetShowRankResponseResponseData(betterproto.Message):
    show_rank_users: List["GetShowRankResponseShowRankUser"] = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class UserCountdownInfo(betterproto.Message):
    countdown_id: int = betterproto.int64_field(1)
    score: int = betterproto.int64_field(2)
    target_score: int = betterproto.int64_field(3)
    completion_progress_percent: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class QuizUserQuestionResult(betterproto.Message):
    correct_answer: str = betterproto.string_field(1)
    user_answer: str = betterproto.string_field(2)
    question_id: str = betterproto.string_field(3)
    question_no: int = betterproto.int32_field(4)
    simple_user_answer: str = betterproto.string_field(5)
    is_use_respawn: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class Contributor(betterproto.Message):
    m_score: int = betterproto.int64_field(1)
    m_user: "User" = betterproto.message_field(2)
    m_rank: int = betterproto.int64_field(3)
    m_delta: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class ContinueRoomResponse(betterproto.Message):
    room: "Room" = betterproto.message_field(1)
    cross_device_continue_scene: int = betterproto.int32_field(2)
    continue_scene: int = betterproto.int32_field(3)
    link_mic_user_num: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class AnchorGrowLevelImMsg(betterproto.Message):
    msg_type: int = betterproto.int32_field(1)
    task_done_data: "AnchorGrowLevelImMsgTaskDone" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CancelApplyResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ReceiverRestriction(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    hidden_gids: List[int] = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class ActivePlaybook(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    play_id: int = betterproto.int64_field(2)
    play_status: int = betterproto.int32_field(3)
    playbook: "Playbook" = betterproto.message_field(4)
    exists_custom_content: bool = betterproto.bool_field(5)
    start_time: int = betterproto.int64_field(6)
    end_time: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class BaLinkStruct(betterproto.Message):
    ba_link_permission: int = betterproto.int32_field(1)
    ba_link_data: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PreviewCommentInfo(betterproto.Message):
    polling_interval: int = betterproto.int64_field(1)
    comment_list: List["PreviewCommentItem"] = betterproto.message_field(2)
    expire_time: int = betterproto.int64_field(3)
    title: str = betterproto.string_field(4)
    icon: "ImageModel" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class WebcastWishlistUpdateMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AvatarState(betterproto.Message):
    avatar_id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class GuideReportResponse(betterproto.Message):
    data: "GuideReportResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GuideReportResponseData(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class StateReqCommon(betterproto.Message):
    scene: "Scene" = betterproto.enum_field(1)
    app_id: int = betterproto.int64_field(2)
    live_id: int = betterproto.int64_field(3)
    myself: "Player" = betterproto.message_field(4)
    channel_id: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class JoinDirectContent(betterproto.Message):
    joiner: "LinkLayerListUser" = betterproto.message_field(1)
    all_users: "AllListUser" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AnchorLinkmicUserSettings(betterproto.Message):
    is_turn_on: bool = betterproto.bool_field(1)
    accept_multi_linkmic: bool = betterproto.bool_field(2)
    accept_not_follower_invite: bool = betterproto.bool_field(3)
    allow_gift_to_other_anchors: bool = betterproto.bool_field(4)
    block_invitation_of_this_live: bool = betterproto.bool_field(5)
    receive_friend_multi_host_invites: bool = betterproto.bool_field(6)
    receive_friend_multi_host_application: bool = betterproto.bool_field(7)
    block_this_multi_host_invites: bool = betterproto.bool_field(8)
    block_this_multi_host_application: bool = betterproto.bool_field(9)
    receive_not_friend_multi_host_invites: bool = betterproto.bool_field(10)
    receive_not_friend_multi_host_application: bool = betterproto.bool_field(11)
    allow_live_notice_of_friends: bool = betterproto.bool_field(12)
    allow_friend_invites: bool = betterproto.bool_field(13)
    allow_suggested_invites: bool = betterproto.bool_field(14)


@dataclass(eq=False, repr=False)
class PublicAreaMessageCommon(betterproto.Message):
    scroll_gap_count: int = betterproto.int64_field(1)
    anchor_scroll_gap_count: int = betterproto.int64_field(2)
    release_to_scroll_area: bool = betterproto.bool_field(3)
    anchor_release_to_scroll_area: bool = betterproto.bool_field(4)
    is_anchor_marked: bool = betterproto.bool_field(5)
    creator_success_info: "PublicAreaMessageCommonCreatorSuccessInfo" = (
        betterproto.message_field(6)
    )
    portrait_info: "PublicAreaMessageCommonPortraitInfo" = betterproto.message_field(7)
    user_interaction_info: "PublicAreaMessageCommonUserInteractionInfo" = (
        betterproto.message_field(8)
    )
    admin_fold_type: int = betterproto.int64_field(9)


@dataclass(eq=False, repr=False)
class PublicAreaMessageCommonTagItem(betterproto.Message):
    tag_type: Optional["PublicAreaMessageCommonTagItemTagType"] = (
        betterproto.enum_field(1, optional=True)
    )
    tag_text: "Text" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PublicAreaMessageCommonTopic(betterproto.Message):
    topic_action_type: Optional["PublicAreaMessageCommonTopicTopicActionType"] = (
        betterproto.enum_field(1, optional=True)
    )
    topic_text: "Text" = betterproto.message_field(2)
    topic_tips: "Text" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PublicAreaMessageCommonCreatorSuccessInfo(betterproto.Message):
    tags: List["PublicAreaMessageCommonTagItem"] = betterproto.message_field(1)
    topic: "PublicAreaMessageCommonTopic" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PublicAreaMessageCommonUserMetrics(betterproto.Message):
    type: Optional["PublicAreaMessageCommonUserMetricsUserMetricsType"] = (
        betterproto.enum_field(1, optional=True)
    )
    metrics_value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PublicAreaMessageCommonPortraitTag(betterproto.Message):
    tag_id: str = betterproto.string_field(1)
    priority: int = betterproto.int64_field(2)
    show_value: str = betterproto.string_field(3)
    show_args: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class PublicAreaMessageCommonPortraitInfo(betterproto.Message):
    user_metrics: List["PublicAreaMessageCommonUserMetrics"] = (
        betterproto.message_field(1)
    )
    portrait_tag: List["PublicAreaMessageCommonPortraitTag"] = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class PublicAreaMessageCommonUserInteractionInfo(betterproto.Message):
    like_cnt: int = betterproto.int64_field(1)
    comment_cnt: int = betterproto.int64_field(2)
    share_cnt: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class NoticeboardTemplateDeleteResponse(betterproto.Message):
    data: "NoticeboardTemplateDeleteResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NoticeboardTemplateDeleteResponseResponseData(betterproto.Message):
    is_success: bool = betterproto.bool_field(1)
    noticeboard_template_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class PermitJoinGroupReq(betterproto.Message):
    common: "LinkCommon" = betterproto.message_field(1)
    type: int = betterproto.int32_field(2)
    myself: "GroupPlayer" = betterproto.message_field(3)
    join_user: "GroupPlayer" = betterproto.message_field(4)
    status: int = betterproto.int32_field(5)
    group_channel_id: int = betterproto.int64_field(6)
    content_position_message: List["ContentPositionMessage"] = (
        betterproto.message_field(7)
    )
    cohost_req_extra: "BizPermitJoinGroupParams" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class CohostTopic(betterproto.Message):
    id: int = betterproto.int64_field(1)
    title_key: str = betterproto.string_field(2)
    title_text: str = betterproto.string_field(3)
    liked: bool = betterproto.bool_field(21)
    total_heat: int = betterproto.int64_field(22)
    total_rivals: int = betterproto.int64_field(23)
    rivals_avatar: List["ImageModel"] = betterproto.message_field(24)


@dataclass(eq=False, repr=False)
class WebcastActivityQuizCardMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    schema: str = betterproto.string_field(2)
    primary_id: str = betterproto.string_field(3)
    timestamp: int = betterproto.int64_field(4)
    question: "QuizQuestionInfo" = betterproto.message_field(5)
    answer: "QuizAnswerInfo" = betterproto.message_field(6)
    final_result: "QuizFinalResult" = betterproto.message_field(7)
    call_up_webview: "QuizCallUpWebview" = betterproto.message_field(8)
    rules_introduction: "QuizRulesIntroduction" = betterproto.message_field(9)
    sei_delay_multiple: float = betterproto.float_field(10)
    sei_delay_bias: int = betterproto.int64_field(11)
    expired_time: int = betterproto.int64_field(12)


@dataclass(eq=False, repr=False)
class RoomReplayMoment(betterproto.Message):
    id: str = betterproto.string_field(1)
    moment_start_time: int = betterproto.int64_field(2)
    moment_end_time: int = betterproto.int64_field(3)
    vid: str = betterproto.string_field(4)
    push_status: int = betterproto.int64_field(5)
    reason: "RoomReplayReason" = betterproto.message_field(6)
    cover: "ImageModel" = betterproto.message_field(7)
    play_url: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class AnchorLevelPermission(betterproto.Message):
    beauty: int = betterproto.int32_field(1)
    effects: int = betterproto.int32_field(2)
    share: int = betterproto.int32_field(3)
    moderator_setting: int = betterproto.int32_field(4)
    comment_setting: int = betterproto.int32_field(5)
    comment_filter: int = betterproto.int32_field(6)
    pause_live: int = betterproto.int32_field(7)
    flip: int = betterproto.int32_field(8)
    mirror: int = betterproto.int32_field(9)
    hear_your_own_voice: int = betterproto.int32_field(10)
    donation_sticker: int = betterproto.int32_field(11)
    full_screen_mode: int = betterproto.int32_field(12)
    live_center: int = betterproto.int32_field(13)
    topic: int = betterproto.int32_field(14)
    sticker: int = betterproto.int32_field(15)
    voice_effect: int = betterproto.int32_field(16)
    live_intro: int = betterproto.int32_field(17)
    webcast_data_interactionquestion: int = betterproto.int32_field(18)
    poll: int = betterproto.int32_field(19)
    pin: int = betterproto.int32_field(20)
    pictionary: int = betterproto.int32_field(21)
    viewer_rank_list: int = betterproto.int32_field(22)
    promote: int = betterproto.int32_field(23)
    customizable_poll: int = betterproto.int32_field(24)
    goody_bag: int = betterproto.int32_field(25)
    karaoke: int = betterproto.int32_field(26)
    treasure_box: int = betterproto.int32_field(27)
    portal: int = betterproto.int32_field(28)
    live_background: int = betterproto.int32_field(29)
    play_together: int = betterproto.int32_field(30)


@dataclass(eq=False, repr=False)
class InGameInfo(betterproto.Message):
    show_in_game_rank: bool = betterproto.bool_field(1)
    allow_guide_gametag_ids: List[int] = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class SubWaveData(betterproto.Message):
    sub_wave_im_msg: "SubWaveImMsg" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CohostListUser(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    nick_name: str = betterproto.string_field(2)
    avatar_thumb: "ImageModel" = betterproto.message_field(3)
    linked_time: int = betterproto.int64_field(4)
    play_type: Optional["CohostListUserLinkmicPlayType"] = betterproto.enum_field(
        5, optional=True
    )
    room_id: int = betterproto.int64_field(6)
    linkmic_user_status: Optional["CohostListUserLinkmicUserStatus"] = (
        betterproto.enum_field(7, optional=True)
    )
    link_remaining_time: int = betterproto.int64_field(8)
    permission_type: Optional["CohostListUserCoHostPermissoinType"] = (
        betterproto.enum_field(9, optional=True)
    )
    display_id: str = betterproto.string_field(10)
    follow_status: int = betterproto.int64_field(11)
    is_low_version: bool = betterproto.bool_field(12)
    rival_user_id: int = betterproto.int64_field(13)
    rival_room_id: int = betterproto.int64_field(14)
    is_initiator: bool = betterproto.bool_field(15)
    linkmic_id_str: str = betterproto.string_field(16)
    best_teammate_uid: int = betterproto.int64_field(17)
    has_topic_perm: bool = betterproto.bool_field(18)
    inner_channel_id: int = betterproto.int64_field(19)


@dataclass(eq=False, repr=False)
class LinkerListChangeContent(betterproto.Message):
    on_line_users: List["LinkListUser"] = betterproto.message_field(1)
    waiting_users: List["LinkListUser"] = betterproto.message_field(2)
    connecting_users: List["LinkListUser"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WebcastPortalMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    payload_type: int = betterproto.int32_field(2)
    portal_id: int = betterproto.int64_field(3)
    room_id: int = betterproto.int64_field(4)
    portal_buy: "WebcastPortalMessagePortalBuy" = betterproto.message_field(5)
    portal_invite: "WebcastPortalMessagePortalInvite" = betterproto.message_field(6)
    portal_finish: "WebcastPortalMessagePortalFinish" = betterproto.message_field(7)
    portal: "Portal" = betterproto.message_field(8)
    next_ping_time: int = betterproto.int64_field(9)


@dataclass(eq=False, repr=False)
class WebcastPortalMessagePortalBuy(betterproto.Message):
    sugar_daddy: "User" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WebcastPortalMessagePortalFinish(betterproto.Message):
    lucky_person: "User" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WebcastPortalMessagePortalInvite(betterproto.Message):
    invite_count_down: int = betterproto.int64_field(1)
    reward_count_down: int = betterproto.int64_field(2)
    sugar_daddy: "User" = betterproto.message_field(3)
    anchor: "User" = betterproto.message_field(4)
    cover: "ImageModel" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class Diamond(betterproto.Message):
    id: int = betterproto.int32_field(1)
    iap_id: str = betterproto.string_field(2)
    price: str = betterproto.string_field(3)
    exchange_price: int = betterproto.int32_field(4)
    count: int = betterproto.int32_field(5)
    giving_count: int = betterproto.int32_field(6)
    describe: str = betterproto.string_field(7)
    currency_price: List["CurrencyPriceItem"] = betterproto.message_field(8)
    coupon_id: str = betterproto.string_field(9)
    discount_price: int = betterproto.int32_field(10)
    stall_type: int = betterproto.int32_field(11)
    generic_iap_id: str = betterproto.string_field(12)
    is_last: bool = betterproto.bool_field(101)
    is_frequent: bool = betterproto.bool_field(102)


@dataclass(eq=False, repr=False)
class GoodyBagCommonDetail(betterproto.Message):
    winner_headcount: int = betterproto.int32_field(1)
    joined_headcount: int = betterproto.int32_field(2)
    participate_method: Optional["GoodyBagCommonDetailParticipateMethod"] = (
        betterproto.enum_field(3, optional=True)
    )
    participate_method_content: str = betterproto.string_field(4)
    open_at: int = betterproto.int32_field(5)
    count_down_minutes: int = betterproto.int32_field(6)
    participate_threshold_selected: "ParticipateThresholdSelected" = (
        betterproto.message_field(7)
    )


@dataclass(eq=False, repr=False)
class SubQueueData(betterproto.Message):
    message_type_action: int = betterproto.int32_field(1)
    queue: "SubQueue" = betterproto.message_field(2)
    current_user: "User" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class MsgNotifyControlResp(betterproto.Message):
    data: "MsgNotifyControlRespData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MsgNotifyControlRespData(betterproto.Message):
    quota_config: Dict[int, "MsgNotifyQuota"] = betterproto.map_field(
        1, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class GameServerFeature(betterproto.Message):
    id: int = betterproto.int32_field(1)
    value: str = betterproto.string_field(2)
    value_map: Dict[str, str] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class ActivityRewardInfo(betterproto.Message):
    m_bage: "ImageModel" = betterproto.message_field(1)
    m_story_tag: "ImageModel" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Top3CardInfo(betterproto.Message):
    common: "CommonCardInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CompetitionStart(betterproto.Message):
    competition_start_time: int = betterproto.int64_field(1)
    initiate_info: "CompetitionInitiateInfo" = betterproto.message_field(2)
    end_timestamp: int = betterproto.int64_field(3)
    actual_end_timestamp: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class RoomAuthOffReasons(betterproto.Message):
    gift: str = betterproto.string_field(1)
    un_available_click_reason: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class ShortItemRefreshEntity(betterproto.Message):
    interval: int = betterproto.int32_field(1)
    refresh_items: List[str] = betterproto.string_field(2)
    activity_id: str = betterproto.string_field(3)
    index: int = betterproto.int64_field(4)
    refresh_msg_type: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class TopicPairResponse(betterproto.Message):
    data: "TopicPairResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TopicPairResponseSetting(betterproto.Message):
    expect_succ_sec: int = betterproto.int64_field(1)
    timeout_sec: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class TopicPairResponseResponseData(betterproto.Message):
    pair_id: int = betterproto.int64_field(1)
    rival_avatars: List["ImageModel"] = betterproto.message_field(2)
    setting: "TopicPairResponseSetting" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PollOptionInfo(betterproto.Message):
    votes: int = betterproto.int64_field(1)
    display_content: str = betterproto.string_field(2)
    option_index: int = betterproto.int32_field(3)
    vote_user_list: List["VoteUser"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WebcastPopularCardMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    popular_card_info: "WebcastPopularCardMessagePopularCardInfo" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class WebcastPopularCardMessagePopularCardInfo(betterproto.Message):
    status: int = betterproto.int32_field(1)
    end_time: int = betterproto.int64_field(3)
    enter_number: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class WebcastGameGuessToastMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    round_id_str: str = betterproto.string_field(2)
    show_type: bool = betterproto.bool_field(3)
    show_option_idx_str: str = betterproto.string_field(4)
    title_starling_key: str = betterproto.string_field(5)
    result_starling_key: str = betterproto.string_field(6)
    show_rank_str: str = betterproto.string_field(7)
    option_id_str: str = betterproto.string_field(8)
    diss_miss_seconds: int = betterproto.int64_field(9)


@dataclass(eq=False, repr=False)
class Author(betterproto.Message):
    video_total_count: int = betterproto.int64_field(1)
    video_total_play_count: int = betterproto.int64_field(2)
    video_total_favorite_count: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class WebcastFeedUserRoomMonitorMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    anchor_id: int = betterproto.int64_field(3)
    room_id: int = betterproto.int64_field(4)
    room_status: int = betterproto.int64_field(5)
    room_time: int = betterproto.int64_field(6)
    stream_status: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class ProjectionConfig(betterproto.Message):
    use_projection: bool = betterproto.bool_field(1)
    icon: "ImageModel" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BattleRewardSettle(betterproto.Message):
    reward_settle_prompt: "BattlePrompt" = betterproto.message_field(1)
    status: Optional["BattleRewardSettleRewardStatus"] = betterproto.enum_field(
        2, optional=True
    )


@dataclass(eq=False, repr=False)
class GiftRandomEffectInfo(betterproto.Message):
    random_gift_panel_banner: "RandomGiftPanelBanner" = betterproto.message_field(1)
    effect_ids: List[int] = betterproto.int64_field(2)
    host_key: str = betterproto.string_field(3)
    audience_key: str = betterproto.string_field(4)
    random_gift_bubble: "RandomGiftBubble" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GiftComboInfo(betterproto.Message):
    combo_count: int = betterproto.int32_field(1)
    combo_effect_img: "ImageModel" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class JoinGroupContent(betterproto.Message):
    group_user: "GroupChannelAllUser" = betterproto.message_field(1)
    join_user: "GroupPlayer" = betterproto.message_field(2)
    type: Optional["JoinGroupContentJoinType"] = betterproto.enum_field(
        3, optional=True
    )
    group_ext_info: List["RtcExtraInfo"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ReqSong(betterproto.Message):
    song: "KaraokeSong" = betterproto.message_field(1)
    user_list: List["User"] = betterproto.message_field(2)
    req_count: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class LikeIconInfo(betterproto.Message):
    icons: List["ImageModel"] = betterproto.message_field(1)
    icons_self: List["ImageModel"] = betterproto.message_field(2)
    default_icons: List["ImageModel"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WebcastGameRankNotifyMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    msg_type: Optional["WebcastGameRankNotifyMessageMsgType"] = betterproto.enum_field(
        2, optional=True
    )
    notify_text: "Text" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WebcastKaraokeReqMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    song_list: List["ReqSong"] = betterproto.message_field(2)
    total_req_count: int = betterproto.int64_field(3)
    req_timestamp_seconds: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class TopFrameSummary(betterproto.Message):
    id: int = betterproto.int64_field(1)
    title: str = betterproto.string_field(2)
    schema: str = betterproto.string_field(3)
    show_list: List["ShowInfo"] = betterproto.message_field(4)
    id_str: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class Portal(betterproto.Message):
    start_time: int = betterproto.int64_field(1)
    enter_count: int = betterproto.int64_field(2)
    sugar_daddy: "User" = betterproto.message_field(3)
    room_id: int = betterproto.int64_field(4)
    anchor: "User" = betterproto.message_field(5)
    portal_id: int = betterproto.int64_field(6)
    user_type: int = betterproto.int32_field(7)
    invitee_count: int = betterproto.int64_field(8)
    status: int = betterproto.int32_field(9)
    wait_duration: int = betterproto.int64_field(10)
    reward_duration: int = betterproto.int64_field(11)
    total_amount: int = betterproto.int64_field(12)
    cover: "ImageModel" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class OpenLsNotifyInfo(betterproto.Message):
    fit_live_studio_rule: bool = betterproto.bool_field(1)
    open_ls_notify_window: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class UserStats(betterproto.Message):
    is_new_anchor: bool = betterproto.bool_field(1)
    is_new_moderator: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class EcomLiveElementActions(betterproto.Message):
    atom_actions: List["AtomAction"] = betterproto.message_field(1)
    version: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class WebcastGuestInviteGuideMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    invitee_avatar: List["ImageModel"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TemplateContent(betterproto.Message):
    template_id: int = betterproto.int64_field(1)
    template_id_str: str = betterproto.string_field(2)
    status: Optional["TemplateContentPollTemplateStatus"] = betterproto.enum_field(
        3, optional=True
    )
    poll_kind: Optional["TemplateContentPollKind"] = betterproto.enum_field(
        4, optional=True
    )
    appeal_status: Optional["TemplateContentPollAppealStatus"] = betterproto.enum_field(
        5, optional=True
    )
    violation_id_str: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class InteractionQuestionInfo(betterproto.Message):
    has_recommend: bool = betterproto.bool_field(1)
    has_quick_answer: bool = betterproto.bool_field(2)
    qa_entry_type: int = betterproto.int32_field(3)
    has_lighting_strengthen: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class PerceptionDialogInfo(betterproto.Message):
    icon_type: int = betterproto.int64_field(1)
    title: "Text" = betterproto.message_field(2)
    sub_title: "Text" = betterproto.message_field(3)
    advice_action_text: "Text" = betterproto.message_field(4)
    default_action_text: "Text" = betterproto.message_field(5)
    violation_detail_url: str = betterproto.string_field(6)
    scene: "Scene" = betterproto.enum_field(7)
    target_user_id: int = betterproto.int64_field(8)
    target_room_id: int = betterproto.int64_field(9)
    count_down_time: int = betterproto.int64_field(10)
    show_feedback: bool = betterproto.bool_field(11)
    feedback_options: List["PerceptionFeedbackOption"] = betterproto.message_field(12)
    policy_tip: int = betterproto.int64_field(13)
    appeal_popup: int = betterproto.int32_field(14)


@dataclass(eq=False, repr=False)
class PollInfo(betterproto.Message):
    poll_data: "PollData" = betterproto.message_field(1)
    user_vote_info: "UserVoteInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AnchorReminderWordInfoMsg(betterproto.Message):
    scene: "Scene" = betterproto.enum_field(1)
    title: "Text" = betterproto.message_field(2)
    content: str = betterproto.string_field(3)
    message_key: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class WebcastSpecialPushMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    content: str = betterproto.string_field(2)
    color: str = betterproto.string_field(3)
    trace_id: str = betterproto.string_field(4)
    icon: "ImageModel" = betterproto.message_field(5)
    action_content: str = betterproto.string_field(6)
    action_type: str = betterproto.string_field(7)
    push_display_time: int = betterproto.int64_field(8)


@dataclass(eq=False, repr=False)
class AnchorReminderWordStatus(betterproto.Message):
    scene: "Scene" = betterproto.enum_field(1)
    status: int = betterproto.int32_field(2)
    title: str = betterproto.string_field(3)
    desc: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class WalletRewardsContainerInfo(betterproto.Message):
    title: str = betterproto.string_field(1)
    content: str = betterproto.string_field(2)
    schema: str = betterproto.string_field(3)
    need_popup: bool = betterproto.bool_field(4)
    exposure_period: str = betterproto.string_field(5)
    popup_schema: str = betterproto.string_field(6)
    popup_type: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class CapsuleBizParamsCommentFlaggedPrompt(betterproto.Message):
    trigger: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class FragmentTypeCount(betterproto.Message):
    fragment_type: int = betterproto.int32_field(1)
    count: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GiftOperation(betterproto.Message):
    left_image: "ImageModel" = betterproto.message_field(1)
    right_image: "ImageModel" = betterproto.message_field(2)
    title: str = betterproto.string_field(3)
    title_color: str = betterproto.string_field(4)
    title_size: int = betterproto.int32_field(5)
    scheme_url: str = betterproto.string_field(6)
    event_name: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class KickOutResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MonetizationTipsConfig(betterproto.Message):
    revenue_tips_trigger_time: List[int] = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class ChangeLayoutResp(betterproto.Message):
    user_position: List["UserPosition"] = betterproto.message_field(2)
    linked_user_ui_positions: List[str] = betterproto.string_field(3)
    content_pos: List["ContentPosition"] = betterproto.message_field(4)
    ui_pos: List["PosIdentity"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class GiftNotice(betterproto.Message):
    notice_type: int = betterproto.int32_field(1)
    gift_id: int = betterproto.int64_field(2)
    effect: "ImageModel" = betterproto.message_field(3)
    biz_type: int = betterproto.int32_field(4)
    period_id: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class EndShowResponse(betterproto.Message):
    data: "EndShowResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class EndShowResponseResponseData(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    show_content: "ShowContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UserIdentity(betterproto.Message):
    is_gift_giver_of_anchor: bool = betterproto.bool_field(1)
    is_subscriber_of_anchor: bool = betterproto.bool_field(2)
    is_mutual_following_with_anchor: bool = betterproto.bool_field(3)
    is_follower_of_anchor: bool = betterproto.bool_field(4)
    is_moderator_of_anchor: bool = betterproto.bool_field(5)
    is_anchor: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class EnterRoomExtra(betterproto.Message):
    is_official_channel: bool = betterproto.bool_field(4)
    region: str = betterproto.string_field(5)
    is_same_app_language: bool = betterproto.bool_field(6)
    finished_perception_msg: str = betterproto.string_field(7)
    punish_info: "PunishEventInfo" = betterproto.message_field(8)
    custom_error_for_gift_setting: "RechargeCustomError" = betterproto.message_field(10)
    user_restricted_mode: int = betterproto.int64_field(11)


@dataclass(eq=False, repr=False)
class CaptionInfo(betterproto.Message):
    open: bool = betterproto.bool_field(1)
    align_stream: bool = betterproto.bool_field(2)
    support_lang: List[str] = betterproto.string_field(3)
    location: int = betterproto.int32_field(4)
    show_type: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class LiveStreamSubGoal(betterproto.Message):
    type: int = betterproto.int32_field(1)
    id: int = betterproto.int64_field(2)
    progress: int = betterproto.int64_field(3)
    target: int = betterproto.int64_field(4)
    gift: "LiveStreamSubGoalGift" = betterproto.message_field(5)
    id_str: str = betterproto.string_field(6)
    pin_info: "SubGoalPinInfo" = betterproto.message_field(7)
    source: int = betterproto.int32_field(8)
    recommended_text: str = betterproto.string_field(9)
    recommended_header: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class LetViewerSingReq(betterproto.Message):
    common: "LinkCommon" = betterproto.message_field(1)
    channel_id: int = betterproto.int64_field(2)
    applier: "Player" = betterproto.message_field(3)
    applier_pos: "MicPositionData" = betterproto.message_field(4)
    song_id: int = betterproto.int64_field(5)
    multi_guest_req_extra: "BizApplyParams" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class QuickCohostContent(betterproto.Message):
    content_id: int = betterproto.int64_field(1)
    display_text: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class EpiDecision(betterproto.Message):
    ts: int = betterproto.int64_field(1)
    data: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    data_v2: Dict[str, str] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    server_features: Dict[str, str] = betterproto.map_field(
        4, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class BattleNoticeCommonGuide(betterproto.Message):
    display_text: "Text" = betterproto.message_field(1)
    except_anchor: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class WebcastMultiGuestSuggestMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    suggested_image: List["ImageModel"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SubGoalPinCard(betterproto.Message):
    goal_id: int = betterproto.int64_field(1)
    time_to_live: int = betterproto.int64_field(2)
    desc: "SubPinCardText" = betterproto.message_field(3)
    target: int = betterproto.int64_field(4)
    progress: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class WebcastHotRoomMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    data: "HotRoomData" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PingResult(betterproto.Message):
    room_status: int = betterproto.int32_field(1)
    room_id: int = betterproto.int64_field(2)
    next_ping_interval: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class TextPiece(betterproto.Message):
    type: int = betterproto.int32_field(1)
    format: "TextFormat" = betterproto.message_field(2)
    string_value: str = betterproto.string_field(11)
    user_value: "TextPieceUser" = betterproto.message_field(21)
    gift_value: "TextPieceGift" = betterproto.message_field(22)
    heart_value: "TextPieceHeart" = betterproto.message_field(23)
    pattern_ref_value: "TextPiecePatternRef" = betterproto.message_field(24)
    image_value: "TextPieceImage" = betterproto.message_field(25)


@dataclass(eq=False, repr=False)
class RankUpdate(betterproto.Message):
    request_first_show_type: Optional["RankUpdateProfitRankType"] = (
        betterproto.enum_field(9, optional=True)
    )
    supported_version: int = betterproto.int64_field(10)
    owneronrank: bool = betterproto.bool_field(11)
    entranceicon: "ImageModel" = betterproto.message_field(12)
    affiliated_info: "RankUpdateAffiliatedInfo" = betterproto.message_field(13)


@dataclass(eq=False, repr=False)
class RankUpdateAffiliatedInfo(betterproto.Message):
    text_content: "Text" = betterproto.message_field(1)
    gap_desc: "Text" = betterproto.message_field(2)
    real_time_rank: int = betterproto.int64_field(3)
    team_rank_bonus_time: "TeamRankBonusTime" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WebcastPartnershipDropsAnchorMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    change_mode: int = betterproto.int32_field(2)
    drops_id: str = betterproto.string_field(3)
    anchor_uid: int = betterproto.int64_field(4)
    anchor_join_drops_notice_type: int = betterproto.int32_field(5)
    drops_name: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class CohostListChangeContent(betterproto.Message):
    users: List["CohostListUser"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WebcastAccessControlMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    captcha: "AccessControlCaptcha" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AnchorReplayInfoData(betterproto.Message):
    replays: List["RoomReplay"] = betterproto.message_field(1)
    style: int = betterproto.int32_field(2)
    has_more: bool = betterproto.bool_field(3)
    next_offset: int = betterproto.int64_field(4)
    amplify_status: int = betterproto.int32_field(5)
    show_inbox_sub_pop_up: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class WebcastGuessQuestionAuditMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    guess_template: "GuessTemplate" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FinishShowingGuestResponse(betterproto.Message):
    data: "FinishShowingGuestResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class FinishShowingGuestResponseResponseData(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    show_content: "ShowContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TemplateEffectExtra(betterproto.Message):
    resource_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class WebcastAuthorizationNotifyMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    from_: str = betterproto.string_field(2)
    style: str = betterproto.string_field(4)
    user_content: "WebcastAuthorizationNotifyMessageContentBlock" = (
        betterproto.message_field(6)
    )
    user_relation: "WebcastAuthorizationNotifyMessageRelationBlock" = (
        betterproto.message_field(7)
    )


@dataclass(eq=False, repr=False)
class WebcastAuthorizationNotifyMessageContentBlock(betterproto.Message):
    show: bool = betterproto.bool_field(1)
    is_authorized: bool = betterproto.bool_field(2)
    title: str = betterproto.string_field(3)
    content: str = betterproto.string_field(4)
    detail: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class WebcastAuthorizationNotifyMessageRelationBlock(betterproto.Message):
    show: bool = betterproto.bool_field(1)
    is_authorized: bool = betterproto.bool_field(2)
    title: str = betterproto.string_field(3)
    content: str = betterproto.string_field(4)
    detail: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class WebcastLinkMicMethod(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    m_type: int = betterproto.int32_field(2)
    access_key: str = betterproto.string_field(3)
    anchor_link_mic_id: int = betterproto.int32_field(4)
    user_id: int = betterproto.int64_field(5)
    fan_ticket: int = betterproto.int64_field(6)
    total_fan_ticket: int = betterproto.int64_field(7)
    channel_id: int = betterproto.int64_field(8)
    layout: int = betterproto.int32_field(9)
    vendor: int = betterproto.int32_field(10)
    dimension: int = betterproto.int32_field(11)
    theme: str = betterproto.string_field(12)
    invite_uid: int = betterproto.int64_field(13)
    reply: int = betterproto.int32_field(14)
    duration: int = betterproto.int32_field(16)
    match_type: int = betterproto.int32_field(18)
    win: bool = betterproto.bool_field(19)
    prompts: str = betterproto.string_field(20)
    to_user_id: int = betterproto.int64_field(21)
    tips: str = betterproto.string_field(25)
    start_time_ms: int = betterproto.int64_field(26)
    confluence_type: int = betterproto.int32_field(27)
    from_room_id: int = betterproto.int64_field(28)
    invite_type: int = betterproto.int32_field(29)
    sub_type: int = betterproto.int64_field(30)
    rtc_ext_info: str = betterproto.string_field(32)
    app_id: str = betterproto.string_field(34)
    app_sign: str = betterproto.string_field(35)
    anchor_link_mic_id_str: str = betterproto.string_field(37)
    rival_anchor_id: int = betterproto.int64_field(38)
    rival_linkmic_id: int = betterproto.int32_field(39)
    rival_linkmic_id_str: str = betterproto.string_field(40)
    should_show_popup: bool = betterproto.bool_field(41)
    rtc_join_channel: bool = betterproto.bool_field(51)
    fan_ticket_type: int = betterproto.int32_field(52)


@dataclass(eq=False, repr=False)
class GiftHintInfo(betterproto.Message):
    hint_id: int = betterproto.int32_field(1)
    hint_icon: "ImageModel" = betterproto.message_field(2)
    hint_text: str = betterproto.string_field(3)
    hint_show_delay_ms: int = betterproto.int64_field(4)
    gift_id: int = betterproto.int64_field(5)
    has_gift_history: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class User(betterproto.Message):
    id: int = betterproto.int64_field(1)
    nick_name: str = betterproto.string_field(3)
    avatar_thumb: "ImageModel" = betterproto.message_field(9)
    avatar_medium: "ImageModel" = betterproto.message_field(10)
    avatar_large: "ImageModel" = betterproto.message_field(11)
    is_verified: bool = betterproto.bool_field(12)
    status: int = betterproto.int32_field(15)
    create_time: int = betterproto.int64_field(16)
    modify_time: int = betterproto.int64_field(17)
    secret: int = betterproto.int32_field(18)
    share_qrcode_uri: str = betterproto.string_field(19)
    follow_info: "FollowInfo" = betterproto.message_field(22)
    user_honor: "UserHonor" = betterproto.message_field(23)
    fans_club: "FansClubMember" = betterproto.message_field(24)
    border: "BorderInfo" = betterproto.message_field(25)
    special_id: str = betterproto.string_field(26)
    avatar_border: "ImageModel" = betterproto.message_field(27)
    medal: "ImageModel" = betterproto.message_field(28)
    user_badges: List["ImageModel"] = betterproto.message_field(29)
    new_user_badges: List["ImageModel"] = betterproto.message_field(30)
    top_vip_no: int = betterproto.int32_field(31)
    user_attr: "UserAttr" = betterproto.message_field(32)
    own_room: "UserOwnRoom" = betterproto.message_field(33)
    pay_score: int = betterproto.int64_field(34)
    fan_ticket_count: int = betterproto.int64_field(35)
    anchor_info: "AnchorInfo" = betterproto.message_field(36)
    link_mic_stats: Optional["UserLinkmicStatus"] = betterproto.enum_field(
        37, optional=True
    )
    username: str = betterproto.string_field(38)
    enable_show_commerce_sale: bool = betterproto.bool_field(39)
    with_fusion_shop_entry: bool = betterproto.bool_field(40)
    pay_scores: int = betterproto.int64_field(41)
    anchor_level: "AnchorLevel" = betterproto.message_field(42)
    verified_content: str = betterproto.string_field(43)
    author_info: "Author" = betterproto.message_field(44)
    top_fans: List["User"] = betterproto.message_field(45)
    sec_uid: str = betterproto.string_field(46)
    user_role: int = betterproto.int32_field(47)
    reward_info: "ActivityRewardInfo" = betterproto.message_field(49)
    personal_card: "ImageModel" = betterproto.message_field(52)
    authentication_info: "AuthenticationInfo" = betterproto.message_field(53)
    media_badge_image_list: List["ImageModel"] = betterproto.message_field(57)
    commerce_webcast_config_ids: List[int] = betterproto.int64_field(60)
    borders: List["BorderInfo"] = betterproto.message_field(61)
    combo_badge_info: "UserComboBadgeInfo" = betterproto.message_field(62)
    subscribe_info: "SubscribeInfo" = betterproto.message_field(63)
    badge_list: List["BadgeStruct"] = betterproto.message_field(64)
    mint_type_label: List[int] = betterproto.int64_field(65)
    fans_club_info: "UserFansClubInfo" = betterproto.message_field(66)
    allow_find_by_contacts: bool = betterproto.bool_field(1002)
    allow_others_download_video: bool = betterproto.bool_field(1003)
    allow_others_download_when_sharing_video: bool = betterproto.bool_field(1004)
    allow_share_show_profile: bool = betterproto.bool_field(1005)
    allow_show_in_gossip: bool = betterproto.bool_field(1006)
    allow_show_my_action: bool = betterproto.bool_field(1007)
    allow_strange_comment: bool = betterproto.bool_field(1008)
    allow_unfollower_comment: bool = betterproto.bool_field(1009)
    allow_use_linkmic: bool = betterproto.bool_field(1010)
    avatar_jpg: "ImageModel" = betterproto.message_field(1012)
    background_img_url: str = betterproto.string_field(1013)
    block_status: int = betterproto.int32_field(1016)
    comment_restrict: int = betterproto.int32_field(1017)
    constellation: str = betterproto.string_field(1018)
    disable_ichat: int = betterproto.int32_field(1019)
    enable_ichat_img: int = betterproto.int64_field(1020)
    exp: int = betterproto.int32_field(1021)
    fold_stranger_chat: bool = betterproto.bool_field(1023)
    follow_status: int = betterproto.int64_field(1024)
    ichat_restrict_type: int = betterproto.int32_field(1027)
    id_str: str = betterproto.string_field(1028)
    is_follower: bool = betterproto.bool_field(1029)
    is_following: bool = betterproto.bool_field(1030)
    need_profile_guide: bool = betterproto.bool_field(1031)
    push_comment_status: bool = betterproto.bool_field(1033)
    push_digg: bool = betterproto.bool_field(1034)
    push_follow: bool = betterproto.bool_field(1035)
    push_friend_action: bool = betterproto.bool_field(1036)
    push_ichat: bool = betterproto.bool_field(1037)
    push_status: bool = betterproto.bool_field(1038)
    push_video_post: bool = betterproto.bool_field(1039)
    push_video_recommend: bool = betterproto.bool_field(1040)
    verified_reason: str = betterproto.string_field(1043)
    enable_car_management_permission: bool = betterproto.bool_field(1044)
    upcoming_event_list: List["LiveEventInfo"] = betterproto.message_field(1045)
    scm_label: str = betterproto.string_field(1046)
    ecommerce_entrance: "EcommerceEntrance" = betterproto.message_field(1047)
    is_block: bool = betterproto.bool_field(1048)
    is_subscribe: bool = betterproto.bool_field(1090)
    is_anchor_marked: bool = betterproto.bool_field(1091)


@dataclass(eq=False, repr=False)
class UserComboBadgeInfo(betterproto.Message):
    icon: "ImageModel" = betterproto.message_field(1)
    combo_count: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class UserFansClubInfo(betterproto.Message):
    is_sleeping: bool = betterproto.bool_field(1)
    fans_level: int = betterproto.int64_field(2)
    fans_score: int = betterproto.int64_field(3)
    badge: "ImageModel" = betterproto.message_field(4)
    fans_count: int = betterproto.int64_field(5)
    fans_club_name: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class UserOwnRoom(betterproto.Message):
    room_id_list: List[int] = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class UseSmokeCard(betterproto.Message):
    card_info: "SmokeCardInfo" = betterproto.message_field(1)
    anchor_id: int = betterproto.int64_field(2)
    display_content: "Text" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WebcastAvatarGenerateResultMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    avatar: "Avatar" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AudienceCancelContent(betterproto.Message):
    from_user_id: int = betterproto.int64_field(1)
    user: "User" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class StringBadge(betterproto.Message):
    badge_display_type: Optional["StringBadgeBadgeDisplayType"] = (
        betterproto.enum_field(1, optional=True)
    )
    content_str: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WebcastRankTextMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    scene: "Scene" = betterproto.enum_field(2)
    owner_idx_before_update: int = betterproto.int64_field(3)
    owner_idx_after_update: int = betterproto.int64_field(4)
    self_get_badge_msg: "Text" = betterproto.message_field(5)
    other_get_badge_msg: "Text" = betterproto.message_field(6)
    cur_user_id: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class EmoteModel(betterproto.Message):
    emote_id: str = betterproto.string_field(1)
    image: "ImageModel" = betterproto.message_field(2)
    audit_status: "EmoteModelAuditStatus" = betterproto.enum_field(3)
    uuid: str = betterproto.string_field(4)
    emote_type: "EmoteModelEmoteType" = betterproto.enum_field(5)
    content_source: "EmoteModelContentSource" = betterproto.enum_field(6)
    emote_private_type: "EmoteModelEmotePrivateType" = betterproto.enum_field(7)
    package_id: str = betterproto.string_field(8)
    audit_info: "AuditInfo" = betterproto.message_field(9)
    reward_condition: Optional["EmoteModelRewardCondition"] = betterproto.enum_field(
        10, optional=True
    )
    emote_upload_info: "EmoteUploadInfo" = betterproto.message_field(11)
    create_time: int = betterproto.int64_field(12)
    emote_scene: Optional["EmoteModelEmoteScene"] = betterproto.enum_field(
        13, optional=True
    )


@dataclass(eq=False, repr=False)
class SubWaveStrikeInfo(betterproto.Message):
    start_time: int = betterproto.int64_field(1)
    end_time: int = betterproto.int64_field(2)
    round: int = betterproto.int64_field(3)
    status: Optional["SubWaveStrikeInfoWaveStatus"] = betterproto.enum_field(
        4, optional=True
    )
    emote_list: List["EmoteModel"] = betterproto.message_field(5)
    strike_reward: "WaveReward" = betterproto.message_field(6)
    strike_record_id: int = betterproto.int64_field(7)
    strike_target_count: int = betterproto.int64_field(8)


@dataclass(eq=False, repr=False)
class WebcastOChannelModifyMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    end_time_stamp: int = betterproto.int64_field(2)
    channel_uid: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class InviteTopHostInfo(betterproto.Message):
    rank_type: str = betterproto.string_field(1)
    top_index: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GiftPage(betterproto.Message):
    page_type: int = betterproto.int32_field(1)
    page_name: str = betterproto.string_field(2)
    gifts: List["Gift"] = betterproto.message_field(3)
    display: bool = betterproto.bool_field(4)
    operation: "GiftOperation" = betterproto.message_field(5)
    event_name: str = betterproto.string_field(6)
    page_panel_banner: "GiftPanelBanner" = betterproto.message_field(7)
    frequently_used_gifts: List["Gift"] = betterproto.message_field(8)
    force_insert_metrics: Dict[int, "ForceInsertMetricsItem"] = betterproto.map_field(
        9, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    region: str = betterproto.string_field(10)
    force_insert_priority_map: Dict[int, int] = betterproto.map_field(
        11, betterproto.TYPE_INT64, betterproto.TYPE_INT64
    )
    favourite_gifts: List["Gift"] = betterproto.message_field(12)
    backfill_gifts: List["Gift"] = betterproto.message_field(13)
    use_backfill_special_text: bool = betterproto.bool_field(14)
    groups_in_tab: List["GiftPageGiftGroupInTab"] = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class GiftPageGiftGroupInTab(betterproto.Message):
    group_in_tab: int = betterproto.int32_field(1)
    title: "Text" = betterproto.message_field(2)
    description: "Text" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class JoinGroupReq(betterproto.Message):
    common: "LinkCommon" = betterproto.message_field(1)
    myself: "GroupPlayer" = betterproto.message_field(2)
    target: "GroupPlayer" = betterproto.message_field(3)
    type: int = betterproto.int32_field(4)
    group_channel_id: int = betterproto.int64_field(5)
    content_position_message: List["ContentPositionMessage"] = (
        betterproto.message_field(6)
    )
    cohost_req_extra: "BizJoinGroupParams" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class WebcastPictionaryUpdateMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    correct_count: int = betterproto.int64_field(2)
    round_id: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class SupportedActionsWrapper(betterproto.Message):
    action_type: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class TaskPeriodConfig(betterproto.Message):
    task_start_time: int = betterproto.int64_field(1)
    duration: int = betterproto.int64_field(2)
    target_start_timestamp: int = betterproto.int64_field(3)
    click_action: int = betterproto.int32_field(11)
    click_toast_prompt: "BattlePrompt" = betterproto.message_field(12)
    prompt_type: int = betterproto.int32_field(21)
    task_static_prompt: "BattlePrompt" = betterproto.message_field(22)
    progress_target: int = betterproto.int64_field(23)
    target_type: int = betterproto.int32_field(24)
    icon: "ImageModel" = betterproto.message_field(25)
    click_action_schema_url: str = betterproto.string_field(26)


@dataclass(eq=False, repr=False)
class CapsuleBizParamsAnchorPinPerk(betterproto.Message):
    pin_id: int = betterproto.int64_field(1)
    pin_card_type: int = betterproto.int32_field(2)
    template_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class Hashtag(betterproto.Message):
    id: int = betterproto.int64_field(1)
    title: str = betterproto.string_field(2)
    image: "ImageModel" = betterproto.message_field(3)
    namespace: Optional["HashtagHashtagNamespace"] = betterproto.enum_field(
        4, optional=True
    )


@dataclass(eq=False, repr=False)
class UserModelPredictionData(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    model_prediction_data: Dict[str, float] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_DOUBLE
    )


@dataclass(eq=False, repr=False)
class TextPieceImage(betterproto.Message):
    image_model: "ImageModel" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WalletPackage(betterproto.Message):
    iap_id: str = betterproto.string_field(1)
    usd_price_show: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class LinkmicListResponse(betterproto.Message):
    total_position_count: int = betterproto.int64_field(1)
    users: List["CohostListUser"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastGiftGuideMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    content: "Text" = betterproto.message_field(2)
    gift_id: int = betterproto.int64_field(3)
    has_sent: bool = betterproto.bool_field(4)
    guide_type: str = betterproto.string_field(5)
    display_seconds: int = betterproto.int64_field(6)
    trigger_name: str = betterproto.string_field(7)
    schema_url: str = betterproto.string_field(8)
    should_use_config: bool = betterproto.bool_field(9)
    guide_page_resources: List["GuidePageResource"] = betterproto.message_field(10)
    template_type: str = betterproto.string_field(11)
    guide_target: "GuideTarget" = betterproto.message_field(12)
    biz: str = betterproto.string_field(13)
    tags: List[str] = betterproto.string_field(14)
    gift_ids: List[int] = betterproto.int64_field(15)
    use_server_config: bool = betterproto.bool_field(16)
    sub_trigger_name: str = betterproto.string_field(17)


@dataclass(eq=False, repr=False)
class WebcastPartnershipGameOfflineMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    offline_game_list: List["WebcastPartnershipGameOfflineMessageOfflineGameInfo"] = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class WebcastPartnershipGameOfflineMessageOfflineGameInfo(betterproto.Message):
    task_id: str = betterproto.string_field(1)
    toast_text: str = betterproto.string_field(2)
    task_list_len: int = betterproto.int32_field(3)
    offline_type: Optional[
        "WebcastPartnershipGameOfflineMessageOfflineGameInfoOfflineType"
    ] = betterproto.enum_field(4, optional=True)


@dataclass(eq=False, repr=False)
class NoticeboardOfficialTemplateUpdateResponse(betterproto.Message):
    data: "NoticeboardOfficialTemplateUpdateResponseResponseData" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class NoticeboardOfficialTemplateUpdateResponseResponseData(betterproto.Message):
    is_success: bool = betterproto.bool_field(1)
    template: "NoticeboardTemplate" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetNoticeboardMaterialContentResponse(betterproto.Message):
    data: "GetNoticeboardMaterialContentResponseResponseData" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class GetNoticeboardMaterialContentResponseResponseData(betterproto.Message):
    media_node_id: str = betterproto.string_field(1)
    convert_noticeboard_material_info: "ConvertNoticeboardMaterialInfo" = (
        betterproto.message_field(2)
    )
    create_time: int = betterproto.int64_field(3)
    update_time: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class GiftBoxInfo(betterproto.Message):
    capacity: int = betterproto.int64_field(1)
    is_primary_box: bool = betterproto.bool_field(2)
    scheme_url: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class BattleComboInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    combo_status: int = betterproto.int64_field(2)
    combo_count: int = betterproto.int64_field(3)
    combo_icon_url: str = betterproto.string_field(4)
    combo_type: int = betterproto.int32_field(5)
    combo_rule_guide_schema: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class BannerInRoomCollection(betterproto.Message):
    top_right_banner: "BannerInRoomCollectionBannerInfo" = betterproto.message_field(1)
    bottom_right_banner: "BannerInRoomCollectionBannerInfo" = betterproto.message_field(
        2
    )
    gift_panel_banner: "BannerInRoomCollectionBannerInfo" = betterproto.message_field(3)
    middle_banner: "BannerInRoomCollectionBannerInfo" = betterproto.message_field(4)
    activity_top_right_banner: "BannerInRoomCollectionBannerInfo" = (
        betterproto.message_field(5)
    )
    top_left: "BannerInRoomCollectionBannerInfo" = betterproto.message_field(6)
    live_scene: "BannerInRoomCollectionBannerInfo" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class BannerInRoomCollectionBannerInfo(betterproto.Message):
    url: str = betterproto.string_field(1)
    banner_list: List["BannerInRoom"] = betterproto.message_field(2)
    animation_image: "ImageModel" = betterproto.message_field(3)
    collapse_info: "BannerCollapseInfo" = betterproto.message_field(4)
    height: int = betterproto.int32_field(5)
    width: int = betterproto.int32_field(6)
    lynx_container_url: str = betterproto.string_field(7)
    container_type: int = betterproto.int64_field(8)


@dataclass(eq=False, repr=False)
class StarlingTranslateResponse(betterproto.Message):
    data: "StarlingTranslateResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class StarlingTranslateResponseResponseData(betterproto.Message):
    starling_translate_info: List["StarlingTranslateInfo"] = betterproto.message_field(
        1
    )


@dataclass(eq=False, repr=False)
class RiskCtl(betterproto.Message):
    disable_send_gift: bool = betterproto.bool_field(1)
    error_msg: str = betterproto.string_field(2)
    toast_reason: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CriticalStrikeCardInfo(betterproto.Message):
    card_name_key: str = betterproto.string_field(1)
    card_image: "ImageModel" = betterproto.message_field(2)
    send_time_sec: int = betterproto.int64_field(3)
    send_user: "BattleUserInfo" = betterproto.message_field(4)
    effect_last_duration: int = betterproto.int64_field(5)
    critical_strike_rate_low: int = betterproto.int64_field(6)
    critical_strike_rate_high: int = betterproto.int64_field(7)
    multiple: int = betterproto.int64_field(8)
    gift_name_key: str = betterproto.string_field(9)
    rule_url: str = betterproto.string_field(10)
    effect_time_sec: int = betterproto.int64_field(11)
    to_anchor_id: int = betterproto.int64_field(12)
    to_anchor_id_str: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class RoomAudienceMultiGuestPermissionInfo(betterproto.Message):
    room_pack_success_flag: bool = betterproto.bool_field(1)
    permission_info: "MultiGuestPermissionInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetStateReq(betterproto.Message):
    common: "StateReqCommon" = betterproto.message_field(1)
    client_version: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class FeedRoomLabel(betterproto.Message):
    location: int = betterproto.int64_field(1)
    text: "Text" = betterproto.message_field(2)
    icon: "ImageModel" = betterproto.message_field(3)
    log_extra: str = betterproto.string_field(4)
    background_color: str = betterproto.string_field(5)
    bg_image: "ImageModel" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class TeamRankBonusTime(betterproto.Message):
    start_timestamp: int = betterproto.int64_field(2)
    end_timestamp: int = betterproto.int64_field(3)
    show_animation: bool = betterproto.bool_field(4)
    bonus_rate: int = betterproto.int64_field(5)
    bonus_time_gift_id: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class BizResumeParams(betterproto.Message):
    need_show_info: bool = betterproto.bool_field(1)
    need_guest_showdown: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class WebcastOChannelAnchorMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    start_time_stamp: int = betterproto.int64_field(2)
    end_time_stamp: int = betterproto.int64_field(3)
    role_type: int = betterproto.int32_field(4)
    exist_linkmic: bool = betterproto.bool_field(5)
    linkmic_type: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class EcDrawEntity(betterproto.Message):
    type: int = betterproto.int32_field(1)
    sub_type: int = betterproto.int32_field(2)
    activity_id: int = betterproto.int64_field(3)
    incentive_image: "ImageModel" = betterproto.message_field(11)
    incentive_record_id: int = betterproto.int64_field(12)


@dataclass(eq=False, repr=False)
class InviteResponse(betterproto.Message):
    channel_id: int = betterproto.int64_field(2)
    rtc_info: "RtcExtraInfo" = betterproto.message_field(3)
    inviter_link_mic_id: str = betterproto.string_field(4)
    invitee_link_mic_id: str = betterproto.string_field(5)
    invite_seq_id: int = betterproto.int64_field(6)
    multi_guest_resp_extra: "BizInviteResponse" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class WebcastLinkmicAudienceNoticeMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    notice_type: int = betterproto.int32_field(2)
    turn_on_guide: "WebcastLinkmicAudienceNoticeMessageLinkMicAudienceTurnOnGuide" = (
        betterproto.message_field(3)
    )
    invite_guide: "WebcastLinkmicAudienceNoticeMessageLinkMicAudienceInviteGuide" = (
        betterproto.message_field(4)
    )
    group_chat_member_invite_guide: "LinkmicAudienceInviteGroupChatMemberGuide" = (
        betterproto.message_field(5)
    )


@dataclass(eq=False, repr=False)
class WebcastLinkmicAudienceNoticeMessageLinkMicAudienceNoticeText(betterproto.Message):
    text: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class WebcastLinkmicAudienceNoticeMessageLinkMicAudienceInviteGuide(
    betterproto.Message
):
    content: "WebcastLinkmicAudienceNoticeMessageLinkMicAudienceNoticeText" = (
        betterproto.message_field(1)
    )
    button_content: "WebcastLinkmicAudienceNoticeMessageLinkMicAudienceNoticeText" = (
        betterproto.message_field(2)
    )
    user: "User" = betterproto.message_field(3)
    display_strategy: int = betterproto.int32_field(4)
    linkmic_audience_invite_notice_reason: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class WebcastLinkmicAudienceNoticeMessageLinkMicAudienceTurnOnGuide(
    betterproto.Message
):
    content: "WebcastLinkmicAudienceNoticeMessageLinkMicAudienceNoticeText" = (
        betterproto.message_field(1)
    )
    button_content: "WebcastLinkmicAudienceNoticeMessageLinkMicAudienceNoticeText" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class GuideKeywordsResponse(betterproto.Message):
    data: "GuideKeywordsResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GuideKeywordsResponseUserInfo(betterproto.Message):
    is_in_eea: bool = betterproto.bool_field(1)
    has_ever_recharged: bool = betterproto.bool_field(2)
    suggested_min_coins: int = betterproto.int64_field(3)
    suggested_max_coins: int = betterproto.int64_field(4)
    coin_exchange_prompt: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class GuideKeywordsResponseData(betterproto.Message):
    version: int = betterproto.int64_field(1)
    user_info: "GuideKeywordsResponseUserInfo" = betterproto.message_field(2)
    keywords_library: List["KeywordsLibrary"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class BattleBonusStatus(betterproto.Message):
    bonus_period: int = betterproto.int32_field(1)
    enter_room_prompt: "BattlePrompt" = betterproto.message_field(2)
    task_progress: int = betterproto.int64_field(11)
    user_assisted: bool = betterproto.bool_field(12)
    reward_settle_prompt: "BattlePrompt" = betterproto.message_field(13)
    reward_settle_duration: int = betterproto.int64_field(14)
    reward_settle_status: int = betterproto.int64_field(15)


@dataclass(eq=False, repr=False)
class BizJoinChannelResponseData(betterproto.Message):
    layout_type_action: int = betterproto.int32_field(1)
    fix_mic_num_action: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class PictionaryStatistics(betterproto.Message):
    guess_correct_uv: int = betterproto.int64_field(1)
    guess_total_pv: int = betterproto.int64_field(2)
    first_user: "User" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class LinkerRandomMatchContent(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    room_id: int = betterproto.int64_field(2)
    invite_type: int = betterproto.int64_field(3)
    match_id: str = betterproto.string_field(4)
    inner_channel_id: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class CapsuleBizParamsRandomGift(betterproto.Message):
    round: int = betterproto.int64_field(1)
    effect_name_key: str = betterproto.string_field(2)
    gift: "Gift" = betterproto.message_field(3)
    type: int = betterproto.int64_field(4)
    filter_host: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class LinkerEnterContent(betterproto.Message):
    list_users: List["ListUser"] = betterproto.message_field(1)
    multi_live_type: int = betterproto.int64_field(2)
    anchor_setting_info: "MultiLiveAnchorPanelSettings" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class LiveStreamGoalContributor(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    avatar: "ImageModel" = betterproto.message_field(2)
    display_id: str = betterproto.string_field(3)
    score: int = betterproto.int64_field(4)
    user_id_str: str = betterproto.string_field(5)
    in_room: bool = betterproto.bool_field(6)
    is_friend: bool = betterproto.bool_field(7)
    follow_by_owner: bool = betterproto.bool_field(9)
    is_fist_contribute: bool = betterproto.bool_field(10)
    sub_goal_contributions: List["SubGoalContribution"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class WebcastPartnershipTaskShowMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    change_mode: int = betterproto.int32_field(2)
    task_id: str = betterproto.string_field(3)
    has_show_task: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class InviteBizContent(betterproto.Message):
    multi_live_anchor_panel_settings: "MultiLiveAnchorPanelSettings" = (
        betterproto.message_field(1)
    )
    invite_source: Optional["InviteBizContentContentInviteSource"] = (
        betterproto.enum_field(2, optional=True)
    )
    operator_user_info: "User" = betterproto.message_field(3)
    operator_link_admin_type: Optional["InviteBizContentLinkMicUserAdminType"] = (
        betterproto.enum_field(4, optional=True)
    )
    invitee_user_info: "User" = betterproto.message_field(5)
    share_revenue_setting: Optional["InviteBizContentLinkmicShareRevenueSetting"] = (
        betterproto.enum_field(6, optional=True)
    )


@dataclass(eq=False, repr=False)
class GiftsInfo(betterproto.Message):
    new_gift_id: int = betterproto.int64_field(1)
    m_fast_gift_id: int = betterproto.int64_field(3)
    gift_words: str = betterproto.string_field(4)
    gift_group_infos: List["GiftGroupCount"] = betterproto.message_field(5)
    hide_recharge: bool = betterproto.bool_field(10)
    gift_entrance_icon: "ImageModel" = betterproto.message_field(11)
    gift_combo_infos: List["GiftComboInfo"] = betterproto.message_field(13)
    show_first_recharge_entrance: bool = betterproto.bool_field(14)
    enable_first_recharge_dynamic_effect: bool = betterproto.bool_field(15)
    first_recharge_gift_info: "LiveLimitedTimeDiscountGiftInfo" = (
        betterproto.message_field(16)
    )
    compensation_gift_info: "LiveLimitedTimeDiscountGiftInfo" = (
        betterproto.message_field(17)
    )
    gift_icon_info: "GiftIconInfo" = betterproto.message_field(18)
    recently_sent_color_gift_id: int = betterproto.int64_field(19)
    default_loc_color_gift_id: int = betterproto.int64_field(20)
    color_gift_icon_animation: "ImageModel" = betterproto.message_field(21)
    recommend_random_gift_id: int = betterproto.int64_field(22)
    gift_poll_info: "GiftPollInfo" = betterproto.message_field(23)
    risk_ctl: "RiskCtl" = betterproto.message_field(24)
    freq_limit_gift_info: "FreqLimitGiftInfo" = betterproto.message_field(25)
    is_universal: bool = betterproto.bool_field(26)
    banner_gift_box_icon: "ImageModel" = betterproto.message_field(27)
    is_display_gift_box: bool = betterproto.bool_field(28)
    gift_box_scheme_url: str = betterproto.string_field(29)
    live_goal_label_icon: "ImageModel" = betterproto.message_field(30)
    live_goal_banner: "GiftPanelBanner" = betterproto.message_field(31)
    limited_time_reward_gift_infos: List["GiftsInfoLimitedTimeRewardGiftInfo"] = (
        betterproto.message_field(32)
    )
    team_rank_progress: "TeamRankProgress" = betterproto.message_field(33)
    panel_gift_gallery_icon: "ImageModel" = betterproto.message_field(34)
    gift_gallery_detail_page_scheme_url: str = betterproto.string_field(35)
    strategy_context: str = betterproto.string_field(36)
    gift_challenge_progress: "GiftChallengeProgress" = betterproto.message_field(37)
    gift_gallery_info: "GiftsInfoGiftGalleryInfo" = betterproto.message_field(38)
    batch_gift_info: "GiftsInfoBatchGiftInfo" = betterproto.message_field(39)
    is_vault_eoy_bonus_eligible: bool = betterproto.bool_field(40)
    points_gift_info: "GiftsInfoUgPointsGiftInfo" = betterproto.message_field(41)
    level_up_gift_info: "GiftsInfoLevelUpGiftInfo" = betterproto.message_field(42)
    beacon_bubble_info: "GiftsInfoBeaconBubbleInfo" = betterproto.message_field(43)
    server_strategy_context: "GiftsInfoServerStrategyContext" = (
        betterproto.message_field(44)
    )


@dataclass(eq=False, repr=False)
class GiftsInfoBatchGiftInfo(betterproto.Message):
    dismiss_expire_seconds: int = betterproto.int64_field(1)
    consume_limit: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GiftsInfoBeaconBubbleInfo(betterproto.Message):
    live_goal_icon: "ImageModel" = betterproto.message_field(1)
    anchor_gallery_icon: "ImageModel" = betterproto.message_field(2)
    live_goal_schema_url: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GiftsInfoGiftGalleryInfo(betterproto.Message):
    anchor_ranking_league: str = betterproto.string_field(1)
    gallery_ranking_league: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GiftsInfoLevelUpGiftInfo(betterproto.Message):
    gift_id: int = betterproto.int64_field(1)
    left_count_to_level_up: int = betterproto.int64_field(2)
    level_up_count: int = betterproto.int64_field(3)
    current_count: int = betterproto.int64_field(4)
    num_of_upgrade_gifts_left: int = betterproto.int64_field(5)
    show_id: str = betterproto.string_field(6)
    minimum_level_grade: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class GiftsInfoLimitedTimeRewardGiftInfo(betterproto.Message):
    gift_id: int = betterproto.int64_field(1)
    valid_start: int = betterproto.int64_field(2)
    valid_end: int = betterproto.int64_field(3)
    gift_panel_banner: "GiftPanelBanner" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GiftsInfoUgPointsGiftInfo(betterproto.Message):
    max_anchor_times: int = betterproto.int64_field(1)
    has_send_gifts_in_history: bool = betterproto.bool_field(2)
    valid_start_at: int = betterproto.int64_field(3)
    valid_end_at: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class GiftsInfoServerStrategyContext(betterproto.Message):
    previous_sent_gift_ids: List[int] = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class OrganizationModel(betterproto.Message):
    name: str = betterproto.string_field(1)
    desc: str = betterproto.string_field(2)
    detail_url: str = betterproto.string_field(3)
    donate_link: str = betterproto.string_field(4)
    icon: "ImageModel" = betterproto.message_field(5)
    organization_id: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class WebcastInteractiveEffectMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    trigger_data: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GiftGoalVoiceAlterSwitch(betterproto.Message):
    value: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class ApplyGuideResponse(betterproto.Message):
    data: "ApplyGuideResponseResponseData" = betterproto.message_field(1)
    extra: "ApplyGuideResponseExtra" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ApplyGuideResponseResponseData(betterproto.Message):
    is_display: bool = betterproto.bool_field(1)
    display_strategy: int = betterproto.int32_field(2)
    trigger_again: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ApplyGuideResponseExtra(betterproto.Message):
    now: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class CancelJoinGroupReq(betterproto.Message):
    common: "LinkCommon" = betterproto.message_field(1)
    myself: "GroupPlayer" = betterproto.message_field(2)
    target: "GroupPlayer" = betterproto.message_field(3)
    type: int = betterproto.int32_field(4)
    group_channel_id: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class WebcastCohostTopicMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    action: int = betterproto.int32_field(2)
    topic: "CohostTopic" = betterproto.message_field(3)
    topic_set_content: "TopicSetContent" = betterproto.message_field(5)
    heat_update_content: "HeatUpdateContent" = betterproto.message_field(6)
    session_status: "TopicSessionStatus" = betterproto.message_field(21)


@dataclass(eq=False, repr=False)
class CancelJoinGroupResp(betterproto.Message):
    common_resp: "LinkMicCommonResp" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ReserveContent(betterproto.Message):
    reserver: "User" = betterproto.message_field(1)
    reserver_room_id: int = betterproto.int64_field(2)
    red_dot_num: int = betterproto.int64_field(3)
    created_timestamp: int = betterproto.int64_field(4)
    reservation_anchor_count: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class WebcastGiftUnlockMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    gifts: List["Gift"] = betterproto.message_field(2)
    bubble_text: "Text" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetShowSettingsParams(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WebcastEcDrawMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    entity: "EcDrawEntity" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GiftPageByCreator(betterproto.Message):
    page_type: int = betterproto.int32_field(1)
    page_name: str = betterproto.string_field(2)
    gifts: List["GiftStructByCreator"] = betterproto.message_field(3)
    display: bool = betterproto.bool_field(4)


@dataclass(eq=False, repr=False)
class BannerInfo(betterproto.Message):
    title: str = betterproto.string_field(1)
    sub_title: str = betterproto.string_field(2)
    text_color: str = betterproto.string_field(3)
    left_color: str = betterproto.string_field(4)
    right_color: str = betterproto.string_field(5)
    core_image_url: str = betterproto.string_field(6)
    background_image_url: str = betterproto.string_field(7)
    gradient_angle: int = betterproto.int64_field(8)
    priority: int = betterproto.int64_field(9)
    banner_url: str = betterproto.string_field(10)
    banner_id: int = betterproto.int64_field(11)


@dataclass(eq=False, repr=False)
class Playbook(betterproto.Message):
    playbook_id: int = betterproto.int64_field(1)
    author_info: "SimpleUser" = betterproto.message_field(2)
    content: "PlaybookContent" = betterproto.message_field(3)
    total_favorites: int = betterproto.int64_field(4)
    total_usage: int = betterproto.int64_field(5)
    create_time: int = betterproto.int64_field(6)
    update_time: int = betterproto.int64_field(7)
    is_updated_version: bool = betterproto.bool_field(8)
    is_my_favorite: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class MatchInfo(betterproto.Message):
    critical: int = betterproto.int64_field(1)
    effect_card_in_use: bool = betterproto.bool_field(2)
    multiplier_type: Optional["MatchInfoMultiplierType"] = betterproto.enum_field(
        3, optional=True
    )
    multiplier_value: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class CreateInfoResponse(betterproto.Message):
    data: "CreateInfoResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateInfoResponseResponseData(betterproto.Message):
    tns_report_interval_ms: int = betterproto.int64_field(1)
    cli_tns_collect_interval_ms: int = betterproto.int64_field(2)
    open_ls_notify: "OpenLsNotifyInfo" = betterproto.message_field(3)
    server_timestamp: int = betterproto.int64_field(4)
    has_live_studio_login: bool = betterproto.bool_field(5)
    have_mutil_guest_permission: bool = betterproto.bool_field(6)
    have_dual_device_camera: bool = betterproto.bool_field(7)
    have_screenshot_record: bool = betterproto.bool_field(8)
    tips: "Text" = betterproto.message_field(9)
    in_game_info: "InGameInfo" = betterproto.message_field(10)
    use_custom_cover: bool = betterproto.bool_field(11)
    allow_multi_stream: bool = betterproto.bool_field(12)
    enable_live_studio_monitor: bool = betterproto.bool_field(13)
    revenue_tips: "GameRevenueTipsMessage" = betterproto.message_field(14)
    banner_data: "GameBannerContainer" = betterproto.message_field(15)
    monetization_tips_config: "MonetizationTipsConfig" = betterproto.message_field(16)
    anchor_first_game_go_live_ts: int = betterproto.int64_field(17)
    is_game_anchor: bool = betterproto.bool_field(18)
    user_setting_detail: int = betterproto.int64_field(19)
    guess_result_notice_time: int = betterproto.int64_field(20)


@dataclass(eq=False, repr=False)
class Top2CardInfo(betterproto.Message):
    common: "CommonCardInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RivalsGameTag(betterproto.Message):
    tag_id: int = betterproto.int64_field(1)
    tag_display_text: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GiftChallengeProgress(betterproto.Message):
    status: Optional["GiftChallengeProgressGiftChallengeStatus"] = (
        betterproto.enum_field(1, optional=True)
    )
    current_points: int = betterproto.int64_field(2)
    stage_data: List["GiftChallengeProgressStageData"] = betterproto.message_field(3)
    challenge_id: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class GiftChallengeProgressStageData(betterproto.Message):
    total_points: int = betterproto.int64_field(1)
    gift_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class JoinDirectBizContent(betterproto.Message):
    reply_im_msg_id: int = betterproto.int64_field(1)
    outside_room_invite_source: Optional[
        "JoinDirectBizContentMultiGuestOutsideRoomInviteSource"
    ] = betterproto.enum_field(2, optional=True)


@dataclass(eq=False, repr=False)
class TopHostInfo(betterproto.Message):
    rank_type: str = betterproto.string_field(1)
    top_index: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class ShowConfig(betterproto.Message):
    duration_per_guest: int = betterproto.int64_field(1)
    allow_open_mic_freely: bool = betterproto.bool_field(2)
    transition_duration_of_config: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class BoostCard(betterproto.Message):
    m_card_id: int = betterproto.int64_field(1)
    m_task_source: int = betterproto.int32_field(2)
    m_task_id: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class BattleNoticeAnchorGiftGuide(betterproto.Message):
    content: "BattleNoticeText" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PaidContentInfo(betterproto.Message):
    paid_content_permission: bool = betterproto.bool_field(1)
    paid_content_live_data: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GroupChannelUser(betterproto.Message):
    channel_id: int = betterproto.int64_field(1)
    status: Optional["GroupChannelUserGroupStatus"] = betterproto.enum_field(
        2, optional=True
    )
    type: Optional["GroupChannelUserJoinType"] = betterproto.enum_field(
        3, optional=True
    )
    all_user: "AllListUser" = betterproto.message_field(4)
    join_time: int = betterproto.int64_field(5)
    linked_time: int = betterproto.int64_field(6)
    owner_user: "GroupPlayer" = betterproto.message_field(7)
    group_linkmic_id: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class QuickChatContent(betterproto.Message):
    type: int = betterproto.int32_field(1)
    text: str = betterproto.string_field(2)
    text_starling_key: str = betterproto.string_field(3)
    emote: "EmoteModel" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class FeedBanner(betterproto.Message):
    avg_color: str = betterproto.string_field(1)
    title: str = betterproto.string_field(2)
    url_list: List[str] = betterproto.string_field(3)
    uri: str = betterproto.string_field(4)
    height: int = betterproto.int32_field(5)
    width: int = betterproto.int32_field(6)
    id: int = betterproto.int64_field(8)
    schema_url: str = betterproto.string_field(9)
    banner_type: int = betterproto.int32_field(11)
    business_type: int = betterproto.int64_field(12)
    business_source: str = betterproto.string_field(13)
    activity_id: str = betterproto.string_field(14)


@dataclass(eq=False, repr=False)
class AnchorGrowLevelImMsgTaskDone(betterproto.Message):
    level: int = betterproto.int64_field(1)
    isfinallevel: bool = betterproto.bool_field(2)
    iscompletelevel: bool = betterproto.bool_field(3)
    taskid: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class GiftListByCreatorResponse(betterproto.Message):
    data: "GiftListByCreatorResponseData" = betterproto.message_field(1)
    extra: "GiftListByCreatorResponseExtra" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GiftListByCreatorResponseData(betterproto.Message):
    gifts_info: "GiftsInfoByCreator" = betterproto.message_field(1)
    pages: List["GiftPageByCreator"] = betterproto.message_field(2)
    activity: "GiftActivityCreator" = betterproto.message_field(3)
    recommendation_activities: List["GiftActivityCreator"] = betterproto.message_field(
        4
    )


@dataclass(eq=False, repr=False)
class GiftListByCreatorResponseExtra(betterproto.Message):
    log_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class PermitApplyContent(betterproto.Message):
    approver: "Player" = betterproto.message_field(1)
    approver_link_mic_id: str = betterproto.string_field(2)
    position_data: "MicPositionData" = betterproto.message_field(3)
    reply_status: "ReplyStatus" = betterproto.enum_field(4)
    dsl: "DslConfig" = betterproto.message_field(5)
    applier: "Player" = betterproto.message_field(6)
    operator: "Player" = betterproto.message_field(7)
    applier_link_mic_id: str = betterproto.string_field(8)
    linked_user_ui_positions: List[str] = betterproto.string_field(9)
    applier_rtc_token: str = betterproto.string_field(10)
    ui_pos: List["PosIdentity"] = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class DispersionParam(betterproto.Message):
    max_delay_ms: int = betterproto.int64_field(1)
    min_delay_ms: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class WebcastGiftMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    fan_ticket_count: int = betterproto.int32_field(3)
    group_count: int = betterproto.int32_field(4)
    repeat_count: int = betterproto.int32_field(5)
    combo_count: int = betterproto.int32_field(6)
    from_user: "User" = betterproto.message_field(7)
    to_user: "User" = betterproto.message_field(8)
    repeat_end: int = betterproto.int32_field(9)
    text_effect: "TextEffect" = betterproto.message_field(10)
    group_id: int = betterproto.int64_field(11)
    income_taskgifts: int = betterproto.int64_field(12)
    room_fan_ticket_count: int = betterproto.int64_field(13)
    priority: "GiftImPriority" = betterproto.message_field(14)
    m_gift: "Gift" = betterproto.message_field(15)
    m_log_id: str = betterproto.string_field(16)
    send_type: int = betterproto.int64_field(17)
    public_area_common: "PublicAreaCommon" = betterproto.message_field(18)
    tray_display_text: "Text" = betterproto.message_field(19)
    banned_display_effects: int = betterproto.int64_field(20)
    m_tray_info: "GiftTrayInfo" = betterproto.message_field(21)
    gift_monitor_info: "GiftMonitorInfo" = betterproto.message_field(23)
    color_id: int = betterproto.int64_field(24)
    is_first_send_gift: bool = betterproto.bool_field(25)
    display_text_for_anchor: "Text" = betterproto.message_field(26)
    display_text_for_audience: "Text" = betterproto.message_field(27)
    order_id: str = betterproto.string_field(28)
    gifts_in_box: "GiftsBoxInfo" = betterproto.message_field(29)
    msg_filter: "MsgFilter" = betterproto.message_field(30)
    lynx_extra: List["LynxGiftExtra"] = betterproto.message_field(31)
    user_identity: "UserIdentity" = betterproto.message_field(32)
    match_info: "MatchInfo" = betterproto.message_field(33)
    linkmic_gift_expression_strategy: Optional[
        "WebcastGiftMessageLinkmicGiftExpressionStrategy"
    ] = betterproto.enum_field(34, optional=True)
    flying_mic_resources: "FlyingMicResources" = betterproto.message_field(35)
    disable_gift_tracking: bool = betterproto.bool_field(36)
    asset: "AssetsModel" = betterproto.message_field(37)
    version: Optional["WebcastGiftMessageGiftMessageVersion"] = betterproto.enum_field(
        38, optional=True
    )
    sponsorship_info: List["WebcastGiftMessageSponsorshipInfo"] = (
        betterproto.message_field(39)
    )
    flying_mic_resources_v2: "FlyingMicResources" = betterproto.message_field(40)
    public_area_message_common: "PublicAreaMessageCommon" = betterproto.message_field(
        41
    )
    signature: str = betterproto.string_field(42)
    signature_version: str = betterproto.string_field(43)
    multi_generate_message: bool = betterproto.bool_field(44)
    to_member_id: str = betterproto.string_field(45)
    to_member_id_int: int = betterproto.int64_field(46)
    to_member_nickname: str = betterproto.string_field(47)
    interactive_gift_info: "WebcastGiftMessageInteractiveGiftInfo" = (
        betterproto.message_field(48)
    )


@dataclass(eq=False, repr=False)
class WebcastGiftMessageInteractiveGiftInfo(betterproto.Message):
    cross_screen_delay: int = betterproto.int64_field(1)
    cross_screen_role: int = betterproto.int64_field(2)
    ignore_config: Optional[
        "WebcastGiftMessageInteractiveGiftInfoGiftMessageIgnoreConfig"
    ] = betterproto.enum_field(3, optional=True)
    uniq_id: int = betterproto.int64_field(4)
    to_user_team_id: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class WebcastGiftMessageSponsorshipInfo(betterproto.Message):
    gift_id: int = betterproto.int64_field(1)
    sponsor_id: int = betterproto.int64_field(2)
    light_gift_up: bool = betterproto.bool_field(3)
    unlighted_gift_icon: str = betterproto.string_field(4)
    gift_gallery_detail_page_scheme_url: str = betterproto.string_field(5)
    gift_gallery_click_sponsor: bool = betterproto.bool_field(6)
    become_all_sponsored: bool = betterproto.bool_field(21)


@dataclass(eq=False, repr=False)
class CountdownForAllEndResponse(betterproto.Message):
    data: "CountdownForAllEndResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CountdownForAllEndResponseResponseData(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    play_content: "CountdownForAllContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PermissionLevelInfo(betterproto.Message):
    not_finish_task_num: int = betterproto.int32_field(1)
    permission_level: int = betterproto.int32_field(2)
    abnormal: bool = betterproto.bool_field(3)
    cpp_version: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class WebcastSubQueueMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type_action: int = betterproto.int32_field(2)
    queue: "SubQueue" = betterproto.message_field(3)
    current_user: "User" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class BagItemPreUpdateInfo(betterproto.Message):
    count: int = betterproto.int64_field(1)
    min_expire_at: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class PollData(betterproto.Message):
    poll_id: int = betterproto.int64_field(1)
    poll_status: Optional["PollDataPollStatus"] = betterproto.enum_field(
        2, optional=True
    )
    start_time: int = betterproto.int64_field(3)
    end_time: int = betterproto.int64_field(4)
    poll_option_list: List["PollOptionInfo"] = betterproto.message_field(5)
    poll_kind: Optional["PollDataPollKind"] = betterproto.enum_field(6, optional=True)
    title: str = betterproto.string_field(7)
    operator: "User" = betterproto.message_field(8)
    template_id: int = betterproto.int64_field(9)
    vote_limit: "PollVoteLimit" = betterproto.message_field(14)
    gift_id: int = betterproto.int64_field(15)
    poll_index: int = betterproto.int64_field(16)
    poll_sponsor: str = betterproto.string_field(17)
    poll_user_cnt: int = betterproto.int64_field(18)
    gift: "Gift" = betterproto.message_field(19)
    end_type: Optional["PollDataPollEndType"] = betterproto.enum_field(
        20, optional=True
    )
    suggested_question_key: str = betterproto.string_field(21)
    is_suggested_question: bool = betterproto.bool_field(22)
    original_poll_duration_ms: int = betterproto.int64_field(23)


@dataclass(eq=False, repr=False)
class TopicExtraInfo(betterproto.Message):
    start_time_sec: int = betterproto.int64_field(1)
    end_time_sec: int = betterproto.int64_field(2)
    all_rivals: int = betterproto.int64_field(3)
    all_rivals_avatar: List["ImageModel"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CompetitionFinishResponse(betterproto.Message):
    data: "CompetitionFinishResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CompetitionFinishResponseResponseData(betterproto.Message):
    finish_info: "CompetitionFinish" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class SortStatsTag(betterproto.Message):
    key: str = betterproto.string_field(1)
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GuidePopupBanner(betterproto.Message):
    banner_style: int = betterproto.int32_field(1)
    banner_content_type: int = betterproto.int32_field(2)
    top_cohosted_partners: List["User"] = betterproto.message_field(3)
    benefits: List["Benefit"] = betterproto.message_field(4)
    recap_title_type: int = betterproto.int32_field(5)
    timestamp: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class ProfileContent(betterproto.Message):
    use_content: bool = betterproto.bool_field(1)
    icon_list: List["IconConfig"] = betterproto.message_field(2)
    number_config: "NumberConfig" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PollBasicInfo(betterproto.Message):
    poll_sponsor: str = betterproto.string_field(1)
    gift_id: int = betterproto.int64_field(2)
    title: str = betterproto.string_field(3)
    is_suggested_question: bool = betterproto.bool_field(4)
    user_cnt: int = betterproto.int64_field(5)
    gift: "Gift" = betterproto.message_field(6)
    poll_id_str: str = betterproto.string_field(7)
    suggested_question_key: str = betterproto.string_field(8)
    poll_duration: int = betterproto.int64_field(9)
    time_remain: int = betterproto.int64_field(10)
    poll_index: int = betterproto.int64_field(11)
    template_id: int = betterproto.int64_field(12)


@dataclass(eq=False, repr=False)
class TextPiecePatternRef(betterproto.Message):
    key: str = betterproto.string_field(1)
    default_pattern: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RtcBitRateMap(betterproto.Message):
    xx_1: int = betterproto.int32_field(1)
    xx_2: int = betterproto.int32_field(2)
    xx_3: int = betterproto.int32_field(3)
    xx_4: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class RoomDecoration(betterproto.Message):
    image: "ImageModel" = betterproto.message_field(2)
    input_rect: List[int] = betterproto.int64_field(4)
    max_length: int = betterproto.int64_field(8)
    status: int = betterproto.int64_field(9)
    kind: int = betterproto.int64_field(14)


@dataclass(eq=False, repr=False)
class RoomHostMultiGuestPermissionInfo(betterproto.Message):
    room_pack_success_flag: bool = betterproto.bool_field(1)
    permission_info: "MultiGuestPermissionInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BattleAbTest(betterproto.Message):
    ab_test_type: Optional["BattleAbTestBattleAbTestType"] = betterproto.enum_field(
        1, optional=True
    )
    group: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class GiftCollection(betterproto.Message):
    round: int = betterproto.int64_field(1)
    effect_name_key: str = betterproto.string_field(2)
    gift: "Gift" = betterproto.message_field(3)
    message_type: "MessageType" = betterproto.enum_field(4)
    is_filter_host: bool = betterproto.bool_field(5)
    schema_url: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class LivePermissionApplyResponse(betterproto.Message):
    data: "LivePermissionApplyResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class LivePermissionApplyResponsePermissionApplyInfo(betterproto.Message):
    m_anchor_fans_num: int = betterproto.int32_field(1)
    m_forbidden_apply_countdown: int = betterproto.int32_field(2)
    m_apply_need_fans_num: int = betterproto.int32_field(3)
    m_target_live_time: int = betterproto.int32_field(4)
    m_forbidden_apply_days: int = betterproto.int32_field(5)
    m_apply_invalid_time: int = betterproto.int32_field(6)
    m_need_live_time: int = betterproto.int32_field(7)
    m_apply_status: int = betterproto.int32_field(8)
    m_apply_source: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class LivePermissionApplyResponseResponseData(betterproto.Message):
    permission_info: Dict[str, "LivePermissionApplyResponsePermissionApplyInfo"] = (
        betterproto.map_field(1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE)
    )


@dataclass(eq=False, repr=False)
class WebcastRoomBottomMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    color: str = betterproto.string_field(3)
    action_content: str = betterproto.string_field(6)
    action_type: str = betterproto.string_field(7)
    push_display_time: int = betterproto.int64_field(8)
    action_icon: "ImageModel" = betterproto.message_field(10)
    new_background_image: "FlexImageModel" = betterproto.message_field(11)
    source: str = betterproto.string_field(12)


@dataclass(eq=False, repr=False)
class ProtoMessageFetchResult(betterproto.Message):
    messages: List["ProtoMessageFetchResultBaseProtoMessage"] = (
        betterproto.message_field(1)
    )
    cursor: str = betterproto.string_field(2)
    fetch_interval: int = betterproto.int64_field(3)
    now: int = betterproto.int64_field(4)
    internal_ext: str = betterproto.string_field(5)
    fetch_type: int = betterproto.int32_field(6)
    route_params: Dict[str, str] = betterproto.map_field(
        7, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    heartbeat_duration: int = betterproto.int64_field(8)
    need_ack: bool = betterproto.bool_field(9)
    push_server: str = betterproto.string_field(10)
    is_first: bool = betterproto.bool_field(11)
    history_comment_cursor: str = betterproto.string_field(12)
    history_no_more: bool = betterproto.bool_field(13)


@dataclass(eq=False, repr=False)
class ProtoMessageFetchResultBaseProtoMessage(betterproto.Message):
    method: str = betterproto.string_field(1)
    payload: bytes = betterproto.bytes_field(2)
    msg_id: int = betterproto.int64_field(3)
    msg_type: int = betterproto.int32_field(4)
    offset: int = betterproto.int64_field(5)
    is_history: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class FinishShowingGuestParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    show_id: int = betterproto.int64_field(3)
    target_user_id: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class EmoteUploadInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    emote_upload_source: Optional["EmoteUploadInfoUserEmoteUploadSource"] = (
        betterproto.enum_field(2, optional=True)
    )
    user_info: "User" = betterproto.message_field(3)
    user_id_str: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class NoticeboardTemplateSaveResponse(betterproto.Message):
    data: "NoticeboardTemplateSaveResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NoticeboardTemplateSaveResponseResponseData(betterproto.Message):
    is_success: bool = betterproto.bool_field(1)
    template: "NoticeboardTemplate" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CompetitionInfo(betterproto.Message):
    biz_common: "CompetitionCommon" = betterproto.message_field(1)
    team_infos: List["CompetitionResultsTeamInfo"] = betterproto.message_field(2)
    ab_infos: Dict[int, "CompetitionAbInfo"] = betterproto.map_field(
        4, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    take_the_stage_info: "TakeTheStageInfo" = betterproto.message_field(100)
    group_show_info: "CompetitionInfoGroupShowInfo" = betterproto.message_field(101)


@dataclass(eq=False, repr=False)
class CompetitionInfoGroupShowInfo(betterproto.Message):
    status: Optional["CompetitionInfoGroupShowInfoGroupShowStatus"] = (
        betterproto.enum_field(1, optional=True)
    )
    end_timestamp: int = betterproto.int64_field(2)
    actual_end_timestamp: int = betterproto.int64_field(3)
    start_timestamp: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class WebcastDonationInfoMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    total_money: str = betterproto.string_field(2)
    currency: str = betterproto.string_field(3)
    total_user: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class WebcastGameMomentMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    event_time: int = betterproto.int64_field(3)
    max_time: int = betterproto.int64_field(4)
    unique_id: str = betterproto.string_field(5)
    moment_effects: List["WebcastGameMomentMessageGameMomentEffectType"] = (
        betterproto.enum_field(6)
    )


@dataclass(eq=False, repr=False)
class SearchBar(betterproto.Message):
    bg_image: "ImageModel" = betterproto.message_field(1)
    content: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class FeedExtra(betterproto.Message):
    cost: int = betterproto.int64_field(5)
    max_time: int = betterproto.int64_field(6)
    min_time: int = betterproto.int64_field(7)
    total: int = betterproto.int32_field(8)
    banner_container: "FeedBannerContainer" = betterproto.message_field(9)
    unread_extra: str = betterproto.string_field(11)
    style: int = betterproto.int32_field(12)
    hashtag_text: str = betterproto.string_field(13)
    no_result_reason: str = betterproto.string_field(16)
    ocean_req_info: str = betterproto.string_field(17)
    exit_guide: str = betterproto.string_field(18)
    exit_guide_music: str = betterproto.string_field(19)


@dataclass(eq=False, repr=False)
class GuestShowdownConfigChange(betterproto.Message):
    update_loser_num: bool = betterproto.bool_field(1)
    loser_num: int = betterproto.int32_field(2)
    update_add_duration: bool = betterproto.bool_field(3)
    add_duration: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class RoomResumeResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CaptionContent(betterproto.Message):
    lang: str = betterproto.string_field(1)
    content: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RoomMultiGuestLinkmicInfo(betterproto.Message):
    pack_err_code: int = betterproto.int64_field(1)
    multi_guest_linkmic_info: "MultiGuestLinkmicInfo" = betterproto.message_field(2)
    linkmic_room_create_ab_param: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class WebcastImDeleteMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    delete_msg_ids: List[int] = betterproto.int64_field(2)
    delete_user_ids: List[int] = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class UpdateShowContentResponse(betterproto.Message):
    data: "UpdateShowContentResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UpdateShowContentResponseResponseData(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    show_content: "ShowContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastHashtagMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    hashtag: "Hashtag" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GrowthJourneyBannerItem(betterproto.Message):
    banner_content: str = betterproto.string_field(1)
    banner_schema: str = betterproto.string_field(2)
    banner_icon: str = betterproto.string_field(3)
    banner_frequency_key: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class NoticeboardTemplateFetchListParams(betterproto.Message):
    fetch_type: int = betterproto.int32_field(1)
    room_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class WebcastLinkMicBattleItemCard(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    battle_id: int = betterproto.int64_field(2)
    msg_type: Optional["WebcastLinkMicBattleItemCardBattleCardMsgType"] = (
        betterproto.enum_field(3, optional=True)
    )
    card_obtain_guide: "CardObtainGuide" = betterproto.message_field(4)
    use_critical_strike_card: "UseCriticalStrikeCard" = betterproto.message_field(5)
    use_smoke_card: "UseSmokeCard" = betterproto.message_field(6)
    award_card_notice: "AwardCardNotice" = betterproto.message_field(7)
    use_extra_time_card: "UseExtraTimeCard" = betterproto.message_field(8)
    use_special_effect_card: "UseSpecialEffectCard" = betterproto.message_field(9)
    use_potion_card: "UsePotionCard" = betterproto.message_field(10)
    use_wave_card: "UseWaveCard" = betterproto.message_field(11)
    special_effect_notice: "SpecialEffectNotice" = betterproto.message_field(12)
    use_top2_card: "UseTop2Card" = betterproto.message_field(13)
    use_top3_card: "UseTop3Card" = betterproto.message_field(14)


@dataclass(eq=False, repr=False)
class GuideKeywordsReportResponse(betterproto.Message):
    data: "GuideKeywordsReportResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GuideKeywordsReportResponseData(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WebcastPrivilegeDynamicEffectMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    scene: "Scene" = betterproto.enum_field(2)
    resource_attr: "ResourceAttr" = betterproto.message_field(3)
    control: "DisplayControl" = betterproto.message_field(4)
    placeholder_list: List["WebcastPrivilegeDynamicEffectMessagePlaceholder"] = (
        betterproto.message_field(5)
    )
    effect_type: int = betterproto.int32_field(6)
    sticker_model: "WebcastPrivilegeDynamicEffectMessageStickerEffectModel" = (
        betterproto.message_field(7)
    )
    privilege_log_extra: "PrivilegeLogExtra" = betterproto.message_field(100)


@dataclass(eq=False, repr=False)
class WebcastPrivilegeDynamicEffectMessageShadowConfig(betterproto.Message):
    shadow_color: str = betterproto.string_field(6)
    shadow_dx: int = betterproto.int32_field(7)
    shadow_dy: int = betterproto.int32_field(8)
    shadow_radius: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class WebcastPrivilegeDynamicEffectMessageStrokeConfig(betterproto.Message):
    stroke_color: str = betterproto.string_field(1)
    stroke_width: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class WebcastPrivilegeDynamicEffectMessageFontStyle(betterproto.Message):
    max_lines: int = betterproto.int32_field(1)
    font_size: int = betterproto.int32_field(2)
    font_color: str = betterproto.string_field(3)
    weight: int = betterproto.int32_field(4)
    enable_shadow: bool = betterproto.bool_field(5)
    shadow_config_list: List["WebcastPrivilegeDynamicEffectMessageShadowConfig"] = (
        betterproto.message_field(6)
    )
    enable_stroke: bool = betterproto.bool_field(7)
    stroke_config_list: List["WebcastPrivilegeDynamicEffectMessageStrokeConfig"] = (
        betterproto.message_field(8)
    )
    horizontal_align: int = betterproto.int32_field(9)
    vertical_align: int = betterproto.int32_field(10)


@dataclass(eq=False, repr=False)
class WebcastPrivilegeDynamicEffectMessageImagePadding(betterproto.Message):
    left_padding: int = betterproto.int32_field(1)
    right_padding: int = betterproto.int32_field(2)
    top_padding: int = betterproto.int32_field(3)
    bottom_padding: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class WebcastPrivilegeDynamicEffectMessagePlaceholder(betterproto.Message):
    place_type: int = betterproto.int32_field(1)
    target_image: str = betterproto.string_field(2)
    target_width: int = betterproto.int32_field(3)
    target_height: int = betterproto.int32_field(4)
    text: "Text" = betterproto.message_field(5)
    font_style: "WebcastPrivilegeDynamicEffectMessageFontStyle" = (
        betterproto.message_field(6)
    )
    image_padding: "WebcastPrivilegeDynamicEffectMessageImagePadding" = (
        betterproto.message_field(7)
    )


@dataclass(eq=False, repr=False)
class WebcastPrivilegeDynamicEffectMessageStickerEffectModel(betterproto.Message):
    resource_id: str = betterproto.string_field(1)
    text: "Text" = betterproto.message_field(2)
    duration: int = betterproto.int64_field(3)
    panel_type: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class EffectInfo(betterproto.Message):
    effect_id: int = betterproto.int64_field(1)
    role: int = betterproto.int64_field(2)
    user_id: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class OnlineAudience(betterproto.Message):
    ranks: List["OnlineAudienceRank"] = betterproto.message_field(1)
    self_info: "OnlineAudienceRank" = betterproto.message_field(2)
    currency: str = betterproto.string_field(3)
    anchor_show_contribution: bool = betterproto.bool_field(4)
    deprecated: bool = betterproto.bool_field(5)
    total: int = betterproto.int64_field(6)
    rule_url: str = betterproto.string_field(7)
    display_config: "OnlineAudienceDisplayConfig" = betterproto.message_field(8)
    anonymous: int = betterproto.int64_field(9)
    preview_count: int = betterproto.int64_field(10)


@dataclass(eq=False, repr=False)
class OnlineAudienceDisplayConfig(betterproto.Message):
    show_online_panel: bool = betterproto.bool_field(1)
    can_panel_click: bool = betterproto.bool_field(2)
    show_avatar_list: bool = betterproto.bool_field(3)
    avatar_count: int = betterproto.int64_field(4)
    show_score: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class OnlineAudienceRank(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    score: int = betterproto.int64_field(2)
    rank: int = betterproto.int64_field(3)
    gap_description: str = betterproto.string_field(4)
    user_restriction_level: int = betterproto.int64_field(5)
    rank_user: "RankUser" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class HashtagResponse(betterproto.Message):
    hashtags: List["Hashtag"] = betterproto.message_field(1)
    game_tag_list: List["GameTag"] = betterproto.message_field(2)
    game_hash_tag: "Hashtag" = betterproto.message_field(3)
    obs_hash_tag: List["Hashtag"] = betterproto.message_field(4)
    live_voice_hashtag: List["Hashtag"] = betterproto.message_field(5)
    live_studio_hashtag: List["Hashtag"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class LinkerGuestCancelEnlargeContent(betterproto.Message):
    scene: "Scene" = betterproto.enum_field(1)
    is_reject_enlarge: int = betterproto.int32_field(2)
    cancel_linkmic_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GiftColorInfo(betterproto.Message):
    color_id: int = betterproto.int64_field(1)
    color_name: str = betterproto.string_field(2)
    color_values: List[str] = betterproto.string_field(3)
    color_image: "ImageModel" = betterproto.message_field(4)
    gift_image: "ImageModel" = betterproto.message_field(5)
    color_effect_id: int = betterproto.int64_field(6)
    is_default: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class WebcastAnchorGetSubQuotaMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    description: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class FrameInfo(betterproto.Message):
    frame_img_url: str = betterproto.string_field(1)
    timestamp: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class SortStatsTags(betterproto.Message):
    for_app_log: List["SortStatsTag"] = betterproto.message_field(1)
    for_client_func: List["SortStatsTag"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastOecLiveHotRoomMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    path_map: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    expire_at: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class WebcastAudienceReserveUserStateMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    room_id: int = betterproto.int64_field(2)
    type: Optional["WebcastAudienceReserveUserStateMessageAudienceReserveType"] = (
        betterproto.enum_field(3, optional=True)
    )
    audience_reserve_user_info: "AudienceReserveUserInfo" = betterproto.message_field(4)
    audience_reserve_content: "AudienceReserveContent" = betterproto.message_field(100)
    audience_cancel_content: "AudienceCancelContent" = betterproto.message_field(101)
    audience_reply_content: "AudienceReplyContent" = betterproto.message_field(102)
    audience_reject_content: "AudienceRejectContent" = betterproto.message_field(103)


@dataclass(eq=False, repr=False)
class CountdownUser(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    linkmic_id: str = betterproto.string_field(2)
    score: int = betterproto.int64_field(3)
    completion_progress_percent: int = betterproto.int32_field(4)
    nickname: str = betterproto.string_field(5)
    display_id: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class WebcastRealtimeLiveCenterMethod(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    room_id: str = betterproto.string_field(2)
    base_info: "RealtimeLiveCenterBaseData" = betterproto.message_field(3)
    tips_info: "RealtimeLiveCenterTips" = betterproto.message_field(4)
    shop_info: "RealtimeLiveCenterShopData" = betterproto.message_field(5)
    cold_start_stat_data: "ColdStartStatData" = betterproto.message_field(6)
    reminder_word_info: "RealtimeReminderWordInfoMsg" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class CreateChannelContent(betterproto.Message):
    owner: "Player" = betterproto.message_field(1)
    owner_link_mic_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CeremonyEffect(betterproto.Message):
    grade_background: "ImageModel" = betterproto.message_field(1)
    avatar_border: "ImageModel" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LinkmicUserInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    linkmic_id_str: str = betterproto.string_field(2)
    room_id: int = betterproto.int64_field(3)
    linked_time: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class MaskLayer(betterproto.Message):
    title: "Text" = betterproto.message_field(1)
    sub_title: "Text" = betterproto.message_field(2)
    mask_layer_type: int = betterproto.int32_field(3)
    punish_info: "PunishEventInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class LiveStreamSubGoalGift(betterproto.Message):
    name: str = betterproto.string_field(1)
    icon: "ImageModel" = betterproto.message_field(2)
    diamond_count: int = betterproto.int64_field(3)
    type: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class SkinDrawerEntrance(betterproto.Message):
    style: int = betterproto.int64_field(1)
    cover: "ImageModel" = betterproto.message_field(2)
    title: str = betterproto.string_field(3)
    title_key: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class MultiLiveAnchorPanelSettings(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    layout_type: int = betterproto.int32_field(2)
    fix_mic_num_action: int = betterproto.int32_field(3)
    allow_viewer_req: int = betterproto.int32_field(4)
    only_allow_follower_req: int = betterproto.int32_field(5)
    applier_sort_setting: int = betterproto.int32_field(7)
    applier_sort_gift_score_threshold: int = betterproto.int64_field(8)
    allow_request_from_friends: int = betterproto.int32_field(9)
    allow_request_from_followers: int = betterproto.int32_field(10)
    allow_request_from_others: int = betterproto.int32_field(11)
    enable_show_multi_guest_layout: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class StreamResolution(betterproto.Message):
    stream_resolution: int = betterproto.int32_field(1)
    resolution_text: str = betterproto.string_field(2)
    resolution_describe: str = betterproto.string_field(3)
    min_bit_rate: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class ContentPositionMessage(betterproto.Message):
    content_i_d: str = betterproto.string_field(1)
    content_type: Optional["ContentPositionMessageContentPositionType"] = (
        betterproto.enum_field(2, optional=True)
    )


@dataclass(eq=False, repr=False)
class EffectStruct(betterproto.Message):
    name: str = betterproto.string_field(1)
    hint: str = betterproto.string_field(2)
    hint_icon: "UrlDataStruct" = betterproto.message_field(3)
    sdk_version: str = betterproto.string_field(4)
    app_version: str = betterproto.string_field(5)
    file_url: "UrlDataStruct" = betterproto.message_field(6)
    icon_url: "UrlDataStruct" = betterproto.message_field(7)
    id: str = betterproto.string_field(8)
    effect_id: str = betterproto.string_field(9)
    device_platform: str = betterproto.string_field(10)
    types: List[str] = betterproto.string_field(11)
    tags: List[str] = betterproto.string_field(12)
    tags_updated_at: str = betterproto.string_field(13)
    parent: str = betterproto.string_field(14)
    children: List[str] = betterproto.string_field(15)
    effect_type: int = betterproto.int32_field(16)
    music: List[str] = betterproto.string_field(17)
    source: int = betterproto.int32_field(18)
    designer_id: str = betterproto.string_field(19)
    schema: str = betterproto.string_field(20)
    requirements: List[str] = betterproto.string_field(21)
    extra: str = betterproto.string_field(22)
    is_busi: bool = betterproto.bool_field(23)
    designer_encrypted_id: str = betterproto.string_field(26)
    sdk_extra: str = betterproto.string_field(27)
    resource_id: str = betterproto.string_field(28)
    ad_raw_data: str = betterproto.string_field(29)
    bind_ids: List[str] = betterproto.string_field(30)
    ptime: int = betterproto.int64_field(31)
    grade_key: str = betterproto.string_field(32)
    composer_params: str = betterproto.string_field(33)
    hint_file: "UrlDataStruct" = betterproto.message_field(34)
    use_number: int = betterproto.int64_field(35)
    types_sec: List[str] = betterproto.string_field(36)
    requirements_sec: List[str] = betterproto.string_field(37)
    panel: str = betterproto.string_field(38)
    model_names: str = betterproto.string_field(39)
    model_names_sec: str = betterproto.string_field(40)
    hint_file_format: int = betterproto.int32_field(41)
    poi_id: str = betterproto.string_field(42)
    is_poi: bool = betterproto.bool_field(43)
    challenge: List[str] = betterproto.string_field(44)
    system_list: List[str] = betterproto.string_field(45)
    original_effect_id: str = betterproto.string_field(46)
    trans_file_url: "UrlDataStruct" = betterproto.message_field(47)
    template_effect_id: str = betterproto.string_field(48)
    rec_tag: int = betterproto.int64_field(49)
    template_effect_extra: "TemplateEffectExtra" = betterproto.message_field(50)
    file_diff: "DiffInfo" = betterproto.message_field(51)
    provider: int = betterproto.int32_field(52)
    package_size: int = betterproto.int64_field(53)


@dataclass(eq=False, repr=False)
class EmoteWithIndex(betterproto.Message):
    index: int = betterproto.int32_field(1)
    emote_model: "EmoteModel" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ShowInfo(betterproto.Message):
    show_start_time: int = betterproto.int64_field(1)
    show_end_time: int = betterproto.int64_field(2)
    anchors: List["User"] = betterproto.message_field(3)
    show_introduction: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class RivalExtraInfo(betterproto.Message):
    text: str = betterproto.string_field(1)
    text_type: Optional["RivalExtraInfoTextType"] = betterproto.enum_field(
        2, optional=True
    )
    label: str = betterproto.string_field(3)
    anchor_layer: Optional["RivalExtraInfoAnchorLayer"] = betterproto.enum_field(
        4, optional=True
    )
    linker_info: "LinkerInfo" = betterproto.message_field(5)
    linkmic_user_settings: "AnchorLinkmicUserSettings" = betterproto.message_field(6)
    invite_block_reason: Optional["RivalExtraInfoInviteBlockReason"] = (
        betterproto.enum_field(8, optional=True)
    )
    show_play_type: Optional["RivalExtraInfoLinkmicPlayType"] = betterproto.enum_field(
        9, optional=True
    )
    tag: "RivalExtraInfoTag" = betterproto.message_field(11)
    reserve_info: "RivalExtraInfoReserveInfo" = betterproto.message_field(12)
    detail_block_reason: Optional["RivalExtraInfoDetailBlockReason"] = (
        betterproto.enum_field(13, optional=True)
    )
    opt_pair_info: "OptPairInfo" = betterproto.message_field(14)
    tag_v2: "TagV2" = betterproto.message_field(15)
    eoy_level: int = betterproto.int64_field(16)
    battle_info: "RivalExtraInfoBattleInfo" = betterproto.message_field(17)
    cohost_layout_mode: Optional["RivalExtraInfoCohostLayoutMode"] = (
        betterproto.enum_field(18, optional=True)
    )
    game_tag: "RivalsGameTag" = betterproto.message_field(19)


@dataclass(eq=False, repr=False)
class RivalExtraInfoBattleInfo(betterproto.Message):
    info_type: Optional["RivalExtraInfoBattleInfoBattleInfoType"] = (
        betterproto.enum_field(1, optional=True)
    )
    value: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class RivalExtraInfoReserveInfo(betterproto.Message):
    reservation_id: int = betterproto.int64_field(1)
    reply_status: "ReplyStatus" = betterproto.enum_field(2)
    bubble_tip: str = betterproto.string_field(3)
    response_time: int = betterproto.int64_field(4)
    is_reservation_sender: bool = betterproto.bool_field(5)
    created_timestamp: int = betterproto.int64_field(6)
    viewed: bool = betterproto.bool_field(7)


@dataclass(eq=False, repr=False)
class RivalExtraInfoTag(betterproto.Message):
    tag_type: int = betterproto.int32_field(1)
    tag_value: str = betterproto.string_field(2)
    tag_text: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GradeScoreRule(betterproto.Message):
    grade: int = betterproto.int32_field(1)
    grade_min_score: int = betterproto.int64_field(2)
    grade_max_score: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class CommentSwitchSettings(betterproto.Message):
    chat: int = betterproto.int32_field(1)
    chat_spam_comments: int = betterproto.int32_field(2)
    chat_l2: int = betterproto.int32_field(3)
    chat_community_flagged: int = betterproto.int32_field(4)
    chat_community_flagged_review: int = betterproto.int32_field(5)
    comment_tray: int = betterproto.int32_field(6)
    mute_duration: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class GiftModeMeta(betterproto.Message):
    gift_id: int = betterproto.int64_field(1)
    gift_name_key: str = betterproto.string_field(2)
    gift_icon_image: "ImageModel" = betterproto.message_field(3)
    gift_mode_desc: "Text" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WebcastWallpaperMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    wallpaper_content: "WallpaperContent" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class EcTaskRegisterMessageEntity(betterproto.Message):
    interval: int = betterproto.int32_field(1)
    task_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class UserSetting(betterproto.Message):
    setting_id: int = betterproto.int64_field(1)
    version: int = betterproto.int64_field(2)
    example_setting: "ExampleSetting" = betterproto.message_field(100)
    revenue_tips_setting: "RevenueTipsSetting" = betterproto.message_field(101)
    goal_auto_update_switch: "GiftGoalAutoUpdateSwitch" = betterproto.message_field(102)
    goal_voice_alter_switch: "GiftGoalVoiceAlterSwitch" = betterproto.message_field(103)
    game_server_feature_setting: "GameServerFeatureSetting" = betterproto.message_field(
        104
    )
    game_guess_recommend_create_switch: "GameGuessRecommendCreateSwitch" = (
        betterproto.message_field(105)
    )


@dataclass(eq=False, repr=False)
class BadgeStruct(betterproto.Message):
    badge_display_type: Optional["BadgeStructBadgeDisplayType"] = (
        betterproto.enum_field(1, optional=True)
    )
    badge_priority_type: Optional["BadgeStructBadgePriorityType"] = (
        betterproto.enum_field(2, optional=True)
    )
    badge_scene: Optional["BadgeStructBadgeSceneType"] = betterproto.enum_field(
        3, optional=True
    )
    position: Optional["BadgeStructPosition"] = betterproto.enum_field(4, optional=True)
    display_status: Optional["BadgeStructDisplayStatus"] = betterproto.enum_field(
        5, optional=True
    )
    greyed_by_client: int = betterproto.int64_field(6)
    exhibition_type: Optional["BadgeStructBadgeExhibitionType"] = (
        betterproto.enum_field(7, optional=True)
    )
    schema_url: str = betterproto.string_field(10)
    display: bool = betterproto.bool_field(11)
    log_extra: "PrivilegeLogExtra" = betterproto.message_field(12)
    image_badge: "ImageBadge" = betterproto.message_field(20)
    text_badge: "TextBadge" = betterproto.message_field(21)
    string_badge: "StringBadge" = betterproto.message_field(22)
    combine_badge_struct: "CombineBadgeStruct" = betterproto.message_field(23)
    is_customized: bool = betterproto.bool_field(24)


@dataclass(eq=False, repr=False)
class CohostContent(betterproto.Message):
    join_group_biz_content: "JoinGroupBizContent" = betterproto.message_field(1)
    permit_join_group_biz_content: "PermitJoinGroupBizContent" = (
        betterproto.message_field(2)
    )
    list_change_biz_content: "ListChangeBizContent" = betterproto.message_field(11)


@dataclass(eq=False, repr=False)
class SubGoalPinInfo(betterproto.Message):
    pin_start_time: int = betterproto.int64_field(1)
    pin_end_time: int = betterproto.int64_field(2)
    pin_ready_time: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class GiftStructByCreator(betterproto.Message):
    name: str = betterproto.string_field(1)
    id: int = betterproto.int64_field(2)
    type: int = betterproto.int32_field(3)
    diamond_count: int = betterproto.int32_field(4)
    image: "ImageModel" = betterproto.message_field(5)
    preview_image: "ImageModel" = betterproto.message_field(6)
    gift_panel_cardlets: List["GiftPanelCardletByCreator"] = betterproto.message_field(
        7
    )
    gift_label_icon: "ImageModel" = betterproto.message_field(8)
    is_box_gift: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class ExtraTimeCardInfo(betterproto.Message):
    card_name_key: str = betterproto.string_field(1)
    card_image: "ImageModel" = betterproto.message_field(2)
    send_time_sec: int = betterproto.int64_field(3)
    send_user: "BattleUserInfo" = betterproto.message_field(4)
    effect_last_duration: int = betterproto.int64_field(5)
    rule_url: str = betterproto.string_field(6)
    effect_time_sec: int = betterproto.int64_field(7)
    to_anchor_id: int = betterproto.int64_field(8)
    extra_duration_sec: int = betterproto.int64_field(9)
    to_anchor_id_str: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class EntranceConditionsPopup(betterproto.Message):
    conditions: List["EntranceConditionsPopupCondition"] = betterproto.message_field(1)
    title: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class EntranceConditionsPopupCondition(betterproto.Message):
    name: str = betterproto.string_field(1)
    text: str = betterproto.string_field(2)
    match: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class ShortTouchExtra(betterproto.Message):
    poll_data: "ShortTouchPollData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WebcastSubPinEventMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    action_type: Optional["WebcastSubPinEventMessageActionType"] = (
        betterproto.enum_field(2, optional=True)
    )
    card: "SubPinCard" = betterproto.message_field(3)
    operator_user_id: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class BattleTruthOrDareTips(betterproto.Message):
    truth_or_dare_tips: List["TruthOrDareTip"] = betterproto.message_field(1)
    gift_guide_key: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PopMsgContainer(betterproto.Message):
    has_pop: bool = betterproto.bool_field(1)
    content: str = betterproto.string_field(2)
    button_content: List[str] = betterproto.string_field(3)
    title: str = betterproto.string_field(4)
    has_jump: bool = betterproto.bool_field(5)
    jump_title: str = betterproto.string_field(6)
    jump_url: str = betterproto.string_field(7)
    id: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class PromoteAdBoostedUsers(betterproto.Message):
    ad_id: int = betterproto.int64_field(1)
    cnt: int = betterproto.int64_field(2)
    percent: int = betterproto.int64_field(3)
    end_time: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class MsgNotifyQuota(betterproto.Message):
    component_type: int = betterproto.int32_field(1)
    position_count_map: Dict[str, int] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_INT64
    )
    default_count: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class ApplyContent(betterproto.Message):
    applicant: "Player" = betterproto.message_field(1)
    applicant_link_mic_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WebcastLinkmicBattleTaskMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    battle_task_message_type: Optional[
        "WebcastLinkmicBattleTaskMessageBattleTaskMessageType"
    ] = betterproto.enum_field(2, optional=True)
    task_start: "BattleTaskStart" = betterproto.message_field(3)
    task_update: "BattleTaskUpdate" = betterproto.message_field(4)
    task_settle: "BattleTaskSettle" = betterproto.message_field(5)
    reward_settle: "BattleRewardSettle" = betterproto.message_field(6)
    battle_id: int = betterproto.int64_field(20)


@dataclass(eq=False, repr=False)
class LinkPosition(betterproto.Message):
    position: int = betterproto.int32_field(1)
    position_type: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class TextPieceGift(betterproto.Message):
    gift_id: int = betterproto.int64_field(1)
    name_ref: "PatternRef" = betterproto.message_field(2)
    show_type: Optional["TextPieceGiftGiftShowType"] = betterproto.enum_field(
        3, optional=True
    )
    color_id: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class WebcastStarCommentPushMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    queue_version: int = betterproto.int32_field(2)
    current: "StarCommentMessage" = betterproto.message_field(3)
    next: "StarCommentMessage" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class LiveStreamGoalIndicator(betterproto.Message):
    key: str = betterproto.string_field(1)
    op: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class Video(betterproto.Message):
    vid: str = betterproto.string_field(1)
    url: str = betterproto.string_field(2)
    duration: float = betterproto.double_field(3)
    width: int = betterproto.int32_field(4)
    height: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class Img(betterproto.Message):
    key: str = betterproto.string_field(1)
    width: int = betterproto.int32_field(2)
    height: int = betterproto.int32_field(3)
    url: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class KickOutBizContent(betterproto.Message):
    operator_user_info: "User" = betterproto.message_field(1)
    operator_link_admin_type: Optional["KickOutBizContentLinkMicUserAdminType"] = (
        betterproto.enum_field(2, optional=True)
    )
    kick_player_user_info: "User" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WebcastEcTaskRefreshCouponListMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    entity: "EcTaskRefreshCouponListEntity" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Avatar(betterproto.Message):
    avatar_id: int = betterproto.int64_field(1)
    image: "ImageModel" = betterproto.message_field(2)
    video_static: "Video" = betterproto.message_field(3)
    video_dynamic: "Video" = betterproto.message_field(4)
    style_id: int = betterproto.int64_field(5)
    created_at: int = betterproto.int64_field(6)
    updated_at: int = betterproto.int64_field(7)
    status: int = betterproto.int32_field(8)
    failed_title: str = betterproto.string_field(9)
    failed_reason: str = betterproto.string_field(10)
    is_system: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class GetUploadAuthResponse(betterproto.Message):
    data: "GetUploadAuthResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetUploadAuthResponseResponseData(betterproto.Message):
    access_key: str = betterproto.string_field(1)
    secret_key: str = betterproto.string_field(2)
    session_token: str = betterproto.string_field(3)
    service_id: str = betterproto.string_field(4)
    upload_domain: str = betterproto.string_field(5)
    expired_time: int = betterproto.int64_field(6)
    current_time: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class WebcastShortTouchMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    action_data: "UnifyBaseActionData" = betterproto.message_field(2)
    extra: "ShortTouchExtra" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GuestShowdownStartParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    pre_play_id: int = betterproto.int64_field(3)
    stream_id: str = betterproto.string_field(4)
    play_config: "GuestShowdownConfig" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class NoticeboardOfficialTemplateCreateResponse(betterproto.Message):
    data: "NoticeboardOfficialTemplateCreateResponseResponseData" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class NoticeboardOfficialTemplateCreateResponseResponseData(betterproto.Message):
    is_success: bool = betterproto.bool_field(1)
    template: "NoticeboardTemplate" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ProductItem(betterproto.Message):
    product_id: int = betterproto.int64_field(1)
    bag_index: "BagIndex" = betterproto.message_field(2)
    title: "Title" = betterproto.message_field(3)
    cover: "ImageModel" = betterproto.message_field(4)
    atmosphere_info: "AtmosphereInfo" = betterproto.message_field(5)
    shop_brand_logo: "ShopBrandLogo" = betterproto.message_field(6)
    live_flash_sale_info: "LiveFlashSaleInfo" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class CancelJoinGroupContent(betterproto.Message):
    leaver: List["GroupPlayer"] = betterproto.message_field(1)
    operator: "GroupPlayer" = betterproto.message_field(2)
    type: Optional["CancelJoinGroupContentJoinType"] = betterproto.enum_field(
        3, optional=True
    )
    group_user: "GroupChannelAllUser" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WebcastEffectControlMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    control_type: int = betterproto.int32_field(2)
    resource_id: str = betterproto.string_field(3)
    replace_resume_effect: bool = betterproto.bool_field(4)
    scene: "Scene" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class GoalPinInfo(betterproto.Message):
    pin: bool = betterproto.bool_field(1)
    unpin: bool = betterproto.bool_field(2)
    pin_end_time: int = betterproto.int64_field(3)
    sub_goal_id: int = betterproto.int64_field(4)
    sub_goal_id_str: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class AnchorSubWaveCurrentSettings(betterproto.Message):
    anchor_sub_wave_trigger_settings: "AnchorSubWaveTriggerSettings" = (
        betterproto.message_field(1)
    )
    anchor_sub_wave_challenge_settings: "AnchorSubWaveChallengeSettings" = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class LinkmicSettingResult(betterproto.Message):
    link_m_ic_ab_params: str = betterproto.string_field(102)
    settings: List["LinkmicSettingmodel"] = betterproto.message_field(200)


@dataclass(eq=False, repr=False)
class GuessTemplate(betterproto.Message):
    template_id_str: int = betterproto.int64_field(1)
    title: "GuessText" = betterproto.message_field(2)
    guess_options: List["GuessOptions"] = betterproto.message_field(3)
    game_type_name: str = betterproto.string_field(4)
    audit_status: "AuditStatus" = betterproto.enum_field(5)
    audit_detail: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class BillboardInfo(betterproto.Message):
    billboard_type: int = betterproto.int32_field(1)
    billboard_ids: List[str] = betterproto.string_field(2)
    source_from: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class WebcastKaraokeRedDotMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    host_sing_req_cumulative_count: int = betterproto.int64_field(2)
    you_sing_req_cumulative_count: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class WebcastQuestionDeleteMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    question_id: int = betterproto.int64_field(2)
    user_id: int = betterproto.int64_field(3)
    scene: "Scene" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class MultiLiveUserApplySettings(betterproto.Message):
    multi_live_user_apply_permission: "MultiLiveUserApplyPermission" = (
        betterproto.message_field(1)
    )
    link_mic_service_version: int = betterproto.int32_field(2)
    room_host_multi_guest_permission_info: "RoomHostMultiGuestPermissionInfo" = (
        betterproto.message_field(3)
    )
    try_open_multi_guest: bool = betterproto.bool_field(4)
    room_audience_multi_guest_permission_info: (
        "RoomAudienceMultiGuestPermissionInfo"
    ) = betterproto.message_field(5)
    room_multi_guest_linkmic_info: "RoomMultiGuestLinkmicInfo" = (
        betterproto.message_field(6)
    )
    host_multi_guest_dev_mode: int = betterproto.int64_field(7)
    audience_shared_invitee_panel_type: int = betterproto.int64_field(8)
    host_gifter_linkmic_enum: int = betterproto.int64_field(9)
    viewer_gifter_linkmic_enum: int = betterproto.int64_field(10)
    anchor_setting_info: "AnchorSettingInfo" = betterproto.message_field(11)
    host_send_gifts_to_all_enum: int = betterproto.int64_field(20)
    audience_send_gifts_to_all_enum: int = betterproto.int64_field(21)
    multi_guest_play_info: "MultiGuestPlayInfo" = betterproto.message_field(30)


@dataclass(eq=False, repr=False)
class CompetitionLeaveResponse(betterproto.Message):
    data: "CompetitionLeaveResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CompetitionLeaveResponseResponseData(betterproto.Message):
    biz_common: "CompetitionCommon" = betterproto.message_field(1)
    team_infos: List["CompetitionResultsTeamInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastInRoomBannerMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    extra: Dict[str, str] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    position: int = betterproto.int32_field(3)
    action_type: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class WebcastShareGuideMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    share_channel: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class DropsRoomInfo(betterproto.Message):
    show_claim_drops_gift_notice: bool = betterproto.bool_field(1)
    earliest_gift_expire_ts: int = betterproto.int32_field(2)
    drops_list_entrance: bool = betterproto.bool_field(3)
    show_drops_tag: bool = betterproto.bool_field(4)
    promoting_drops_id: str = betterproto.string_field(5)
    promoting_drops_game_id: str = betterproto.string_field(6)
    promoting_drops_game_name_for_report: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class Title(betterproto.Message):
    text: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class SubWaveSubscriberInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    avatar: "ImageModel" = betterproto.message_field(2)
    display_id: str = betterproto.string_field(3)
    user_id_str: str = betterproto.string_field(4)
    badge_list: List["BadgeStruct"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class HostReportOpenLinkmicPanelResponse(betterproto.Message):
    data: "HostReportOpenLinkmicPanelResponseResponseData" = betterproto.message_field(
        1
    )
    extra: "HostReportOpenLinkmicPanelResponseExtra" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class HostReportOpenLinkmicPanelResponseResponseData(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class HostReportOpenLinkmicPanelResponseExtra(betterproto.Message):
    now: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class AtomAction(betterproto.Message):
    type: int = betterproto.int32_field(1)
    request_item: "ReqItem" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class JoinGroupBizContent(betterproto.Message):
    from_room_age_restricted: int = betterproto.int32_field(1)
    dialog: "PerceptionDialogInfo" = betterproto.message_field(3)
    punish_info: "PunishEventInfo" = betterproto.message_field(4)
    topic_info: "CohostTopic" = betterproto.message_field(5)
    algo_request_id: str = betterproto.string_field(6)
    cohost_layout_mode: Optional["JoinGroupBizContentCohostLayoutMode"] = (
        betterproto.enum_field(7, optional=True)
    )
    tag: "TagV2" = betterproto.message_field(8)
    game_tag: "RivalsGameTag" = betterproto.message_field(9)
    new_user_education: str = betterproto.string_field(11)
    join_group_msg_extra: "JoinGroupMessageExtra" = betterproto.message_field(101)


@dataclass(eq=False, repr=False)
class ReplyInviteContent(betterproto.Message):
    invitee: "Player" = betterproto.message_field(1)
    reply_status: "ReplyStatus" = betterproto.enum_field(2)
    invitee_link_mic_id: str = betterproto.string_field(3)
    position_data: "MicPositionData" = betterproto.message_field(4)
    invite_operator_user: "Player" = betterproto.message_field(5)
    linked_user_ui_positions: List[str] = betterproto.string_field(6)
    ui_pos: List["PosIdentity"] = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class BattleTruthOrDareTriggerGuide(betterproto.Message):
    anchor_content_key: str = betterproto.string_field(1)
    audience_content_key: str = betterproto.string_field(2)
    guide_duration_second: int = betterproto.int32_field(3)
    rule_detail_url: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class WebcastEventMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    action_type: int = betterproto.int32_field(2)
    card: "EventCard" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WebcastInRoomBannerEvent(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    position: int = betterproto.int32_field(2)
    data: "BannerInRoomCollection" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CancelViewerSingResp(betterproto.Message):
    common_resp: "LinkMicCommonResp" = betterproto.message_field(1)
    is_only_del_song: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class BizApplyParams(betterproto.Message):
    link_type: int = betterproto.int64_field(1)
    anchor_id: int = betterproto.int64_field(2)
    user_return_type: int = betterproto.int32_field(3)
    follow: bool = betterproto.bool_field(4)
    share_revenue_setting: int = betterproto.int32_field(5)
    inviter_role: int = betterproto.int32_field(6)
    inviter_user_id: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class ShowResult(betterproto.Message):
    banned: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class MsgNotifyComponentRecoverInfo(betterproto.Message):
    recover: bool = betterproto.bool_field(1)
    delay_ms: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class CountdownEndResponse(betterproto.Message):
    data: "CountdownEndResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CountdownEndResponseResponseData(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    countdown_content: "CountdownContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class UserLiveEventInfo(betterproto.Message):
    live_event_id: str = betterproto.string_field(1)
    quiz_id: str = betterproto.string_field(2)
    is_subscribed: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class LinkedUser(betterproto.Message):
    uid: int = betterproto.int64_field(1)
    link_mic_id: str = betterproto.string_field(2)
    audio_mute_status: int = betterproto.int32_field(3)
    video_mute_status: int = betterproto.int32_field(4)
    position: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class ProductSnapShot(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    title: str = betterproto.string_field(2)
    cover: "Img" = betterproto.message_field(3)
    stock_type: int = betterproto.int32_field(4)
    timestamp: int = betterproto.int64_field(5)
    add_to_cart_button: "AddToCartButton" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class DispersionInfo(betterproto.Message):
    dispersion_path: int = betterproto.int32_field(1)
    delay_param: "DelayParam" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PictionaryFullInfo(betterproto.Message):
    pictionary_info: "PictionaryInfo" = betterproto.message_field(1)
    pictionary_statistics: "PictionaryStatistics" = betterproto.message_field(2)
    guess_correct: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class BattleUserArmy(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    score: int = betterproto.int64_field(2)
    nickname: str = betterproto.string_field(3)
    avatar_thumb: "ImageModel" = betterproto.message_field(4)
    diamond_score: int = betterproto.int64_field(5)
    user_id_str: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class UserFanTicket(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    fan_ticket: int = betterproto.int64_field(2)
    match_total_score: int = betterproto.int64_field(3)
    match_rank: int = betterproto.int32_field(4)
    countdown_info: "UserCountdownInfo" = betterproto.message_field(5)
    play_info: "UserPlayInfo" = betterproto.message_field(6)
    icon_name: str = betterproto.string_field(7)
    animation_name: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class SubWaveInfoCommon(betterproto.Message):
    sub_wave_settings: "AnchorSubWaveCurrentSettings" = betterproto.message_field(1)
    wave_sub_count: int = betterproto.int64_field(2)
    total_sub_count: int = betterproto.int64_field(3)
    start_time: int = betterproto.int64_field(4)
    end_time: int = betterproto.int64_field(5)
    wave_status: Optional["SubWaveInfoCommonWaveStatus"] = betterproto.enum_field(
        6, optional=True
    )
    thanks_list: List["SubWaveSubscriberInfo"] = betterproto.message_field(7)
    wave_target_sub_count: int = betterproto.int64_field(8)
    wave_open_record_id: int = betterproto.int64_field(9)
    sub_wave_strikes: List["SubWaveStrikeInfo"] = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class BattleNoticeText(betterproto.Message):
    text: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CapsuleBizParamsCommentFlaggedPromptForNewUser(betterproto.Message):
    trigger: int = betterproto.int64_field(1)
    comment_ids: List[int] = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class WebcastPlayTogetherMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    basic_info: "PlayTogetherBasicInfo" = betterproto.message_field(3)
    list_change_content: "PlayTogetherListChangeContent" = betterproto.message_field(4)
    permit_notice_content: "PlayTogetherPermitNoticeContent" = (
        betterproto.message_field(5)
    )


@dataclass(eq=False, repr=False)
class QuizRulesIntroduction(betterproto.Message):
    message_type: "MessageType" = betterproto.enum_field(1)
    quiz_id: str = betterproto.string_field(2)
    quiz_type: int = betterproto.int32_field(3)
    extra: str = betterproto.string_field(4)
    reward_amount: str = betterproto.string_field(5)
    question_count: int = betterproto.int32_field(6)
    user_count: int = betterproto.int32_field(7)
    sponsor_code: str = betterproto.string_field(8)
    display_duration_ms: int = betterproto.int32_field(9)
    extra1: str = betterproto.string_field(51)
    extra2: str = betterproto.string_field(52)
    extra3: str = betterproto.string_field(53)
    extra4: str = betterproto.string_field(54)
    extra5: str = betterproto.string_field(55)


@dataclass(eq=False, repr=False)
class ToplivePageData(betterproto.Message):
    items: List["ToplivePageItem"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WebcastSubContractStatusMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    data: "PushContractStatusResult" = betterproto.message_field(2)
    extra: "WebcastSubContractStatusMessageResponseExtra" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WebcastSubContractStatusMessageResponseExtra(betterproto.Message):
    now: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class CancelInviteResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CommerceInfo(betterproto.Message):
    product_info: Dict[int, "ProductItem"] = betterproto.map_field(
        1, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    pop_card_info: "PopCardInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GiftMode(betterproto.Message):
    gift_id: int = betterproto.int64_field(1)
    gift_name: str = betterproto.string_field(2)
    gift_icon_image: "ImageModel" = betterproto.message_field(3)
    gift_price: int = betterproto.int64_field(4)
    gift_background_image: "ImageModel" = betterproto.message_field(5)
    release_version: int = betterproto.int64_field(6)
    has_flash_effect: bool = betterproto.bool_field(7)
    event_icon_image: "ImageModel" = betterproto.message_field(8)
    label_text: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class LinkerMicIdxUpdateInfo(betterproto.Message):
    operation: Optional["LinkerMicIdxUpdateInfoMicIdxOperation"] = (
        betterproto.enum_field(1, optional=True)
    )
    user_i_d: int = betterproto.int64_field(2)
    mic_index: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class SeparatorConfig(betterproto.Message):
    color: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RivalsListsData(betterproto.Message):
    followed_list: List["Room"] = betterproto.message_field(1)
    recent_list: List["Room"] = betterproto.message_field(2)
    recommend_list: List["Room"] = betterproto.message_field(3)
    rival_extra_infos: Dict[int, "RivalExtraInfo"] = betterproto.map_field(
        4, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    auto_match_banner: "AutoMatchBanner" = betterproto.message_field(5)
    tips: str = betterproto.string_field(6)
    search_bar: "SearchBar" = betterproto.message_field(7)
    banner_text: "RivalsListsDataBannerText" = betterproto.message_field(8)
    room_top_host_info: Dict[int, "RivalsListsDataTopHostInfo"] = betterproto.map_field(
        9, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    best_teammate_list: List["Room"] = betterproto.message_field(10)
    reserved_list: List["Room"] = betterproto.message_field(11)
    may_know_list: List["Room"] = betterproto.message_field(12)
    mixed_list: List["Room"] = betterproto.message_field(13)
    eoy_rank_list: List["Room"] = betterproto.message_field(14)
    game_list: List["Room"] = betterproto.message_field(15)
    topic_banner: "CohostTopic" = betterproto.message_field(21)
    topic_extra_info: "TopicExtraInfo" = betterproto.message_field(22)
    guide_popup_banner: "GuidePopupBanner" = betterproto.message_field(23)
    eoy_banner: "EoyBanner" = betterproto.message_field(24)
    battle_opt_pair_list: List["BattleOptPair"] = betterproto.message_field(25)
    status_text: str = betterproto.string_field(31)
    status_text_type: int = betterproto.int32_field(32)
    dynamic_list_config: "DynamicListConfig" = betterproto.message_field(51)


@dataclass(eq=False, repr=False)
class RivalsListsDataBannerText(betterproto.Message):
    title: str = betterproto.string_field(1)
    sub_title: str = betterproto.string_field(2)
    button_text: str = betterproto.string_field(3)
    is_match_valid: bool = betterproto.bool_field(4)
    is_in_ui_exp: bool = betterproto.bool_field(5)
    banner_style: int = betterproto.int32_field(6)
    quick_cohost_content_info: "QuickCohostContentInfo" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class RivalsListsDataTopHostInfo(betterproto.Message):
    rank_type: str = betterproto.string_field(1)
    top_index: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class FansLevelInfo(betterproto.Message):
    userid: int = betterproto.int64_field(1)
    anchorid: int = betterproto.int64_field(2)
    score: int = betterproto.int64_field(3)
    level: int = betterproto.int64_field(4)
    is_sleeping: bool = betterproto.bool_field(5)
    time_to_sleep: int = betterproto.int64_field(6)
    fans_score_rule: "FansScoreRule" = betterproto.message_field(7)
    badge: "BadgeStruct" = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class TopicSetResponse(betterproto.Message):
    data: "TopicSetResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TopicSetResponseResponseData(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GiftsInfoByCreator(betterproto.Message):
    gift_box_ids: List[int] = betterproto.int64_field(1)
    live_goal_cardlet: "GiftPanelCardletByCreator" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class MsgFilter(betterproto.Message):
    is_gifter: bool = betterproto.bool_field(1)
    is_subscribed_to_anchor: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class WebcastHourlyRankRewardMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    winners: List["HourlyRankRewardInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LynxGiftExtra(betterproto.Message):
    id: int = betterproto.int64_field(1)
    code: int = betterproto.int64_field(2)
    type: int = betterproto.int64_field(3)
    params: List[str] = betterproto.string_field(4)
    extra: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class WebcastPictionaryStartMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    data: "PictionaryInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LiveRecordConfig(betterproto.Message):
    can_record: bool = betterproto.bool_field(1)
    has_fixed_floating_ball: bool = betterproto.bool_field(2)
    max_record_duration: int = betterproto.int64_field(3)
    min_storage_size: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class FansClubData(betterproto.Message):
    club_name: str = betterproto.string_field(1)
    level: int = betterproto.int32_field(2)
    user_fans_club_status: int = betterproto.int32_field(3)
    badge: "FansClubDataUserBadge" = betterproto.message_field(4)
    available_gift_ids: List[int] = betterproto.int64_field(5)
    anchor_id: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class FansClubDataUserBadge(betterproto.Message):
    icons: Dict[str, "ImageModel"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    title: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class CompetitionSwitchTurn(betterproto.Message):
    take_the_stage_biz: "CompetitionSwitchTurnTakeTheStageBiz" = (
        betterproto.message_field(100)
    )


@dataclass(eq=False, repr=False)
class CompetitionSwitchTurnTakeTheStageBiz(betterproto.Message):
    performance_start_time: int = betterproto.int64_field(1)
    order_info: "TakeTheStageOrderInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastGuestInviteMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    room_id: int = betterproto.int64_field(2)
    inviter_user_id: int = betterproto.int64_field(3)
    inviter_nickname: str = betterproto.string_field(4)
    inviter_avatar: "ImageModel" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class PinInfo(betterproto.Message):
    pin_enabled: bool = betterproto.bool_field(1)
    display_duration: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class RealtimeLiveCenterBaseData(betterproto.Message):
    live_start_time: int = betterproto.int64_field(1)
    live_end_time: int = betterproto.int64_field(2)
    total_score: int = betterproto.int64_field(3)
    live_watch_cnt: int = betterproto.int64_field(4)
    live_new_fans_ucnt: int = betterproto.int64_field(5)
    live_consume_ucnt: int = betterproto.int64_field(6)
    live_comment_cnt: int = betterproto.int64_field(7)
    live_like_cnt: int = betterproto.int64_field(8)
    new_subscribers_cnt: int = betterproto.int64_field(9)
    live_online_watch_cnt: int = betterproto.int64_field(10)
    share_cnt: int = betterproto.int64_field(11)


@dataclass(eq=False, repr=False)
class WebcastNoticeMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    content: str = betterproto.string_field(2)
    notice_type: int = betterproto.int32_field(3)
    style: str = betterproto.string_field(4)
    title: "Text" = betterproto.message_field(5)
    violation_reason: "Text" = betterproto.message_field(6)
    illegal_text: "Text" = betterproto.message_field(7)
    bottom_tip: "Text" = betterproto.message_field(8)
    tip_url: str = betterproto.string_field(9)
    notice_title: "Text" = betterproto.message_field(10)
    notice_content: "Text" = betterproto.message_field(11)
    scene: "Scene" = betterproto.enum_field(12)


@dataclass(eq=False, repr=False)
class ReplyReserveResponse(betterproto.Message):
    data: "ReplyReserveResponseResponseData" = betterproto.message_field(1)
    extra: "ReplyReserveResponseReplyReserveExtra" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ReplyReserveResponseResponseData(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class ReplyReserveResponseLogPb(betterproto.Message):
    impr_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ReplyReserveResponseReplyReserveExtra(betterproto.Message):
    log_pb: "ReplyReserveResponseLogPb" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AudienceReplyContent(betterproto.Message):
    from_user_id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class CompetitionSettleStart(betterproto.Message):
    planned_settlement_end_time: int = betterproto.int64_field(1)
    extra_time_interval: int = betterproto.int64_field(2)
    initiator: "CompetitionUserBase" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CreateShowResponse(betterproto.Message):
    data: "CreateShowResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateShowResponseResponseData(betterproto.Message):
    show_exists: bool = betterproto.bool_field(1)
    show_content: "ShowContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GiftGoalAutoUpdateSwitch(betterproto.Message):
    value: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class AnchorSubWaveChallengeSettings(betterproto.Message):
    id: int = betterproto.int64_field(1)
    name: str = betterproto.string_field(2)
    need_sub_counts: int = betterproto.int64_field(3)
    during_time: int = betterproto.int64_field(4)
    emote_list: List["EmoteModel"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class UserCountdownRecord(betterproto.Message):
    countdown_id: int = betterproto.int64_field(1)
    status: int = betterproto.int32_field(2)
    duration: int = betterproto.int64_field(3)
    start_time: int = betterproto.int64_field(4)
    end_time: int = betterproto.int64_field(5)
    score: int = betterproto.int64_field(6)
    target_score: int = betterproto.int64_field(7)
    achieved: bool = betterproto.bool_field(8)


@dataclass(eq=False, repr=False)
class GetWallpaperContentResponse(betterproto.Message):
    data: "GetWallpaperContentResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetWallpaperContentResponseResponseData(betterproto.Message):
    wallpaper_content: "WallpaperContent" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CancelViewerSingReq(betterproto.Message):
    common: "LinkCommon" = betterproto.message_field(1)
    channel_id: int = betterproto.int64_field(2)
    applier: "Player" = betterproto.message_field(3)
    song_id: int = betterproto.int64_field(4)
    multi_guest_req_extra: "BizCancelApplyParams" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class NewAnchorIncentiveBannerData(betterproto.Message):
    title: str = betterproto.string_field(1)
    sub_title: str = betterproto.string_field(2)
    image: "ImageModel" = betterproto.message_field(3)
    url: str = betterproto.string_field(4)
    metrics_map: Dict[str, str] = betterproto.map_field(
        5, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )
    sub_type: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class EventTracking(betterproto.Message):
    gift_sub_sender_id: int = betterproto.int64_field(1)
    gift_sub_receiver_id: int = betterproto.int64_field(2)
    anchor_id: int = betterproto.int64_field(3)
    gift_sub_order_create_time: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class GoodyBagCoinDetail(betterproto.Message):
    total_coin: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class GetRunningNoticeboardMaterialContentResponse(betterproto.Message):
    data: "GetRunningNoticeboardMaterialContentResponseResponseData" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class GetRunningNoticeboardMaterialContentResponseResponseData(betterproto.Message):
    image_url: str = betterproto.string_field(1)
    image_meta_url: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SubWaveImMsg(betterproto.Message):
    msg_type: Optional["SubWaveImMsgSubWaveImMsgType"] = betterproto.enum_field(
        1, optional=True
    )
    new_come_subscriber_info: "SubWaveSubscriberInfo" = betterproto.message_field(2)
    sub_wave_info_common: "SubWaveInfoCommon" = betterproto.message_field(3)
    wave_reward: "WaveReward" = betterproto.message_field(4)
    current_strike_round: "SubWaveStrikeInfo" = betterproto.message_field(5)
    strike_enabled: bool = betterproto.bool_field(6)


@dataclass(eq=False, repr=False)
class NoticeboardContent(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    noticeboard_id: int = betterproto.int64_field(3)
    status: int = betterproto.int32_field(4)
    linkmic_id: str = betterproto.string_field(5)
    position: "MicPositionData" = betterproto.message_field(6)
    stream_id: str = betterproto.string_field(7)
    start_time: int = betterproto.int64_field(8)
    end_time: int = betterproto.int64_field(9)
    passed_media_node_id: str = betterproto.string_field(10)
    last_review_info: "NoticeboardReviewInfo" = betterproto.message_field(11)
    version: int = betterproto.int64_field(12)


@dataclass(eq=False, repr=False)
class UseSpecialEffectCard(betterproto.Message):
    card_info: "SpecialEffectCardInfo" = betterproto.message_field(1)
    anchor_id: int = betterproto.int64_field(2)
    display_content: "Text" = betterproto.message_field(3)
    affected_anchor_pairs: List["AnchorPair"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class HighScoreControlCfg(betterproto.Message):
    normal_control_applied: bool = betterproto.bool_field(1)
    threshold: int = betterproto.int64_field(2)
    origin_display_to_user_list: List[int] = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class GiftConfigInfo(betterproto.Message):
    config_type: Optional["GiftConfigInfoGiftConfigType"] = betterproto.enum_field(
        1, optional=True
    )
    role_config: "GiftConfigInfoRoleConfig" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GiftConfigInfoRoleConfig(betterproto.Message):
    viewer: str = betterproto.string_field(1)
    anchor: str = betterproto.string_field(2)
    gifter: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GameLiveInfo(betterproto.Message):
    has_game_live: bool = betterproto.bool_field(1)
    has_game_live2_min: bool = betterproto.bool_field(2)
    has_comment_in_game_live: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class GuestShowdownStartResponse(betterproto.Message):
    data: "GuestShowdownStartResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GuestShowdownStartResponseResponseData(betterproto.Message):
    is_exists: bool = betterproto.bool_field(1)
    play_content: "GuestShowdownContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BattleRivalTag(betterproto.Message):
    bg_image: "ImageModel" = betterproto.message_field(1)
    icon_image: "ImageModel" = betterproto.message_field(2)
    content: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ProductAtmosphereTag(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    tag_desc: str = betterproto.string_field(2)
    count: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class BusinessLinksLiveMessage(betterproto.Message):
    op: int = betterproto.int32_field(2)
    id: int = betterproto.int64_field(3)
    title: str = betterproto.string_field(4)
    subtitle: str = betterproto.string_field(5)
    url: str = betterproto.string_field(6)
    pic: str = betterproto.string_field(7)
    op_time: int = betterproto.int64_field(8)
    card_type: int = betterproto.int32_field(9)
    game_url: str = betterproto.string_field(10)
    live_log_extra: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class WebcastPartnershipDownloadCountMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    downloaded_count: int = betterproto.int64_field(2)
    game_id: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class LinkReplyResult(betterproto.Message):
    can_join_channel_directly: bool = betterproto.bool_field(3)
    confluence_type: int = betterproto.int32_field(4)
    rtc_ext_info: str = betterproto.string_field(5)
    link_mic_id_str: str = betterproto.string_field(15)
    rival_linkmic_id_str: str = betterproto.string_field(17)


@dataclass(eq=False, repr=False)
class ImageModel(betterproto.Message):
    m_urls: List[str] = betterproto.string_field(1)
    m_uri: str = betterproto.string_field(2)
    height: int = betterproto.int32_field(3)
    width: int = betterproto.int32_field(4)
    avg_color: str = betterproto.string_field(5)
    image_type: int = betterproto.int32_field(6)
    schema: str = betterproto.string_field(7)
    content: "ImageModelContent" = betterproto.message_field(8)
    is_animated: bool = betterproto.bool_field(9)


@dataclass(eq=False, repr=False)
class ImageModelContent(betterproto.Message):
    name: str = betterproto.string_field(1)
    font_color: str = betterproto.string_field(2)
    level: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class WebcastGreetingMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    user_identity: "UserIdentity" = betterproto.message_field(2)
    enter_msg_id: int = betterproto.int64_field(3)
    greeting_text: "Text" = betterproto.message_field(4)
    guide_text: "Text" = betterproto.message_field(5)
    wave_algorithm_data: "WaveAlgorithmData" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class UserAttrResponse(betterproto.Message):
    values: Dict[int, int] = betterproto.map_field(
        1, betterproto.TYPE_INT64, betterproto.TYPE_INT64
    )


@dataclass(eq=False, repr=False)
class ShortTouchItem(betterproto.Message):
    schema: str = betterproto.string_field(1)
    width: int = betterproto.int64_field(2)
    height: int = betterproto.int64_field(3)
    top_margin: int = betterproto.int64_field(4)
    left_margin: int = betterproto.int64_field(5)
    fc_second: int = betterproto.int64_field(6)
    name: str = betterproto.string_field(7)
    preview_setting: "ShortTouchPreviewSetting" = betterproto.message_field(8)
    anime_type: int = betterproto.int32_field(9)
    icon_skin: str = betterproto.string_field(10)
    activity_id: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class Sprite(betterproto.Message):
    sprite_url: str = betterproto.string_field(1)
    total_num: int = betterproto.int32_field(2)
    x_num: int = betterproto.int32_field(3)
    y_num: int = betterproto.int32_field(4)
    image_height: int = betterproto.int32_field(5)
    image_width: int = betterproto.int32_field(6)
    url: str = betterproto.string_field(7)
    sprite_num: int = betterproto.int64_field(8)
    image_x_num: int = betterproto.int64_field(9)
    image_y_num: int = betterproto.int64_field(10)
    fps: int = betterproto.int64_field(11)


@dataclass(eq=False, repr=False)
class PushContractStatusResult(betterproto.Message):
    pay_channel: int = betterproto.int32_field(1)
    status: int = betterproto.int32_field(2)
    tpl_type: int = betterproto.int32_field(3)
    sub_circle: int = betterproto.int32_field(4)
    sub_info: "SubInfo" = betterproto.message_field(5)
    toast: str = betterproto.string_field(6)
    contractid: str = betterproto.string_field(7)
    create_contract_intent: int = betterproto.int32_field(8)


@dataclass(eq=False, repr=False)
class TextPieceHeart(betterproto.Message):
    color: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class WallpaperCreateResponse(betterproto.Message):
    data: "WallpaperCreateResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WallpaperCreateResponseResponseData(betterproto.Message):
    wallpaper_exists: bool = betterproto.bool_field(1)
    wallpaper_content: "WallpaperContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AvatarStyle(betterproto.Message):
    style_id: int = betterproto.int64_field(1)
    image: "ImageModel" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Benefit(betterproto.Message):
    type: int = betterproto.int32_field(1)
    value: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class CompetitionResultsTeamInfo(betterproto.Message):
    team_id: int = betterproto.int64_field(1)
    rank: int = betterproto.int64_field(2)
    score: int = betterproto.int64_field(3)
    result: Optional["CompetitionResultsTeamInfoResult"] = betterproto.enum_field(
        4, optional=True
    )
    contributors: List["CompetitionContributorInfo"] = betterproto.message_field(5)
    members: List["CompetitionTeamMemberInfo"] = betterproto.message_field(6)
    team_id_str: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class TimeTag(betterproto.Message):
    operation_time: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class WebcastLiveShowMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    show_content: "ShowContent" = betterproto.message_field(3)
    showuserfinishreason: Optional["WebcastLiveShowMessageShowUserFinishReason"] = (
        betterproto.enum_field(4, optional=True)
    )
    operator_user_info: "LinkerMediaChangeOperator" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class WebcastSubWaveMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    sub_wave_im_msg: "SubWaveImMsg" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BizResumeResponse(betterproto.Message):
    data: "BizResumeResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BizResumeResponseResponseData(betterproto.Message):
    is_showing: bool = betterproto.bool_field(1)
    show_content: "ShowContent" = betterproto.message_field(2)
    countdown_contents: List["CountdownContent"] = betterproto.message_field(3)
    countdown_for_all_content: "CountdownForAllContent" = betterproto.message_field(4)
    noticeboard_contents: List["NoticeboardContent"] = betterproto.message_field(5)
    active_playbook: "ActivePlaybook" = betterproto.message_field(6)
    guest_showdown_content: "GuestShowdownContent" = betterproto.message_field(7)


@dataclass(eq=False, repr=False)
class UpgradeInfo(betterproto.Message):
    is_upgrade: bool = betterproto.bool_field(1)
    to_grade: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class WebcastGameReqSetGuessMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    toast_context: "Text" = betterproto.message_field(2)
    request_cnt_str: str = betterproto.string_field(3)
    limit_supremacy_str: str = betterproto.string_field(4)
    capsule_cnt_str: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class WebcastLinkMicFanTicketMethod(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    fan_ticket_room_notice: "FanTicketRoomNoticeContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LinkMicAdContent(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    ad_id: int = betterproto.int64_field(2)
    duration: int = betterproto.int64_field(3)
    play_times: int = betterproto.int64_field(4)
    url: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class VideoResource(betterproto.Message):
    video_type_name: str = betterproto.string_field(1)
    video_url: "ResourceModel" = betterproto.message_field(2)
    video_md5: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class WebcastSpeakerMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GroupChannelAllUser(betterproto.Message):
    group_channel_id: int = betterproto.int64_field(1)
    user: List["GroupChannelUser"] = betterproto.message_field(2)
    content_version: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class RankAnimationInfo(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CrowdSelectionResponse(betterproto.Message):
    data: "CrowdSelectionResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CrowdSelectionResponseData(betterproto.Message):
    anchor_crowd: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class Product(betterproto.Message):
    title: str = betterproto.string_field(1)
    cover: "ImageModel" = betterproto.message_field(2)
    price: "ProductPrice" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CompetitionSettlementEndResponse(betterproto.Message):
    data: "CompetitionSettlementEndResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CompetitionSettlementEndResponseResponseData(betterproto.Message):
    biz_common: "CompetitionCommon" = betterproto.message_field(1)
    settle_end: "CompetitionSettleEnd" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class LiveEventInfo(betterproto.Message):
    id: int = betterproto.int64_field(1)
    title: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SubPinCardText(betterproto.Message):
    type: Optional["SubPinCardTextTextType"] = betterproto.enum_field(1, optional=True)
    content: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WebcastLinkMicAnchorGuideMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    guide_content: str = betterproto.string_field(2)
    button_content: str = betterproto.string_field(3)
    connect_type: int = betterproto.int32_field(4)
    guide_type: int = betterproto.int32_field(5)
    user: "User" = betterproto.message_field(6)
    log_id: str = betterproto.string_field(7)
    reserve_info: "ReserveInfo" = betterproto.message_field(8)
    button_show_type: int = betterproto.int32_field(9)
    opt_pair_info: "OptPairInfo" = betterproto.message_field(10)
    user_model_prediction_data: List["UserModelPredictionData"] = (
        betterproto.message_field(11)
    )
    is_follow_rival: bool = betterproto.bool_field(21)
    available_friend_number: int = betterproto.int32_field(22)


@dataclass(eq=False, repr=False)
class MsgNotifyWatchContinuousQuota(betterproto.Message):
    component_type: int = betterproto.int32_field(1)
    coutinuous_room_cnt: int = betterproto.int64_field(2)
    count: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class HotfixGiftDataForProp(betterproto.Message):
    display_text: "Text" = betterproto.message_field(1)
    describe: str = betterproto.string_field(2)
    gift_id: int = betterproto.int64_field(3)
    group_count: int = betterproto.int64_field(4)
    repeat_count: int = betterproto.int64_field(5)
    combo_count: int = betterproto.int64_field(6)
    msg_id: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class TriggerReserveNoticeResponse(betterproto.Message):
    data: "TriggerReserveNoticeResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TriggerReserveNoticeResponseResponseData(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class PromoteOtherMessage(betterproto.Message):
    recall_toast: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class CompetitionTeamBase(betterproto.Message):
    team_id: int = betterproto.int64_field(1)
    users: List["CompetitionUserBase"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ResourceModel(betterproto.Message):
    url_list: List[str] = betterproto.string_field(1)
    uri: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WebcastCompetitionMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    biz_common: "CompetitionCommon" = betterproto.message_field(2)
    type: Optional["WebcastCompetitionMessageCompetitionMessageType"] = (
        betterproto.enum_field(3, optional=True)
    )
    initiate: "CompetitionInitiate" = betterproto.message_field(100)
    reply: "CompetitionReply" = betterproto.message_field(101)
    start: "CompetitionStart" = betterproto.message_field(102)
    settle_start: "CompetitionSettleStart" = betterproto.message_field(103)
    settle_end: "CompetitionSettleEnd" = betterproto.message_field(104)
    score_change: "CompetitionScoreChange" = betterproto.message_field(105)
    finish: "CompetitionFinish" = betterproto.message_field(106)
    switch_turn: "CompetitionSwitchTurn" = betterproto.message_field(107)


@dataclass(eq=False, repr=False)
class CompetitionCommon(betterproto.Message):
    type: Optional["CompetitionCommonBattleType"] = betterproto.enum_field(
        1, optional=True
    )
    channel_id: int = betterproto.int64_field(2)
    competition_id: int = betterproto.int64_field(3)
    room_id: int = betterproto.int64_field(4)
    competition_id_str: str = betterproto.string_field(5)
    room_id_str: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class WebcastAvatarReportDeleteMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    avatar_id: int = betterproto.int64_field(2)
    avatar_owner_user_id: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class WebcastEffectPreloadingMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    gift_id: List[int] = betterproto.int64_field(2)
    effect_id: List[int] = betterproto.int64_field(3)
    priority: "GiftImPriority" = betterproto.message_field(14)
    log_id: str = betterproto.string_field(16)


@dataclass(eq=False, repr=False)
class PermitJoinGroupContent(betterproto.Message):
    approver: "GroupPlayer" = betterproto.message_field(1)
    agree_status: "PermitJoinGroupContentAgreeStatus" = betterproto.enum_field(2)
    type: Optional["PermitJoinGroupContentJoinType"] = betterproto.enum_field(
        3, optional=True
    )
    group_ext_info: List["RtcExtraInfo"] = betterproto.message_field(4)
    group_user: "GroupChannelAllUser" = betterproto.message_field(5)
    migration_details: "MigrationDetails" = betterproto.message_field(6)
    linked_user_ui_positions: List[str] = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class MigrationDetails(betterproto.Message):
    is_migrate: bool = betterproto.bool_field(1)
    source_group_channel_id: int = betterproto.int64_field(2)
    target_group_channel_id: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class EcTaskRegisterMessage(betterproto.Message):
    entity: "EcTaskRegisterMessageEntity" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FirstChargeData(betterproto.Message):
    is_first_charge: bool = betterproto.bool_field(1)
    rule: "FirstChargeGuideEffectRule" = betterproto.message_field(2)
    diamond: "Diamond" = betterproto.message_field(3)
    gift_show_style: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class DelayParam(betterproto.Message):
    min_delay_ms: int = betterproto.int64_field(1)
    max_delay_ms: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class FlashSaleAtmosphereInfo(betterproto.Message):
    product_id: str = betterproto.string_field(1)
    activity_id: int = betterproto.int64_field(2)
    flash_sale_atmosphere: "FlashSaleAtmosphere" = betterproto.message_field(3)
    flash_sale_stock: "FlashSaleStock" = betterproto.message_field(4)
    pinned_product: bool = betterproto.bool_field(5)
    live_only_channel: bool = betterproto.bool_field(6)
    creator_limit_type: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class WebcastEnvelopeMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    envelope_info: "MessageRedEnvelopInfo" = betterproto.message_field(2)
    display: Optional["WebcastEnvelopeMessageEnvelopeDisplay"] = betterproto.enum_field(
        3, optional=True
    )


@dataclass(eq=False, repr=False)
class LinkmicInfo(betterproto.Message):
    access_key: str = betterproto.string_field(1)
    linkmic_id: int = betterproto.int64_field(2)
    joinable: bool = betterproto.bool_field(3)
    confluence_type: int = betterproto.int32_field(4)
    rtc_ext_info: str = betterproto.string_field(5)
    rtc_app_id: str = betterproto.string_field(6)
    rtc_app_sign: str = betterproto.string_field(7)
    linkmic_id_str: str = betterproto.string_field(8)
    vendor: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class BattleAbTestList(betterproto.Message):
    ab_test_list: List["BattleAbTest"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class LangTranslate(betterproto.Message):
    locale: str = betterproto.string_field(1)
    translate_result: str = betterproto.string_field(2)
    default_translate: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class CohostUserInfo(betterproto.Message):
    permission_type: int = betterproto.int64_field(1)
    source_type: Optional["CohostUserInfoSourceType"] = betterproto.enum_field(
        2, optional=True
    )
    is_low_version: bool = betterproto.bool_field(3)
    best_teammate_uid: int = betterproto.int64_field(4)
    has_topic_perm: bool = betterproto.bool_field(5)
    stream_config: "CohostStreamConfig" = betterproto.message_field(6)
    in_different_invite_type_control_group: bool = betterproto.bool_field(7)
    nickname: str = betterproto.string_field(11)
    display_id: str = betterproto.string_field(12)
    avatar_thumb: "ImageModel" = betterproto.message_field(13)
    follow_status: int = betterproto.int64_field(14)
    user_id_str: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class BattleSetting(betterproto.Message):
    battle_id: int = betterproto.int64_field(1)
    start_time_ms: int = betterproto.int64_field(2)
    duration: int = betterproto.int32_field(3)
    channel_id: int = betterproto.int64_field(4)
    status: int = betterproto.int32_field(5)
    invite_type: int = betterproto.int32_field(6)
    gift_mode_meta: "GiftModeMeta" = betterproto.message_field(7)
    battle_type: int = betterproto.int32_field(8)
    extra_duration_second: int = betterproto.int64_field(9)
    end_time_ms: int = betterproto.int64_field(10)


@dataclass(eq=False, repr=False)
class WebcastColdStartMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    msg_type: int = betterproto.int32_field(2)
    status: int = betterproto.int32_field(3)
    viewer_count: int = betterproto.int64_field(4)
    total_count: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class FansClubMember(betterproto.Message):
    data: "FansClubData" = betterproto.message_field(1)
    prefer_data: Dict[str, "FansClubData"] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class GroupLiveInfo(betterproto.Message):
    group_show: "CompetitionInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AboutMeResponse(betterproto.Message):
    data: "AboutMeResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AboutMeResponseResponseData(betterproto.Message):
    about_me: "AboutMe" = betterproto.message_field(1)
    benefits_info: "BenefitsInfo" = betterproto.message_field(2)
    conflict_info: "IntroConflictInfo" = betterproto.message_field(3)
    merge_type: int = betterproto.int32_field(4)
    old_version: bool = betterproto.bool_field(5)


@dataclass(eq=False, repr=False)
class WebcastCountdownForAllMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    play_content: "CountdownForAllContent" = betterproto.message_field(3)
    operator_user_info: "LinkerMediaChangeOperator" = betterproto.message_field(4)
    play_end_reason: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class MultiGuestRecommendRoomInfo(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    host_info: "User" = betterproto.message_field(2)
    host_reco_tags: List[str] = betterproto.string_field(3)
    guest_num: int = betterproto.int64_field(4)
    viewer_num: int = betterproto.int64_field(5)
    reco_reason: str = betterproto.string_field(6)
    reco_rank: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class WebcastGiftBroadcastMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    m_from_user_id: int = betterproto.int64_field(2)
    m_left_icon: "ImageModel" = betterproto.message_field(3)
    m_notify_message: "WebcastRoomNotifyMessage" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class ChangePositionResp(betterproto.Message):
    linked_user_ui_positions: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class MiddleTouchExtra(betterproto.Message):
    sub_wave_data: "SubWaveData" = betterproto.message_field(1)
    sub_goal_data: "SubGoalData" = betterproto.message_field(2)
    live_goal_indicator_stream_goal: "StreamGoalData" = betterproto.message_field(3)
    guess_widgets_data: "GuessWidgetsData" = betterproto.message_field(4)
    play_together_widgets_data: "PlayTogetherWidgetsData" = betterproto.message_field(5)
    sub_queue_data: "SubQueueData" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class BarrageTypeGiftGalleryParam(betterproto.Message):
    from_user_id: int = betterproto.int64_field(1)
    to_user_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class CampaignBannerDisplayResult(betterproto.Message):
    campaign_banner_display_result: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class UrlDataStruct(betterproto.Message):
    uri: str = betterproto.string_field(1)
    url_list: List[str] = betterproto.string_field(2)
    url_sub_type: int = betterproto.int32_field(3)
    md5: str = betterproto.string_field(4)
    url_prefix: List[str] = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class CardObtainGuide(betterproto.Message):
    not_in_use: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class LinkmicSettingmodel(betterproto.Message):
    key: int = betterproto.int32_field(1)
    value: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class PlayTogetherBasicInfo(betterproto.Message):
    play_together_id: str = betterproto.string_field(1)
    description: str = betterproto.string_field(2)
    apply_note: str = betterproto.string_field(3)
    status: Optional["PlayTogetherBasicInfoPlayTogetherStatus"] = (
        betterproto.enum_field(4, optional=True)
    )
    apply_limit_type: Optional["PlayTogetherBasicInfoApplyLimitType"] = (
        betterproto.enum_field(5, optional=True)
    )
    apply_user_num: int = betterproto.int64_field(6)
    is_applying: bool = betterproto.bool_field(7)
    creator_id: int = betterproto.int64_field(8)
    creator_avatar: str = betterproto.string_field(9)
    creator_nick_name: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class BizLeaveJoinGroupParams(betterproto.Message):
    not_suggest_to_uid: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class ArrowConfig(betterproto.Message):
    icon: "ImageModel" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class ManageViewerSingReq(betterproto.Message):
    common: "LinkCommon" = betterproto.message_field(1)
    channel_id: int = betterproto.int64_field(2)
    permiter: "Player" = betterproto.message_field(3)
    applier: "Player" = betterproto.message_field(4)
    reply_status: "ReplyStatus" = betterproto.enum_field(5)
    dsl: "DslConfig" = betterproto.message_field(6)
    operator: "Player" = betterproto.message_field(7)
    song_id: int = betterproto.int64_field(8)
    multi_guest_req_extra: "BizPermitParams" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class DynamicListConfig(betterproto.Message):
    list_sections: List[str] = betterproto.string_field(1)
    section_configs: Dict[str, "DynamicListConfigSectionConfig"] = (
        betterproto.map_field(2, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE)
    )


@dataclass(eq=False, repr=False)
class DynamicListConfigSectionConfig(betterproto.Message):
    schema: str = betterproto.string_field(1)
    initial_data: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class BattleTeamUser(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    score: int = betterproto.int64_field(2)
    user_id_str: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class OfficialChannelInfo(betterproto.Message):
    channel_user: "User" = betterproto.message_field(1)
    channel_name: str = betterproto.string_field(2)
    end_time_stamp: int = betterproto.int64_field(3)
    forbidden_before_end: int = betterproto.int64_field(4)
    max_next_time: int = betterproto.int64_field(5)
    delay_enter_time: Dict[int, int] = betterproto.map_field(
        6, betterproto.TYPE_INT64, betterproto.TYPE_INT64
    )
    backup_room_id: int = betterproto.int64_field(7)
    backup_room_id_str: str = betterproto.string_field(8)
    start_time_stamp: int = betterproto.int64_field(9)
    role_type: int = betterproto.int32_field(10)
    exist_linkmic: bool = betterproto.bool_field(11)
    linkmic_type: int = betterproto.int32_field(12)


@dataclass(eq=False, repr=False)
class GiftListAckResponse(betterproto.Message):
    extra: "GiftListAckResponseExtra" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GiftListAckResponseExtra(betterproto.Message):
    log_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class BestTeammateRelation(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    best_teammate_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GuessOptions(betterproto.Message):
    text: "GuessText" = betterproto.message_field(1)
    guess_option_stats: "GuessOptionStats" = betterproto.message_field(2)
    serial_num: int = betterproto.int64_field(3)
    option_id_str: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CompetitionSwitchTurnResponse(betterproto.Message):
    data: "CompetitionSwitchTurnResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CompetitionSwitchTurnResponseResponseData(betterproto.Message):
    switch_turn_info: "CompetitionSwitchTurn" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GuideInfoResponse(betterproto.Message):
    data: "GuideInfoResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GuideInfoResponseGuidePageResource(betterproto.Message):
    texts: List["Text"] = betterproto.message_field(1)
    icons: List["ImageModel"] = betterproto.message_field(2)
    animations: List["ImageModel"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GuideInfoResponseGuideEntry(betterproto.Message):
    guide_page_resources: List["GuideInfoResponseGuidePageResource"] = (
        betterproto.message_field(10)
    )


@dataclass(eq=False, repr=False)
class GuideInfoResponseUserStats(betterproto.Message):
    gift_panel_show_cnt: int = betterproto.int64_field(1)
    shortcut_gift_click_cnt: int = betterproto.int64_field(2)
    gift_guide_popup_show_cnt: int = betterproto.int64_field(3)
    like_cnt: int = betterproto.int64_field(4)
    watch_duration: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class GuideInfoResponseData(betterproto.Message):
    user_stats: "GuideInfoResponseUserStats" = betterproto.message_field(1)
    guide_type: str = betterproto.string_field(2)
    schema_url: str = betterproto.string_field(3)
    should_use_config: bool = betterproto.bool_field(4)
    guide_entry: "GuideInfoResponseGuideEntry" = betterproto.message_field(5)
    ug_gift_task_info: "UgGiftTaskInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class CombineBadgeStruct(betterproto.Message):
    badge_display_type: int = betterproto.int32_field(1)
    icon: "ImageModel" = betterproto.message_field(2)
    text: "BadgeText" = betterproto.message_field(3)
    str: builtins.str = betterproto.string_field(4)
    padding: "PaddingInfo" = betterproto.message_field(5)
    font_style: "FontStyle" = betterproto.message_field(6)
    profile_card_panel: "ProfileCardPanel" = betterproto.message_field(7)
    background: "CombineBadgeBackground" = betterproto.message_field(11)
    background_dark_mode: "CombineBadgeBackground" = betterproto.message_field(12)
    icon_auto_mirrored: bool = betterproto.bool_field(13)
    bg_auto_mirrored: bool = betterproto.bool_field(14)
    public_screen_show_style: int = betterproto.int32_field(15)
    personal_card_show_style: int = betterproto.int32_field(16)
    rank_list_online_audience_show_style: int = betterproto.int32_field(17)
    multi_guest_show_style: int = betterproto.int32_field(18)
    arrow_config: "ArrowConfig" = betterproto.message_field(19)
    padding_new_font: "PaddingInfo" = betterproto.message_field(20)


@dataclass(eq=False, repr=False)
class CapsuleBizParamsNewAnchorEffect(betterproto.Message):
    effect_panel: str = betterproto.string_field(1)
    resource_id: str = betterproto.string_field(2)
    category_id: str = betterproto.string_field(3)
    tab_key: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GroupChatWatchLiveInfo(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    user_info: "User" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CompetitionUserBase(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    role: Optional["CompetitionUserBaseCompetitionRoleType"] = betterproto.enum_field(
        2, optional=True
    )
    nickname: str = betterproto.string_field(3)
    avatar: "ImageModel" = betterproto.message_field(4)
    user_id_str: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class LiveStreamGoal(betterproto.Message):
    id: int = betterproto.int64_field(1)
    type: int = betterproto.int32_field(2)
    status: int = betterproto.int32_field(3)
    sub_goals: List["LiveStreamSubGoal"] = betterproto.message_field(4)
    description: str = betterproto.string_field(5)
    audit_status: "AuditStatus" = betterproto.enum_field(6)
    cycle_type: int = betterproto.int32_field(7)
    start_time: int = betterproto.int64_field(8)
    expire_time: int = betterproto.int64_field(9)
    real_finish_time: int = betterproto.int64_field(10)
    contributors: List["LiveStreamGoalContributor"] = betterproto.message_field(11)
    contributors_length: int = betterproto.int32_field(12)
    id_str: str = betterproto.string_field(13)
    audit_description: str = betterproto.string_field(14)
    stats: "GoalStats" = betterproto.message_field(15)
    goal_extra_info: str = betterproto.string_field(16)
    mode: int = betterproto.int32_field(17)
    audit_info: "LiveStreamGoalAuditInfo" = betterproto.message_field(18)
    challenge_type: str = betterproto.string_field(20)
    is_uneditable: bool = betterproto.bool_field(21)


@dataclass(eq=False, repr=False)
class LiveStreamGoalAuditInfo(betterproto.Message):
    violation_id: int = betterproto.int64_field(1)
    task_type: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class BubbleMetadata(betterproto.Message):
    live_task_id: str = betterproto.string_field(1)
    live_task_status: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class LeaveJoinGroupResp(betterproto.Message):
    common_resp: "LinkMicCommonResp" = betterproto.message_field(1)
    cohost_biz_resp: "BizLeaveJoinGroupResponse" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class WebcastPreviewGameMomentMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    moment_data_list: List["PreviewGameMomentData"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EffectingCard(betterproto.Message):
    critical_strike_cards: List["CriticalStrikeCardInfo"] = betterproto.message_field(1)
    smoke_cards: List["SmokeCardInfo"] = betterproto.message_field(2)
    extra_time_cards: List["ExtraTimeCardInfo"] = betterproto.message_field(3)
    special_effect_cards: List["SpecialEffectCardInfo"] = betterproto.message_field(4)
    potion_cards: List["PotionCardInfo"] = betterproto.message_field(5)
    wave_cards: List["WaveCardInfo"] = betterproto.message_field(6)
    top2_cards: List["Top2CardInfo"] = betterproto.message_field(7)
    top3_cards: List["Top3CardInfo"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class WebcastGameRecommendCreateGuessMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    template_id_str: str = betterproto.string_field(2)
    bet_duration_in_second: int = betterproto.int64_field(3)
    guess_title: "GuessText" = betterproto.message_field(4)
    guess_opt1: "GuessText" = betterproto.message_field(5)
    guess_opt2: "GuessText" = betterproto.message_field(6)
    diss_miss_duration: int = betterproto.int64_field(7)
    tips_type: int = betterproto.int64_field(8)
    tips_limit: int = betterproto.int64_field(9)
    server_timestamp_str: str = betterproto.string_field(10)
    expire_time: str = betterproto.string_field(11)


@dataclass(eq=False, repr=False)
class LiveFlashSaleInfo(betterproto.Message):
    activity_id: int = betterproto.int64_field(1)
    type: int = betterproto.int32_field(2)
    status: int = betterproto.int32_field(3)
    stock_status: int = betterproto.int32_field(4)
    available_stock: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class LinkerMuteContent(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    mute_status: Optional["LinkerMuteContentMuteStatus"] = betterproto.enum_field(
        2, optional=True
    )


@dataclass(eq=False, repr=False)
class BannerCollapseInfo(betterproto.Message):
    title: "Text" = betterproto.message_field(1)
    image: "ImageModel" = betterproto.message_field(2)
    enabled: bool = betterproto.bool_field(3)
    background_color: str = betterproto.string_field(4)
    collapse_height: int = betterproto.int64_field(5)
    vertical_line_color: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class WebcastVideoLiveGoodsOrderMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    user: "User" = betterproto.message_field(2)
    goods_order: "WebcastVideoLiveGoodsOrderMessageGoodsOrder" = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class WebcastVideoLiveGoodsOrderMessageGoodsOrder(betterproto.Message):
    goods_room_order: int = betterproto.int64_field(1)
    order_num: int = betterproto.int64_field(2)
    order_money: int = betterproto.int64_field(3)
    order_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class FansLevelUpgradeInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    anchor_id: int = betterproto.int64_field(2)
    level: int = betterproto.int64_field(3)
    level_upgrade_expired_time: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class LinkLayerListUser(betterproto.Message):
    link_user: "Player" = betterproto.message_field(1)
    link_mic_id: str = betterproto.string_field(2)
    position_data: "MicPositionData" = betterproto.message_field(3)
    linked_time_nano: int = betterproto.int64_field(4)
    app_version: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class BattleTask(betterproto.Message):
    battle_bonus_config: "BattleBonusConfig" = betterproto.message_field(1)
    battle_bonus_status: "BattleBonusStatus" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class NoticeboardEndResponse(betterproto.Message):
    data: "NoticeboardEndResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class NoticeboardEndResponseResponseData(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    noticeboard_content: "NoticeboardContent" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastStarCommentNotificationMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    star_comment_action: Optional[
        "WebcastStarCommentNotificationMessageStarCommentAction"
    ] = betterproto.enum_field(2, optional=True)
    msg_id: int = betterproto.int64_field(3)
    operator: "User" = betterproto.message_field(4)
    star_comment_message: "StarCommentMessage" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class HourlyRankRewardInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    asset_id: int = betterproto.int64_field(2)
    notify_message: "WebcastRoomNotifyMessage" = betterproto.message_field(3)
    border_info: "BorderInfo" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WebcastInRoomBannerRefreshMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    delay_seconds: int = betterproto.int32_field(2)
    only_anchor: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class BoostedUsersPoint(betterproto.Message):
    m_point_time_stamp: int = betterproto.int64_field(1)
    m_total_users: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class RealtimeReminderWordInfoMsg(betterproto.Message):
    scene: "Scene" = betterproto.enum_field(1)
    title: "Text" = betterproto.message_field(2)
    content: str = betterproto.string_field(3)
    message_key: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class PreviewPeriod(betterproto.Message):
    duration: int = betterproto.int64_field(1)
    promot: "BattlePrompt" = betterproto.message_field(2)
    icon: "ImageModel" = betterproto.message_field(25)


@dataclass(eq=False, repr=False)
class GameAction(betterproto.Message):
    action_type: Optional["GameActionGameActionType"] = betterproto.enum_field(
        1, optional=True
    )
    jump_page: Optional["GameActionJumpPage"] = betterproto.enum_field(2, optional=True)
    follow_user_id: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class TeamUsersInfo(betterproto.Message):
    team_id: int = betterproto.int64_field(1)
    user_ids: List[int] = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GuestShowdownUpdateParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    play_id: int = betterproto.int64_field(3)
    guest_showdown_update_scene: int = betterproto.int32_field(4)
    config_change: "GuestShowdownConfigChange" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class WebcastRoomStickerMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    sticker_list: List["RoomSticker"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FinishChannelContent(betterproto.Message):
    owner: "Player" = betterproto.message_field(1)
    finish_reason: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class BizReplyResponseData(betterproto.Message):
    link_type_permission: int = betterproto.int64_field(1)
    layout_type_action: int = betterproto.int32_field(2)
    fix_mic_num_action: int = betterproto.int32_field(3)
    host_perception_info: "WebcastPerceptionMessage" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class PosIdentity(betterproto.Message):
    type: Optional["PosIdentityPosIdentityType"] = betterproto.enum_field(
        1, optional=True
    )
    value: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class WebcastOChannelUserMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    start_time_stamp: int = betterproto.int64_field(2)
    max_enter_time: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class ResumeReq(betterproto.Message):
    common: "LinkCommon" = betterproto.message_field(1)
    myself: "Player" = betterproto.message_field(2)
    channel_id: int = betterproto.int64_field(3)
    multi_guest_req_extra: "BizResumeParams" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class WallpaperContext(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    wallpaper_start_time: int = betterproto.int64_field(2)
    nickname: str = betterproto.string_field(3)
    avatar_thumb: "ImageModel" = betterproto.message_field(4)
    user_keywords: str = betterproto.string_field(5)
    linkmic_id_str: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class BizPermitResponse(betterproto.Message):
    data: "BizPermitResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BizPermitResponseResponseData(betterproto.Message):
    host_perception_info: "WebcastPerceptionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WebcastGiftProgressMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    progress_type: str = betterproto.string_field(2)
    progress: List["WebcastGiftProgressMessageProgressStruct"] = (
        betterproto.message_field(3)
    )


@dataclass(eq=False, repr=False)
class WebcastGiftProgressMessageProgressStruct(betterproto.Message):
    progress_id: int = betterproto.int64_field(1)
    progress_value: int = betterproto.int64_field(2)
    progress_status: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class Text(betterproto.Message):
    key: str = betterproto.string_field(1)
    default_pattern: str = betterproto.string_field(2)
    default_format: "TextFormat" = betterproto.message_field(3)
    pieces: List["TextPiece"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GiftsBoxInfo(betterproto.Message):
    gifts: List["GiftInfoInBox"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class AudienceReserveContent(betterproto.Message):
    from_user_id: int = betterproto.int64_field(1)
    user: "User" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastOecLiveManagerMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    purchase_product_info: "PurchaseProductInfo" = betterproto.message_field(3)
    subscription_info: "SubscriptionInfo" = betterproto.message_field(4)
    giveaway_info: "GiveawayInfo" = betterproto.message_field(5)
    ask_demo_info: "AskDemoInfo" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class TopicSessionStatus(betterproto.Message):
    session_id: int = betterproto.int64_field(1)
    session_heat: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class WebcastDiggMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    digg_count: int = betterproto.int32_field(2)
    duration: int = betterproto.int32_field(3)
    color: int = betterproto.int32_field(4)
    user: "User" = betterproto.message_field(5)
    icon: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class WebcastAiLiveSummaryMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    ai_live_summary: "AiLiveSummary" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class EffectListResponse(betterproto.Message):
    data: "EffectListResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class EffectListResponseData(betterproto.Message):
    version: str = betterproto.string_field(1)
    panel: "Panel" = betterproto.message_field(2)
    effects: List["EffectStruct"] = betterproto.message_field(3)
    collection: List["EffectStruct"] = betterproto.message_field(4)
    category: List["EffectCategory"] = betterproto.message_field(5)
    front_effect_id: str = betterproto.string_field(6)
    rear_effect_id: str = betterproto.string_field(7)
    url_prefix: List[str] = betterproto.string_field(8)
    extra: Dict[str, str] = betterproto.map_field(
        9, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class P2PGroupChangeContent(betterproto.Message):
    group_ext_info: List["RtcExtraInfo"] = betterproto.message_field(1)
    group_user: "GroupChannelAllUser" = betterproto.message_field(2)
    migration_details: "MigrationDetails" = betterproto.message_field(3)
    content_pos: List["ContentPosition"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GiftResultData(betterproto.Message):
    display_text: "Text" = betterproto.message_field(1)
    describe: str = betterproto.string_field(2)
    gift_id: int = betterproto.int64_field(3)
    group_count: int = betterproto.int32_field(4)
    repeat_count: int = betterproto.int32_field(5)
    combo_count: int = betterproto.int32_field(6)
    msg_id: int = betterproto.int64_field(7)
    tray_display_text: "Text" = betterproto.message_field(8)
    m_tray_info: "GiftTrayInfo" = betterproto.message_field(10)
    m_gift: "Gift" = betterproto.message_field(11)
    display_text_for_anchor: "Text" = betterproto.message_field(12)
    display_text_for_audience: "Text" = betterproto.message_field(13)
    gifts_in_box: "GiftsBoxInfo" = betterproto.message_field(14)
    gift_asset: "AssetsModel" = betterproto.message_field(15)


@dataclass(eq=False, repr=False)
class TransitionConfig(betterproto.Message):
    config_id: int = betterproto.int64_field(1)
    resource_image: "ImageModel" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PartnershipInfo(betterproto.Message):
    partnership_room: bool = betterproto.bool_field(1)
    promoting_task_id: str = betterproto.string_field(2)
    task_id_list: List[str] = betterproto.string_field(3)
    promoting_game_id: str = betterproto.string_field(4)
    show_task_id: str = betterproto.string_field(5)
    promoting_drops_id: str = betterproto.string_field(6)
    promoting_room: bool = betterproto.bool_field(7)
    promoting_task_type: int = betterproto.int32_field(8)
    show_task_type: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class RefreshPaidStreamResp(betterproto.Message):
    data: "RefreshPaidStreamRespResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RefreshPaidStreamRespResponseData(betterproto.Message):
    stream_url: "StreamUrl" = betterproto.message_field(1)
    multi_stream_url: "StreamUrl" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GiftLockInfo(betterproto.Message):
    m_lock: bool = betterproto.bool_field(1)
    m_lock_type: int = betterproto.int32_field(2)
    gift_level: int = betterproto.int32_field(3)
    highlight_enabled: bool = betterproto.bool_field(4)
    unlock_button_text: str = betterproto.string_field(5)
    unlock_schema: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class GuestShowdownConfig(betterproto.Message):
    duration: int = betterproto.int64_field(1)
    loser_num: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class LinkGetSettingResult(betterproto.Message):
    settings: "AnchorLinkmicUserSettings" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class WebcastAnchorToolModificationMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    modification: "AnchorToolModification" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastLiveIntroMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    id: int = betterproto.int64_field(2)
    audit_status: "AuditStatus" = betterproto.enum_field(3)
    content: str = betterproto.string_field(4)
    user: "User" = betterproto.message_field(5)
    intro_mode: int = betterproto.int32_field(6)
    badges: List["BadgeStruct"] = betterproto.message_field(7)
    content_language: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class CapsuleBizParamsMultiGuestInviteGuide(betterproto.Message):
    invitee_user: "User" = betterproto.message_field(1)
    display_strategy: int = betterproto.int32_field(2)
    linkmic_audience_invite_notice_reason: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class LinkerCloseContent(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class CompetitionAbInfo(betterproto.Message):
    tts: "CompetitionAbInfoTakeTheStageAbInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CompetitionAbInfoTakeTheStageAbInfo(betterproto.Message):
    atmosphere_animation: bool = betterproto.bool_field(1)
    atmosphere_duration: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class GiftIconInfo(betterproto.Message):
    m_icon_id: int = betterproto.int64_field(1)
    m_name: str = betterproto.string_field(2)
    m_valid_start_at: int = betterproto.int64_field(3)
    m_valid_end_at: int = betterproto.int64_field(4)
    m_icon_uri: str = betterproto.string_field(5)
    m_icon: "ImageModel" = betterproto.message_field(6)
    m_with_effect: bool = betterproto.bool_field(7)
    m_effect_uri: str = betterproto.string_field(8)
    m_effect: "ImageModel" = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class GiftFavouriteSaveResponse(betterproto.Message):
    data: "GiftFavouriteSaveResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GiftFavouriteSaveResponseData(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    favourite_gift_ids: List[int] = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class GiftRecord(betterproto.Message):
    message: "GiftRecordMessage" = betterproto.message_field(1)
    gift: "GiftRecordGift" = betterproto.message_field(2)
    from_user: "GiftRecordUser" = betterproto.message_field(3)
    tags: List[str] = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class GiftRecordUser(betterproto.Message):
    id: int = betterproto.int64_field(1)
    nickname: str = betterproto.string_field(2)
    avatar: "ImageModel" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GiftRecordGift(betterproto.Message):
    id: int = betterproto.int64_field(1)
    name: str = betterproto.string_field(2)
    image: "ImageModel" = betterproto.message_field(3)
    gift_count: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class GiftRecordMessage(betterproto.Message):
    msg_id: int = betterproto.int64_field(1)
    group_id: int = betterproto.int64_field(2)
    created_on_timestamp: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class WebcastMgPunishCenterActionMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    action_type: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class UnionAnimationInfo(betterproto.Message):
    union_type: Optional["UnionAnimationInfoUnionAnimationInfoType"] = (
        betterproto.enum_field(1, optional=True)
    )
    rank_type_array: List["UnionAnimationInfoProfitRankType"] = betterproto.enum_field(
        2
    )
    supported_version: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class SubInfo(betterproto.Message):
    user_id: str = betterproto.string_field(1)
    anchor_id: str = betterproto.string_field(2)
    sub_start_time: int = betterproto.int64_field(3)
    sub_end_time: int = betterproto.int64_field(4)
    next_renew_time: int = betterproto.int64_field(5)
    subscribed_month: int = betterproto.int32_field(6)
    is_subscribing: bool = betterproto.bool_field(7)
    sub_level: "SubLevel" = betterproto.message_field(8)
    status: Optional["SubInfoPayStatus"] = betterproto.enum_field(9, optional=True)
    sub_info_not_found: bool = betterproto.bool_field(10)
    sku_name: str = betterproto.string_field(11)
    pay_channel: Optional["SubInfoPayChannel"] = betterproto.enum_field(
        12, optional=True
    )
    grace_info: "GraceInfo" = betterproto.message_field(13)
    price_change_info: "PriceChangeInfo" = betterproto.message_field(16)
    last_operation: "SubOperation" = betterproto.message_field(17)
    package_id: str = betterproto.string_field(18)
    sub_circle: int = betterproto.int64_field(19)
    renewal_period: int = betterproto.int32_field(20)
    is_mocked: bool = betterproto.bool_field(21)


@dataclass(eq=False, repr=False)
class ListChangeBizContent(betterproto.Message):
    user_infos: Dict[int, "CohostUserInfo"] = betterproto.map_field(
        1, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    waiting_users: List["VirtualWaitingUser"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class NoticeboardGetUserRestrictedHistoryResponse(betterproto.Message):
    data: "NoticeboardGetUserRestrictedHistoryResponseResponseData" = (
        betterproto.message_field(1)
    )


@dataclass(eq=False, repr=False)
class NoticeboardGetUserRestrictedHistoryResponseResponseData(betterproto.Message):
    restricted_map: Dict[str, int] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_INT32
    )


@dataclass(eq=False, repr=False)
class FlashSaleAtmosphere(betterproto.Message):
    status: int = betterproto.int32_field(1)
    start_time: int = betterproto.int64_field(2)
    end_time: int = betterproto.int64_field(3)
    preheat_time: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class PayGradeInfo(betterproto.Message):
    user_grade: "UserGrade" = betterproto.message_field(1)
    upgrade_info: "UpgradeInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AnchorReplayInfoResponse(betterproto.Message):
    data: "AnchorReplayInfoData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RankListTabInfo(betterproto.Message):
    tabs: List["RankTabInfo"] = betterproto.message_field(1)
    supported_version: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class BetStats(betterproto.Message):
    bet_option: str = betterproto.string_field(1)
    bet_points: int = betterproto.int64_field(2)
    win_points: int = betterproto.int64_field(3)
    refund_points: int = betterproto.int64_field(4)
    rollback_points: int = betterproto.int64_field(5)
    bet_times: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class PurchaseProductInfo(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    product: "Product" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class JoinGroupResp(betterproto.Message):
    common_resp: "LinkMicCommonResp" = betterproto.message_field(1)
    group_user: "GroupChannelAllUser" = betterproto.message_field(2)
    linked_user_ui_positions: List[str] = betterproto.string_field(3)
    group_rtc_info: List["RtcExtraInfo"] = betterproto.message_field(4)
    cohost_resp_extra: "BizJoinGroupResponse" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class DisplayControl(betterproto.Message):
    priority: int = betterproto.int32_field(1)
    duration: int = betterproto.int64_field(2)
    target_group_show_rst: Dict[str, "ShowResult"] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )
    horizontal_trigger_type: Optional["DisplayControlHorizontalOnclickTriggerType"] = (
        betterproto.enum_field(4, optional=True)
    )


@dataclass(eq=False, repr=False)
class WebcastPictionaryExitMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    session_id: int = betterproto.int64_field(2)
    show_stats: bool = betterproto.bool_field(3)
    pictionary_type: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class SubscribeInfo(betterproto.Message):
    is_anchor_qualified: bool = betterproto.bool_field(1)
    is_subscribed: bool = betterproto.bool_field(2)
    subscribe_badge: "SubscribeBadge" = betterproto.message_field(3)
    anchor_enable_subscription: bool = betterproto.bool_field(4)
    subscriber_count: int = betterproto.int32_field(5)
    is_in_grace_period: bool = betterproto.bool_field(6)
    is_subscribed_to_current_anchor: bool = betterproto.bool_field(7)
    timer_detail: "TimerDetail" = betterproto.message_field(8)
    user_gift_sub_auth: bool = betterproto.bool_field(9)
    anchor_gift_sub_auth: bool = betterproto.bool_field(10)
    status: Optional["SubscribeInfoPayStatus"] = betterproto.enum_field(
        11, optional=True
    )
    sub_end_time: int = betterproto.int64_field(12)
    package_id: str = betterproto.string_field(13)
    sol_room_display_text: str = betterproto.string_field(14)
    is_sol_eligible: bool = betterproto.bool_field(15)


@dataclass(eq=False, repr=False)
class LiveJourneyImMessage(betterproto.Message):
    msg: str = betterproto.string_field(1)
    level: int = betterproto.int64_field(2)
    type: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class WebcastQuestionNewMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    question: "Question" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastCountdownMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    countdown_content: "CountdownContent" = betterproto.message_field(3)
    operator_user_info: "LinkerMediaChangeOperator" = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class WebcastGameServerFeatureMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    all_features: List["GameServerFeature"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class OwnerSettingResponse(betterproto.Message):
    data: "OwnerSettingResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class OwnerSettingResponseData(betterproto.Message):
    success: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class MsgNotifyWatchEarlyQuota(betterproto.Message):
    component_type: int = betterproto.int32_field(1)
    watch_mill_seconds: int = betterproto.int64_field(2)
    count: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class GuessTaskPackInfo(betterproto.Message):
    tasks_info: List["GameTaskInfo"] = betterproto.message_field(1)
    config: "TaskWidgetConfig" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastPlaybookMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    message_type: "MessageType" = betterproto.enum_field(2)
    play_id: int = betterproto.int64_field(3)
    play_status: int = betterproto.int32_field(4)
    title: str = betterproto.string_field(5)
    cover_url: str = betterproto.string_field(6)
    playbook_end_reason: int = betterproto.int32_field(7)


@dataclass(eq=False, repr=False)
class WebcastGiftRecordCapsuleMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    extra: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class ResumeResp(betterproto.Message):
    common_resp: "LinkMicCommonResp" = betterproto.message_field(1)
    linked_user_info: List["LinkedUserInfo"] = betterproto.message_field(2)
    channel_id: int = betterproto.int64_field(3)
    self_link_mic_id: str = betterproto.string_field(4)
    list: "AllListUser" = betterproto.message_field(5)
    reject_enlarge_linkmic_id_list: List[str] = betterproto.string_field(6)
    linked_user_ui_positions: List[str] = betterproto.string_field(7)
    content_pos: List["ContentPosition"] = betterproto.message_field(8)
    ui_pos: List["PosIdentity"] = betterproto.message_field(9)
    multi_guest_resp_extra: "BizResumeResponse" = betterproto.message_field(9527)


@dataclass(eq=False, repr=False)
class UserVoteOptionInfo(betterproto.Message):
    vote_option_index: int = betterproto.int64_field(1)
    vote_count: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class LiveMessageSei(betterproto.Message):
    unique_i_d: "LiveMessageId" = betterproto.message_field(1)
    timestamp: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class CohostHistoryResponse(betterproto.Message):
    data: "CohostHistoryResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CohostHistoryResponseHost(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    history_group_channel_id: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class CohostHistoryResponseUser(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    points: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class CohostHistoryResponseTeam(betterproto.Message):
    users: List["CohostHistoryResponseUser"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CohostHistoryResponseMatchRecord(betterproto.Message):
    match_id: int = betterproto.int64_field(1)
    history_group_channel_id: int = betterproto.int64_field(2)
    match_type: int = betterproto.int32_field(3)
    start_timestamp_sec: int = betterproto.int64_field(4)
    result: int = betterproto.int32_field(6)
    my_team: "CohostHistoryResponseTeam" = betterproto.message_field(7)
    opposing_teams: List["CohostHistoryResponseTeam"] = betterproto.message_field(8)


@dataclass(eq=False, repr=False)
class CohostHistoryResponseTakeTheStageUser(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    rank: int = betterproto.int64_field(2)
    points: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class CohostHistoryResponseTakeTheStageRecord(betterproto.Message):
    showdown_id: int = betterproto.int64_field(1)
    start_timestamp_sec: int = betterproto.int64_field(2)
    history_group_channel_id: int = betterproto.int64_field(3)
    my_take_the_stage_info: "CohostHistoryResponseTakeTheStageUser" = (
        betterproto.message_field(4)
    )
    other_take_the_stage_infos: List["CohostHistoryResponseTakeTheStageUser"] = (
        betterproto.message_field(5)
    )


@dataclass(eq=False, repr=False)
class CohostHistoryResponseCohostSession(betterproto.Message):
    id: int = betterproto.int64_field(1)
    start_timestamp_sec: int = betterproto.int64_field(3)
    viewers_accumulated: int = betterproto.int64_field(4)
    hosts: List["CohostHistoryResponseHost"] = betterproto.message_field(5)
    match_records: List["CohostHistoryResponseMatchRecord"] = betterproto.message_field(
        6
    )
    take_the_stage_records: List["CohostHistoryResponseTakeTheStageRecord"] = (
        betterproto.message_field(7)
    )


@dataclass(eq=False, repr=False)
class CohostHistoryResponseUserInfo(betterproto.Message):
    room: "Room" = betterproto.message_field(1)
    extra_info: "RivalExtraInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class CohostHistoryResponseResponseData(betterproto.Message):
    cohost_sessions: List["CohostHistoryResponseCohostSession"] = (
        betterproto.message_field(1)
    )
    user_infos: Dict[int, "CohostHistoryResponseUserInfo"] = betterproto.map_field(
        2, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    oldest_timestamp_sec: int = betterproto.int64_field(10)
    has_more: bool = betterproto.bool_field(11)


@dataclass(eq=False, repr=False)
class WebcastQuickChatListMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    duration: int = betterproto.int64_field(2)
    content_list: List["QuickChatContent"] = betterproto.message_field(3)
    priority: int = betterproto.int64_field(4)
    scene: "Scene" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class RecommendComment(betterproto.Message):
    priority: int = betterproto.int64_field(1)
    duration: int = betterproto.int64_field(2)
    recommend_text: "Text" = betterproto.message_field(3)
    tips_type: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class WebcastPartnershipCardChangeMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    change_mode: int = betterproto.int32_field(2)
    sequence_id: int = betterproto.int32_field(3)
    task_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CurrentInteractionQuestion(betterproto.Message):
    question: "Question" = betterproto.message_field(1)
    like_cnt: int = betterproto.int64_field(2)
    self_like_status: int = betterproto.int32_field(3)
    favorite_status: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class Prop(betterproto.Message):
    primary_effect_id: int = betterproto.int32_field(1)
    next_expire: int = betterproto.int64_field(2)
    description: str = betterproto.string_field(3)
    id: int = betterproto.int64_field(4)
    manual: str = betterproto.string_field(5)
    diamond: int = betterproto.int32_field(6)
    reddot_tip: bool = betterproto.bool_field(7)
    icon: "ImageModel" = betterproto.message_field(8)
    count: int = betterproto.int32_field(9)
    name: str = betterproto.string_field(10)
    gift: "Gift" = betterproto.message_field(11)
    label_icon: "ImageModel" = betterproto.message_field(12)
    is_fragment: bool = betterproto.bool_field(13)
    fragments_compound_count: int = betterproto.int64_field(14)
    is_aweme_free_gift: int = betterproto.int32_field(15)
    diamond_label: "ImageModel" = betterproto.message_field(16)
    banner: "BannerInRoom" = betterproto.message_field(17)
    prop_type: int = betterproto.int64_field(18)
    gifts: List["HotfixGiftDataForProp"] = betterproto.message_field(19)
    scheme_url: str = betterproto.string_field(20)


@dataclass(eq=False, repr=False)
class AssetsListResult(betterproto.Message):
    assets: List["AssetsModel"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class FeedBannerContainer(betterproto.Message):
    banner_list: List["FeedBanner"] = betterproto.message_field(1)
    total: int = betterproto.int32_field(2)
    background: "ImageModel" = betterproto.message_field(3)
    title: str = betterproto.string_field(4)
    switch_type: int = betterproto.int32_field(5)
    banners_type: int = betterproto.int32_field(6)


@dataclass(eq=False, repr=False)
class PaidEventPreview(betterproto.Message):
    allow_preview: int = betterproto.int64_field(1)
    allow_preview_time: int = betterproto.int64_field(2)


@dataclass(eq=False, repr=False)
class CombineBadgeBackground(betterproto.Message):
    image: "ImageModel" = betterproto.message_field(1)
    background_color_code: str = betterproto.string_field(2)
    border_color_code: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class StarCommentPurchaseResponse(betterproto.Message):
    data: "StarCommentPurchaseResponseData" = betterproto.message_field(1)
    extra: "StarCommentPurchaseResponseExtra" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class StarCommentPurchaseResponseData(betterproto.Message):
    purchase_result: int = betterproto.int32_field(1)
    queue: "StarCommentQueue" = betterproto.message_field(2)
    server_cur_msg_start_time_ms: int = betterproto.int64_field(3)
    pay_grade_info: "PayGradeInfo" = betterproto.message_field(4)
    room_user_count: int = betterproto.int64_field(5)
    coins: int = betterproto.int64_field(6)
    msg_id: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class StarCommentPurchaseResponseExtra(betterproto.Message):
    custom_error: "RechargeCustomError" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QuizUserIdentityInfo(betterproto.Message):
    message_type: "MessageType" = betterproto.enum_field(1)
    quiz_id: str = betterproto.string_field(2)
    quiz_type: int = betterproto.int32_field(3)
    extra: str = betterproto.string_field(4)
    user_data_version: int = betterproto.int32_field(5)
    device_id: str = betterproto.string_field(6)
    user_status: int = betterproto.int32_field(7)
    respawn_balance: int = betterproto.int32_field(8)
    double_bonus_balance: int = betterproto.int32_field(9)
    spectator_type: int = betterproto.int32_field(10)
    is_question_encrypt: bool = betterproto.bool_field(11)
    question_encrypt_key: str = betterproto.string_field(12)
    user_question_result: List["QuizUserQuestionResult"] = betterproto.message_field(13)
    available_respawn_balance: int = betterproto.int32_field(14)
    available_double_bonus_balance: int = betterproto.int32_field(15)
    is_retain_if_wrong: bool = betterproto.bool_field(16)
    user_live_event_infos: List["UserLiveEventInfo"] = betterproto.message_field(17)
    user_identity_infos: List["QuizUserIdentityInfo"] = betterproto.message_field(18)
    extra1: str = betterproto.string_field(51)
    extra2: str = betterproto.string_field(52)
    extra3: str = betterproto.string_field(53)
    extra4: str = betterproto.string_field(54)
    extra5: str = betterproto.string_field(55)


@dataclass(eq=False, repr=False)
class GetLiveEventUserResponse(betterproto.Message):
    data: "GetLiveEventUserResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetLiveEventUserResponseInvitedListUser(betterproto.Message):
    user: "User" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetLiveEventUserResponseRegisteredListUser(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    already_read: bool = betterproto.bool_field(2)
    registered_time: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class GetLiveEventUserResponseResponseData(betterproto.Message):
    invited_users: List["GetLiveEventUserResponseInvitedListUser"] = (
        betterproto.message_field(1)
    )
    registered_users: List["GetLiveEventUserResponseRegisteredListUser"] = (
        betterproto.message_field(2)
    )


@dataclass(eq=False, repr=False)
class GuessRankUserInfo(betterproto.Message):
    avatar_uri: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class ShopBrandLogo(betterproto.Message):
    seller_name: str = betterproto.string_field(1)
    seller_logo: "ImageModel" = betterproto.message_field(2)
    blue_v_image: "ImageModel" = betterproto.message_field(3)
    dark_blue_v_image: "ImageModel" = betterproto.message_field(4)
    top_brand_image: "ImageModel" = betterproto.message_field(5)
    dark_top_brand_image: "ImageModel" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class ChannelInfo(betterproto.Message):
    layout: int = betterproto.int32_field(1)
    vendor: int = betterproto.int32_field(2)
    dimension: int = betterproto.int32_field(3)
    inner_channel_id: int = betterproto.int64_field(4)
    group_channel_id: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class GuessWidget(betterproto.Message):
    version_id: int = betterproto.int64_field(1)
    guess_round: "GuessRound" = betterproto.message_field(2)
    bet_stats: List["BetStats"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class LinkListUser(betterproto.Message):
    user: "User" = betterproto.message_field(1)
    modify_time: int = betterproto.int64_field(2)
    link_type: int = betterproto.int32_field(3)
    role_type: int = betterproto.int32_field(4)
    link_mic_id: str = betterproto.string_field(5)
    payed_money: int = betterproto.int64_field(6)
    fan_ticket: int = betterproto.int64_field(7)
    fan_ticket_type: int = betterproto.int32_field(8)
    link_user_type: int = betterproto.int32_field(9)


@dataclass(eq=False, repr=False)
class GoodyBagWinnerInfo(betterproto.Message):
    user_info: "GoodyBagUserInfo" = betterproto.message_field(1)
    coins: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class BizJoinGroupResponse(betterproto.Message):
    data: "BizJoinGroupResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class BizJoinGroupResponseResponseData(betterproto.Message):
    perception_status: int = betterproto.int32_field(1)
    perception_message: "WebcastPerceptionMessage" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TaskWidgetConfig(betterproto.Message):
    refresh_gap: int = betterproto.int32_field(1)
    show_countdown_time: int = betterproto.int32_field(2)
    red_point_show_time: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class LiveGiftBoostCardUserStatusResponse(betterproto.Message):
    m_total_users: int = betterproto.int64_field(1)
    m_points: List["BoostedUsersPoint"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class Room(betterproto.Message):
    id: int = betterproto.int64_field(1)
    id_str: str = betterproto.string_field(2)
    status: int = betterproto.int32_field(3)
    owner_user_id: int = betterproto.int64_field(4)
    title: str = betterproto.string_field(5)
    user_count: int = betterproto.int32_field(6)
    create_time: int = betterproto.int64_field(7)
    finish_time: int = betterproto.int64_field(9)
    platform: int = betterproto.int32_field(16)
    client_version: str = betterproto.string_field(17)
    with_link_mic: bool = betterproto.bool_field(18)
    cover: "ImageModel" = betterproto.message_field(20)
    dynamic_cover: "ImageModel" = betterproto.message_field(21)
    dynamic_cover_low: "ImageModel" = betterproto.message_field(22)
    share_url: str = betterproto.string_field(23)
    anchor_share_text: str = betterproto.string_field(24)
    user_share_text: str = betterproto.string_field(25)
    stream_id: int = betterproto.int64_field(26)
    stream_url: "StreamUrl" = betterproto.message_field(28)
    mosaic_status: int = betterproto.int32_field(29)
    link_mic_info_gson: "RoomLinkInfo" = betterproto.message_field(32)
    decoration_list: List["RoomDecoration"] = betterproto.message_field(34)
    top_fan_tickets: List["TopFanTicket"] = betterproto.message_field(35)
    stats: "RoomStats" = betterproto.message_field(36)
    feed_room_label: "ImageModel" = betterproto.message_field(42)
    labels: str = betterproto.string_field(43)
    owner: "User" = betterproto.message_field(46)
    has_commerce_goods: bool = betterproto.bool_field(48)
    live_type_audio: bool = betterproto.bool_field(51)
    is_third_party: bool = betterproto.bool_field(52)
    is_screenshot: bool = betterproto.bool_field(53)
    live_type_sandbox: bool = betterproto.bool_field(54)
    start_time: int = betterproto.int64_field(63)
    m_room_auth_status: "RoomAuthStatus" = betterproto.message_field(72)
    background: "ImageModel" = betterproto.message_field(83)
    layout: int = betterproto.int64_field(84)
    unused_effect: bool = betterproto.bool_field(90)
    gift_message_style: int = betterproto.int32_field(91)
    finish_url: str = betterproto.string_field(93)
    room_layout: int = betterproto.int32_field(101)
    like_count: int = betterproto.int64_field(111)
    anchor_tab_type: int = betterproto.int64_field(120)
    official_channel_info: "OfficialChannelInfo" = betterproto.message_field(122)
    linker_map: Dict[str, int] = betterproto.map_field(
        130, betterproto.TYPE_STRING, betterproto.TYPE_INT64
    )
    webcast_sdk_version: int = betterproto.int64_field(138)
    m_name_mode: int = betterproto.int32_field(139)
    room_create_ab_param: str = betterproto.string_field(140)
    commerce_struct: "CommerceStruct" = betterproto.message_field(145)
    stream_cover: "ImageModel" = betterproto.message_field(147)
    question_version: int = betterproto.int32_field(149)
    live_event_info: "LiveEventInfo" = betterproto.message_field(151)
    hashtag: "Hashtag" = betterproto.message_field(152)
    ba_link_struct: "BaLinkStruct" = betterproto.message_field(153)
    answering_question: str = betterproto.string_field(155)
    warning_tag: "WarningTag" = betterproto.message_field(157)
    mask_layer: "MaskLayer" = betterproto.message_field(158)
    live_room_mode: int = betterproto.int32_field(159)
    finish_url_lynx: str = betterproto.string_field(163)
    like_info: "LikeInfo" = betterproto.message_field(165)
    short_touch_items: List["ShortTouchItem"] = betterproto.message_field(166)
    filter_rule: List["LiveFilterMsgRule"] = betterproto.message_field(167)
    m_boost_card_room_status: "LiveGiftBoostCardRoomStatus" = betterproto.message_field(
        169
    )
    feed_room_label_list: List["FeedRoomLabel"] = betterproto.message_field(170)
    have_wish_list: bool = betterproto.bool_field(172)
    multi_live_user_settings: "MultiLiveUserSettings" = betterproto.message_field(174)
    interaction_question: "InteractionQuestionInfo" = betterproto.message_field(176)
    room_sticker_list: List["RoomSticker"] = betterproto.message_field(177)
    game_tags: List["GameTag"] = betterproto.message_field(178)
    advanced_poll_info: "PollInfo" = betterproto.message_field(179)
    gift_poll_vote_enabled: bool = betterproto.bool_field(180)
    skin: "Skin" = betterproto.message_field(182)
    square_cover_img: "ImageModel" = betterproto.message_field(183)
    rectangle_cover_img: "ImageModel" = betterproto.message_field(184)
    m_room_auth_message: "RoomAuthMessage" = betterproto.message_field(185)
    paid_event: "PaidEvent" = betterproto.message_field(186)
    pictionary_full_info: "PictionaryFullInfo" = betterproto.message_field(187)
    age_restricted: "AgeRestricted" = betterproto.message_field(189)
    pin_info: "PinInfo" = betterproto.message_field(191)
    m_indicators: List[str] = betterproto.string_field(192)
    top_frame_summary: "TopFrameSummary" = betterproto.message_field(193)
    bc_toggle_info: "BcToggleInfo" = betterproto.message_field(194)
    comment_has_text_emoji_emote: int = betterproto.int32_field(196)
    partnership_info: "PartnershipInfo" = betterproto.message_field(197)
    stream_status: int = betterproto.int32_field(198)
    creator: "Creator" = betterproto.message_field(199)
    drawer_tab_position: str = betterproto.string_field(200)
    ba_leads_gen_info: "BaLeadsGenInfo" = betterproto.message_field(201)
    effect_info: List["EffectInfo"] = betterproto.message_field(202)
    audio_mute: int = betterproto.int32_field(203)
    live_event_card: "EventCard" = betterproto.message_field(204)
    live_sub_only: int = betterproto.int64_field(205)
    support_quiz: int = betterproto.int64_field(206)
    admin_ec_show_permission: Dict[int, int] = betterproto.map_field(
        207, betterproto.TYPE_INT64, betterproto.TYPE_INT64
    )
    blurred_cover: "ImageModel" = betterproto.message_field(208)
    caption_info: "CaptionInfo" = betterproto.message_field(209)
    adjust_display_order: int = betterproto.int64_field(210)
    commerce_info_backup: "CommerceStruct" = betterproto.message_field(211)
    allow_preview_time: int = betterproto.int64_field(212)
    paid_content_info: "PaidContentInfo" = betterproto.message_field(213)
    sub_pin_card: "SubPinCard" = betterproto.message_field(214)
    enable_server_drop: int = betterproto.int64_field(215)
    disable_preview_sub_only: int = betterproto.int64_field(216)
    lite_user_visible: bool = betterproto.bool_field(217)
    lite_user_not_visible: bool = betterproto.bool_field(218)
    drop_comment_group: int = betterproto.int64_field(219)
    pico_live_type: int = betterproto.int32_field(220)
    gift_suspension: "GiftSuspension" = betterproto.message_field(221)
    polling_star_comment: bool = betterproto.bool_field(222)
    has_used_music: bool = betterproto.bool_field(223)
    anchor_live_pro_info: "LiveProInfo" = betterproto.message_field(224)
    rank_comment_groups: List[str] = betterproto.string_field(225)
    multi_stream_scene: int = betterproto.int64_field(226)
    multi_stream_id: int = betterproto.int64_field(227)
    multi_stream_id_str: str = betterproto.string_field(228)
    multi_stream_url: "StreamUrl" = betterproto.message_field(229)
    idc_region: str = betterproto.string_field(230)
    regional_restricted: "RegionalRestricted" = betterproto.message_field(231)
    commercial_content_toggle: "CommercialContentToggle" = betterproto.message_field(
        232
    )
    max_preview_time: int = betterproto.int64_field(233)
    karaoke_info: "KaraokeInfo" = betterproto.message_field(234)
    star_comment_config: "StarCommentConfig" = betterproto.message_field(235)
    show_star_comment_entrance: bool = betterproto.bool_field(236)
    cpp_version: int = betterproto.int32_field(237)
    live_sub_only_use_music: int = betterproto.int64_field(238)
    like_effect: "LikeEffect" = betterproto.message_field(239)
    room_pcu: int = betterproto.int64_field(240)
    fyp_commerce_info: "FypCommerceStruct" = betterproto.message_field(241)
    net_mode: int = betterproto.int64_field(242)
    rtc_app_id: str = betterproto.string_field(245)
    game_demo: int = betterproto.int64_field(246)
    quick_gift: "QuickGift" = betterproto.message_field(247)
    online_audience: "OnlineAudience" = betterproto.message_field(248)
    history_comment_list: List["ProtoMessageFetchResultBaseProtoMessage"] = (
        betterproto.message_field(249)
    )
    has_more_history_comment: bool = betterproto.bool_field(250)
    history_comment_cursor: str = betterproto.string_field(251)
    like_icon_info: "LikeIconInfo" = betterproto.message_field(253)
    guess_widgets: "GuessWidgets" = betterproto.message_field(254)
    guess_task_pack_info: "GuessTaskPackInfo" = betterproto.message_field(255)
    current_interaction_question: "CurrentInteractionQuestion" = (
        betterproto.message_field(256)
    )
    poll_conf: "PollConf" = betterproto.message_field(257)
    decisions: "EpiphronDecision" = betterproto.message_field(258)
    aggregation_data: "AggregationData" = betterproto.message_field(259)
    play_together_info: "PlayTogetherBasicInfo" = betterproto.message_field(260)
    multi_stream_source: int = betterproto.int32_field(261)
    highlight_fragment_info: "HighlightFragmentInfo" = betterproto.message_field(262)
    quota_config: Dict[int, "MsgNotifyQuota"] = betterproto.map_field(
        263, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    live_record_config: "LiveRecordConfig" = betterproto.message_field(264)
    effect_frame_upload_demotion: int = betterproto.int64_field(265)
    sub_upsell_info: "SubUpsellInfo" = betterproto.message_field(266)
    cover_type: int = betterproto.int64_field(267)
    reposted: bool = betterproto.bool_field(268)
    repost_info: "RepostInfo" = betterproto.message_field(269)
    drops_info: "DropsRoomInfo" = betterproto.message_field(270)
    enable_stream_encryption: bool = betterproto.bool_field(271)
    disable_screen_record: bool = betterproto.bool_field(272)
    game_tag_detail: "GameTagDetail" = betterproto.message_field(273)
    enable_optimize_sensitive_word: bool = betterproto.bool_field(274)
    custom_tab_info: "CustomTabInfo" = betterproto.message_field(275)
    room_llm_title: str = betterproto.string_field(276)
    game_emotes_tab: "GameEmotesTab" = betterproto.message_field(277)
    official_channel_bc_toggle_info: "BcToggleInfo" = betterproto.message_field(280)
    official_channel_anchor_live_pro_info: "LiveProInfo" = betterproto.message_field(
        281
    )
    preview_comment_info: "PreviewCommentInfo" = betterproto.message_field(282)
    ec_age_interval: int = betterproto.int32_field(283)
    taxonomy_tag_info: "TaxonomyTagInfo" = betterproto.message_field(284)
    sub_tag: int = betterproto.int64_field(285)
    live_sub_only_tier: int = betterproto.int64_field(286)
    live_sub_only_month: int = betterproto.int64_field(287)
    avoid_config: "MsgNotifyComAvoidConfig" = betterproto.message_field(288)
    aigc_self_disclosure_switch: bool = betterproto.bool_field(289)
    ecommerce_room_tags: List["EcommerceRoomTag"] = betterproto.message_field(290)
    group_live_info: "GroupLiveInfo" = betterproto.message_field(291)
    group_live_session: "GroupLiveSession" = betterproto.message_field(292)
    watch_early_quota_config: Dict[int, "MsgNotifyWatchEarlyQuota"] = (
        betterproto.map_field(293, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE)
    )
    continuous_room_quota_config: Dict[int, "MsgNotifyWatchContinuousQuota"] = (
        betterproto.map_field(294, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE)
    )
    max_continue_watch_mill_seconds: int = betterproto.int64_field(295)
    ai_live_summary: "AiLiveSummary" = betterproto.message_field(296)
    parallel_pull_stream_info: "ParallelPullStreamInfo" = betterproto.message_field(297)
    game_gift_guide_config: "GameGiftGuideKeywordsConfig" = betterproto.message_field(
        298
    )
    biz_sticker_list: List["RoomSticker"] = betterproto.message_field(299)
    emoji_list: List[str] = betterproto.string_field(300)
    queue_info: "QueueInfo" = betterproto.message_field(301)


@dataclass(eq=False, repr=False)
class AllListUser(betterproto.Message):
    linked_list: List["LinkLayerListUser"] = betterproto.message_field(2)
    applied_list: List["LinkLayerListUser"] = betterproto.message_field(3)
    invited_list: List["LinkLayerListUser"] = betterproto.message_field(4)
    ready_list: List["LinkLayerListUser"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class WebcastScreenChatMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    user_info: "User" = betterproto.message_field(2)
    chat_type: int = betterproto.int32_field(3)
    content: str = betterproto.string_field(4)
    priority: int = betterproto.int32_field(5)
    effect: "CeremonyEffect" = betterproto.message_field(6)
    background_image: "ImageModel" = betterproto.message_field(7)
    ceremony_effect: "CeremonyEffect" = betterproto.message_field(8)
    background: "ImageModel" = betterproto.message_field(9)
    public_area_common: "PublicAreaCommon" = betterproto.message_field(10)


@dataclass(eq=False, repr=False)
class WebcastGameEmoteUpdateMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    game_emotes_tab: "GameEmotesTab" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class WebcastBoostCardMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    m_cards: List["BoostCard"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GroupChatLiveEntranceResponse(betterproto.Message):
    data: "GroupChatLiveEntranceResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GroupChatLiveEntranceResponseResponseData(betterproto.Message):
    entrance_status: int = betterproto.int32_field(1)
    watch_live_infos: List["GroupChatWatchLiveInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class RoomReplay(betterproto.Message):
    id: str = betterproto.string_field(1)
    create_time: int = betterproto.int64_field(2)
    finish_time: int = betterproto.int64_field(3)
    moment_gen_stats: int = betterproto.int64_field(4)
    push_status: int = betterproto.int64_field(5)
    moments: List["RoomReplayMoment"] = betterproto.message_field(6)
    available: bool = betterproto.bool_field(7)
    cover: "ImageModel" = betterproto.message_field(8)
    title: str = betterproto.string_field(9)
    fragment_id: str = betterproto.string_field(10)
    live_mode: int = betterproto.int32_field(11)
    play_url: str = betterproto.string_field(12)
    download_url: str = betterproto.string_field(13)
    fan_ticket: int = betterproto.int64_field(14)
    total_user: int = betterproto.int64_field(15)
    punish_type: int = betterproto.int64_field(16)
    fragment_count: int = betterproto.int64_field(17)
    mark_count: int = betterproto.int64_field(18)
    play_url_vcodec: str = betterproto.string_field(19)
    start_time: int = betterproto.int64_field(20)
    failed_reason: str = betterproto.string_field(21)
    generate_duration: int = betterproto.int64_field(22)
    replay_prompt: int = betterproto.int32_field(23)
    status: int = betterproto.int32_field(24)
    m3_u8_url: str = betterproto.string_field(25)
    video_info: "VideoInfo" = betterproto.message_field(26)
    watch_status: int = betterproto.int32_field(27)
    vid: str = betterproto.string_field(28)
    fragment_count_with_type: List["FragmentTypeCount"] = betterproto.message_field(29)
    mp4_video_meta_info: "VideoMetaInfo" = betterproto.message_field(30)
    sprite_list: List["SpriteImageItem"] = betterproto.message_field(31)
    remux_info: "RemuxInfo" = betterproto.message_field(32)
    hls_video_meta_info: "VideoMetaInfo" = betterproto.message_field(33)
    transcode_info: "TranscodeInfo" = betterproto.message_field(34)
    download_mode: int = betterproto.int32_field(35)
    room_id_encode: str = betterproto.string_field(36)
    message_content_pb: str = betterproto.string_field(38)
    start_offsets: List[int] = betterproto.int64_field(39)
    end_offsets: List[int] = betterproto.int64_field(40)


@dataclass(eq=False, repr=False)
class LinkerUpdateUserContent(betterproto.Message):
    from_user_id: int = betterproto.int64_field(1)
    to_user_id: int = betterproto.int64_field(2)
    update_info: Dict[str, str] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class CheckLineupResponse(betterproto.Message):
    data: "CheckLineupResponseResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CheckLineupResponseResponseData(betterproto.Message):
    disconnect: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class ColdStartStat(betterproto.Message):
    seconds: int = betterproto.int32_field(1)
    total_count: int = betterproto.int64_field(2)
    viewer_count: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class RtcOther(betterproto.Message):
    trans_coding_second: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class FilterInfoData(betterproto.Message):
    is_filtered: bool = betterproto.bool_field(1)
    reason: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class SubLevel(betterproto.Message):
    level: int = betterproto.int32_field(1)
    desc: str = betterproto.string_field(2)
    month_limit: int = betterproto.int32_field(3)
    badge: "LevelBadge" = betterproto.message_field(4)
    badge_struct: "BadgeStruct" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ShortTouchPollData(betterproto.Message):
    poll_id: str = betterproto.string_field(1)
    poll_end_time: int = betterproto.int64_field(2)
    poll_show_result: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class TeamMatchCampaign(betterproto.Message):
    best_teammate_relation: List["BestTeammateRelation"] = betterproto.message_field(1)
    start_sfx_team_id: List[int] = betterproto.int64_field(2)
    has_team_match_mvp_sfx: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class WebcastRoomPinMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    chat_message: "WebcastChatMessage" = betterproto.message_field(2)
    social_message: "WebcastSocialMessage" = betterproto.message_field(3)
    gift_message: "WebcastGiftMessage" = betterproto.message_field(4)
    member_message: "WebcastMemberMessage" = betterproto.message_field(5)
    like_message: "WebcastLikeMessage" = betterproto.message_field(6)
    method: str = betterproto.string_field(30)
    pin_time: int = betterproto.int64_field(31)
    operator: "User" = betterproto.message_field(32)
    action: int = betterproto.int32_field(33)
    display_duration: int = betterproto.int64_field(34)
    pin_id: int = betterproto.int64_field(35)
    ec_streamer_key: str = betterproto.string_field(36)


@dataclass(eq=False, repr=False)
class BizApplyResponse(betterproto.Message):
    response_data: "BizApplyResponseData" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CppBannerInfo(betterproto.Message):
    cpp_banner_status_enum: int = betterproto.int32_field(1)


@dataclass(eq=False, repr=False)
class PollStartContent(betterproto.Message):
    start_time: int = betterproto.int64_field(1)
    end_time: int = betterproto.int64_field(2)
    option_list: List["PollOptionInfo"] = betterproto.message_field(3)
    title: str = betterproto.string_field(4)
    operator: "User" = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class ProductPrice(betterproto.Message):
    format_price: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UpdateShowContentParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    show_id: int = betterproto.int64_field(3)
    update_type: int = betterproto.int32_field(4)
    allow_open_mic_freely: bool = betterproto.bool_field(5)
    target_user_id: int = betterproto.int64_field(6)
    pre_user_id: int = betterproto.int64_field(7)
    next_user_id: int = betterproto.int64_field(8)
    transition_duration_of_config: int = betterproto.int64_field(9)


@dataclass(eq=False, repr=False)
class GuessRoundStats(betterproto.Message):
    member_nums: int = betterproto.int64_field(1)
    points_num: int = betterproto.int64_field(2)
    points_split_num: int = betterproto.int64_field(3)
    points_voted_to_anchor: int = betterproto.int64_field(4)


@dataclass(eq=False, repr=False)
class LinkmicUser(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    room_id: int = betterproto.int64_field(2)
    link_mic_id_str: str = betterproto.string_field(3)
    nick_name: str = betterproto.string_field(4)
    display_id: str = betterproto.string_field(5)
    avatar: "ImageModel" = betterproto.message_field(6)
    user_id_str: str = betterproto.string_field(7)
    room_id_str: str = betterproto.string_field(8)


@dataclass(eq=False, repr=False)
class WebcastProjectDModifyH5(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    m_top_left_url: str = betterproto.string_field(2)
    m_bottom_right_url: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class BattleUserInfo(betterproto.Message):
    user: "BattleBaseUserInfo" = betterproto.message_field(1)
    tags: List["BattleRivalTag"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class BillboardDisplayResult(betterproto.Message):
    billboard_type: int = betterproto.int32_field(1)
    billboard_id: str = betterproto.string_field(2)
    display_result: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class CreateInfoPerceptionMessage(betterproto.Message):
    title: str = betterproto.string_field(1)
    sub_title: str = betterproto.string_field(2)
    detail_url: str = betterproto.string_field(3)
    punish_info: "PunishEventInfo" = betterproto.message_field(4)
    access_type: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class CohostAbTestList(betterproto.Message):
    ab_test_list: List["CohostAbTest"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RechargeReq(betterproto.Message):
    common: "LinkCommon" = betterproto.message_field(1)
    channel_id: int = betterproto.int64_field(2)
    myself: "Player" = betterproto.message_field(3)
    target: "Player" = betterproto.message_field(4)
    type: int = betterproto.int32_field(5)
    route_id: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class LikeInfo(betterproto.Message):
    click_cnt: int = betterproto.int32_field(1)
    show_cnt: int = betterproto.int32_field(2)


@dataclass(eq=False, repr=False)
class AboutMeInputBox(betterproto.Message):
    guide_content: str = betterproto.string_field(1)
    max_character_count: int = betterproto.int32_field(2)
    content: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class LinkerMicIdxUpdateContent(betterproto.Message):
    mic_index_update_info: "LinkerMicIdxUpdateInfo" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TopFanTicket(betterproto.Message):
    fan_ticket: int = betterproto.int64_field(1)
    user: "User" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ExampleSetting(betterproto.Message):
    value: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class RoomStats(betterproto.Message):
    id: int = betterproto.int64_field(1)
    id_str: str = betterproto.string_field(2)
    ticket: int = betterproto.int64_field(3)
    total_user: int = betterproto.int32_field(5)
    gift_u_v_count: int = betterproto.int32_field(6)
    follow_count: int = betterproto.int32_field(7)
    watermelon: int = betterproto.int32_field(9)
    enter_count: int = betterproto.int32_field(11)
    replay_viewers: int = betterproto.int32_field(16)
    share_count: int = betterproto.int32_field(17)


@dataclass(eq=False, repr=False)
class GameGiftGuideKeyword(betterproto.Message):
    type: int = betterproto.int64_field(1)
    value: str = betterproto.string_field(2)
    regrex_pattern: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class RoomNotifyMessageExtra(betterproto.Message):
    duration: int = betterproto.int64_field(1)
    background: "RoomNotifyMessageExtraBackground" = betterproto.message_field(2)
    highlight_info: "NotifyHighlightInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class RoomNotifyMessageExtraBackground(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class WebcastRoomStreamAdaptationMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    action: int = betterproto.int64_field(2)
    subject_position_info: "SubjectPositionInfo" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WebcastLinkmicBattleNoticeMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    notice_type: Optional["WebcastLinkmicBattleNoticeMessageBattleNoticeType"] = (
        betterproto.enum_field(2, optional=True)
    )
    anchor_guide: "BattleNoticeAnchorGuide" = betterproto.message_field(3)
    toast: "BattleNoticeToast" = betterproto.message_field(4)
    bubble_guide: "BattleNoticeBubbleGuide" = betterproto.message_field(5)
    anchor_gift_guide: "BattleNoticeAnchorGiftGuide" = betterproto.message_field(6)
    battle_rule_guide: "BattleNoticeRuleGuide" = betterproto.message_field(7)
    common_guide: "BattleNoticeCommonGuide" = betterproto.message_field(8)
    extreme_high_score_notice: "BattleNoticeExtremeHighScoreNotice" = (
        betterproto.message_field(9)
    )


@dataclass(eq=False, repr=False)
class UseExtraTimeCard(betterproto.Message):
    card_info: "ExtraTimeCardInfo" = betterproto.message_field(1)
    anchor_id: int = betterproto.int64_field(2)
    display_content: "Text" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class BizJoinDirectResponseData(betterproto.Message):
    reply_im_msg_id: int = betterproto.int64_field(1)
    link_type_permission: int = betterproto.int64_field(2)
    layout_type_action: int = betterproto.int32_field(3)
    fix_mic_num_action: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class LinkMicCommonResp(betterproto.Message):
    error_code: int = betterproto.int64_field(1)
    error_msg: str = betterproto.string_field(2)
    extra: Dict[str, bytes] = betterproto.map_field(
        3, betterproto.TYPE_STRING, betterproto.TYPE_BYTES
    )


@dataclass(eq=False, repr=False)
class TransitionInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    linkmic_id_str: str = betterproto.string_field(2)
    nickname: str = betterproto.string_field(3)
    avatar_thumb: "ImageModel" = betterproto.message_field(4)
    transition_duration_of_current: int = betterproto.int64_field(5)
    transition_start_time: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class LayoutState(betterproto.Message):
    layout_id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class AiLiveSummary(betterproto.Message):
    room_llm_title: str = betterproto.string_field(1)
    result_key: str = betterproto.string_field(2)
    create_timestamp: int = betterproto.int64_field(3)
    ai_live_summary_switch: int = betterproto.int32_field(4)


@dataclass(eq=False, repr=False)
class GetUserPlaySettingsParams(betterproto.Message):
    setting_keys: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class RivalsListExtra(betterproto.Message):
    log_pb_bean: "RivalsListExtraLogPbBean" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RivalsListExtraLogPbBean(betterproto.Message):
    impr_id: str = betterproto.string_field(1)
    client_log_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class LiveGiftBoostCardAckResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class BattleTruthOrDare(betterproto.Message):
    triggered: bool = betterproto.bool_field(1)
    rule_detail_url: str = betterproto.string_field(2)
    anchor_region: str = betterproto.string_field(3)
    lap_guide_key: str = betterproto.string_field(4)
    lap_guide_duration_second: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class MicPositionData(betterproto.Message):
    type: int = betterproto.int32_field(1)
    link_position: "LinkPosition" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class FontStyle(betterproto.Message):
    font_size: int = betterproto.int32_field(1)
    font_width: int = betterproto.int32_field(2)
    font_color: str = betterproto.string_field(3)
    border_color: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class VirtualWaitingUser(betterproto.Message):
    send_user_id: int = betterproto.int64_field(1)
    send_timestamp: int = betterproto.int64_field(2)
    avatars: List["ImageModel"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class AccessControlCaptcha(betterproto.Message):
    captcha_record_id: int = betterproto.int64_field(1)
    room_id: int = betterproto.int64_field(2)
    verify_duration_in_sec: int = betterproto.int64_field(3)


@dataclass(eq=False, repr=False)
class DslConfig(betterproto.Message):
    scene_version: int = betterproto.int32_field(1)
    layout_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class QuizAnswerInfo(betterproto.Message):
    message_type: "MessageType" = betterproto.enum_field(1)
    quiz_id: str = betterproto.string_field(2)
    quiz_type: int = betterproto.int32_field(3)
    extra: str = betterproto.string_field(4)
    participants_count: int = betterproto.int64_field(5)
    question_id: str = betterproto.string_field(6)
    question_no: int = betterproto.int32_field(7)
    question_count: int = betterproto.int32_field(8)
    question_type: int = betterproto.int32_field(9)
    title: str = betterproto.string_field(10)
    image: List["QuizImage"] = betterproto.message_field(11)
    options: List["QuizQuestionOption"] = betterproto.message_field(12)
    correct_answer: str = betterproto.string_field(15)
    statistics: "QuizStatistics" = betterproto.message_field(16)
    next_quiz: List["QuizNextQuiz"] = betterproto.message_field(17)
    reward_amount: str = betterproto.string_field(18)
    correct_answer_image: List["QuizImage"] = betterproto.message_field(19)
    sponsor_code: str = betterproto.string_field(20)
    display_duration_ms: int = betterproto.int32_field(21)
    extra1: str = betterproto.string_field(51)
    extra2: str = betterproto.string_field(52)
    extra3: str = betterproto.string_field(53)
    extra4: str = betterproto.string_field(54)
    extra5: str = betterproto.string_field(55)


@dataclass(eq=False, repr=False)
class CustomTab(betterproto.Message):
    id: int = betterproto.int64_field(1)
    tab_title: str = betterproto.string_field(2)
    tab_schema: str = betterproto.string_field(3)
    tab_schema_type: int = betterproto.int32_field(4)
    tab_priority: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class FlashSaleStock(betterproto.Message):
    activity_stock_status: int = betterproto.int32_field(1)
    activity_stock: int = betterproto.int32_field(2)
    activity_stock_text: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class CompetitionReply(betterproto.Message):
    reply_type: Optional["CompetitionReplyCompetitionReplyType"] = (
        betterproto.enum_field(1, optional=True)
    )
    replier: "CompetitionUserBase" = betterproto.message_field(2)
    initiate: "CompetitionInitiate" = betterproto.message_field(3)
    ab_info: Dict[int, "CompetitionAbInfo"] = betterproto.map_field(
        4, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    take_the_stage_biz: "CompetitionReplyTakeTheStageBiz" = betterproto.message_field(
        100
    )


@dataclass(eq=False, repr=False)
class CompetitionReplyAnchorInfo(betterproto.Message):
    user_id: int = betterproto.int64_field(1)


@dataclass(eq=False, repr=False)
class CompetitionReplyTakeTheStageBiz(betterproto.Message):
    take_the_stage_status: Optional[
        "CompetitionReplyTakeTheStageBizTakeTheStageStatus"
    ] = betterproto.enum_field(1, optional=True)
    performance_start_time: int = betterproto.int64_field(2)
    anchors: List["CompetitionReplyAnchorInfo"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class CreateShowParams(betterproto.Message):
    room_id: int = betterproto.int64_field(1)
    channel_id: int = betterproto.int64_field(2)
    show_config: "ShowConfig" = betterproto.message_field(3)
    show_users: List["CreateShowParamsListUser"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class CreateShowParamsListUser(betterproto.Message):
    user_id: int = betterproto.int64_field(1)
    linkmic_id: str = betterproto.string_field(2)
    order: int = betterproto.int32_field(3)


@dataclass(eq=False, repr=False)
class DiffInfo(betterproto.Message):
    diff_url: "UrlDataStruct" = betterproto.message_field(1)
    base_url: "UrlDataStruct" = betterproto.message_field(2)
    extra: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class AtmosphereTagInfo(betterproto.Message):
    tag_type: int = betterproto.int32_field(1)
    atmosphere_tags: List["ProductAtmosphereTag"] = betterproto.message_field(2)
    pin_atmosphere_tags: List["ProductAtmosphereTag"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class WebcastGoodyBagMessage(betterproto.Message):
    base_message: "CommonMessageData" = betterproto.message_field(1)
    base_info: "GoodyBagBaseInfo" = betterproto.message_field(2)
    winners: List["GoodyBagWinnerInfo"] = betterproto.message_field(3)
    type: Optional["WebcastGoodyBagMessageGoodyBagMessageType"] = (
        betterproto.enum_field(4, optional=True)
    )


@dataclass(eq=False, repr=False)
class PromotionInfo(betterproto.Message):
    promotion_id: str = betterproto.string_field(1)
    product_ids: List[str] = betterproto.string_field(100)
